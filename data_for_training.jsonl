"## Tactic State A:\na b : ℕ\nh1 : a + b = a\n⊢ a + b = a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h1"
"## Tactic State A:\n⊢ ¬∀ (a b : ℝ), Irrational a → Irrational b → 0 < a → Irrational (a ^ b)\n## Tactic State B:\n⊢ ∃ a b, Irrational a ∧ Irrational b ∧ 0 < a ∧ ¬Irrational (a ^ b)\n## Action:\n  push_neg"
"## Tactic State A:\n⊢ ∃ a b, Irrational a ∧ Irrational b ∧ 0 < a ∧ ¬Irrational (a ^ b)\n## Tactic State B:\ncase pos\nhc : Irrational (√2 ^ √2)\n⊢ ∃ a b, Irrational a ∧ Irrational b ∧ 0 < a ∧ ¬Irrational (a ^ b)\n---\ncase neg\nhc : ¬Irrational (√2 ^ √2)\n⊢ ∃ a b, Irrational a ∧ Irrational b ∧ 0 < a ∧ ¬Irrational (a ^ b)\n## Action:\n  by_cases hc : Irrational (√2 ^ √2)"
"## Tactic State A:\ncase pos\nhc : Irrational (√2 ^ √2)\n⊢ ∃ a b, Irrational a ∧ Irrational b ∧ 0 < a ∧ ¬Irrational (a ^ b)\n---\ncase neg\nhc : ¬Irrational (√2 ^ √2)\n⊢ ∃ a b, Irrational a ∧ Irrational b ∧ 0 < a ∧ ¬Irrational (a ^ b)\n## Tactic State B:\ncase right\nhc : Irrational (√2 ^ √2)\n⊢ ¬Irrational ((√2 ^ √2) ^ √2)\n## Action:\n  · use (√2 ^ √2), √2, hc, irrational_sqrt_two, by positivity"
"## Tactic State A:\ncase right\nhc : Irrational (√2 ^ √2)\n⊢ ¬Irrational ((√2 ^ √2) ^ √2)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    rw [← rpow_mul, mul_self_sqrt, rpow_two, sq_sqrt] <;> norm_num"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · use √2, √2, irrational_sqrt_two, irrational_sqrt_two, by positivity, hc"
"## Tactic State A:\nn : ℕ\n⊢ ∃ N, n < N ∧ Nat.Prime N\n## Tactic State B:\nn : ℕ\nN : ℕ := n ! + 1\n⊢ ∃ N, n < N ∧ Nat.Prime N\n## Action:\n  let N := n.factorial + 1"
"## Tactic State A:\nn : ℕ\nN : ℕ := n ! + 1\n⊢ ∃ N, n < N ∧ Nat.Prime N\n## Tactic State B:\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\n⊢ ∃ N, n < N ∧ Nat.Prime N\n## Action:\n  let p := minFac N"
"## Tactic State A:\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\n⊢ ∃ N, n < N ∧ Nat.Prime N\n## Tactic State B:\ncase h\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\n⊢ n < p ∧ Nat.Prime p\n## Action:\n  use p"
"## Tactic State A:\ncase h\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\n⊢ n < p ∧ Nat.Prime p\n## Tactic State B:\ncase h\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\nprime : Nat.Prime p\n⊢ n < p ∧ Nat.Prime p\n## Action:\n  have prime : p.Prime := by"
"## Tactic State A:\ncase h\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\nprime : Nat.Prime p\n⊢ n < p ∧ Nat.Prime p\n## Tactic State B:\ncase h.left\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\nprime : Nat.Prime p\n⊢ n < p\n---\ncase h.right\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\nprime : Nat.Prime p\n⊢ Nat.Prime p\n## Action:\n    apply minFac_prime"
"## Tactic State A:\ncase h.left\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\nprime : Nat.Prime p\n⊢ n < p\n---\ncase h.right\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\nprime : Nat.Prime p\n⊢ Nat.Prime p\n## Tactic State B:\ncase h.left\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\nprime : Nat.Prime p\nthis : p ≤ n\n⊢ False\n## Action:\n    observe : n.factorial > 0"
"## Tactic State A:\ncase h.left\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\nprime : Nat.Prime p\nthis : p ≤ n\n⊢ False\n## Tactic State B:\ncase h.left\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\nprime : Nat.Prime p\nthis✝ : p ≤ n\nthis : p ∣ n !\n⊢ False\n## Action:\n    omega"
"## Tactic State A:\ncase h.left\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\nprime : Nat.Prime p\nthis✝ : p ≤ n\nthis : p ∣ n !\n⊢ False\n## Tactic State B:\ncase h.left\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\nprime : Nat.Prime p\nthis✝¹ : p ≤ n\nthis✝ : p ∣ n !\nthis : N.minFac ∣ N\n⊢ False\n## Action:\n  constructor"
"## Tactic State A:\ncase h.left\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\nprime : Nat.Prime p\nthis✝¹ : p ≤ n\nthis✝ : p ∣ n !\nthis : N.minFac ∣ N\n⊢ False\n## Tactic State B:\ncase h.left\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\nprime : Nat.Prime p\nthis✝² : p ≤ n\nthis✝¹ : p ∣ n !\nthis✝ : N.minFac ∣ N\nthis : p ∣ 1\n⊢ False\n## Action:\n  · by_contra!"
"## Tactic State A:\ncase h.left\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\nprime : Nat.Prime p\nthis✝² : p ≤ n\nthis✝¹ : p ∣ n !\nthis✝ : N.minFac ∣ N\nthis : p ∣ 1\n⊢ False\n## Tactic State B:\ncase h.left\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\nprime : Nat.Prime p\nthis✝³ : p ≤ n\nthis✝² : p ∣ n !\nthis✝¹ : N.minFac ∣ N\nthis✝ : p ∣ 1\nthis : ¬p ∣ 1\n⊢ False\n## Action:\n    observe : p ∣ n.factorial"
"## Tactic State A:\ncase h.left\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\nprime : Nat.Prime p\nthis✝³ : p ≤ n\nthis✝² : p ∣ n !\nthis✝¹ : N.minFac ∣ N\nthis✝ : p ∣ 1\nthis : ¬p ∣ 1\n⊢ False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    observe : p ∣ N"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    observe : p ∣ 1"
"## Tactic State A:\n⊢ ∃ x, x = x\n## Tactic State B:\ncase w\n⊢ ℕ\n## Action:\n  use ?_"
"## Tactic State A:\ncase w\n⊢ ℕ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact 42"
"## Tactic State A:\n⊢ ∃ a b c, a + b + c = 6\n## Tactic State B:\ncase h\n⊢ 1 + 2 + 3 = 6\n## Action:\n  use 1, 2, 3"
"## Tactic State A:\ncase h\n⊢ 1 + 2 + 3 = 6\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rfl"
"## Tactic State A:\n⊢ ∃ n, n * 3 = 3 * 2\n## Tactic State B:\ncase h\n⊢ 2 * 3 = 3 * 2\n## Action:\n  use 2"
"## Tactic State A:\ncase h\n⊢ 2 * 3 = 3 * 2\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rfl"
"## Tactic State A:\n⊢ (_ : ℤ) × (_ : ℤ) × ℤ × ℤ × ℤ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  use 1, 2, 3, 4, 5"
"## Tactic State A:\n⊢ (_ : ℤ) × (_ : ℤ) × (ℤ × ℤ) × ℤ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  use! 1, 2, 3, 4, 5"
"## Tactic State A:\nfoo : Sort ?u.5\n⊢ foo\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  use 100, ⟨true, 4⟩, 3"
"## Tactic State A:\nfoo : Sort ?u.5\n⊢ foo\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  use! 100, true, 4, 3"
"## Tactic State A:\nfoo : Sort ?u.5\n⊢ foo\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  use ?x, ⟨?b, 4⟩"
"## Tactic State A:\nfoo : Sort ?u.5\n⊢ foo\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  -- Type ascriptions keep refinement from occurring before applying the constructor"
"## Tactic State A:\nDecidableType : Sort ?u.5\n⊢ DecidableType\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  use Nat"
"## Tactic State A:\nDecidableType : Sort ?u.27\nβ : Type\ninst✝ : DecidableEq β\n⊢ DecidableType\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  use β"
"## Tactic State A:\nDecidableType : Sort ?u.9\nβ : Type\n⊢ DecidableType\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  use β"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  guard_target = DecidableEq β"
"## Tactic State A:\nx✝ : Sort ?u.6\nEmbedding : x✝\nα : Type u\n⊢ sorry × Unit\n## Tactic State B:\ncase fst\nx✝ : Sort ?u.6\nEmbedding : x✝\nα : Type u\n⊢ sorry\n---\ncase snd\nx✝ : Sort ?u.6\nEmbedding : x✝\nα : Type u\n⊢ Unit\n## Action:\n  constructor"
"## Tactic State A:\ncase fst\nx✝ : Sort ?u.6\nEmbedding : x✝\nα : Type u\n⊢ sorry\n---\ncase snd\nx✝ : Sort ?u.6\nEmbedding : x✝\nα : Type u\n⊢ Unit\n## Tactic State B:\ncase snd\nx✝ : Sort ?u.6\nEmbedding : x✝\nα : Type u\n⊢ Unit\n## Action:\n  -- testing that `use` actually focuses on the main goal"
"## Tactic State A:\ncase snd\nx✝ : Sort ?u.6\nEmbedding : x✝\nα : Type u\n⊢ Unit\n## Tactic State B:\ncase snd\nx✝ : Sort ?u.6\nEmbedding : x✝\nα : Type u\n⊢ Unit\n## Action:\n  use id"
"## Tactic State A:\ncase snd\nx✝ : Sort ?u.6\nEmbedding : x✝\nα : Type u\n⊢ Unit\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · simp"
"## Tactic State A:\nh1 : 1 > 0\n⊢ ∃ n, ∃ (_ : n > 0), n = n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  use 1"
"## Tactic State A:\n⊢ let P := fun _x => ∃ _n, True;\n  P 1\n## Tactic State B:\nP : ℕ → Prop := fun _x => ∃ _n, True\n⊢ P 1\n## Action:\n  intro P"
"## Tactic State A:\nP : ℕ → Prop := fun _x => ∃ _n, True\n⊢ P 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  use 1"
"## Tactic State A:\n⊢ ∃ f, f 1 = 1\n## Tactic State B:\ncase h\n⊢ sorry 1 = 1\n## Action:\n  use ·"
"## Tactic State A:\n⊢ ∃ f, f 1 = 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  use (·)"
"## Tactic State A:\nα : Type u_1\nβ : Type u_2\ninst✝⁴ : MeasurableSpace α\ninst✝³ : MeasurableSpace β\ninst✝² : TopologicalSpace β\ninst✝¹ : PseudoMetrizableSpace β\ninst✝ : BorelSpace β\nF : ℕ → α → β\nhF : ∀ (i : ℕ), StronglyMeasurable (F i)\n⊢ Measurable (F 0)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  measurability"
"## Tactic State A:\nα : Type u_1\nβ : Type u_2\ninst✝⁶ : MeasurableSpace α\ninst✝⁵ : MeasurableSpace β\ninst✝⁴ : TopologicalSpace β\ninst✝³ : PseudoMetrizableSpace β\ninst✝² : BorelSpace β\ninst✝¹ : AddCommMonoid β\ninst✝ : MeasurableAdd₂ β\ns : Finset ℕ\nF : ℕ → α → β\nhF : ∀ (i : ℕ), Measurable (F i)\n⊢ Measurable (∑ i ∈ s, fun x => F (i + 1) x + F i x)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  fun_prop"
"## Tactic State A:\nα : Type u_1\nβ : Type u_2\ninst✝⁷ : MeasurableSpace α\ninst✝⁶ : MeasurableSpace β\ninst✝⁵ : TopologicalSpace β\ninst✝⁴ : PseudoMetrizableSpace β\ninst✝³ : BorelSpace β\ninst✝² : MeasurableSpace α\nμ : Measure α\ninst✝¹ : AddCommMonoid β\ninst✝ : MeasurableAdd₂ β\ns : Finset ℕ\nF : ℕ → α → β\nhF : ∀ (i : ℕ), AEMeasurable (F i) μ\n⊢ AEMeasurable (∑ i ∈ s, fun x => F (i + 1) x + F i x) μ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  measurability"
"## Tactic State A:\nα : Type u_1\nβ : Type u_2\ninst✝¹¹ : MeasurableSpace α\ninst✝¹⁰ : MeasurableSpace β\ninst✝⁹ : TopologicalSpace β\ninst✝⁸ : PseudoMetrizableSpace β\ninst✝⁷ : BorelSpace β\ninst✝⁶ : MeasurableSpace α\nμ : Measure α\ninst✝⁵ : TopologicalSpace α\ninst✝⁴ : BorelSpace α\ninst✝³ : NormedAddCommGroup β\ninst✝² : BorelSpace β\ninst✝¹ : MeasurableAdd₂ β\ninst✝ : MeasurableSub₂ β\ns : Finset ℕ\nF : ℕ → α → β\nhF : ∀ (i : ℕ), Measurable (F i)\n⊢ AEMeasurable (∑ i ∈ s, fun x => F (i + 1) x - F i x) μ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  measurability"
"## Tactic State A:\na b c d e : ℕ\nh1 : a ≤ b\nh2 : c ≤ d\nh3 : 0 ≤ e\n⊢ a + c * e + a + c + 0 ≤ b + d * e + b + d + e\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  apply_rules [Nat.add_le_add, Nat.mul_le_mul_right]"
"## Tactic State A:\na b c d e : ℕ\nh1 : a ≤ b\nh2 : c ≤ d\nh3 : 0 ≤ e\n⊢ a + c * e + a + c + 0 ≤ b + d * e + b + d + e\n## Tactic State B:\ncase h₂\na b c d e : ℕ\nh1 : a ≤ b\nh2 : c ≤ d\nh3 : 0 ≤ e\n⊢ 0 ≤ e\n## Action:\n  apply_rules (config := {maxDepth := 9}) [Nat.add_le_add, Nat.mul_le_mul_right]"
"## Tactic State A:\ncase h₂\na b c d e : ℕ\nh1 : a ≤ b\nh2 : c ≤ d\nh3 : 0 ≤ e\n⊢ 0 ≤ e\n## Tactic State B:\ncase h₂\na b c d e : ℕ\nh1 : a ≤ b\nh2 : c ≤ d\nh3 : 0 ≤ e\n⊢ 0 ≤ e\n## Action:\n  guard_target = 0 ≤ e"
"## Tactic State A:\ncase h₂\na b c d e : ℕ\nh1 : a ≤ b\nh2 : c ≤ d\nh3 : 0 ≤ e\n⊢ 0 ≤ e\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  assumption"
"## Tactic State A:\nP Q : Prop\np : P\nf : P → Q\n⊢ Q\n## Tactic State B:\nP Q : Prop\np : P\nf : P → Q\n⊢ P\n## Action:\n  apply_rules only [f]"
"## Tactic State A:\nP Q : Prop\np : P\nf : P → Q\n⊢ P\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact p"
"## Tactic State A:\nP Q : Prop\np : P\nf : P → Q\n⊢ Q\n## Tactic State B:\nP Q : Prop\np : P\nf : P → Q\n⊢ P\n## Action:\n  apply_rules [-p]"
"## Tactic State A:\nP Q : Prop\np : P\nf : P → Q\n⊢ P\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact p"
"## Tactic State A:\nP : ℕ → Type\nf : {n : ℕ} → P n → P (n + 1)\ng : P 0\n⊢ P 2\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  apply_rules only [f, g]"
"## Tactic State A:\nQ : Type\nf : ℕ → Q\n⊢ ℤ × Q\n## Tactic State B:\ncase fst\nQ : Type\nf : ℕ → Q\n⊢ ℤ\n---\ncase snd\nQ : Type\nf : ℕ → Q\n⊢ ℕ\n## Action:\n  apply_rules only [Prod.mk, f]"
"## Tactic State A:\ncase fst\nQ : Type\nf : ℕ → Q\n⊢ ℤ\n---\ncase snd\nQ : Type\nf : ℕ → Q\n⊢ ℕ\n## Tactic State B:\ncase fst\nQ : Type\nf : ℕ → Q\n⊢ ℤ\n---\ncase snd\nQ : Type\nf : ℕ → Q\n⊢ ℕ\n## Action:\n  guard_target = Int"
"## Tactic State A:\ncase fst\nQ : Type\nf : ℕ → Q\n⊢ ℤ\n---\ncase snd\nQ : Type\nf : ℕ → Q\n⊢ ℕ\n## Tactic State B:\ncase snd\nQ : Type\nf : ℕ → Q\n⊢ ℕ\n## Action:\n  exact 0"
"## Tactic State A:\ncase snd\nQ : Type\nf : ℕ → Q\n⊢ ℕ\n## Tactic State B:\ncase snd\nQ : Type\nf : ℕ → Q\n⊢ ℕ\n## Action:\n  guard_target = Nat"
"## Tactic State A:\ncase snd\nQ : Type\nf : ℕ → Q\n⊢ ℕ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact 37"
"## Tactic State A:\nα : Type u_1\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b : α\nhb : 0 ≤ b\nhab : a ≤ b\n⊢ a / 2 ≤ b / 2\n## Tactic State B:\nα : Type u_1\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b : α\nhb : 0 ≤ b\nhab : a ≤ b\n⊢ a / 2 ≤ b / 2\n## Action:\n  fail_if_success"
"## Tactic State A:\nα : Type u_1\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b : α\nhb : 0 ≤ b\nhab : a ≤ b\n⊢ a / 2 ≤ b / 2\n## Tactic State B:\nα : Type u_1\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b : α\nhb : 0 ≤ b\nhab : a ≤ b\n⊢ a / 2 ≤ b / 2\n## Action:\n    apply_rules (config := { transparency := .reducible }) [mul_le_mul]"
"## Tactic State A:\nα : Type u_1\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b : α\nhb : 0 ≤ b\nhab : a ≤ b\n⊢ a / 2 ≤ b / 2\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  guard_target = a / 2 ≤ b / 2"
"## Tactic State A:\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  refine' (by refine' .intro)"
"## Tactic State A:\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  refine' (by refine' .intro)"
"## Tactic State A:\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  refine' (by refine' .intro)"
"## Tactic State A:\na : (True ∨ True) ∨ True ∨ True\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cases' a with b b <;> cases' b <;> trivial"
"## Tactic State A:\na : (True ∨ True) ∨ True ∨ True\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cases' a with b b <;> cases' b <;> trivial"
"## Tactic State A:\n⊢ True ∧ True\n## Tactic State B:\nthis : True\n⊢ True ∧ True\n## Action:\n  have : True := by"
"## Tactic State A:\nthis : True\n⊢ True ∧ True\n## Tactic State B:\nthis : True\nfoo : ℕ := sorry\n⊢ True ∧ True\n## Action:\n    · admit"
"## Tactic State A:\nthis : True\nfoo : ℕ := sorry\n⊢ True ∧ True\n## Tactic State B:\ncase refine_1\nthis : True\nfoo : ℕ := sorry\n⊢ True\n---\ncase refine_2\nthis : True\nfoo : ℕ := sorry\n⊢ True\n## Action:\n  let foo : Nat := by admit"
"## Tactic State A:\ncase refine_1\nthis : True\nfoo : ℕ := sorry\n⊢ True\n---\ncase refine_2\nthis : True\nfoo : ℕ := sorry\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  refine ⟨?_, ?_⟩"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · admit"
"## Tactic State A:\np✝² q✝² r✝¹ : Prop\nh✝¹ : p✝² ∧ q✝² ∨ p✝² ∧ r✝¹\nα✝ : Type\np✝¹ q✝¹ r✝ : α✝ → Prop\nh✝ : (∃ x, p✝¹ x ∧ q✝¹ x) ∨ ∃ x, p✝¹ x ∧ r✝ x\nα : Type\nx : α\np✝ q✝ r : α → Prop\nh₀ : (∀ (x : α), p✝ x → q✝ x → r x) ∨ r x\nh₁ : p✝ x\nh₂ : q✝ x\np q : Prop\nh : ¬(p ↔ q)\nh' : ¬q\nh'' : ¬p\n⊢ False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  tauto"
"## Tactic State A:\np✝² q✝² r✝² : Prop\nh✝¹ : p✝² ∧ q✝² ∨ p✝² ∧ r✝²\nα✝ : Type\np✝¹ q✝¹ r✝¹ : α✝ → Prop\nh✝ : (∃ x, p✝¹ x ∧ q✝¹ x) ∨ ∃ x, p✝¹ x ∧ r✝¹ x\nα : Type\nx : α\np✝ q✝ r✝ : α → Prop\nh₀ : (∀ (x : α), p✝ x → q✝ x → r✝ x) ∨ r✝ x\nh₁ : p✝ x\nh₂ : q✝ x\np q r : Prop\nh : p ↔ q\nh' : r ↔ q\nh'' : ¬r\n⊢ ¬p\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  tauto"
"## Tactic State A:\np✝² q✝¹ r✝¹ : Prop\nh✝¹ : p✝² ∧ q✝¹ ∨ p✝² ∧ r✝¹\nα✝ : Type\np✝¹ q✝ r✝ : α✝ → Prop\nh✝ : (∃ x, p✝¹ x ∧ q✝ x) ∨ ∃ x, p✝¹ x ∧ r✝ x\nα : Type\nx : α\np✝ q r : α → Prop\nh₀ : (∀ (x : α), p✝ x → q x → r x) ∨ r x\nh₁ : p✝ x\nh₂ : q x\np : Prop\nh : False\n⊢ p\n## Tactic State B:\np✝² q✝¹ r✝¹ : Prop\nh✝¹ : p✝² ∧ q✝¹ ∨ p✝² ∧ r✝¹\nα✝ : Type\np✝¹ q✝ r✝ : α✝ → Prop\nh✝ : (∃ x, p✝¹ x ∧ q✝ x) ∨ ∃ x, p✝¹ x ∧ r✝ x\nα : Type\nx : α\np✝ q r : α → Prop\nh₀ : (∀ (x : α), p✝ x → q x → r x) ∨ r x\nh₁ : p✝ x\nh₂ : q x\np : Prop\nh h' : False\n⊢ p\n## Action:\n  -- causes `h'` to have a type that's a metavariable:"
"## Tactic State A:\np✝² q✝¹ r✝¹ : Prop\nh✝¹ : p✝² ∧ q✝¹ ∨ p✝² ∧ r✝¹\nα✝ : Type\np✝¹ q✝ r✝ : α✝ → Prop\nh✝ : (∃ x, p✝¹ x ∧ q✝ x) ∨ ∃ x, p✝¹ x ∧ r✝ x\nα : Type\nx : α\np✝ q r : α → Prop\nh₀ : (∀ (x : α), p✝ x → q x → r x) ∨ r x\nh₁ : p✝ x\nh₂ : q x\np : Prop\nh h' : False\n⊢ p\n## Tactic State B:\np✝² q✝¹ r✝¹ : Prop\nh✝ : p✝² ∧ q✝¹ ∨ p✝² ∧ r✝¹\nα✝ : Type\np✝¹ q✝ r✝ : α✝ → Prop\nh : (∃ x, p✝¹ x ∧ q✝ x) ∨ ∃ x, p✝¹ x ∧ r✝ x\nα : Type\nx : α\np✝ q r : α → Prop\nh₀ : (∀ (x : α), p✝ x → q x → r x) ∨ r x\nh₁ : p✝ x\nh₂ : q x\np : Prop\nh' : False\n⊢ p\n## Action:\n  have h' := h"
"## Tactic State A:\np✝² q✝¹ r✝¹ : Prop\nh✝ : p✝² ∧ q✝¹ ∨ p✝² ∧ r✝¹\nα✝ : Type\np✝¹ q✝ r✝ : α✝ → Prop\nh : (∃ x, p✝¹ x ∧ q✝ x) ∨ ∃ x, p✝¹ x ∧ r✝ x\nα : Type\nx : α\np✝ q r : α → Prop\nh₀ : (∀ (x : α), p✝ x → q x → r x) ∨ r x\nh₁ : p✝ x\nh₂ : q x\np : Prop\nh' : False\n⊢ p\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  clear h"
"## Tactic State A:\np✝¹ q✝¹ r✝¹ : Prop\nh✝ : p✝¹ ∧ q✝¹ ∨ p✝¹ ∧ r✝¹\nα✝ : Type\np✝ q✝ r✝ : α✝ → Prop\nh : (∃ x, p✝ x ∧ q✝ x) ∨ ∃ x, p✝ x ∧ r✝ x\nα : Type\nx : α\np q r : α → Prop\nh₀ : (∀ (x : α), p x → q x → r x) ∨ r x\nh₁ : p x\nh₂ : q x\nP : ℕ → Prop\nn : ℕ\n⊢ P n → n = 7 ∨ n = 0 ∨ ¬(n = 7 ∨ n = 0) ∧ P n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  tauto"
"## Tactic State A:\np✝¹ q✝¹ r✝¹ : Prop\nh✝ : p✝¹ ∧ q✝¹ ∨ p✝¹ ∧ r✝¹\nα✝ : Type\np✝ q✝ r✝ : α✝ → Prop\nh : (∃ x, p✝ x ∧ q✝ x) ∨ ∃ x, p✝ x ∧ r✝ x\nα : Type\nx : α\np q r : α → Prop\nh₀ : (∀ (x : α), p x → q x → r x) ∨ r x\nh₁ : p x\nh₂ : q x\na b c : ℕ\n⊢ ¬(¬a ≤ b ∧ a ≤ c ∨ ¬a ≤ c ∧ a ≤ b) ↔ a ≤ b ∧ a ≤ c ∨ ¬a ≤ c ∧ ¬a ≤ b\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  tauto"
"## Tactic State A:\np✝² q✝² r✝² : Prop\nh✝¹ : p✝² ∧ q✝² ∨ p✝² ∧ r✝²\nα✝³ : Type\np✝¹ q✝¹ r✝¹ : α✝³ → Prop\nh✝ : (∃ x, p✝¹ x ∧ q✝¹ x) ∨ ∃ x, p✝¹ x ∧ r✝¹ x\nα✝² : Type\nx✝¹ : α✝²\np✝ q✝ r✝ : α✝² → Prop\nh₀ : (∀ (x : α✝²), p✝ x → q✝ x → r✝ x) ∨ r✝ x✝¹\nh₁ : p✝ x✝¹\nh₂ : q✝ x✝¹\na✝ b c : ℕ\np q r : Prop\nα✝¹ : Type\nx✝ y✝ : α✝¹\nh : x✝ = y✝\nh'' : (p ∧ q ↔ q ∨ r) ↔ (r ∧ p ↔ r ∨ q)\nα✝ : Type\nx y z w : α✝\nα : Type u_1\nβ : Type u_2\na : α\ns_1 : Set α\n⊢ ∃ a_1, a_1 = a ∨ a_1 ∈ s_1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  tauto {closer := `[simp]}"
"## Tactic State A:\np✝³ q✝³ r✝³ : Prop\nh✝² : p✝³ ∧ q✝³ ∨ p✝³ ∧ r✝³\nα✝³ : Type\np✝² q✝² r✝² : α✝³ → Prop\nh✝¹ : (∃ x, p✝² x ∧ q✝² x) ∨ ∃ x, p✝² x ∧ r✝² x\nα✝² : Type\nx✝² : α✝²\np✝¹ q✝¹ r✝¹ : α✝² → Prop\nh₀ : (∀ (x : α✝²), p✝¹ x → q✝¹ x → r✝¹ x) ∨ r✝¹ x✝²\nh₁✝ : p✝¹ x✝²\nh₂✝ : q✝¹ x✝²\na b c : ℕ\np✝ q✝ r✝ : Prop\nα✝¹ : Type\nx✝¹ y✝¹ : α✝¹\nh✝ : x✝¹ = y✝¹\nh''✝ : (p✝ ∧ q✝ ↔ q✝ ∨ r✝) ↔ (r✝ ∧ p✝ ↔ r✝ ∨ q✝)\nα✝ : Type\nx✝ y✝ z✝ w✝ : α✝\np q r : Prop\nα : Type\nx y z w : α\nh : x = y\nh₁ : y = z\nh₂ : z = w\nh'' : (p ∧ q ↔ q ∨ r) ↔ (r ∧ p ↔ r ∨ q)\n⊢ (r ∧ p ↔ r ∨ q) ∧ (q ∨ r) → p ∧ x = w ∧ (¬x = w → p ∧ q ∧ r)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  tauto {closer := `[cc]}"
"## Tactic State A:\np✝³ q✝³ r✝³ : Prop\nh✝³ : p✝³ ∧ q✝³ ∨ p✝³ ∧ r✝³\nα✝³ : Type\np✝² q✝² r✝² : α✝³ → Prop\nh✝² : (∃ x, p✝² x ∧ q✝² x) ∨ ∃ x, p✝² x ∧ r✝² x\nα✝² : Type\nx✝³ : α✝²\np✝¹ q✝¹ r✝¹ : α✝² → Prop\nh₀ : (∀ (x : α✝²), p✝¹ x → q✝¹ x → r✝¹ x) ∨ r✝¹ x✝³\nh₁✝ : p✝¹ x✝³\nh₂✝ : q✝¹ x✝³\na b c : ℕ\np✝ q✝ r✝ : Prop\nα✝¹ : Type\nx✝² y✝² : α✝¹\nh✝¹ : x✝² = y✝²\nh''✝ : (p✝ ∧ q✝ ↔ q✝ ∨ r✝) ↔ (r✝ ∧ p✝ ↔ r✝ ∨ q✝)\nα✝ : Type\nx✝¹ y✝¹ z✝ w✝ : α✝\np q r : Prop\nα : Type\nx✝ y✝ z w : α\nh✝ : x✝ = y✝\nh₁ : y✝ = z\nh₂ : z = w\nh'' : (p ∧ q ↔ q ∨ r) ↔ (r ∧ p ↔ r ∨ q)\nx y : ℕ\nh : ¬x ≠ y\n⊢ x = y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  tauto"
"## Tactic State A:\np✝⁴ q✝³ r✝³ : Prop\nh✝³ : p✝⁴ ∧ q✝³ ∨ p✝⁴ ∧ r✝³\nα✝³ : Type\np✝³ q✝² r✝² : α✝³ → Prop\nh✝² : (∃ x, p✝³ x ∧ q✝² x) ∨ ∃ x, p✝³ x ∧ r✝² x\nα✝² : Type\nx✝³ : α✝²\np✝² q✝¹ r✝¹ : α✝² → Prop\nh₀ : (∀ (x : α✝²), p✝² x → q✝¹ x → r✝¹ x) ∨ r✝¹ x✝³\nh₁✝ : p✝² x✝³\nh₂✝ : q✝¹ x✝³\na✝ b c : ℕ\np✝¹ q✝ r✝ : Prop\nα✝¹ : Type\nx✝² y✝¹ : α✝¹\nh✝¹ : x✝² = y✝¹\nh''✝ : (p✝¹ ∧ q✝ ↔ q✝ ∨ r✝) ↔ (r✝ ∧ p✝¹ ↔ r✝ ∨ q✝)\nα✝ : Type\nx✝¹ y✝ z✝ w✝ : α✝\np✝ q r : Prop\nα : Type\nx y z w : α\nh✝ : x = y\nh₁ : y = z\nh₂ : z = w\nh'' : (p✝ ∧ q ↔ q ∨ r) ↔ (r ∧ p✝ ↔ r ∨ q)\nx✝ : Sort u_1\nrestrict : x✝\np : Prop\no : Part α\nh : p → o.Dom\na : α\n⊢ a ∈ sorry ↔ p ∧ a ∈ o\n## Tactic State B:\np✝⁴ q✝³ r✝³ : Prop\nh✝³ : p✝⁴ ∧ q✝³ ∨ p✝⁴ ∧ r✝³\nα✝³ : Type\np✝³ q✝² r✝² : α✝³ → Prop\nh✝² : (∃ x, p✝³ x ∧ q✝² x) ∨ ∃ x, p✝³ x ∧ r✝² x\nα✝² : Type\nx✝³ : α✝²\np✝² q✝¹ r✝¹ : α✝² → Prop\nh₀ : (∀ (x : α✝²), p✝² x → q✝¹ x → r✝¹ x) ∨ r✝¹ x✝³\nh₁✝ : p✝² x✝³\nh₂✝ : q✝¹ x✝³\na✝ b c : ℕ\np✝¹ q✝ r✝ : Prop\nα✝¹ : Type\nx✝² y✝¹ : α✝¹\nh✝¹ : x✝² = y✝¹\nh''✝ : (p✝¹ ∧ q✝ ↔ q✝ ∨ r✝) ↔ (r✝ ∧ p✝¹ ↔ r✝ ∨ q✝)\nα✝ : Type\nx✝¹ y✝ z✝ w✝ : α✝\np✝ q r : Prop\nα : Type\nx y z w : α\nh✝ : x = y\nh₁ : y = z\nh₂ : z = w\nh'' : (p✝ ∧ q ↔ q ∨ r) ↔ (r ∧ p✝ ↔ r ∨ q)\nx✝ : Sort u_1\nrestrict : x✝\np : Prop\no : Part α\nh : p → o.Dom\na : α\n⊢ a ∈ sorry () ↔ p ∧ a ∈ o\n## Action:\n  dsimp [restrict, mem_eq]"
"## Tactic State A:\np✝⁴ q✝³ r✝³ : Prop\nh✝³ : p✝⁴ ∧ q✝³ ∨ p✝⁴ ∧ r✝³\nα✝³ : Type\np✝³ q✝² r✝² : α✝³ → Prop\nh✝² : (∃ x, p✝³ x ∧ q✝² x) ∨ ∃ x, p✝³ x ∧ r✝² x\nα✝² : Type\nx✝³ : α✝²\np✝² q✝¹ r✝¹ : α✝² → Prop\nh₀ : (∀ (x : α✝²), p✝² x → q✝¹ x → r✝¹ x) ∨ r✝¹ x✝³\nh₁✝ : p✝² x✝³\nh₂✝ : q✝¹ x✝³\na✝ b c : ℕ\np✝¹ q✝ r✝ : Prop\nα✝¹ : Type\nx✝² y✝¹ : α✝¹\nh✝¹ : x✝² = y✝¹\nh''✝ : (p✝¹ ∧ q✝ ↔ q✝ ∨ r✝) ↔ (r✝ ∧ p✝¹ ↔ r✝ ∨ q✝)\nα✝ : Type\nx✝¹ y✝ z✝ w✝ : α✝\np✝ q r : Prop\nα : Type\nx y z w : α\nh✝ : x = y\nh₁ : y = z\nh₂ : z = w\nh'' : (p✝ ∧ q ↔ q ∨ r) ↔ (r ∧ p✝ ↔ r ∨ q)\nx✝ : Sort u_1\nrestrict : x✝\np : Prop\no : Part α\nh : p → o.Dom\na : α\n⊢ a ∈ sorry () ↔ p ∧ a ∈ o\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  tauto"
"## Tactic State A:\nx : ℕ\nh : x = x\n⊢ x = x\n## Tactic State B:\nx : ℕ\nh : x = x\np : x = x := h\n⊢ x = x\n## Action:\n  set! p := h"
"## Tactic State A:\nx : ℕ\nh : x = x\np : x = x := h\n⊢ x = x\n## Tactic State B:\nx : ℕ\nh : x = x\np : x = x := h\nq : x = x := p\n⊢ x = x\n## Action:\n  set q : x = x := p"
"## Tactic State A:\nx : ℕ\nh : x = x\np : x = x := h\nq : x = x := p\n⊢ x = x\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  apply q"
"## Tactic State A:\nx : ℕ\nh : x + x - x = 3\n⊢ x + x - x = 3\n## Tactic State B:\nx : ℕ\nh : x + x - x = 3\ny : ℕ := x\nh2 : x = y\n⊢ x + x - x = 3\n## Action:\n  set! y := x with ← h2"
"## Tactic State A:\nx : ℕ\nh : x + x - x = 3\ny : ℕ := x\nh2 : x = y\n⊢ x + x - x = 3\n## Tactic State B:\nx : ℕ\ny : ℕ := x\nw : ℕ := x\nh : w + w - w = 3\nh2 : w = y\n⊢ w + w - w = 3\n## Action:\n  set w := x"
"## Tactic State A:\nx : ℕ\ny : ℕ := x\nw : ℕ := x\nh : w + w - w = 3\nh2 : w = y\n⊢ w + w - w = 3\n## Tactic State B:\nx : ℕ\ny : ℕ := x\nw : ℕ := x\nh : w + w - w = 3\nh2 : w = y\n⊢ w + w - w = 3\n## Action:\n  guard_hyp y := x"
"## Tactic State A:\nx : ℕ\ny : ℕ := x\nw : ℕ := x\nh : w + w - w = 3\nh2 : w = y\n⊢ w + w - w = 3\n## Tactic State B:\nx : ℕ\ny : ℕ := x\nw : ℕ := x\nh : w + w - w = 3\nh2 : w = y\n⊢ w + w - w = 3\n## Action:\n  guard_hyp w := x"
"## Tactic State A:\nx : ℕ\ny : ℕ := x\nw : ℕ := x\nh : w + w - w = 3\nh2 : w = y\n⊢ w + w - w = 3\n## Tactic State B:\nx : ℕ\ny : ℕ := x\nw : ℕ := x\nh : w + w - w = 3\nh2 : w = y\n⊢ w + w - w = 3\n## Action:\n  guard_hyp h : w + w - w = 3"
"## Tactic State A:\nx : ℕ\ny : ℕ := x\nw : ℕ := x\nh : w + w - w = 3\nh2 : w = y\n⊢ w + w - w = 3\n## Tactic State B:\nx : ℕ\ny : ℕ := x\nw : ℕ := x\nh : w + w - w = 3\nh2 : w = y\n⊢ w + w - w = 3\n## Action:\n  guard_hyp h2 : w = y"
"## Tactic State A:\nx : ℕ\ny : ℕ := x\nw : ℕ := x\nh : w + w - w = 3\nh2 : w = y\n⊢ w + w - w = 3\n## Tactic State B:\nx : ℕ\ny : ℕ := x\nw : ℕ := x\nz : ℕ := w\nh : z + z - z = 3\nh2 : z = y\n_h3 : z = w\n⊢ z + z - z = 3\n## Action:\n  set z := w with _h3"
"## Tactic State A:\nx : ℕ\ny : ℕ := x\nw : ℕ := x\nz : ℕ := w\nh : z + z - z = 3\nh2 : z = y\n_h3 : z = w\n⊢ z + z - z = 3\n## Tactic State B:\nx : ℕ\ny : ℕ := x\nw : ℕ := x\nz : ℕ := w\nh2 : z = y\n_h3 : z = w\na : ℕ := 3\nh : z + z - z = a\n⊢ z + z - z = a\n## Action:\n  set a := 3"
"## Tactic State A:\nx : ℕ\ny : ℕ := x\nw : ℕ := x\nz : ℕ := w\nh2 : z = y\n_h3 : z = w\na : ℕ := 3\nh : z + z - z = a\n⊢ z + z - z = a\n## Tactic State B:\nx : ℕ\ny : ℕ := x\nw : ℕ := x\nz : ℕ := w\nh2 : z = y\n_h3 : z = w\na : ℕ := 3\nh : z + z - z = a\n⊢ z + z - z = a\n## Action:\n  guard_target = z + z - z = a"
"## Tactic State A:\nx : ℕ\ny : ℕ := x\nw : ℕ := x\nz : ℕ := w\nh2 : z = y\n_h3 : z = w\na : ℕ := 3\nh : z + z - z = a\n⊢ z + z - z = a\n## Tactic State B:\nx : ℕ\ny : ℕ := x\nw : ℕ := x\nz : ℕ := w\nh2 : z = y\n_h3 : z = w\na : ℕ := 3\ni'm_the_goal : Prop := z + z - z = a\nh : i'm_the_goal\n⊢ i'm_the_goal\n## Action:\n  set i'm_the_goal : Prop := z + z - z = a"
"## Tactic State A:\nx : ℕ\ny : ℕ := x\nw : ℕ := x\nz : ℕ := w\nh2 : z = y\n_h3 : z = w\na : ℕ := 3\ni'm_the_goal : Prop := z + z - z = a\nh : i'm_the_goal\n⊢ i'm_the_goal\n## Tactic State B:\nx : ℕ\ny : ℕ := x\nw : ℕ := x\nz : ℕ := w\nh2 : z = y\n_h3 : z = w\na : ℕ := 3\ni'm_the_goal : Prop := z + z - z = a\nh : i'm_the_goal\n⊢ i'm_the_goal\n## Action:\n  guard_target = i'm_the_goal"
"## Tactic State A:\nx : ℕ\ny : ℕ := x\nw : ℕ := x\nz : ℕ := w\nh2 : z = y\n_h3 : z = w\na : ℕ := 3\ni'm_the_goal : Prop := z + z - z = a\nh : i'm_the_goal\n⊢ i'm_the_goal\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  apply h"
"## Tactic State A:\nx : ℕ\nh : x - x = 0\n⊢ x = x\n## Tactic State B:\nx : ℕ\ny : ℕ := x\nh : y - y = 0\n⊢ y = y\n## Action:\n  set y : Nat := x"
"## Tactic State A:\nx : ℕ\ny : ℕ := x\nh : y - y = 0\n⊢ y = y\n## Tactic State B:\nx : ℕ\ny : ℕ := x\nh : y - y = 0\nz : ℕ := y + 1\n_eq1 : y + 1 = z\n⊢ y = y\n## Action:\n  set! z := y + 1 with ← _eq1"
"## Tactic State A:\nx : ℕ\ny : ℕ := x\nh : y - y = 0\nz : ℕ := y + 1\n_eq1 : y + 1 = z\n⊢ y = y\n## Tactic State B:\nx : ℕ\ny : ℕ := x\nh : y - y = 0\nz : ℕ := y + 1\n_eq1 : y + 1 = z\np : x - x = 0 := h\n_eq2 : p = h\n⊢ y = y\n## Action:\n  set! p : x - x = 0 := h with _eq2"
"## Tactic State A:\nx : ℕ\ny : ℕ := x\nh : y - y = 0\nz : ℕ := y + 1\n_eq1 : y + 1 = z\np : x - x = 0 := h\n_eq2 : p = h\n⊢ y = y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rfl"
"## Tactic State A:\n⊢ True\n## Tactic State B:\ng : ℕ → ℤ := fun ε => ↑ε\n_h : g = fun ε => ↑ε\n⊢ True\n## Action:\n  set g : Nat → Int := (fun ε => ε) with _h"
"## Tactic State A:\ng : ℕ → ℤ := fun ε => ↑ε\n_h : g = fun ε => ↑ε\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial"
"## Tactic State A:\n_a _b _c _d _e _f _g _h : ℕ\n⊢ 1 = 1\n## Tactic State B:\n_a _b _c _d _e _f _g _h✝ : ℕ\na : ℕ := sorry\n_h : a = sorry\n⊢ 1 = 1\n## Action:\n  set a : Nat := test with _h"
"## Tactic State A:\n_a _b _c _d _e _f _g _h✝ : ℕ\na : ℕ := sorry\n_h : a = sorry\n⊢ 1 = 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial"
"## Tactic State A:\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  classical"
"## Tactic State A:\n⊢ True\n## Tactic State B:\n⊢ True\n## Action:\n  noise"
"## Tactic State A:\n⊢ True\n## Tactic State B:\n_zero : ℕ\nisLt✝ : _zero < 1\n⊢ True\n## Action:\n  have ⟨_zero, _⟩ : Fin 1 := ⟨0, Nat.zero_lt_one⟩"
"## Tactic State A:\n_zero : ℕ\nisLt✝ : _zero < 1\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact .intro"
"## Tactic State A:\n⊢ True\n## Tactic State B:\n_zero : ℕ\nisLt✝ : _zero < 1\n⊢ True\n## Action:\n  have ⟨_zero, _⟩ : Fin 1 := ⟨0, Nat.zero_lt_one⟩"
"## Tactic State A:\n_zero : ℕ\nisLt✝ : _zero < 1\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact .intro"
"## Tactic State A:\n⊢ True\n## Tactic State B:\n_zero : ℕ\nisLt✝ : _zero < 1\n⊢ True\n## Action:\n  have ⟨_zero, _⟩ : Fin 1 := ⟨0, Nat.zero_lt_one⟩"
"## Tactic State A:\n_zero : ℕ\nisLt✝ : _zero < 1\n⊢ True\n## Tactic State B:\n_zero : ℕ\nisLt✝ : _zero < 1\n⊢ True\n## Action:\n  noise"
"## Tactic State A:\n⊢ True\n## Tactic State B:\n_zero : ℕ\nisLt✝ : _zero < 1\n⊢ True\n## Action:\n  have ⟨_zero, _⟩ : Fin 1 := ⟨0, Nat.zero_lt_one⟩"
"## Tactic State A:\n_zero : ℕ\nisLt✝ : _zero < 1\n⊢ True\n## Tactic State B:\n_zero : ℕ\nisLt✝ : _zero < 1\n⊢ True\n## Action:\n  noise"
"## Tactic State A:\n⊢ True\n## Tactic State B:\n⊢ True\n## Action:\n  noise"
"## Tactic State A:\n⊢ True\n## Tactic State B:\ncase refine_2\nthis : ℕ\n⊢ True\n---\ncase refine_1\n⊢ ℕ\n## Action:\n  have := Nat.succ ?_;"
"## Tactic State A:\ncase refine_2\nthis : ℕ\n⊢ True\n---\ncase refine_1\n⊢ ℕ\n## Tactic State B:\ncase refine_2\nthis : ℕ\n⊢ True\n---\ncase refine_1\n⊢ ℕ\n## Action:\n  noise"
"## Tactic State A:\n⊢ True\n## Tactic State B:\ncase refine_5\nthis : ?refine_1 + ?refine_2 = ?refine_2 + ?refine_1 ∧ ?refine_3 + ?refine_4 = ?refine_4 + ?refine_3\n⊢ True\n---\ncase refine_1\n⊢ ℕ\n---\ncase refine_2\n⊢ ℕ\n---\ncase refine_3\n⊢ ℕ\n---\ncase refine_4\n⊢ ℕ\n## Action:\n  have := And.intro (Nat.add_comm ?_ ?_) (Nat.add_comm ?_ ?_)"
"## Tactic State A:\ncase refine_5\nthis : ?refine_1 + ?refine_2 = ?refine_2 + ?refine_1 ∧ ?refine_3 + ?refine_4 = ?refine_4 + ?refine_3\n⊢ True\n---\ncase refine_1\n⊢ ℕ\n---\ncase refine_2\n⊢ ℕ\n---\ncase refine_3\n⊢ ℕ\n---\ncase refine_4\n⊢ ℕ\n## Tactic State B:\ncase refine_1\n⊢ ℕ\n---\ncase refine_2\n⊢ ℕ\n---\ncase refine_3\n⊢ ℕ\n---\ncase refine_4\n⊢ ℕ\n## Action:\n  apply True.intro"
"## Tactic State A:\ncase refine_1\n⊢ ℕ\n---\ncase refine_2\n⊢ ℕ\n---\ncase refine_3\n⊢ ℕ\n---\ncase refine_4\n⊢ ℕ\n## Tactic State B:\ncase refine_1\n⊢ ℕ\n---\ncase refine_2\n⊢ ℕ\n---\ncase refine_3\n⊢ ℕ\n---\ncase refine_4\n⊢ ℕ\n## Action:\n  noise"
"## Tactic State A:\nh : False\n⊢ True\n## Tactic State B:\nh this : False\n⊢ True\n## Action:\n  have : False := h"
"## Tactic State A:\nh this : False\n⊢ True\n## Tactic State B:\nh this : False\n⊢ True\n## Action:\n  noise"
"## Tactic State A:\n⊢ True\n## Tactic State B:\n⊢ True\n## Action:\n  noise"
"## Tactic State A:\na✝ a : ℕ\n⊢ 0 = 0\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rw [] -- this goal is closed by the `rfl` implied by `rw`"
"## Tactic State A:\nα : Type u_1\na✝ b : α\ninst✝ : AddCommGroup α\nn : ℕ\na : α\n⊢ 0 + n • a = n • a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n"
"## Tactic State A:\nα : Type u_1\na✝ b✝ : α\ninst✝ : AddCommMonoid α\na b c d e : α\n⊢ a + (b + (a + (c + (a + (d + (a + e)))))) = e + d + c + b + 3 • a ∨ True\n## Tactic State B:\nα : Type u_1\na✝ b✝ : α\ninst✝ : AddCommMonoid α\na b c d e : α\n⊢ a + (b + (a + (c + (a + (d + (a + e)))))) = e + d + c + b + 3 • a ∨ True\n## Action:\n  fail_if_success"
"## Tactic State A:\nα : Type u_1\na✝ b✝ : α\ninst✝ : AddCommMonoid α\na b c d e : α\n⊢ a + (b + (a + (c + (a + (d + (a + e)))))) = e + d + c + b + 3 • a ∨ True\n## Tactic State B:\ncase h\nα : Type u_1\na✝ b✝ : α\ninst✝ : AddCommMonoid α\na b c d e : α\n⊢ True\n## Action:\n    left; abel1"
"## Tactic State A:\ncase h\nα : Type u_1\na✝ b✝ : α\ninst✝ : AddCommMonoid α\na b c d e : α\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  right; trivial"
"## Tactic State A:\nα : Type u_1\na✝ b✝ : α\ninst✝ : AddCommGroup α\na b c d e : α\n⊢ a + (b + (a + (c + (a + (d + (a + e)))))) = e + d + c + b + 3 • a ∨ True\n## Tactic State B:\nα : Type u_1\na✝ b✝ : α\ninst✝ : AddCommGroup α\na b c d e : α\n⊢ a + (b + (a + (c + (a + (d + (a + e)))))) = e + d + c + b + 3 • a ∨ True\n## Action:\n  fail_if_success"
"## Tactic State A:\nα : Type u_1\na✝ b✝ : α\ninst✝ : AddCommGroup α\na b c d e : α\n⊢ a + (b + (a + (c + (a + (d + (a + e)))))) = e + d + c + b + 3 • a ∨ True\n## Tactic State B:\ncase h\nα : Type u_1\na✝ b✝ : α\ninst✝ : AddCommGroup α\na b c d e : α\n⊢ True\n## Action:\n    left; abel1"
"## Tactic State A:\ncase h\nα : Type u_1\na✝ b✝ : α\ninst✝ : AddCommGroup α\na b c d e : α\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  right; trivial"
"## Tactic State A:\nα : Type u_1\na✝ b✝ : α\ninst✝ : AddCommGroup α\na b c d : α\n⊢ a + b + (c + d - a) = b + c - d ∨ True\n## Tactic State B:\nα : Type u_1\na✝ b✝ : α\ninst✝ : AddCommGroup α\na b c d : α\n⊢ a + b + (c + d - a) = b + c - d ∨ True\n## Action:\n  fail_if_success"
"## Tactic State A:\nα : Type u_1\na✝ b✝ : α\ninst✝ : AddCommGroup α\na b c d : α\n⊢ a + b + (c + d - a) = b + c - d ∨ True\n## Tactic State B:\ncase h\nα : Type u_1\na✝ b✝ : α\ninst✝ : AddCommGroup α\na b c d : α\n⊢ True\n## Action:\n    left; abel1"
"## Tactic State A:\ncase h\nα : Type u_1\na✝ b✝ : α\ninst✝ : AddCommGroup α\na b c d : α\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  right; trivial"
"## Tactic State A:\nα : Type u_1\na✝ b✝ : α\ninst✝ : AddCommGroup α\na b c : α\n⊢ a + b + c + (c - a - a) = -1 • a + b + c ∨ True\n## Tactic State B:\nα : Type u_1\na✝ b✝ : α\ninst✝ : AddCommGroup α\na b c : α\n⊢ a + b + c + (c - a - a) = -1 • a + b + c ∨ True\n## Action:\n  fail_if_success"
"## Tactic State A:\nα : Type u_1\na✝ b✝ : α\ninst✝ : AddCommGroup α\na b c : α\n⊢ a + b + c + (c - a - a) = -1 • a + b + c ∨ True\n## Tactic State B:\ncase h\nα : Type u_1\na✝ b✝ : α\ninst✝ : AddCommGroup α\na b c : α\n⊢ True\n## Action:\n    left; abel1"
"## Tactic State A:\ncase h\nα : Type u_1\na✝ b✝ : α\ninst✝ : AddCommGroup α\na b c : α\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  right; trivial"
"## Tactic State A:\nα : Type ?u.9\na b : α\nMyTrue : Sort ?u.19\n⊢ MyTrue\n## Tactic State B:\nα : Type ?u.9\na b : α\nMyTrue : Sort ?u.19\n⊢ MyTrue\n## Action:\n  abel_nf"
"## Tactic State A:\nα : Type u_2\na✝ b✝ : α\nx✝ : Sort u_1\nid' : x✝\ninst✝ : AddCommGroup α\na b : α\n⊢ a + b - b - sorry = 0\n## Tactic State B:\nα : Type u_2\na✝ b✝ : α\nx✝ : Sort u_1\nid' : x✝\ninst✝ : AddCommGroup α\na b : α\n⊢ a + b - b - sorry = 0\n## Action:\n  fail_if_success"
"## Tactic State A:\nα : Type u_2\na✝ b✝ : α\nx✝ : Sort u_1\nid' : x✝\ninst✝ : AddCommGroup α\na b : α\n⊢ a + b - b - sorry = 0\n## Tactic State B:\nα : Type u_2\na✝ b✝ : α\nx✝ : Sort u_1\nid' : x✝\ninst✝ : AddCommGroup α\na b : α\n⊢ a + b - b - sorry = 0\n## Action:\n    abel1"
"## Tactic State A:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\n⊢ True\n## Tactic State B:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nthis : ∀ (p q r s : α), s + p - q = s - r - (q - r - p)\n⊢ True\n## Action:\n  have : ∀ (p q r s : α), s + p - q = s - r - (q - r - p) := by"
"## Tactic State A:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nthis : ∀ (p q r s : α), s + p - q = s - r - (q - r - p)\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    intro p q r s"
"## Tactic State A:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\n⊢ y = x + z - (x - y + z)\n## Tactic State B:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\nthis : True\n⊢ y = x + z - (x - y + z)\n## Action:\n  have : True := trivial"
"## Tactic State A:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\nthis : True\n⊢ y = x + z - (x - y + z)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  abel"
"## Tactic State A:\nα : Type ?u.9\na b : α\n⊢ True\n## Tactic State B:\nα : Type ?u.9\na b : α\nthis : ℕ\n⊢ True\n## Action:\n  have := 0"
"## Tactic State A:\nα : Type ?u.9\na b : α\nthis : ℕ\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  abel_nf"
"## Tactic State A:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\nw : x = y + z\n⊢ False\n## Tactic State B:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\nw : x = y + z\n⊢ False\n## Action:\n  abel_nf at w"
"## Tactic State A:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\nh : False\nw : x - x = y + z\n⊢ False\n## Tactic State B:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\nh : False\nw : 0 = y + z\n⊢ False\n## Action:\n  abel_nf at w"
"## Tactic State A:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\nh : False\nw : 0 = y + z\n⊢ False\n## Tactic State B:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\nh : False\nw : 0 = y + z\n⊢ False\n## Action:\n  guard_hyp w : 0 = y + z"
"## Tactic State A:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\nh : False\nw : 0 = y + z\n⊢ False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  assumption"
"## Tactic State A:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\n_w : x = y + z\n⊢ False\n## Tactic State B:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\n_w : x = y + z\n⊢ False\n## Action:\n  abel_nf at *"
"## Tactic State A:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\n_w : x = y + z\n⊢ x - x = 0\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  abel_nf at *"
"## Tactic State A:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\nw : x = y + z\n⊢ x - x = 0\n## Tactic State B:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\nw : x = y + z\n⊢ x - x = 0\n## Action:\n  abel_nf at w ⊢"
"## Tactic State A:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\nw : x - x = y + z\n⊢ x = 0\n## Tactic State B:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\nw : 0 = y + z\n⊢ x = 0\n## Action:\n  abel_nf at w ⊢"
"## Tactic State A:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\nh : False\nw : x - x = y + z\n⊢ False\n## Tactic State B:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\nh : False\nw : 0 = y + z\n⊢ False\n## Action:\n  abel_nf at *"
"## Tactic State A:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\nh : False\nw : 0 = y + z\n⊢ False\n## Tactic State B:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\nh : False\nw : 0 = y + z\n⊢ False\n## Action:\n  guard_hyp w : 0 = y + z"
"## Tactic State A:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\nh : False\nw : 0 = y + z\n⊢ False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  assumption"
"## Tactic State A:\nα : Type ?u.9\na b : α\nx : ℤ\nR : ℤ → ℤ → Prop\nhR : Reflexive R\n⊢ True\n## Tactic State B:\nα : Type ?u.9\na b : α\nx : ℤ\nR : ℤ → ℤ → Prop\nhR : Reflexive R\n⊢ True\n## Action:\n  have h : R (myId x + x) (x + myId x) := hR .."
"## Tactic State A:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx : α\nf : α → α\n⊢ True\n## Tactic State B:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx : α\nf : α → α\ny : α := x\n⊢ True\n## Action:\n  let y := x"
"## Tactic State A:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx : α\nf : α → α\ny : α := x\n⊢ True\n## Tactic State B:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx : α\nf : α → α\ny : α := x\nthis : x = y\n⊢ True\n## Action:\n  have : x = y := by"
"## Tactic State A:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx : α\nf : α → α\ny : α := x\nthis : x = y\n⊢ True\n## Tactic State B:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx : α\nf : α → α\ny : α := x\nthis✝ : x = y\nthis : x - y = 0\n⊢ True\n## Action:\n    fail_if_success abel_nf"
"## Tactic State A:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx : α\nf : α → α\ny : α := x\nthis✝ : x = y\nthis : x - y = 0\n⊢ True\n## Tactic State B:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx : α\nf : α → α\ny : α := x\nthis✝¹ : x = y\nthis✝ : x - y = 0\nthis : f x = f y\n⊢ True\n## Action:\n    abel_nf!"
"## Tactic State A:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx : α\nf : α → α\ny : α := x\nthis✝¹ : x = y\nthis✝ : x - y = 0\nthis : f x = f y\n⊢ True\n## Tactic State B:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx : α\nf : α → α\ny : α := x\nthis✝² : x = y\nthis✝¹ : x - y = 0\nthis✝ : f x = f y\nthis : f x - f y = 0\n⊢ True\n## Action:\n  have : x - y = 0 := by"
"## Tactic State A:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx : α\nf : α → α\ny : α := x\nthis✝² : x = y\nthis✝¹ : x - y = 0\nthis✝ : f x = f y\nthis : f x - f y = 0\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    abel_nf"
"## Tactic State A:\n⊢ True\n## Tactic State B:\n⊢ True\n## Action:\n  run_tac"
"## Tactic State A:\n⊢ True\n## Tactic State B:\n⊢ True\n## Action:\n  run_tac"
"## Tactic State A:\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    let t : Option Bool := (← Lean.MonadOptions.getOptions).get? `pp.all"
"## Tactic State A:\n⊢ True\n## Tactic State B:\n⊢ True\n## Action:\n  run_tac"
"## Tactic State A:\na b c d e f : Prop\nh : a ∧ b ∨ c ∧ d\nh2 : e ∧ f\n⊢ True\n## Tactic State B:\ncase inl.intro.intro\na b c d e f : Prop\nleft✝¹ : e\nright✝¹ : f\nleft✝ : a\nright✝ : b\n⊢ True\n---\ncase inr.intro.intro\na b c d e f : Prop\nleft✝¹ : e\nright✝¹ : f\nleft✝ : c\nright✝ : d\n⊢ True\n## Action:\n  casesm* _∨_, _∧_"
"## Tactic State A:\ncase inl.intro.intro\na b c d e f : Prop\nleft✝¹ : e\nright✝¹ : f\nleft✝ : a\nright✝ : b\n⊢ True\n---\ncase inr.intro.intro\na b c d e f : Prop\nleft✝¹ : e\nright✝¹ : f\nleft✝ : c\nright✝ : d\n⊢ True\n## Tactic State B:\ncase inl.intro.intro\na b c d e f : Prop\n⊢ True\n## Action:\n  · clear ‹a› ‹b› ‹e› ‹f›; (fail_if_success clear ‹c›); trivial"
"## Tactic State A:\ncase inl.intro.intro\na b c d e f : Prop\n⊢ True\n## Tactic State B:\ncase inl.intro.intro\na b c d e f : Prop\n⊢ True\n## Action:\n  · clear ‹c› ‹d› ‹e› ‹f›; trivial"
"## Tactic State A:\na b c d : Prop\nh : a ∧ b ∨ c ∧ d\n⊢ True\n## Tactic State B:\na b c d : Prop\nh : a ∧ b ∨ c ∧ d\n⊢ True\n## Action:\n  fail_if_success casesm* _∧_ -- no match expected"
"## Tactic State A:\na b c d : Prop\nh : a ∧ b ∨ c ∧ d\n⊢ True\n## Tactic State B:\na b c d : Prop\n⊢ True\n## Action:\n  clear ‹a ∧ b ∨ c ∧ d›; trivial"
"## Tactic State A:\na b c d : Prop\nh : a ∧ b ∨ c ∨ d\n⊢ True\n## Tactic State B:\ncase inl\na b c d : Prop\nh : a ∧ b\n⊢ True\n---\ncase inr.inl\na b c d : Prop\nh : c\n⊢ True\n---\ncase inr.inr\na b c d : Prop\nh : d\n⊢ True\n## Action:\n  casesm* _∨_"
"## Tactic State A:\ncase inl\na b c d : Prop\nh : a ∧ b\n⊢ True\n---\ncase inr.inl\na b c d : Prop\nh : c\n⊢ True\n---\ncase inr.inr\na b c d : Prop\nh : d\n⊢ True\n## Tactic State B:\ncase inl\na b c d : Prop\n⊢ True\n## Action:\n  · clear ‹a ∧ b›; trivial"
"## Tactic State A:\ncase inl\na b c d : Prop\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · clear ‹c›; trivial"
"## Tactic State A:\n\n## Tactic State B:\ncase inr.inl\na b c d : Prop\n⊢ True\n## Action:\n  · clear ‹d›; trivial"
"## Tactic State A:\na b c d : Prop\nh : a ∧ b ∨ c ∨ d\n⊢ True\n## Tactic State B:\ncase inl\na b c d : Prop\nh : a ∧ b\n⊢ True\n---\ncase inr\na b c d : Prop\nh : c ∨ d\n⊢ True\n## Action:\n  casesm _∨_"
"## Tactic State A:\ncase inl\na b c d : Prop\nh : a ∧ b\n⊢ True\n---\ncase inr\na b c d : Prop\nh : c ∨ d\n⊢ True\n## Tactic State B:\ncase inl\na b c d : Prop\n⊢ True\n## Action:\n  · clear ‹a ∧ b›; trivial"
"## Tactic State A:\ncase inl\na b c d : Prop\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · clear ‹c ∨ d›; trivial"
"## Tactic State A:\na b c d : Prop\nh : a ∧ b ∨ c ∨ d\n⊢ True\n## Tactic State B:\ncase inl\na b c d : Prop\nh : a ∧ b\n⊢ True\n---\ncase inr\na b c d : Prop\nh : c ∨ d\n⊢ True\n## Action:\n  cases_type And Or"
"## Tactic State A:\ncase inl\na b c d : Prop\nh : a ∧ b\n⊢ True\n---\ncase inr\na b c d : Prop\nh : c ∨ d\n⊢ True\n## Tactic State B:\ncase inl\na b c d : Prop\n⊢ True\n## Action:\n  · clear ‹a ∧ b›; trivial"
"## Tactic State A:\ncase inl\na b c d : Prop\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · clear ‹c ∨ d›; trivial"
"## Tactic State A:\na b c d : Prop\nh : a ∧ b ∨ c ∨ d\n⊢ True\n## Tactic State B:\na b c d : Prop\nh : a ∧ b ∨ c ∨ d\n⊢ True\n## Action:\n  fail_if_success cases_type* And -- no match expected"
"## Tactic State A:\na b c d : Prop\nh : a ∧ b ∨ c ∨ d\n⊢ True\n## Tactic State B:\na b c d : Prop\n⊢ True\n## Action:\n  · clear ‹a ∧ b ∨ c ∨ d›; trivial"
"## Tactic State A:\na b c d : Prop\nh : a ∧ b ∨ c ∨ d\n⊢ True\n## Tactic State B:\ncase inl\na b c d : Prop\nh : a ∧ b\n⊢ True\n---\ncase inr\na b c d : Prop\nh : c ∨ d\n⊢ True\n## Action:\n  cases_type Or"
"## Tactic State A:\ncase inl\na b c d : Prop\nh : a ∧ b\n⊢ True\n---\ncase inr\na b c d : Prop\nh : c ∨ d\n⊢ True\n## Tactic State B:\ncase inl\na b c d : Prop\n⊢ True\n## Action:\n  · clear ‹a ∧ b›; trivial"
"## Tactic State A:\ncase inl\na b c d : Prop\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · clear ‹c ∨ d›; trivial"
"## Tactic State A:\na b c d : Prop\nh : a ∧ b ∨ c ∨ d\n⊢ True\n## Tactic State B:\ncase inl\na b c d : Prop\nh : a ∧ b\n⊢ True\n---\ncase inr.inl\na b c d : Prop\nh : c\n⊢ True\n---\ncase inr.inr\na b c d : Prop\nh : d\n⊢ True\n## Action:\n  cases_type* Or"
"## Tactic State A:\ncase inl\na b c d : Prop\nh : a ∧ b\n⊢ True\n---\ncase inr.inl\na b c d : Prop\nh : c\n⊢ True\n---\ncase inr.inr\na b c d : Prop\nh : d\n⊢ True\n## Tactic State B:\ncase inl\na b c d : Prop\n⊢ True\n## Action:\n  · clear ‹a ∧ b›; trivial"
"## Tactic State A:\ncase inl\na b c d : Prop\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · clear ‹c›; trivial"
"## Tactic State A:\n\n## Tactic State B:\ncase inr.inl\na b c d : Prop\n⊢ True\n## Action:\n  · clear ‹d›; trivial"
"## Tactic State A:\na b c d : Prop\nh : a ∧ b ∨ c ∨ d\n⊢ True\n## Tactic State B:\na b c d : Prop\nh : a ∧ b ∨ c ∨ d\n⊢ True\n## Action:\n  fail_if_success cases_type!* And Or -- no match expected"
"## Tactic State A:\na b c d : Prop\nh : a ∧ b ∨ c ∨ d\n⊢ True\n## Tactic State B:\na b c d : Prop\n⊢ True\n## Action:\n  · clear ‹a ∧ b ∨ c ∨ d›; trivial"
"## Tactic State A:\na b c d : Prop\nh : a ∧ b ∧ (c ∨ d)\n⊢ True\n## Tactic State B:\ncase intro\na b c d : Prop\nh : a\nright✝ : b ∧ (c ∨ d)\n⊢ True\n## Action:\n  cases_type! And Or"
"## Tactic State A:\ncase intro\na b c d : Prop\nh : a\nright✝ : b ∧ (c ∨ d)\n⊢ True\n## Tactic State B:\ncase intro\na b c d : Prop\n⊢ True\n## Action:\n  · clear ‹a› ‹b ∧ (c ∨ d)›; trivial"
"## Tactic State A:\na b c d : Prop\nh : a ∧ b ∧ (c ∨ d)\n⊢ True\n## Tactic State B:\ncase intro.intro\na b c d : Prop\nh : a\nright✝¹ : b\nright✝ : c ∨ d\n⊢ True\n## Action:\n  cases_type!* And Or"
"## Tactic State A:\ncase intro.intro\na b c d : Prop\nh : a\nright✝¹ : b\nright✝ : c ∨ d\n⊢ True\n## Tactic State B:\ncase intro.intro\na b c d : Prop\n⊢ True\n## Action:\n  · clear ‹a› ‹b› ‹c ∨ d›; trivial"
"## Tactic State A:\nx✝¹ : Sort u_1\nTest : x✝¹\nx✝ : sorry\nh2 : sorry\n⊢ True\n## Tactic State B:\nx✝¹ : Sort u_1\nTest : x✝¹\nx✝ : sorry\nh2 : sorry\n⊢ True\n## Action:\n  cases_type!* Test"
"## Tactic State A:\nx✝¹ : Sort u_1\nTest : x✝¹\nx✝ : sorry\nh2 : sorry\n⊢ True\n## Tactic State B:\nx✝¹ : Sort u_1\nTest : x✝¹\nx✝ : sorry\nh2 : sorry\n⊢ True\n## Action:\n  cases_type Test"
"## Tactic State A:\nx✝¹ : Sort u_1\nTest : x✝¹\nx✝ : sorry\nh2 : sorry\n⊢ True\n## Tactic State B:\nx✝¹ : Sort u_1\nTest : x✝¹\nx✝ : sorry\nh2 : sorry\n⊢ True\n## Action:\n  cases_type* Test"
"## Tactic State A:\n⊢ True ∧ True ∧ True\n## Tactic State B:\n⊢ True ∧ True ∧ True\n## Action:\n  fail_if_success constructorm* True, _∨_ -- no match expected"
"## Tactic State A:\n⊢ True ∧ True ∧ True\n## Tactic State B:\n⊢ True ∧ True ∧ True\n## Action:\n  guard_target = True ∧ True ∧ True"
"## Tactic State A:\n⊢ True ∧ True ∧ True\n## Tactic State B:\ncase left\n⊢ True\n---\ncase right\n⊢ True ∧ True\n## Action:\n  constructorm _∧_"
"## Tactic State A:\ncase left\n⊢ True\n---\ncase right\n⊢ True ∧ True\n## Tactic State B:\ncase left\n⊢ True\n## Action:\n  · guard_target = True; constructorm True"
"## Tactic State A:\ncase left\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · guard_target = True ∧ True; constructorm* True, _∧_"
"## Tactic State A:\nn : ℕ\n⊢ True\n## Tactic State B:\nn : ℕ\n⊢ True\n## Action:\n  fail_if_success casesm! Nat  -- two constructors, so `casesm!` doesn't fire"
"## Tactic State A:\nn : ℕ\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial"
"## Tactic State A:\nh : Array ℕ\n⊢ True\n## Tactic State B:\ncase mk\nh : List ℕ\n⊢ True\n## Action:\n  casesm! Array _"
"## Tactic State A:\ncase mk\nh : List ℕ\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial"
"## Tactic State A:\nh : Array ℕ\n⊢ True\n## Tactic State B:\ncase mk\nh : List ℕ\n⊢ True\n## Action:\n  casesm Array _"
"## Tactic State A:\ncase mk\nh : List ℕ\n⊢ True\n## Tactic State B:\ncase mk\nh : List ℕ\n⊢ True\n## Action:\n  -- user facing name is preserved:"
"## Tactic State A:\ncase mk\nh : List ℕ\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  guard_hyp h : List Nat"
"## Tactic State A:\nn : ℕ\nh : n = 0\n⊢ True\n## Tactic State B:\ncase zero\nh : Nat.zero = 0\n⊢ True\n---\ncase succ\nn : ℕ\nh : n.succ = 0\n⊢ True\n## Action:\n  casesm Nat"
"## Tactic State A:\ncase zero\nh : Nat.zero = 0\n⊢ True\n---\ncase succ\nn : ℕ\nh : n.succ = 0\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · trivial"
"## Tactic State A:\n\n## Tactic State B:\ncase succ\nn : ℕ\nh : n.succ = 0\n⊢ True\n## Action:\n  · -- user facing name is preserved:"
"## Tactic State A:\ncase succ\nn : ℕ\nh : n.succ = 0\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    guard_hyp h : n + 1 = 0"
"## Tactic State A:\nP Q : Prop\nh : P ∧ Q\n⊢ True\n## Tactic State B:\ncase intro\nP Q : Prop\nleft✝ : P\nright✝ : Q\n⊢ True\n## Action:\n  casesm _ ∧ _"
"## Tactic State A:\ncase intro\nP Q : Prop\nleft✝ : P\nright✝ : Q\n⊢ True\n## Tactic State B:\ncase intro\nP Q : Prop\nleft✝ : P\nright✝ : Q\n⊢ True\n## Action:\n  -- user facing name is not used here, because there are multiple new hypotheses."
"## Tactic State A:\ncase intro\nP Q : Prop\nleft✝ : P\nright✝ : Q\n⊢ True\n## Tactic State B:\ncase intro\nP Q : Prop\np : P\nq : Q\n⊢ True\n## Action:\n  fail_if_success guard_hyp h : P"
"## Tactic State A:\ncase intro\nP Q : Prop\np : P\nq : Q\n⊢ True\n## Tactic State B:\ncase intro\nP Q : Prop\np : P\nq : Q\n⊢ True\n## Action:\n  rename_i p q"
"## Tactic State A:\ncase intro\nP Q : Prop\np : P\nq : Q\n⊢ True\n## Tactic State B:\ncase intro\nP Q : Prop\np : P\nq : Q\n⊢ True\n## Action:\n  guard_hyp p : P"
"## Tactic State A:\ncase intro\nP Q : Prop\np : P\nq : Q\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  guard_hyp q : Q"
"## Tactic State A:\np : Prop\n⊢ p ∧ p\n## Tactic State B:\np : Prop\nx✝ : ?m.27\n⊢ p ∧ p\n## Action:\n  cases h"
"## Tactic State A:\na b c : ℕ\nh : a - b = c\nhab : b ≤ a\n⊢ a = c + b\n## Tactic State B:\na b c : ℕ\nhab : b ≤ a\nh : ↑a - ↑b = ↑c\n⊢ ↑a = ↑c + ↑b\n## Action:\n  qify [hab] at h ⊢ -- `zify` does the same thing here."
"## Tactic State A:\na b c : ℕ\nhab : b ≤ a\nh : ↑a - ↑b = ↑c\n⊢ ↑a = ↑c + ↑b\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact sub_eq_iff_eq_add.1 h"
"## Tactic State A:\na b c : ℚ≥0\nh : a - b = c\nhab : b ≤ a\n⊢ a = c + b\n## Tactic State B:\na b c : ℚ≥0\nhab : b ≤ a\nh : ↑a - ↑b = ↑c\n⊢ ↑a = ↑c + ↑b\n## Action:\n  qify [hab] at h ⊢"
"## Tactic State A:\na b c : ℚ≥0\nhab : b ≤ a\nh : ↑a - ↑b = ↑c\n⊢ ↑a = ↑c + ↑b\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact sub_eq_iff_eq_add.1 h"
"## Tactic State A:\na b c : ℤ\nh : a / b = c\nhab : b ∣ a\nhb : b ≠ 0\n⊢ a = c * b\n## Tactic State B:\na b c : ℤ\nhab : b ∣ a\nh : ↑a / ↑b = ↑c\nhb : ↑b ≠ 0\n⊢ ↑a = ↑c * ↑b\n## Action:\n  qify [hab] at h hb ⊢"
"## Tactic State A:\na b c : ℤ\nhab : b ∣ a\nh : ↑a / ↑b = ↑c\nhb : ↑b ≠ 0\n⊢ ↑a = ↑c * ↑b\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact (div_eq_iff hb).1 h"
"## Tactic State A:\na b c : ℕ\nh : a / b = c\nhab : b ∣ a\nhb : b ≠ 0\n⊢ a = c * b\n## Tactic State B:\na b c : ℕ\nhab : b ∣ a\nh : ↑a / ↑b = ↑c\nhb : ↑b ≠ 0\n⊢ ↑a = ↑c * ↑b\n## Action:\n  qify [hab] at h hb ⊢"
"## Tactic State A:\na b c : ℕ\nhab : b ∣ a\nh : ↑a / ↑b = ↑c\nhb : ↑b ≠ 0\n⊢ ↑a = ↑c * ↑b\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact (div_eq_iff hb).1 h"
"## Tactic State A:\n⊢ ∃ x, x = x\n## Tactic State B:\n⊢ 42 = 42\n## Action:\n  existsi 42"
"## Tactic State A:\n⊢ 42 = 42\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rfl"
"## Tactic State A:\n⊢ ∃ x y, x = y\n## Tactic State B:\n⊢ 42 = 42\n## Action:\n  existsi 42, 42"
"## Tactic State A:\n⊢ 42 = 42\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rfl"
"## Tactic State A:\n⊢ ℕ\n## Tactic State B:\ncase h\n⊢ ℕ\n---\nh : ℕ\n⊢ ℕ\n## Action:\n  have h : Nat"
"## Tactic State A:\ncase h\n⊢ ℕ\n---\nh : ℕ\n⊢ ℕ\n## Tactic State B:\nh : ℕ\n⊢ ℕ\n## Action:\n  exact 5"
"## Tactic State A:\nh : ℕ\n⊢ ℕ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h"
"## Tactic State A:\n⊢ ℕ\n## Tactic State B:\ncase this\n⊢ ℕ\n---\nthis : ℕ\n⊢ ℕ\n## Action:\n  have : Nat"
"## Tactic State A:\ncase this\n⊢ ℕ\n---\nthis : ℕ\n⊢ ℕ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · exact 5"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact this"
"## Tactic State A:\na : ℕ\n⊢ a = a\n## Tactic State B:\ncase h\na : ℕ\n⊢ a = a\n---\na : ℕ\nh : a = a\n⊢ a = a\n## Action:\n  have h : a = a"
"## Tactic State A:\ncase h\na : ℕ\n⊢ a = a\n---\na : ℕ\nh : a = a\n⊢ a = a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · rfl"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h"
"## Tactic State A:\na : ℕ\n⊢ a = a\n## Tactic State B:\ncase this\na : ℕ\n⊢ a = a\n---\na : ℕ\nthis : a = a\n⊢ a = a\n## Action:\n  have : a = a"
"## Tactic State A:\ncase this\na : ℕ\n⊢ a = a\n---\na : ℕ\nthis : a = a\n⊢ a = a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · rfl"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact this"
"## Tactic State A:\n⊢ True\n## Tactic State B:\ncase _N\n⊢ ?m.5\n---\n_N : ?m.5 := ?_N\n⊢ True\n## Action:\n  let _N; -- FIXME: https://github.com/leanprover/lean4/issues/1670"
"## Tactic State A:\ncase _N\n⊢ ?m.5\n---\n_N : ?m.5 := ?_N\n⊢ True\n## Tactic State B:\n_N : Type := ℕ\n⊢ True\n## Action:\n  exact Nat"
"## Tactic State A:\n_N : Type := ℕ\n⊢ True\n## Tactic State B:\ncase this\n_N : Type := ℕ\n⊢ ?m.12\n---\n_N : Type := ℕ\nthis : ?m.12\n⊢ True\n## Action:\n  have"
"## Tactic State A:\ncase this\n_N : Type := ℕ\n⊢ ?m.12\n---\n_N : Type := ℕ\nthis : ?m.12\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · exact 0"
"## Tactic State A:\n\n## Tactic State B:\ncase _h\n_N : Type := ℕ\nthis : ℕ\n⊢ ℕ\n---\n_N : Type := ℕ\nthis _h : ℕ\n⊢ True\n## Action:\n  have _h : Nat"
"## Tactic State A:\ncase _h\n_N : Type := ℕ\nthis : ℕ\n⊢ ℕ\n---\n_N : Type := ℕ\nthis _h : ℕ\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · exact this"
"## Tactic State A:\n\n## Tactic State B:\ncase _h'\n_N : Type := ℕ\nthis _h x : ℕ\n⊢ x < x + 1\n---\n_N : Type := ℕ\nthis _h : ℕ\n_h' : ∀ (x : ℕ), x < x + 1\n⊢ True\n## Action:\n  have _h' x : x < x + 1"
"## Tactic State A:\ncase _h'\n_N : Type := ℕ\nthis _h x : ℕ\n⊢ x < x + 1\n---\n_N : Type := ℕ\nthis _h : ℕ\n_h' : ∀ (x : ℕ), x < x + 1\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · exact Nat.lt.base x"
"## Tactic State A:\n\n## Tactic State B:\ncase _h''\n_N : Type := ℕ\nthis _h : ℕ\n_h' : ∀ (x : ℕ), x < x + 1\nx : ℕ\n⊢ x < x + 1\n---\n_N : Type := ℕ\nthis _h : ℕ\n_h' _h'' : ∀ (x : ℕ), x < x + 1\n⊢ True\n## Action:\n  have _h'' (x : Nat) : x < x + 1"
"## Tactic State A:\ncase _h''\n_N : Type := ℕ\nthis _h : ℕ\n_h' : ∀ (x : ℕ), x < x + 1\nx : ℕ\n⊢ x < x + 1\n---\n_N : Type := ℕ\nthis _h : ℕ\n_h' _h'' : ∀ (x : ℕ), x < x + 1\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · exact Nat.lt.base x"
"## Tactic State A:\n\n## Tactic State B:\ncase _m\n_N : Type := ℕ\nthis _h : ℕ\n_h' _h'' : ∀ (x : ℕ), x < x + 1\n⊢ ?m.883\n---\n_N : Type := ℕ\nthis _h : ℕ\n_h' _h'' : ∀ (x : ℕ), x < x + 1\n_m : ?m.883 := ?_m\n⊢ True\n## Action:\n  let _m"
"## Tactic State A:\ncase _m\n_N : Type := ℕ\nthis _h : ℕ\n_h' _h'' : ∀ (x : ℕ), x < x + 1\n⊢ ?m.883\n---\n_N : Type := ℕ\nthis _h : ℕ\n_h' _h'' : ∀ (x : ℕ), x < x + 1\n_m : ?m.883 := ?_m\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · exact 6"
"## Tactic State A:\n\n## Tactic State B:\ncase _m'\n_N : Type := ℕ\nthis _h : ℕ\n_h' _h'' : ∀ (x : ℕ), x < x + 1\n_m : ℕ := 6\nx y : ℕ\n⊢ x + y = y + x\n---\n_N : Type := ℕ\nthis _h : ℕ\n_h' _h'' : ∀ (x : ℕ), x < x + 1\n_m : ℕ := 6\n_m' : ∀ (x y : ℕ), x + y = y + x := fun x y => ?_m'\n⊢ True\n## Action:\n  let _m' x (y : Nat) : x + y = y + x"
"## Tactic State A:\ncase _m'\n_N : Type := ℕ\nthis _h : ℕ\n_h' _h'' : ∀ (x : ℕ), x < x + 1\n_m : ℕ := 6\nx y : ℕ\n⊢ x + y = y + x\n---\n_N : Type := ℕ\nthis _h : ℕ\n_h' _h'' : ∀ (x : ℕ), x < x + 1\n_m : ℕ := 6\n_m' : ∀ (x y : ℕ), x + y = y + x := fun x y => ?_m'\n⊢ True\n## Tactic State B:\n_N : Type := ℕ\nthis _h : ℕ\n_h' _h'' : ∀ (x : ℕ), x < x + 1\n_m : ℕ := 6\n_m' : ∀ (x y : ℕ), x + y = y + x :=\n  fun x y => Eq.mpr (id (congrArg (fun _a => _a = y + x) (Nat.add_comm x y))) (Eq.refl (y + x))\n⊢ True\n## Action:\n  rw [Nat.add_comm]"
"## Tactic State A:\n_N : Type := ℕ\nthis _h : ℕ\n_h' _h'' : ∀ (x : ℕ), x < x + 1\n_m : ℕ := 6\n_m' : ∀ (x y : ℕ), x + y = y + x :=\n  fun x y => Eq.mpr (id (congrArg (fun _a => _a = y + x) (Nat.add_comm x y))) (Eq.refl (y + x))\n⊢ True\n## Tactic State B:\ncase _q\n_N : Type := ℕ\nthis _h : ℕ\n_h' _h'' : ∀ (x : ℕ), x < x + 1\n_m : ℕ := 6\n_m' : ∀ (x y : ℕ), x + y = y + x :=\n  fun x y => Eq.mpr (id (congrArg (fun _a => _a = y + x) (Nat.add_comm x y))) (Eq.refl (y + x))\n⊢ ?m.1001\n---\n_N : Type := ℕ\nthis _h : ℕ\n_h' _h'' : ∀ (x : ℕ), x < x + 1\n_m : ℕ := 6\n_m' : ∀ (x y : ℕ), x + y = y + x :=\n  fun x y => Eq.mpr (id (congrArg (fun _a => _a = y + x) (Nat.add_comm x y))) (Eq.refl (y + x))\n_q : ?m.1001\n⊢ True\n## Action:\n  have _q"
"## Tactic State A:\ncase _q\n_N : Type := ℕ\nthis _h : ℕ\n_h' _h'' : ∀ (x : ℕ), x < x + 1\n_m : ℕ := 6\n_m' : ∀ (x y : ℕ), x + y = y + x :=\n  fun x y => Eq.mpr (id (congrArg (fun _a => _a = y + x) (Nat.add_comm x y))) (Eq.refl (y + x))\n⊢ ?m.1001\n---\n_N : Type := ℕ\nthis _h : ℕ\n_h' _h'' : ∀ (x : ℕ), x < x + 1\n_m : ℕ := 6\n_m' : ∀ (x y : ℕ), x + y = y + x :=\n  fun x y => Eq.mpr (id (congrArg (fun _a => _a = y + x) (Nat.add_comm x y))) (Eq.refl (y + x))\n_q : ?m.1001\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · exact 6"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  simp"
"## Tactic State A:\na b c : ℕ\nh : a = b\n⊢ a + c = b + c\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  congr!"
"## Tactic State A:\na b : ℕ\nh : a = b\n⊢ ∀ (c : ℕ), a + c = b + c\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  congr!"
"## Tactic State A:\na b : ℕ\nh : a = b\n⊢ (fun c => a + c) = fun c => b + c\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  congr!"
"## Tactic State A:\na b : ℕ\n⊢ Fin (a + b) = Fin (b + a)\n## Tactic State B:\ncase h.e'_1\na b : ℕ\n⊢ a + b = b + a\n## Action:\n  congr! 1"
"## Tactic State A:\ncase h.e'_1\na b : ℕ\n⊢ a + b = b + a\n## Tactic State B:\ncase h.e'_1\na b : ℕ\n⊢ a + b = b + a\n## Action:\n  guard_target = a + b = b + a"
"## Tactic State A:\ncase h.e'_1\na b : ℕ\n⊢ a + b = b + a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  apply Nat.add_comm"
"## Tactic State A:\n⊢ ((a : ℕ) → Fin (a + 1)) = ((a : ℕ) → Fin (1 + a))\n## Tactic State B:\ncase h.h.e'_1\na : ℕ\n⊢ a + 1 = 1 + a\n## Action:\n  congr! 2 with a"
"## Tactic State A:\ncase h.h.e'_1\na : ℕ\n⊢ a + 1 = 1 + a\n## Tactic State B:\ncase h.h.e'_1\na : ℕ\n⊢ a + 1 = 1 + a\n## Action:\n  guard_target = a + 1 = 1 + a"
"## Tactic State A:\ncase h.h.e'_1\na : ℕ\n⊢ a + 1 = 1 + a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  apply Nat.add_comm"
"## Tactic State A:\n⊢ ((a : ℕ) × Fin (a + 1)) = ((a : ℕ) × Fin (1 + a))\n## Tactic State B:\ncase h.e'_2.h.h.e'_1\na : ℕ\n⊢ a + 1 = 1 + a\n## Action:\n  congr! 3 with a"
"## Tactic State A:\ncase h.e'_2.h.h.e'_1\na : ℕ\n⊢ a + 1 = 1 + a\n## Tactic State B:\ncase h.e'_2.h.h.e'_1\na : ℕ\n⊢ a + 1 = 1 + a\n## Action:\n  guard_target = a + 1 = 1 + a"
"## Tactic State A:\ncase h.e'_2.h.h.e'_1\na : ℕ\n⊢ a + 1 = 1 + a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  apply Nat.add_comm"
"## Tactic State A:\np : Prop\nh1 h2 : p\n⊢ h1 = h2\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  congr!"
"## Tactic State A:\np q : Prop\nh1 : p\nh2 : q\n⊢ HEq h1 h2\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  congr!"
"## Tactic State A:\na b : ℕ\nh : a = b\n⊢ a + 1 ≤ b + 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  congr!"
"## Tactic State A:\nx y : Unit\n⊢ x = y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  congr!"
"## Tactic State A:\np q r : ℕ → Prop\nh : q = r\n⊢ (∀ (n : ℕ), p n → q n) ↔ ∀ (n : ℕ), p n → r n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  congr!"
"## Tactic State A:\np q : Prop\nh : p ↔ q\n⊢ p = q\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  congr!"
"## Tactic State A:\nα : Sort u_1\nx y : α\nh : x = y\nf : α → ℕ\n⊢ f x = f y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  congr!"
"## Tactic State A:\nα : Type\nf : ℕ → ℕ\nh : ∀ (x : ℕ), f x = 0\nz : α\nhz : HEq z 0\n⊢ HEq f fun x => z\n## Tactic State B:\ncase hα\nα : Type\nf : ℕ → ℕ\nh : ∀ (x : ℕ), f x = 0\nz : α\nhz : HEq z 0\n⊢ ℕ = α\n---\ncase h\nα : Type\nf : ℕ → ℕ\nh : ∀ (x : ℕ), f x = 0\nz : α\nhz : HEq z 0\na✝¹ : ℕ\na'✝ : α\na✝ : HEq a✝¹ a'✝\n⊢ HEq (f a✝¹) z\n## Action:\n  congr!"
"## Tactic State A:\ncase hα\nα : Type\nf : ℕ → ℕ\nh : ∀ (x : ℕ), f x = 0\nz : α\nhz : HEq z 0\n⊢ ℕ = α\n---\ncase h\nα : Type\nf : ℕ → ℕ\nh : ∀ (x : ℕ), f x = 0\nz : α\nhz : HEq z 0\na✝¹ : ℕ\na'✝ : α\na✝ : HEq a✝¹ a'✝\n⊢ HEq (f a✝¹) z\n## Tactic State B:\ncase hα\nα : Type\nf : ℕ → ℕ\nh : ∀ (x : ℕ), f x = 0\nz : α\nhz : HEq z 0\n⊢ ℕ = α\n## Action:\n  · guard_target = Nat = α"
"## Tactic State A:\ncase hα\nα : Type\nf : ℕ → ℕ\nh : ∀ (x : ℕ), f x = 0\nz : α\nhz : HEq z 0\n⊢ ℕ = α\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    exact type_eq_of_heq hz.symm"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  next n x _ =>"
"## Tactic State A:\np q : ℕ → Prop\n⊢ (∀ ε > 0, p ε) ↔ ∀ ε > 0, q ε\n## Tactic State B:\ncase a.h.h'.a\np q : ℕ → Prop\nε : ℕ\nhε : ε > 0\n⊢ p ε ↔ q ε\n## Action:\n  congr! 2 with ε hε"
"## Tactic State A:\ncase a.h.h'.a\np q : ℕ → Prop\nε : ℕ\nhε : ε > 0\n⊢ p ε ↔ q ε\n## Tactic State B:\ncase a.h.h'.a\np q : ℕ → Prop\nε : ℕ\nhε : ε > 0\n⊢ p ε ↔ q ε\n## Action:\n  guard_hyp hε : ε > 0"
"## Tactic State A:\ncase a.h.h'.a\np q : ℕ → Prop\nε : ℕ\nhε : ε > 0\n⊢ p ε ↔ q ε\n## Tactic State B:\ncase a.h.h'.a\np q : ℕ → Prop\nε : ℕ\nhε : ε > 0\n⊢ p ε ↔ q ε\n## Action:\n  guard_target = p ε ↔ q ε"
"## Tactic State A:\ncase a.h.h'.a\np q : ℕ → Prop\nε : ℕ\nhε : ε > 0\n⊢ p ε ↔ q ε\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact test_sorry"
"## Tactic State A:\nα : Type u_1\ns t : Set α\n⊢ (ℕ × Subtype s) = (ℕ × Subtype t)\n## Tactic State B:\ncase h.e'_2\nα : Type u_1\ns t : Set α\n⊢ Subtype s = Subtype t\n## Action:\n  congr! 1"
"## Tactic State A:\ncase h.e'_2\nα : Type u_1\ns t : Set α\n⊢ Subtype s = Subtype t\n## Tactic State B:\ncase h.e'_2\nα : Type u_1\ns t : Set α\n⊢ Subtype s = Subtype t\n## Action:\n  guard_target = Subtype s = Subtype t"
"## Tactic State A:\ncase h.e'_2\nα : Type u_1\ns t : Set α\n⊢ Subtype s = Subtype t\n## Tactic State B:\ncase h.e'_2.h.e'_2\nα : Type u_1\ns t : Set α\n⊢ s = t\n## Action:\n  congr! 1"
"## Tactic State A:\ncase h.e'_2.h.e'_2\nα : Type u_1\ns t : Set α\n⊢ s = t\n## Tactic State B:\ncase h.e'_2.h.e'_2\nα : Type u_1\ns t : Set α\n⊢ s = t\n## Action:\n  guard_target = s = t"
"## Tactic State A:\ncase h.e'_2.h.e'_2\nα : Type u_1\ns t : Set α\n⊢ s = t\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact test_sorry"
"## Tactic State A:\nα : Type u_1\ns t : Set α\nf : Subtype s → α\ng : Subtype t → α\n⊢ f '' Set.univ = g '' Set.univ\n## Tactic State B:\ncase h.e'_1.h.e'_2\nα : Type u_1\ns t : Set α\nf : Subtype s → α\ng : Subtype t → α\n⊢ s = t\n---\ncase h.e'_3\nα : Type u_1\ns t : Set α\nf : Subtype s → α\ng : Subtype t → α\ne_1✝ : Subtype s = Subtype t\n⊢ HEq f g\n## Action:\n  congr!"
"## Tactic State A:\ncase h.e'_1.h.e'_2\nα : Type u_1\ns t : Set α\nf : Subtype s → α\ng : Subtype t → α\n⊢ s = t\n---\ncase h.e'_3\nα : Type u_1\ns t : Set α\nf : Subtype s → α\ng : Subtype t → α\ne_1✝ : Subtype s = Subtype t\n⊢ HEq f g\n## Tactic State B:\ncase h.e'_1.h.e'_2\nα : Type u_1\ns t : Set α\nf : Subtype s → α\ng : Subtype t → α\n⊢ s = t\n## Action:\n  · guard_target = s = t"
"## Tactic State A:\ncase h.e'_1.h.e'_2\nα : Type u_1\ns t : Set α\nf : Subtype s → α\ng : Subtype t → α\n⊢ s = t\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    exact test_sorry"
"## Tactic State A:\n\n## Tactic State B:\ncase h.e'_3\nα : Type u_1\ns t : Set α\nf : Subtype s → α\ng : Subtype t → α\ne_1✝ : Subtype s = Subtype t\n⊢ HEq f g\n## Action:\n  · guard_target = HEq f g"
"## Tactic State A:\ncase h.e'_3\nα : Type u_1\ns t : Set α\nf : Subtype s → α\ng : Subtype t → α\ne_1✝ : Subtype s = Subtype t\n⊢ HEq f g\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    exact test_sorry"
"## Tactic State A:\nα : Type u_1\nι κ : Type u\nf : ι → α\ng : κ → α\n⊢ f '' Set.univ = g '' Set.univ\n## Tactic State B:\nα : Type u_1\nι κ : Type u\nf : ι → α\ng : κ → α\n⊢ f '' Set.univ = g '' Set.univ\n## Action:\n  congr!"
"## Tactic State A:\nα : Type u_1\nι κ : Type u\nf : ι → α\ng : κ → α\n⊢ f '' Set.univ = g '' Set.univ\n## Tactic State B:\nα : Type u_1\nι κ : Type u\nf : ι → α\ng : κ → α\n⊢ f '' Set.univ = g '' Set.univ\n## Action:\n  guard_target = Set.image f Set.univ = Set.image g Set.univ"
"## Tactic State A:\nα : Type u_1\nι κ : Type u\nf : ι → α\ng : κ → α\n⊢ f '' Set.univ = g '' Set.univ\n## Tactic State B:\ncase h.e'_1\nα : Type u_1\nι κ : Type u\nf : ι → α\ng : κ → α\n⊢ ι = κ\n---\ncase h.e'_3\nα : Type u_1\nι κ : Type u\nf : ι → α\ng : κ → α\ne_1✝ : ι = κ\n⊢ HEq f g\n## Action:\n  congr! (config := {typeEqs := true})"
"## Tactic State A:\ncase h.e'_1\nα : Type u_1\nι κ : Type u\nf : ι → α\ng : κ → α\n⊢ ι = κ\n---\ncase h.e'_3\nα : Type u_1\nι κ : Type u\nf : ι → α\ng : κ → α\ne_1✝ : ι = κ\n⊢ HEq f g\n## Tactic State B:\ncase h.e'_1\nα : Type u_1\nι κ : Type u\nf : ι → α\ng : κ → α\n⊢ ι = κ\n## Action:\n  · guard_target = ι = κ"
"## Tactic State A:\ncase h.e'_1\nα : Type u_1\nι κ : Type u\nf : ι → α\ng : κ → α\n⊢ ι = κ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    exact test_sorry"
"## Tactic State A:\n\n## Tactic State B:\ncase h.e'_3\nα : Type u_1\nι κ : Type u\nf : ι → α\ng : κ → α\ne_1✝ : ι = κ\n⊢ HEq f g\n## Action:\n  · guard_target = HEq f g"
"## Tactic State A:\ncase h.e'_3\nα : Type u_1\nι κ : Type u\nf : ι → α\ng : κ → α\ne_1✝ : ι = κ\n⊢ HEq f g\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    exact test_sorry"
"## Tactic State A:\nα β : Type u_1\ns : Set α\nt : Set β\n⊢ (ℕ × Subtype s) = (ℕ × Subtype t)\n## Tactic State B:\ncase h.e'_2\nα β : Type u_1\ns : Set α\nt : Set β\n⊢ Subtype s = Subtype t\n## Action:\n  congr!"
"## Tactic State A:\ncase h.e'_2\nα β : Type u_1\ns : Set α\nt : Set β\n⊢ Subtype s = Subtype t\n## Tactic State B:\ncase h.e'_2\nα β : Type u_1\ns : Set α\nt : Set β\n⊢ Subtype s = Subtype t\n## Action:\n  guard_target = Subtype s = Subtype t"
"## Tactic State A:\ncase h.e'_2\nα β : Type u_1\ns : Set α\nt : Set β\n⊢ Subtype s = Subtype t\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact test_sorry"
"## Tactic State A:\nm n : ℕ\nh : m = n\nx : Fin m\ny : Fin n\n⊢ HEq (x + x) (y + y)\n## Tactic State B:\ncase e'_5\nm n : ℕ\nh : m = n\nx : Fin m\ny : Fin n\ne_1✝ : Fin m = Fin n\n⊢ HEq x y\n---\ncase e'_6\nm n : ℕ\nh : m = n\nx : Fin m\ny : Fin n\ne_2✝ : Fin m = Fin n\n⊢ HEq x y\n## Action:\n  congr!"
"## Tactic State A:\ncase e'_5\nm n : ℕ\nh : m = n\nx : Fin m\ny : Fin n\ne_1✝ : Fin m = Fin n\n⊢ HEq x y\n---\ncase e'_6\nm n : ℕ\nh : m = n\nx : Fin m\ny : Fin n\ne_2✝ : Fin m = Fin n\n⊢ HEq x y\n## Tactic State B:\ncase e'_5\nm n : ℕ\nh : m = n\nx : Fin m\ny : Fin n\ne_1✝ : Fin m = Fin n\n⊢ HEq x y\n---\ncase e'_6\nm n : ℕ\nh : m = n\nx : Fin m\ny : Fin n\ne_2✝ : Fin m = Fin n\n⊢ HEq x y\n## Action:\n  guard_target = HEq x y"
"## Tactic State A:\ncase e'_5\nm n : ℕ\nh : m = n\nx : Fin m\ny : Fin n\ne_1✝ : Fin m = Fin n\n⊢ HEq x y\n---\ncase e'_6\nm n : ℕ\nh : m = n\nx : Fin m\ny : Fin n\ne_2✝ : Fin m = Fin n\n⊢ HEq x y\n## Tactic State B:\ncase e'_6\nm n : ℕ\nh : m = n\nx : Fin m\ny : Fin n\ne_2✝ : Fin m = Fin n\n⊢ HEq x y\n## Action:\n  exact test_sorry"
"## Tactic State A:\ncase e'_6\nm n : ℕ\nh : m = n\nx : Fin m\ny : Fin n\ne_2✝ : Fin m = Fin n\n⊢ HEq x y\n## Tactic State B:\ncase e'_6\nm n : ℕ\nh : m = n\nx : Fin m\ny : Fin n\ne_2✝ : Fin m = Fin n\n⊢ HEq x y\n## Action:\n  guard_target = HEq x y"
"## Tactic State A:\ncase e'_6\nm n : ℕ\nh : m = n\nx : Fin m\ny : Fin n\ne_2✝ : Fin m = Fin n\n⊢ HEq x y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact test_sorry"
"## Tactic State A:\np q r : Prop\n⊢ p ∧ q ↔ p ∧ r\n## Tactic State B:\ncase a.h.e'_2.a\np q r : Prop\n⊢ q ↔ r\n## Action:\n  congr!"
"## Tactic State A:\ncase a.h.e'_2.a\np q r : Prop\n⊢ q ↔ r\n## Tactic State B:\ncase a.h.e'_2.a\np q r : Prop\n⊢ q ↔ r\n## Action:\n  guard_target = q ↔ r"
"## Tactic State A:\ncase a.h.e'_2.a\np q r : Prop\n⊢ q ↔ r\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact test_sorry"
"## Tactic State A:\nα β : Type u_1\ninst1 : Add α\ninst2 : Add β\nx : α\ny : β\n⊢ HEq (x + x) (y + y)\n## Tactic State B:\nα β : Type u_1\ninst1 : Add α\ninst2 : Add β\nx : α\ny : β\n⊢ HEq (x + x) (y + y)\n## Action:\n  congr!"
"## Tactic State A:\nα β : Type u_1\ninst1 : Add α\ninst2 : Add β\nx : α\ny : β\n⊢ HEq (x + x) (y + y)\n## Tactic State B:\nα β : Type u_1\ninst1 : Add α\ninst2 : Add β\nx : α\ny : β\n⊢ HEq (x + x) (y + y)\n## Action:\n  guard_target = HEq (x + x) (y + y)"
"## Tactic State A:\nα β : Type u_1\ninst1 : Add α\ninst2 : Add β\nx : α\ny : β\n⊢ HEq (x + x) (y + y)\n## Tactic State B:\nα β : Type u_1\ninst1 : Add α\ninst2 : Add β\nx : α\ny : β\nthis : α = β\n⊢ HEq (x + x) (y + y)\n## Action:\n  -- But with typeEqs we can get it to generate the congruence anyway:"
"## Tactic State A:\nα β : Type u_1\ninst1 : Add α\ninst2 : Add β\nx : α\ny : β\nthis : α = β\n⊢ HEq (x + x) (y + y)\n## Tactic State B:\nα β : Type u_1\ninst1 : Add α\ninst2 : Add β\nx : α\ny : β\nthis✝ : α = β\nthis : HEq inst1 inst2\n⊢ HEq (x + x) (y + y)\n## Action:\n  have : α = β := test_sorry"
"## Tactic State A:\nα β : Type u_1\ninst1 : Add α\ninst2 : Add β\nx : α\ny : β\nthis✝ : α = β\nthis : HEq inst1 inst2\n⊢ HEq (x + x) (y + y)\n## Tactic State B:\ncase e'_5\nα β : Type u_1\ninst1 : Add α\ninst2 : Add β\nx : α\ny : β\nthis✝ : α = β\nthis : HEq inst1 inst2\n⊢ HEq x y\n---\ncase e'_6\nα β : Type u_1\ninst1 : Add α\ninst2 : Add β\nx : α\ny : β\nthis✝ : α = β\nthis : HEq inst1 inst2\n⊢ HEq x y\n## Action:\n  have : HEq inst1 inst2 := test_sorry"
"## Tactic State A:\ncase e'_5\nα β : Type u_1\ninst1 : Add α\ninst2 : Add β\nx : α\ny : β\nthis✝ : α = β\nthis : HEq inst1 inst2\n⊢ HEq x y\n---\ncase e'_6\nα β : Type u_1\ninst1 : Add α\ninst2 : Add β\nx : α\ny : β\nthis✝ : α = β\nthis : HEq inst1 inst2\n⊢ HEq x y\n## Tactic State B:\ncase e'_5\nα β : Type u_1\ninst1 : Add α\ninst2 : Add β\nx : α\ny : β\nthis✝ : α = β\nthis : HEq inst1 inst2\n⊢ HEq x y\n---\ncase e'_6\nα β : Type u_1\ninst1 : Add α\ninst2 : Add β\nx : α\ny : β\nthis✝ : α = β\nthis : HEq inst1 inst2\n⊢ HEq x y\n## Action:\n  congr! (config := { typeEqs := true })"
"## Tactic State A:\ncase e'_5\nα β : Type u_1\ninst1 : Add α\ninst2 : Add β\nx : α\ny : β\nthis✝ : α = β\nthis : HEq inst1 inst2\n⊢ HEq x y\n---\ncase e'_6\nα β : Type u_1\ninst1 : Add α\ninst2 : Add β\nx : α\ny : β\nthis✝ : α = β\nthis : HEq inst1 inst2\n⊢ HEq x y\n## Tactic State B:\ncase e'_6\nα β : Type u_1\ninst1 : Add α\ninst2 : Add β\nx : α\ny : β\nthis✝ : α = β\nthis : HEq inst1 inst2\n⊢ HEq x y\n## Action:\n  guard_target = HEq x y"
"## Tactic State A:\ncase e'_6\nα β : Type u_1\ninst1 : Add α\ninst2 : Add β\nx : α\ny : β\nthis✝ : α = β\nthis : HEq inst1 inst2\n⊢ HEq x y\n## Tactic State B:\ncase e'_6\nα β : Type u_1\ninst1 : Add α\ninst2 : Add β\nx : α\ny : β\nthis✝ : α = β\nthis : HEq inst1 inst2\n⊢ HEq x y\n## Action:\n  exact test_sorry"
"## Tactic State A:\ncase e'_6\nα β : Type u_1\ninst1 : Add α\ninst2 : Add β\nx : α\ny : β\nthis✝ : α = β\nthis : HEq inst1 inst2\n⊢ HEq x y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  guard_target = HEq x y"
"## Tactic State A:\nprime : ℕ → Prop\nn : ℕ\n⊢ prime (2 * n + 1) = prime (n + n + 1)\n## Tactic State B:\ncase h.e'_1.h.e'_5.h.e\nprime : ℕ → Prop\nn : ℕ\n⊢ HMul.hMul = HAdd.hAdd\n---\ncase h.e'_1.h.e'_5.h.e'_1\nprime : ℕ → Prop\nn : ℕ\n⊢ 2 = n\n## Action:\n  congr!"
"## Tactic State A:\ncase h.e'_1.h.e'_5.h.e\nprime : ℕ → Prop\nn : ℕ\n⊢ HMul.hMul = HAdd.hAdd\n---\ncase h.e'_1.h.e'_5.h.e'_1\nprime : ℕ → Prop\nn : ℕ\n⊢ 2 = n\n## Tactic State B:\ncase h.e'_1.h.e'_5.h.e\nprime : ℕ → Prop\nn : ℕ\n⊢ HMul.hMul = HAdd.hAdd\n## Action:\n  · guard_target =ₛ (HMul.hMul : Nat → Nat → Nat) = HAdd.hAdd"
"## Tactic State A:\ncase h.e'_1.h.e'_5.h.e\nprime : ℕ → Prop\nn : ℕ\n⊢ HMul.hMul = HAdd.hAdd\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    exact test_sorry"
"## Tactic State A:\n\n## Tactic State B:\ncase h.e'_1.h.e'_5.h.e'_1\nprime : ℕ → Prop\nn : ℕ\n⊢ 2 = n\n## Action:\n  · guard_target = 2 = n"
"## Tactic State A:\ncase h.e'_1.h.e'_5.h.e'_1\nprime : ℕ → Prop\nn : ℕ\n⊢ 2 = n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    exact test_sorry"
"## Tactic State A:\nprime : ℕ → Prop\nn : ℕ\n⊢ prime (2 * n + 1) = prime (n + n + 1)\n## Tactic State B:\ncase h.e'_1.h.e'_5.h.e\nprime : ℕ → Prop\nn : ℕ\n⊢ (fun a a_1 => a * a_1) = fun a a_1 => a + a_1\n---\ncase h.e'_1.h.e'_5.h.e'_1\nprime : ℕ → Prop\nn : ℕ\n⊢ 2 = n\n## Action:\n  congr! (config := {etaExpand := true})"
"## Tactic State A:\ncase h.e'_1.h.e'_5.h.e\nprime : ℕ → Prop\nn : ℕ\n⊢ (fun a a_1 => a * a_1) = fun a a_1 => a + a_1\n---\ncase h.e'_1.h.e'_5.h.e'_1\nprime : ℕ → Prop\nn : ℕ\n⊢ 2 = n\n## Tactic State B:\ncase h.e'_1.h.e'_5.h.e\nprime : ℕ → Prop\nn : ℕ\n⊢ (fun a a_1 => a * a_1) = fun a a_1 => a + a_1\n## Action:\n  · guard_target =ₛ (fun (x y : Nat) => x * y) = (fun (x y : Nat) => x + y)"
"## Tactic State A:\ncase h.e'_1.h.e'_5.h.e\nprime : ℕ → Prop\nn : ℕ\n⊢ (fun a a_1 => a * a_1) = fun a a_1 => a + a_1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    exact test_sorry"
"## Tactic State A:\n\n## Tactic State B:\ncase h.e'_1.h.e'_5.h.e'_1\nprime : ℕ → Prop\nn : ℕ\n⊢ 2 = n\n## Action:\n  · guard_target = 2 = n"
"## Tactic State A:\ncase h.e'_1.h.e'_5.h.e'_1\nprime : ℕ → Prop\nn : ℕ\n⊢ 2 = n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    exact test_sorry"
"## Tactic State A:\nprime : ℕ → Prop\nn : ℕ\n⊢ prime (2 * n + 1) = prime (n + n + 1)\n## Tactic State B:\ncase h.e'_1.h.e'_5\nprime : ℕ → Prop\nn : ℕ\n⊢ 2 * n = n + n\n## Action:\n  congr! 2"
"## Tactic State A:\ncase h.e'_1.h.e'_5\nprime : ℕ → Prop\nn : ℕ\n⊢ 2 * n = n + n\n## Tactic State B:\ncase h.e'_1.h.e'_5\nprime : ℕ → Prop\nn : ℕ\n⊢ 2 * n = n + n\n## Action:\n  guard_target = 2 * n = n + n"
"## Tactic State A:\ncase h.e'_1.h.e'_5\nprime : ℕ → Prop\nn : ℕ\n⊢ 2 * n = n + n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact test_sorry"
"## Tactic State A:\nprime : ℕ → Prop\nn : ℕ\n⊢ prime (2 * n + 1) = prime (n + n + 1)\n## Tactic State B:\ncase h.e'_1.h.e'_5\nprime : ℕ → Prop\nn : ℕ\n⊢ 2 * n = n + n\n## Action:\n  congr! (config := .unfoldSameFun)"
"## Tactic State A:\ncase h.e'_1.h.e'_5\nprime : ℕ → Prop\nn : ℕ\n⊢ 2 * n = n + n\n## Tactic State B:\ncase h.e'_1.h.e'_5\nprime : ℕ → Prop\nn : ℕ\n⊢ 2 * n = n + n\n## Action:\n  guard_target = 2 * n = n + n"
"## Tactic State A:\ncase h.e'_1.h.e'_5\nprime : ℕ → Prop\nn : ℕ\n⊢ 2 * n = n + n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact test_sorry"
"## Tactic State A:\nx✝ : Sort u_1\npartiallyApplied : x✝\n⊢ sorry = sorry\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  congr!"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  decide"
"## Tactic State A:\nx✝ : Sort u_1\nwalk : x✝\nα : Sort u_2\nβ : Sort u_3\nw : sorry\nw' : sorry\nf : α → β\n⊢ HEq sorry sorry\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  congr!"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  guard_target = x = x'"
"## Tactic State A:\nx✝ : Sort u_1\nwalk : x✝\nα : Sort u_2\nβ : Sort u_3\nw : sorry\nw' : sorry\nf : α → β\n⊢ HEq sorry sorry\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  congr! with rfl rfl"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  guard_target = x = x'"
"## Tactic State A:\nx✝ : Sort u_1\nMySet : x✝\nα : Sort u_2\nβ : Sort u_3\ns : sorry\nt : sorry\nf g : α → β\nh1 : s = t\nh2 : f = g\n⊢ sorry = sorry\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  congr!"
"## Tactic State A:\nc : Prop → Prop → Prop → Prop\nx x' y z z' : Prop\nh₀ : x ↔ x'\nh₁ : z ↔ z'\n⊢ c x y z ↔ c x' y z'\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  congr!"
"## Tactic State A:\nα : Sort u_1\nβ : Sort u_2\nγ : Sort u_3\nδ : Sort u_4\nF : {α : Sort u_1} → {β : Sort u_2} → (α → β) → γ → δ\nf g : α → β\ns : γ\nh : ∀ (x : α), f x = g x\n⊢ F f s = F g s\n## Tactic State B:\ncase h.e'_3\nα : Sort u_1\nβ : Sort u_2\nγ : Sort u_3\nδ : Sort u_4\nF : {α : Sort u_1} → {β : Sort u_2} → (α → β) → γ → δ\nf g : α → β\ns : γ\nh : ∀ (x : α), f x = g x\n⊢ f = g\n## Action:\n  congr!"
"## Tactic State A:\ncase h.e'_3\nα : Sort u_1\nβ : Sort u_2\nγ : Sort u_3\nδ : Sort u_4\nF : {α : Sort u_1} → {β : Sort u_2} → (α → β) → γ → δ\nf g : α → β\ns : γ\nh : ∀ (x : α), f x = g x\n⊢ f = g\n## Tactic State B:\ncase h.e'_3.h\nα : Sort u_1\nβ : Sort u_2\nγ : Sort u_3\nδ : Sort u_4\nF : {α : Sort u_1} → {β : Sort u_2} → (α → β) → γ → δ\nf g : α → β\ns : γ\nh : ∀ (x : α), f x = g x\nx✝ : α\n⊢ f x✝ = g x✝\n## Action:\n  funext"
"## Tactic State A:\ncase h.e'_3.h\nα : Sort u_1\nβ : Sort u_2\nγ : Sort u_3\nδ : Sort u_4\nF : {α : Sort u_1} → {β : Sort u_2} → (α → β) → γ → δ\nf g : α → β\ns : γ\nh : ∀ (x : α), f x = g x\nx✝ : α\n⊢ f x✝ = g x✝\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  apply h"
"## Tactic State A:\nα : Sort u_1\nβ : Sort u_2\nf : { x // x = x } → β\nx y : { x // x = x }\nh : ↑x = ↑y\n⊢ f x = f y\n## Tactic State B:\ncase h.e'_1\nα : Sort u_1\nβ : Sort u_2\nf : { x // x = x } → β\nx y : { x // x = x }\nh : ↑x = ↑y\n⊢ x = y\n## Action:\n  congr! 1"
"## Tactic State A:\ncase h.e'_1\nα : Sort u_1\nβ : Sort u_2\nf : { x // x = x } → β\nx y : { x // x = x }\nh : ↑x = ↑y\n⊢ x = y\n## Tactic State B:\ncase h.e'_1.a\nα : Sort u_1\nβ : Sort u_2\nf : { x // x = x } → β\nx y : { x // x = x }\nh : ↑x = ↑y\n⊢ ↑x = ↑y\n## Action:\n  ext1"
"## Tactic State A:\ncase h.e'_1.a\nα : Sort u_1\nβ : Sort u_2\nf : { x // x = x } → β\nx y : { x // x = x }\nh : ↑x = ↑y\n⊢ ↑x = ↑y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h"
"## Tactic State A:\nα : Sort u_1\nβ : Sort u_2\nF : { f // f = f } → β\nf g : { f // f = f }\nh : ∀ (x : α), ↑f x = ↑g x\n⊢ F f = F g\n## Tactic State B:\ncase h.e'_1\nα : Sort u_1\nβ : Sort u_2\nF : { f // f = f } → β\nf g : { f // f = f }\nh : ∀ (x : α), ↑f x = ↑g x\n⊢ f = g\n## Action:\n  congr!"
"## Tactic State A:\ncase h.e'_1\nα : Sort u_1\nβ : Sort u_2\nF : { f // f = f } → β\nf g : { f // f = f }\nh : ∀ (x : α), ↑f x = ↑g x\n⊢ f = g\n## Tactic State B:\ncase h.e'_1.a.h\nα : Sort u_1\nβ : Sort u_2\nF : { f // f = f } → β\nf g : { f // f = f }\nh : ∀ (x : α), ↑f x = ↑g x\nx : α\n⊢ ↑f x = ↑g x\n## Action:\n  ext x"
"## Tactic State A:\ncase h.e'_1.a.h\nα : Sort u_1\nβ : Sort u_2\nF : { f // f = f } → β\nf g : { f // f = f }\nh : ∀ (x : α), ↑f x = ↑g x\nx : α\n⊢ ↑f x = ↑g x\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  apply h"
"## Tactic State A:\nls : List ℕ\n⊢ List.map (fun x => (List.map (fun y => 1 + y) ls).sum + 1) ls =\n    List.map (fun x => (List.map (fun y => y.succ) ls).sum + 1) ls\n## Tactic State B:\ncase h.e'_3.h.h.e'_5.h.e'_4.h.e'_3.h\nls : List ℕ\ny : ℕ\n⊢ 1 + y = y.succ\n## Action:\n  congr! 6 with - y"
"## Tactic State A:\ncase h.e'_3.h.h.e'_5.h.e'_4.h.e'_3.h\nls : List ℕ\ny : ℕ\n⊢ 1 + y = y.succ\n## Tactic State B:\ncase h.e'_3.h.h.e'_5.h.e'_4.h.e'_3.h\nls : List ℕ\ny : ℕ\n⊢ 1 + y = y.succ\n## Action:\n  guard_target = 1 + y = y.succ"
"## Tactic State A:\ncase h.e'_3.h.h.e'_5.h.e'_4.h.e'_3.h\nls : List ℕ\ny : ℕ\n⊢ 1 + y = y.succ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rw [Nat.add_comm]"
"## Tactic State A:\nls : List ℕ\nf g : ℕ → ℕ\nh : ∀ (x : ℕ), f x = g x\n⊢ List.map (fun x => f x + 3) ls = List.map (fun x => g x + 3) ls\n## Tactic State B:\ncase h.e'_3.h.h.e'_5\nls : List ℕ\nf g : ℕ → ℕ\nh : ∀ (x : ℕ), f x = g x\nx : ℕ\n⊢ f x = g x\n## Action:\n  congr! 3 with x -- it's a little too powerful and will get to `f = g`"
"## Tactic State A:\ncase h.e'_3.h.h.e'_5\nls : List ℕ\nf g : ℕ → ℕ\nh : ∀ (x : ℕ), f x = g x\nx : ℕ\n⊢ f x = g x\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h x"
"## Tactic State A:\nα : Sort u_1\na b : α\nh : false = true\n⊢ a = b\n## Tactic State B:\nα : Sort u_1\na b : α\nh : false = true\n⊢ a = b\n## Action:\n  fail_if_success { congr! }"
"## Tactic State A:\nα : Sort u_1\na b : α\nh : false = true\n⊢ a = b\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cases h"
"## Tactic State A:\nx✝ : Sort u_1\ng : x✝\nx y z : ℕ\nh : x = z\nhy : y = 2\n⊢ 1 + x + y = sorry + 2\n## Tactic State B:\ncase h.e'_5\nx✝ : Sort u_1\ng : x✝\nx y z : ℕ\nh : x = z\nhy : y = 2\n⊢ 1 + x = sorry\n## Action:\n  congr!"
"## Tactic State A:\ncase h.e'_5\nx✝ : Sort u_1\ng : x✝\nx y z : ℕ\nh : x = z\nhy : y = 2\n⊢ 1 + x = sorry\n## Tactic State B:\ncase h.e'_5\nx✝ : Sort u_1\ng : x✝\nx y z : ℕ\nh : x = z\nhy : y = 2\n⊢ 1 + x = sorry\n## Action:\n  guard_target = HAdd.hAdd 1 = g"
"## Tactic State A:\nFintype : Type → Type\nα β : Type\ninst : Fintype α\ninst' : Fintype β\n⊢ HEq inst inst'\n## Tactic State B:\nFintype : Type → Type\nα β : Type\ninst : Fintype α\ninst' : Fintype β\n⊢ HEq inst inst'\n## Action:\n  congr!"
"## Tactic State A:\nFintype : Type → Type\nα β : Type\ninst : Fintype α\ninst' : Fintype β\n⊢ HEq inst inst'\n## Tactic State B:\nFintype : Type → Type\nα β : Type\ninst : Fintype α\ninst' : Fintype β\n⊢ HEq inst inst'\n## Action:\n  guard_target = HEq inst inst'"
"## Tactic State A:\nFintype : Type → Type\nα β : Type\ninst : Fintype α\ninst' : Fintype β\n⊢ HEq inst inst'\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact test_sorry"
"## Tactic State A:\nFintype : Type → Type\ninst✝ : ∀ (γ : Type), Subsingleton (Fintype γ)\nα β : Type\ninst : Fintype α\ninst' : Fintype β\n⊢ HEq inst inst'\n## Tactic State B:\ncase h.e'_1\nFintype : Type → Type\ninst✝¹ : ∀ (γ : Type), Subsingleton (Fintype γ)\nα β : Type\ninst✝ : Fintype α\ninst' : Fintype β\ninst : ∀ (γ : Type), Lean.Meta.FastSubsingleton (Fintype γ)\n⊢ α = β\n## Action:\n  congr!"
"## Tactic State A:\ncase h.e'_1\nFintype : Type → Type\ninst✝¹ : ∀ (γ : Type), Subsingleton (Fintype γ)\nα β : Type\ninst✝ : Fintype α\ninst' : Fintype β\ninst : ∀ (γ : Type), Lean.Meta.FastSubsingleton (Fintype γ)\n⊢ α = β\n## Tactic State B:\ncase h.e'_1\nFintype : Type → Type\ninst✝¹ : ∀ (γ : Type), Subsingleton (Fintype γ)\nα β : Type\ninst✝ : Fintype α\ninst' : Fintype β\ninst : ∀ (γ : Type), Lean.Meta.FastSubsingleton (Fintype γ)\n⊢ α = β\n## Action:\n  guard_target = α = β"
"## Tactic State A:\ncase h.e'_1\nFintype : Type → Type\ninst✝¹ : ∀ (γ : Type), Subsingleton (Fintype γ)\nα β : Type\ninst✝ : Fintype α\ninst' : Fintype β\ninst : ∀ (γ : Type), Lean.Meta.FastSubsingleton (Fintype γ)\n⊢ α = β\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact test_sorry"
"## Tactic State A:\nn m : ℕ\n⊢ n = m → 3 + n = m + 3\n## Tactic State B:\nn : ℕ\n⊢ 3 + n = n + 3\n## Action:\n  congr! 0 with rfl"
"## Tactic State A:\nn : ℕ\n⊢ 3 + n = n + 3\n## Tactic State B:\nn : ℕ\n⊢ 3 + n = n + 3\n## Action:\n  guard_target = 3 + n = n + 3"
"## Tactic State A:\nn : ℕ\n⊢ 3 + n = n + 3\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  apply add_comm"
"## Tactic State A:\nx y x' y' : ℕ\nhx : x = x'\nhy : y = y'\n⊢ x + y = x' + y'\n## Tactic State B:\ncase h.e'_5\nx y x' y' : ℕ\nhx : x = x'\nhy : y = y'\n⊢ x = x'\n---\ncase h.e'_6\nx y x' y' : ℕ\nhx : x = x'\nhy : y = y'\n⊢ y = y'\n## Action:\n  congr! (config := { closePre := false, closePost := false })"
"## Tactic State A:\ncase h.e'_5\nx y x' y' : ℕ\nhx : x = x'\nhy : y = y'\n⊢ x = x'\n---\ncase h.e'_6\nx y x' y' : ℕ\nhx : x = x'\nhy : y = y'\n⊢ y = y'\n## Tactic State B:\ncase h.e'_6\nx y x' y' : ℕ\nhx : x = x'\nhy : y = y'\n⊢ y = y'\n## Action:\n  exact hx"
"## Tactic State A:\ncase h.e'_6\nx y x' y' : ℕ\nhx : x = x'\nhy : y = y'\n⊢ y = y'\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact hy"
"## Tactic State A:\nx y x' : ℕ\nhx : id x = id x'\n⊢ x + y = x' + y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  congr!"
"## Tactic State A:\nx y x' : ℕ\nhx : id x = id x'\n⊢ x + y = x' + y\n## Tactic State B:\ncase h.e'_5\nx y x' : ℕ\nhx : id x = id x'\n⊢ x = x'\n## Action:\n  congr! (config := { closePost := false })"
"## Tactic State A:\ncase h.e'_5\nx y x' : ℕ\nhx : id x = id x'\n⊢ x = x'\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact hx"
"## Tactic State A:\n⊢ ?m.58 = id\n## Tactic State B:\n⊢ ?m.58 = id\n## Action:\n  ⟨?_, by"
"## Tactic State A:\n⊢ ?m.58 = id\n## Tactic State B:\ncase h\nx : ℕ\n⊢ ?m.58 x = id x\n## Action:\n    -- prevents `rfl` from solving for `?m` in `?m = id`:"
"## Tactic State A:\ncase h\nx : ℕ\n⊢ ?m.58 x = id x\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    congr! (config := { closePre := false, closePost := false })"
"## Tactic State A:\nα✝ : Sort u_1\nz y x : α✝\nh : z = y\n⊢ x = y ∨ x = z → x = y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  congr! with (rfl|rfl)"
"## Tactic State A:\nα : Type u_1\ninst✝¹ : AddCommMonoid α\ninst✝ : PartialOrder α\na b c d e f g : α\n⊢ a + b + (c + d) + (e + f) + g ≤ a + d + e + f + c + g + b\n## Tactic State B:\ncase h.e'_3\nα : Type u_1\ninst✝¹ : AddCommMonoid α\ninst✝ : PartialOrder α\na b c d e f g : α\n⊢ a + b + (c + d) + (e + f) + g = a + d + e + f + c + g + b\n---\ncase convert_2\nα : Type u_1\ninst✝¹ : AddCommMonoid α\ninst✝ : PartialOrder α\na b c d e f g : α\n⊢ a + d + e + f + c + g + b ≤ a + d + e + f + c + g + b\n## Action:\n  ac_change a + d + e + f + c + g + b ≤ _; rfl"
"## Tactic State A:\nα : Type u_1\ninst✝¹ : AddCommMonoid α\ninst✝ : PartialOrder α\na b c d e f g : α\n⊢ a + b + (c + d) + (e + f) + g ≤ a + d + e + f + c + b + g\n## Tactic State B:\ncase h.e'_3\nα : Type u_1\ninst✝¹ : AddCommMonoid α\ninst✝ : PartialOrder α\na b c d e f g : α\n⊢ a + b + (c + d) + (e + f) + g = a + d + e + f + c + g + b\n---\ncase h.e'_4\nα : Type u_1\ninst✝¹ : AddCommMonoid α\ninst✝ : PartialOrder α\na b c d e f g : α\n⊢ a + d + e + f + c + b + g = a + d + e + f + c + g + b\n---\nα : Type u_1\ninst✝¹ : AddCommMonoid α\ninst✝ : PartialOrder α\na b c d e f g : α\n⊢ a + d + e + f + c + g + b ≤ a + d + e + f + c + g + b\n## Action:\n  ac_change a + d + e + f + c + g + b ≤ a + d + e + f + c + g + b"
"## Tactic State A:\ncase h.e'_3\nα : Type u_1\ninst✝¹ : AddCommMonoid α\ninst✝ : PartialOrder α\na b c d e f g : α\n⊢ a + b + (c + d) + (e + f) + g = a + d + e + f + c + g + b\n---\ncase h.e'_4\nα : Type u_1\ninst✝¹ : AddCommMonoid α\ninst✝ : PartialOrder α\na b c d e f g : α\n⊢ a + d + e + f + c + b + g = a + d + e + f + c + g + b\n---\nα : Type u_1\ninst✝¹ : AddCommMonoid α\ninst✝ : PartialOrder α\na b c d e f g : α\n⊢ a + d + e + f + c + g + b ≤ a + d + e + f + c + g + b\n## Tactic State B:\ncase h.e'_3\nα : Type u_1\ninst✝¹ : AddCommMonoid α\ninst✝ : PartialOrder α\na b c d e f g : α\n⊢ a + b + (c + d) + (e + f) + g = a + d + e + f + c + g + b\n---\ncase h.e'_4\nα : Type u_1\ninst✝¹ : AddCommMonoid α\ninst✝ : PartialOrder α\na b c d e f g : α\n⊢ a + d + e + f + c + b + g = a + d + e + f + c + g + b\n---\nα : Type u_1\ninst✝¹ : AddCommMonoid α\ninst✝ : PartialOrder α\na b c d e f g : α\n⊢ a + d + e + f + c + g + b ≤ a + d + e + f + c + g + b\n## Action:\n  rfl"
"## Tactic State A:\n⊢ True\n## Tactic State B:\ncase intro.intro\nn : ℕ\nh : n = n\n⊢ True\n---\n⊢ ∃ n, n = n ∧ True\n## Action:\n  rsuffices ⟨n : ℕ, h : n = n, -⟩ : ∃ n : ℕ, n = n ∧ True"
"## Tactic State A:\ncase intro.intro\nn : ℕ\nh : n = n\n⊢ True\n---\n⊢ ∃ n, n = n ∧ True\n## Tactic State B:\ncase intro.intro\nn : ℕ\nh : n = n\n⊢ True\n## Action:\n  · guard_hyp n : ℕ"
"## Tactic State A:\ncase intro.intro\nn : ℕ\nh : n = n\n⊢ True\n## Tactic State B:\ncase intro.intro\nn : ℕ\nh : n = n\n⊢ True\n## Action:\n    guard_hyp h : n = n"
"## Tactic State A:\ncase intro.intro\nn : ℕ\nh : n = n\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    trivial"
"## Tactic State A:\n\n## Tactic State B:\n⊢ 0 = 0 ∧ True\n## Action:\n  · existsi 0"
"## Tactic State A:\n⊢ 0 = 0 ∧ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    simp"
"## Tactic State A:\n⊢ True\n## Tactic State B:\nthis✝ : ∃ n, n = n ∧ True\n⊢ True\n---\n⊢ ∃ n, n = n ∧ True\n## Action:\n  rsuffices : ∃ n : ℕ, n = n ∧ True"
"## Tactic State A:\nthis✝ : ∃ n, n = n ∧ True\n⊢ True\n---\n⊢ ∃ n, n = n ∧ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · trivial"
"## Tactic State A:\n\n## Tactic State B:\n⊢ 0 = 0 ∧ True\n## Action:\n  · existsi 0"
"## Tactic State A:\n⊢ 0 = 0 ∧ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    simp"
"## Tactic State A:\n⊢ True\n## Tactic State B:\ncase inl\nh : True\n⊢ True\n---\n⊢ True ∨ False\n## Action:\n  rsuffices (h : True) | ⟨⟨⟩⟩ : True ∨ False"
"## Tactic State A:\ncase inl\nh : True\n⊢ True\n---\n⊢ True ∨ False\n## Tactic State B:\ncase inl\nh : True\n⊢ True\n## Action:\n  · guard_hyp h : True"
"## Tactic State A:\ncase inl\nh : True\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    trivial"
"## Tactic State A:\n\n## Tactic State B:\ncase h\n⊢ True\n## Action:\n  · left"
"## Tactic State A:\ncase h\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    trivial"
"## Tactic State A:\nα : Type u_1\nβ : Type u_2\nx y : α × β\n⊢ True\n## Tactic State B:\ncase mk.mk.mk\nα : Type u_1\nβ : Type u_2\nx y : α × β\na : α\nb : β\nc : α\nd : β\n⊢ True\n---\nα : Type u_1\nβ : Type u_2\nx y : α × β\n⊢ (α × β) × α × β\n## Action:\n  rsuffices ⟨⟨a, b⟩, c, d⟩ : (α × β) × (α × β)"
"## Tactic State A:\ncase mk.mk.mk\nα : Type u_1\nβ : Type u_2\nx y : α × β\na : α\nb : β\nc : α\nd : β\n⊢ True\n---\nα : Type u_1\nβ : Type u_2\nx y : α × β\n⊢ (α × β) × α × β\n## Tactic State B:\ncase mk.mk.mk\nα : Type u_1\nβ : Type u_2\nx y : α × β\na : α\nb : β\nc : α\nd : β\n⊢ True\n## Action:\n  · guard_hyp a : α"
"## Tactic State A:\ncase mk.mk.mk\nα : Type u_1\nβ : Type u_2\nx y : α × β\na : α\nb : β\nc : α\nd : β\n⊢ True\n## Tactic State B:\ncase mk.mk.mk\nα : Type u_1\nβ : Type u_2\nx y : α × β\na : α\nb : β\nc : α\nd : β\n⊢ True\n## Action:\n    guard_hyp b : β"
"## Tactic State A:\ncase mk.mk.mk\nα : Type u_1\nβ : Type u_2\nx y : α × β\na : α\nb : β\nc : α\nd : β\n⊢ True\n## Tactic State B:\ncase mk.mk.mk\nα : Type u_1\nβ : Type u_2\nx y : α × β\na : α\nb : β\nc : α\nd : β\n⊢ True\n## Action:\n    guard_hyp c : α"
"## Tactic State A:\ncase mk.mk.mk\nα : Type u_1\nβ : Type u_2\nx y : α × β\na : α\nb : β\nc : α\nd : β\n⊢ True\n## Tactic State B:\ncase mk.mk.mk\nα : Type u_1\nβ : Type u_2\nx y : α × β\na : α\nb : β\nc : α\nd : β\n⊢ True\n## Action:\n    guard_hyp d : β"
"## Tactic State A:\ncase mk.mk.mk\nα : Type u_1\nβ : Type u_2\nx y : α × β\na : α\nb : β\nc : α\nd : β\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    trivial"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · exact ⟨x, y⟩"
"## Tactic State A:\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\n⊢ True\n## Tactic State B:\ncase mk.inl.inl\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\na c : α\n⊢ True\n---\ncase mk.inl.inr\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\na : α\nd : β\n⊢ True\n---\ncase mk.inr.inl\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\nb : β\nc : α\n⊢ True\n---\ncase mk.inr.inr\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\nb d : β\n⊢ True\n---\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\n⊢ (α ⊕ β) × (α ⊕ β)\n## Action:\n  rsuffices ⟨a|b, c|d⟩ : (α ⊕ β) × (α ⊕ β)"
"## Tactic State A:\ncase mk.inl.inl\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\na c : α\n⊢ True\n---\ncase mk.inl.inr\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\na : α\nd : β\n⊢ True\n---\ncase mk.inr.inl\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\nb : β\nc : α\n⊢ True\n---\ncase mk.inr.inr\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\nb d : β\n⊢ True\n---\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\n⊢ (α ⊕ β) × (α ⊕ β)\n## Tactic State B:\ncase mk.inl.inl\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\na c : α\n⊢ True\n## Action:\n  · guard_hyp a : α"
"## Tactic State A:\ncase mk.inl.inl\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\na c : α\n⊢ True\n## Tactic State B:\ncase mk.inl.inl\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\na c : α\n⊢ True\n## Action:\n    guard_hyp c : α"
"## Tactic State A:\ncase mk.inl.inl\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\na c : α\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    trivial"
"## Tactic State A:\n\n## Tactic State B:\ncase mk.inl.inr\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\na : α\nd : β\n⊢ True\n## Action:\n  · guard_hyp a : α"
"## Tactic State A:\ncase mk.inl.inr\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\na : α\nd : β\n⊢ True\n## Tactic State B:\ncase mk.inl.inr\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\na : α\nd : β\n⊢ True\n## Action:\n    guard_hyp d : β"
"## Tactic State A:\ncase mk.inl.inr\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\na : α\nd : β\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    trivial"
"## Tactic State A:\n\n## Tactic State B:\ncase mk.inr.inl\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\nb : β\nc : α\n⊢ True\n## Action:\n  · guard_hyp b : β"
"## Tactic State A:\ncase mk.inr.inl\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\nb : β\nc : α\n⊢ True\n## Tactic State B:\ncase mk.inr.inl\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\nb : β\nc : α\n⊢ True\n## Action:\n    guard_hyp c : α"
"## Tactic State A:\ncase mk.inr.inl\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\nb : β\nc : α\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    trivial"
"## Tactic State A:\n\n## Tactic State B:\ncase mk.inr.inr\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\nb d : β\n⊢ True\n## Action:\n  · guard_hyp b : β"
"## Tactic State A:\ncase mk.inr.inr\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\nb d : β\n⊢ True\n## Tactic State B:\ncase mk.inr.inr\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\nb d : β\n⊢ True\n## Action:\n    guard_hyp d : β"
"## Tactic State A:\ncase mk.inr.inr\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\nb d : β\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    trivial"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact ⟨x, y⟩"
"## Tactic State A:\nα : Type u_1\nV : Set α\nw : True → ∃ p, p ∈ sorry ∩ sorry\n⊢ True\n## Tactic State B:\ncase intro\nα : Type u_1\nV : Set α\nw : True → ∃ p, p ∈ sorry ∩ sorry\nw✝ : ?m.625\nh✝ : w✝ ∈ sorry ∩ sorry\n⊢ True\n---\nα : Type u_1\nV : Set α\nw : True → ∃ p, p ∈ sorry ∩ sorry\n⊢ ∃ p, p ∈ sorry ∩ sorry\n## Action:\n  rsuffices ⟨_, _⟩ : ∃ p, p ∈ (V.foo V) ∩ (V.foo V)"
"## Tactic State A:\ncase intro\nα : Type u_1\nV : Set α\nw : True → ∃ p, p ∈ sorry ∩ sorry\nw✝ : ?m.625\nh✝ : w✝ ∈ sorry ∩ sorry\n⊢ True\n---\nα : Type u_1\nV : Set α\nw : True → ∃ p, p ∈ sorry ∩ sorry\n⊢ ∃ p, p ∈ sorry ∩ sorry\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · trivial"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · exact w trivial"
"## Tactic State A:\na : ℕ\nb : ℤ\n⊢ ℤ × ℕ\n## Tactic State B:\nc : ℕ\nd : ℤ\n⊢ ℤ × ℕ\n## Action:\n  rename' a => c, b => d"
"## Tactic State A:\nc : ℕ\nd : ℤ\n⊢ ℤ × ℕ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact (d, c)"
"## Tactic State A:\na : ℕ\nb : ℤ\n⊢ ℤ × ℕ\n## Tactic State B:\nb : ℕ\na : ℤ\n⊢ ℤ × ℕ\n## Action:\n  rename' a => b, b => a"
"## Tactic State A:\nb : ℕ\na : ℤ\n⊢ ℤ × ℕ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact (a, b)"
"## Tactic State A:\na b : ℕ∞\nh : a = b\n⊢ a - b = b - a\n## Tactic State B:\ncase coe.coe\na b : ℕ\nh : a = b\n⊢ a - b = b - a\n## Action:\n  enat_to_nat"
"## Tactic State A:\ncase coe.coe\na b : ℕ\nh : a = b\n⊢ a - b = b - a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  omega"
"## Tactic State A:\na b : ℕ∞\nh : a ≤ b\n⊢ a - b < b + 1\n## Tactic State B:\ncase coe.coe\na b : ℕ\nh : a ≤ b\n⊢ a - b < b + 1\n## Action:\n  enat_to_nat"
"## Tactic State A:\ncase coe.coe\na b : ℕ\nh : a ≤ b\n⊢ a - b < b + 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  omega"
"## Tactic State A:\na b : ℕ∞\nh : a ≤ b\n⊢ a - 2 * b ≤ b + 1\n## Tactic State B:\ncase coe.coe\na b : ℕ\nh : a ≤ b\n⊢ a - 2 * b ≤ b + 1\n## Action:\n  enat_to_nat"
"## Tactic State A:\ncase coe.coe\na b : ℕ\nh : a ≤ b\n⊢ a - 2 * b ≤ b + 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  omega"
"## Tactic State A:\na b c : ℕ∞\nhab : a ≥ b\nhbc : b ≥ c\n⊢ a ≥ c\n## Tactic State B:\ncase coe.coe.coe\na b c : ℕ\nhab : b ≤ a\nhbc : c ≤ b\n⊢ c ≤ a\n## Action:\n  enat_to_nat"
"## Tactic State A:\ncase coe.coe.coe\na b c : ℕ\nhab : b ≤ a\nhbc : c ≤ b\n⊢ c ≤ a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  omega"
"## Tactic State A:\na b : ℕ∞\nh : a = b\n⊢ a - b = b - a\n## Tactic State B:\na✝ b : ℕ∞\nh : a✝ = b\na : ℤ := 42\n⊢ a✝ - b = b - a✝\n## Action:\n  -- to test if the tactic works with inaccessible names"
"## Tactic State A:\na✝ b : ℕ∞\nh : a✝ = b\na : ℤ := 42\n⊢ a✝ - b = b - a✝\n## Tactic State B:\na✝ b✝ : ℕ∞\nh : a✝ = b✝\na : ℤ := 42\nb : ℤ := 32\n⊢ a✝ - b✝ = b✝ - a✝\n## Action:\n  let a : ℤ := 42"
"## Tactic State A:\na✝ b✝ : ℕ∞\nh : a✝ = b✝\na : ℤ := 42\nb : ℤ := 32\n⊢ a✝ - b✝ = b✝ - a✝\n## Tactic State B:\ncase coe.coe\na : ℤ := 42\nb : ℤ := 32\na✝¹ a✝ : ℕ\nh : a✝¹ = a✝\n⊢ a✝¹ - a✝ = a✝ - a✝¹\n## Action:\n  let b : ℤ := 32"
"## Tactic State A:\ncase coe.coe\na : ℤ := 42\nb : ℤ := 32\na✝¹ a✝ : ℕ\nh : a✝¹ = a✝\n⊢ a✝¹ - a✝ = a✝ - a✝¹\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  enat_to_nat"
"## Tactic State A:\nx : ℕ\nh : x ∈ [0, 2, 37]\n⊢ x ≤ 57\n## Tactic State B:\ncase «0»\n⊢ 0 ≤ 57\n---\ncase «1»\n⊢ 2 ≤ 57\n---\ncase «2»\n⊢ 37 ≤ 57\n## Action:\n  fin_cases h"
"## Tactic State A:\ncase «0»\n⊢ 0 ≤ 57\n---\ncase «1»\n⊢ 2 ≤ 57\n---\ncase «2»\n⊢ 37 ≤ 57\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  repeat decide"
"## Tactic State A:\nx : ℕ\nh : x ∈ [0, 2, 37]\n⊢ x = 0 ∨ x = 2 ∨ x = 37\n## Tactic State B:\ncase «0»\n⊢ 0 = 0 ∨ 0 = 2 ∨ 0 = 37\n---\ncase «1»\n⊢ 2 = 0 ∨ 2 = 2 ∨ 2 = 37\n---\ncase «2»\n⊢ 37 = 0 ∨ 37 = 2 ∨ 37 = 37\n## Action:\n  fin_cases h"
"## Tactic State A:\ncase «0»\n⊢ 0 = 0 ∨ 0 = 2 ∨ 0 = 37\n---\ncase «1»\n⊢ 2 = 0 ∨ 2 = 2 ∨ 2 = 37\n---\ncase «2»\n⊢ 37 = 0 ∨ 37 = 2 ∨ 37 = 37\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  repeat simp"
"## Tactic State A:\nx : ℕ\nh : x ∈ List.range 5\n⊢ x ≤ 4\n## Tactic State B:\ncase «0»\n⊢ 0 ≤ 4\n---\ncase «1»\n⊢ 1 ≤ 4\n---\ncase «2»\n⊢ 2 ≤ 4\n---\ncase «3»\n⊢ 3 ≤ 4\n---\ncase «4»\n⊢ 4 ≤ 4\n## Action:\n  fin_cases h"
"## Tactic State A:\ncase «0»\n⊢ 0 ≤ 4\n---\ncase «1»\n⊢ 1 ≤ 4\n---\ncase «2»\n⊢ 2 ≤ 4\n---\ncase «3»\n⊢ 3 ≤ 4\n---\ncase «4»\n⊢ 4 ≤ 4\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  repeat decide"
"## Tactic State A:\np : Fin 4 → Prop\ni : Fin 4\nh : p i\n⊢ p i\n## Tactic State B:\ncase «0»\np : Fin 4 → Prop\nh : p ((fun i => i) ⟨0, ⋯⟩)\n⊢ p ((fun i => i) ⟨0, ⋯⟩)\n---\ncase «1»\np : Fin 4 → Prop\nh : p ((fun i => i) ⟨1, ⋯⟩)\n⊢ p ((fun i => i) ⟨1, ⋯⟩)\n---\ncase «2»\np : Fin 4 → Prop\nh : p ((fun i => i) ⟨2, ⋯⟩)\n⊢ p ((fun i => i) ⟨2, ⋯⟩)\n---\ncase «3»\np : Fin 4 → Prop\nh : p ((fun i => i) ⟨3, ⋯⟩)\n⊢ p ((fun i => i) ⟨3, ⋯⟩)\n## Action:\n  fin_cases i"
"## Tactic State A:\ncase «0»\np : Fin 4 → Prop\nh : p ((fun i => i) ⟨0, ⋯⟩)\n⊢ p ((fun i => i) ⟨0, ⋯⟩)\n---\ncase «1»\np : Fin 4 → Prop\nh : p ((fun i => i) ⟨1, ⋯⟩)\n⊢ p ((fun i => i) ⟨1, ⋯⟩)\n---\ncase «2»\np : Fin 4 → Prop\nh : p ((fun i => i) ⟨2, ⋯⟩)\n⊢ p ((fun i => i) ⟨2, ⋯⟩)\n---\ncase «3»\np : Fin 4 → Prop\nh : p ((fun i => i) ⟨3, ⋯⟩)\n⊢ p ((fun i => i) ⟨3, ⋯⟩)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  repeat exact h"
"## Tactic State A:\nf : ℕ → Prop\np : Fin 3\nh0 : f 0\nh1 : f 1\nh2 : f 2\n⊢ f ↑p\n## Tactic State B:\ncase «0»\nf : ℕ → Prop\nh0 : f 0\nh1 : f 1\nh2 : f 2\n⊢ f ↑((fun i => i) ⟨0, ⋯⟩)\n---\ncase «1»\nf : ℕ → Prop\nh0 : f 0\nh1 : f 1\nh2 : f 2\n⊢ f ↑((fun i => i) ⟨1, ⋯⟩)\n---\ncase «2»\nf : ℕ → Prop\nh0 : f 0\nh1 : f 1\nh2 : f 2\n⊢ f ↑((fun i => i) ⟨2, ⋯⟩)\n## Action:\n  fin_cases p"
"## Tactic State A:\ncase «0»\nf : ℕ → Prop\nh0 : f 0\nh1 : f 1\nh2 : f 2\n⊢ f ↑((fun i => i) ⟨0, ⋯⟩)\n---\ncase «1»\nf : ℕ → Prop\nh0 : f 0\nh1 : f 1\nh2 : f 2\n⊢ f ↑((fun i => i) ⟨1, ⋯⟩)\n---\ncase «2»\nf : ℕ → Prop\nh0 : f 0\nh1 : f 1\nh2 : f 2\n⊢ f ↑((fun i => i) ⟨2, ⋯⟩)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  all_goals"
"## Tactic State A:\nf : ℕ → Prop\np : Fin 0\n⊢ f ↑p\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  fin_cases p"
"## Tactic State A:\nx2 : Fin 2\nx3 : Fin 3\n⊢ True\n## Tactic State B:\ncase «0».«0»\n⊢ True\n---\ncase «0».«1»\n⊢ True\n---\ncase «0».«2»\n⊢ True\n---\ncase «1».«0»\n⊢ True\n---\ncase «1».«1»\n⊢ True\n---\ncase «1».«2»\n⊢ True\n## Action:\n  fin_cases x2, x3"
"## Tactic State A:\ncase «0».«0»\n⊢ True\n---\ncase «0».«1»\n⊢ True\n---\ncase «0».«2»\n⊢ True\n---\ncase «1».«0»\n⊢ True\n---\ncase «1».«1»\n⊢ True\n---\ncase «1».«2»\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  all_goals trivial"
"## Tactic State A:\np : ℕ\nh2 : 2 < p\nh5 : p < 5\n⊢ p = 3 ∨ p = 4\n## Tactic State B:\ncase refine_2\np : ℕ\nh2 : 2 < p\nh5 : p < 5\nhp : ?refine_1\n⊢ p = 3 ∨ p = 4\n---\ncase refine_1\np : ℕ\nh2 : 2 < p\nh5 : p < 5\n⊢ Sort ?u.129\n---\ncase foo\np : ℕ\nh2 : 2 < p\nh5 : p < 5\n⊢ ?refine_1\n## Action:\n  have hp : ?_ := ?foo"
"## Tactic State A:\ncase refine_2\np : ℕ\nh2 : 2 < p\nh5 : p < 5\nhp : ?refine_1\n⊢ p = 3 ∨ p = 4\n---\ncase refine_1\np : ℕ\nh2 : 2 < p\nh5 : p < 5\n⊢ Sort ?u.129\n---\ncase foo\np : ℕ\nh2 : 2 < p\nh5 : p < 5\n⊢ ?refine_1\n## Tactic State B:\ncase refine_2\np : ℕ\nh2 : 2 < p\nh5 : p < 5\nhp : p ∈ Finset.Ioo 2 5\n⊢ p = 3 ∨ p = 4\n## Action:\n  case foo => exact (Finset.mem_Ioo).2 ⟨h2, h5⟩"
"## Tactic State A:\ncase refine_2\np : ℕ\nh2 : 2 < p\nh5 : p < 5\nhp : p ∈ Finset.Ioo 2 5\n⊢ p = 3 ∨ p = 4\n## Tactic State B:\ncase refine_2.«0»\nh2 : 2 < 2 + 1\nh5 : 2 + 1 < 5\n⊢ 2 + 1 = 3 ∨ 2 + 1 = 4\n---\ncase refine_2.«1»\nh2 : 2 < 2 + 1 + 1\nh5 : 2 + 1 + 1 < 5\n⊢ 2 + 1 + 1 = 3 ∨ 2 + 1 + 1 = 4\n## Action:\n  fin_cases hp"
"## Tactic State A:\ncase refine_2.«0»\nh2 : 2 < 2 + 1\nh5 : 2 + 1 < 5\n⊢ 2 + 1 = 3 ∨ 2 + 1 = 4\n---\ncase refine_2.«1»\nh2 : 2 < 2 + 1 + 1\nh5 : 2 + 1 + 1 < 5\n⊢ 2 + 1 + 1 = 3 ∨ 2 + 1 + 1 = 4\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · norm_num"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · norm_num"
"## Tactic State A:\nx y : Fin 2\n⊢ True\n## Tactic State B:\ncase «0».«0»\n⊢ True\n---\ncase «0».«1»\n⊢ True\n---\ncase «1».«0»\n⊢ True\n---\ncase «1».«1»\n⊢ True\n## Action:\n  fin_cases x, y"
"## Tactic State A:\ncase «0».«0»\n⊢ True\n---\ncase «0».«1»\n⊢ True\n---\ncase «1».«0»\n⊢ True\n---\ncase «1».«1»\n⊢ True\n## Tactic State B:\ncase «0».«0»\n⊢ True\n---\ncase «0».«1»\n⊢ True\n---\ncase «1».«0»\n⊢ True\n---\ncase «1».«1»\n⊢ True\n## Action:\n  trace_state"
"## Tactic State A:\ncase «0».«0»\n⊢ True\n---\ncase «0».«1»\n⊢ True\n---\ncase «1».«0»\n⊢ True\n---\ncase «1».«1»\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  all_goals trivial"
"## Tactic State A:\nx2 : Fin 2\nx3 : Fin 3\nn : ℕ\ny : Fin n\n⊢ ↑x2 * ↑x3 = ↑x3 * ↑x2\n## Tactic State B:\ncase «0».«0»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨0, ⋯⟩) * ↑((fun i => i) ⟨0, ⋯⟩) = ↑((fun i => i) ⟨0, ⋯⟩) * ↑((fun i => i) ⟨0, ⋯⟩)\n---\ncase «0».«1»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨0, ⋯⟩) * ↑((fun i => i) ⟨1, ⋯⟩) = ↑((fun i => i) ⟨1, ⋯⟩) * ↑((fun i => i) ⟨0, ⋯⟩)\n---\ncase «0».«2»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨0, ⋯⟩) * ↑((fun i => i) ⟨2, ⋯⟩) = ↑((fun i => i) ⟨2, ⋯⟩) * ↑((fun i => i) ⟨0, ⋯⟩)\n---\ncase «1».«0»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨1, ⋯⟩) * ↑((fun i => i) ⟨0, ⋯⟩) = ↑((fun i => i) ⟨0, ⋯⟩) * ↑((fun i => i) ⟨1, ⋯⟩)\n---\ncase «1».«1»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨1, ⋯⟩) * ↑((fun i => i) ⟨1, ⋯⟩) = ↑((fun i => i) ⟨1, ⋯⟩) * ↑((fun i => i) ⟨1, ⋯⟩)\n---\ncase «1».«2»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨1, ⋯⟩) * ↑((fun i => i) ⟨2, ⋯⟩) = ↑((fun i => i) ⟨2, ⋯⟩) * ↑((fun i => i) ⟨1, ⋯⟩)\n## Action:\n  fin_cases x2 <;> fin_cases x3"
"## Tactic State A:\ncase «0».«0»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨0, ⋯⟩) * ↑((fun i => i) ⟨0, ⋯⟩) = ↑((fun i => i) ⟨0, ⋯⟩) * ↑((fun i => i) ⟨0, ⋯⟩)\n---\ncase «0».«1»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨0, ⋯⟩) * ↑((fun i => i) ⟨1, ⋯⟩) = ↑((fun i => i) ⟨1, ⋯⟩) * ↑((fun i => i) ⟨0, ⋯⟩)\n---\ncase «0».«2»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨0, ⋯⟩) * ↑((fun i => i) ⟨2, ⋯⟩) = ↑((fun i => i) ⟨2, ⋯⟩) * ↑((fun i => i) ⟨0, ⋯⟩)\n---\ncase «1».«0»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨1, ⋯⟩) * ↑((fun i => i) ⟨0, ⋯⟩) = ↑((fun i => i) ⟨0, ⋯⟩) * ↑((fun i => i) ⟨1, ⋯⟩)\n---\ncase «1».«1»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨1, ⋯⟩) * ↑((fun i => i) ⟨1, ⋯⟩) = ↑((fun i => i) ⟨1, ⋯⟩) * ↑((fun i => i) ⟨1, ⋯⟩)\n---\ncase «1».«2»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨1, ⋯⟩) * ↑((fun i => i) ⟨2, ⋯⟩) = ↑((fun i => i) ⟨2, ⋯⟩) * ↑((fun i => i) ⟨1, ⋯⟩)\n## Tactic State B:\ncase «0».«0»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨0, ⋯⟩) * ↑((fun i => i) ⟨0, ⋯⟩) = ↑((fun i => i) ⟨0, ⋯⟩) * ↑((fun i => i) ⟨0, ⋯⟩)\n---\ncase «0».«1»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨0, ⋯⟩) * ↑((fun i => i) ⟨1, ⋯⟩) = ↑((fun i => i) ⟨1, ⋯⟩) * ↑((fun i => i) ⟨0, ⋯⟩)\n---\ncase «0».«2»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨0, ⋯⟩) * ↑((fun i => i) ⟨2, ⋯⟩) = ↑((fun i => i) ⟨2, ⋯⟩) * ↑((fun i => i) ⟨0, ⋯⟩)\n---\ncase «1».«0»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨1, ⋯⟩) * ↑((fun i => i) ⟨0, ⋯⟩) = ↑((fun i => i) ⟨0, ⋯⟩) * ↑((fun i => i) ⟨1, ⋯⟩)\n---\ncase «1».«1»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨1, ⋯⟩) * ↑((fun i => i) ⟨1, ⋯⟩) = ↑((fun i => i) ⟨1, ⋯⟩) * ↑((fun i => i) ⟨1, ⋯⟩)\n---\ncase «1».«2»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨1, ⋯⟩) * ↑((fun i => i) ⟨2, ⋯⟩) = ↑((fun i => i) ⟨2, ⋯⟩) * ↑((fun i => i) ⟨1, ⋯⟩)\n## Action:\n  fail_if_success"
"## Tactic State A:\ncase «0».«0»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨0, ⋯⟩) * ↑((fun i => i) ⟨0, ⋯⟩) = ↑((fun i => i) ⟨0, ⋯⟩) * ↑((fun i => i) ⟨0, ⋯⟩)\n---\ncase «0».«1»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨0, ⋯⟩) * ↑((fun i => i) ⟨1, ⋯⟩) = ↑((fun i => i) ⟨1, ⋯⟩) * ↑((fun i => i) ⟨0, ⋯⟩)\n---\ncase «0».«2»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨0, ⋯⟩) * ↑((fun i => i) ⟨2, ⋯⟩) = ↑((fun i => i) ⟨2, ⋯⟩) * ↑((fun i => i) ⟨0, ⋯⟩)\n---\ncase «1».«0»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨1, ⋯⟩) * ↑((fun i => i) ⟨0, ⋯⟩) = ↑((fun i => i) ⟨0, ⋯⟩) * ↑((fun i => i) ⟨1, ⋯⟩)\n---\ncase «1».«1»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨1, ⋯⟩) * ↑((fun i => i) ⟨1, ⋯⟩) = ↑((fun i => i) ⟨1, ⋯⟩) * ↑((fun i => i) ⟨1, ⋯⟩)\n---\ncase «1».«2»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨1, ⋯⟩) * ↑((fun i => i) ⟨2, ⋯⟩) = ↑((fun i => i) ⟨2, ⋯⟩) * ↑((fun i => i) ⟨1, ⋯⟩)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    fin_cases y"
"## Tactic State A:\n⊢ sorry = 2\n## Tactic State B:\n⊢ sorry = 2\n## Action:\n  generalize_proofs h"
"## Tactic State A:\n⊢ sorry = 2\n## Tactic State B:\n⊢ sorry = 2\n## Action:\n  guard_hyp h :ₛ 1 < List.length [1, 2]"
"## Tactic State A:\nx : ℕ\nh : x < 2\n⊢ Classical.choose ⋯ < 2\n## Tactic State B:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\n⊢ Classical.choose a < 2\n## Action:\n  generalize_proofs a"
"## Tactic State A:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\n⊢ Classical.choose a < 2\n## Tactic State B:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\n⊢ Classical.choose a < 2\n## Action:\n  guard_hyp a :ₛ ∃ x, x < 2"
"## Tactic State A:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\n⊢ Classical.choose a < 2\n## Tactic State B:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\n⊢ Classical.choose a < 2\n## Action:\n  guard_target =ₛ Classical.choose a < 2"
"## Tactic State A:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\n⊢ Classical.choose a < 2\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact Classical.choose_spec a"
"## Tactic State A:\nx : ℕ\nh : x < 2\n⊢ Classical.choose ⋯ = Classical.choose ⋯\n## Tactic State B:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\n⊢ Classical.choose a = Classical.choose a\n## Action:\n  generalize_proofs a"
"## Tactic State A:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\n⊢ Classical.choose a = Classical.choose a\n## Tactic State B:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\n⊢ Classical.choose a = Classical.choose a\n## Action:\n  guard_hyp a :ₛ ∃ x, x < 2"
"## Tactic State A:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\n⊢ Classical.choose a = Classical.choose a\n## Tactic State B:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\n⊢ Classical.choose a = Classical.choose a\n## Action:\n  guard_target =ₛ Classical.choose a = Classical.choose a"
"## Tactic State A:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\n⊢ Classical.choose a = Classical.choose a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rfl"
"## Tactic State A:\nx : ℕ\nh : x < 2\nh' : x < 1\n⊢ x < 2\n## Tactic State B:\nx : ℕ\nh' : x < 1\n⊢ x < 2\n## Action:\n  generalize_proofs a"
"## Tactic State A:\nx : ℕ\nh' : x < 1\n⊢ x < 2\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  guard_hyp a :ₛ ∃ x, x < 2"
"## Tactic State A:\n\n## Tactic State B:\nx : ℕ\nh : x < 2\nh' : x < 1\na : ∃ x, x < 2\n⊢ Classical.choose a = Classical.choose a\n## Action:\n  guard_target =ₛ Classical.choose a = Classical.choose a"
"## Tactic State A:\nx : ℕ\nh : x < 2\nh' : x < 1\na : ∃ x, x < 2\n⊢ Classical.choose a = Classical.choose a\n## Tactic State B:\nx : ℕ\nh : x < 2\nh' : x < 1\na : ∃ x, x < 2\n⊢ Classical.choose a = Classical.choose a\n## Action:\n  rfl"
"## Tactic State A:\nx : ℕ\nh h' : x < 2\n⊢ Classical.choose ⋯ = Classical.choose ⋯\n## Tactic State B:\nx : ℕ\nh h' : x < 2\n⊢ Classical.choose ⋯ = Classical.choose ⋯\n## Action:\n  change _ at h'"
"## Tactic State A:\nx : ℕ\nh h' : x < 2\n⊢ Classical.choose ⋯ = Classical.choose ⋯\n## Tactic State B:\nx : ℕ\nh h' : x < 2\n⊢ Classical.choose ⋯ = Classical.choose ⋯\n## Action:\n  fail_if_success guard_target =ₛ"
"## Tactic State A:\nx : ℕ\nh h' : x < 2\n⊢ Classical.choose ⋯ = Classical.choose ⋯\n## Tactic State B:\nx : ℕ\nh : x < 2\n⊢ Classical.choose ⋯ = Classical.choose ⋯\n## Action:\n    Classical.choose (⟨x, h⟩ : ∃ x, x < 2) = Classical.choose (⟨x, h⟩ : ∃ x, x < 2)"
"## Tactic State A:\nx : ℕ\nh : x < 2\n⊢ Classical.choose ⋯ = Classical.choose ⋯\n## Tactic State B:\nx : ℕ\nh : x < 2\n⊢ Classical.choose ⋯ = Classical.choose ⋯\n## Action:\n  generalize_proofs at h'"
"## Tactic State A:\nx : ℕ\nh : x < 2\n⊢ Classical.choose ⋯ = Classical.choose ⋯\n## Tactic State B:\nx : ℕ\nh : x < 2\n⊢ Classical.choose ⋯ = Classical.choose ⋯\n## Action:\n  fail_if_success change _ at h'"
"## Tactic State A:\nx : ℕ\nh : x < 2\n⊢ Classical.choose ⋯ = Classical.choose ⋯\n## Tactic State B:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\n⊢ Classical.choose a = Classical.choose a\n## Action:\n  guard_target =ₛ Classical.choose (⟨x, h⟩ : ∃ x, x < 2) = Classical.choose (⟨x, h⟩ : ∃ x, x < 2)"
"## Tactic State A:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\n⊢ Classical.choose a = Classical.choose a\n## Tactic State B:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\n⊢ Classical.choose a = Classical.choose a\n## Action:\n  generalize_proofs a"
"## Tactic State A:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\n⊢ Classical.choose a = Classical.choose a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  guard_target =ₛ Classical.choose a = Classical.choose a"
"## Tactic State A:\nx : ℕ\nh : x < 2\n⊢ Classical.choose ⋯ = Classical.choose ⋯\n## Tactic State B:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\na' : ∃ x, x < 3\n⊢ Classical.choose a = Classical.choose a'\n## Action:\n  generalize_proofs a a'"
"## Tactic State A:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\na' : ∃ x, x < 3\n⊢ Classical.choose a = Classical.choose a'\n## Tactic State B:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\na' : ∃ x, x < 3\n⊢ Classical.choose a = Classical.choose a'\n## Action:\n  guard_hyp a :ₛ ∃ x, x < 2"
"## Tactic State A:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\na' : ∃ x, x < 3\n⊢ Classical.choose a = Classical.choose a'\n## Tactic State B:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\na' : ∃ x, x < 3\n⊢ Classical.choose a = Classical.choose a'\n## Action:\n  guard_hyp a' :ₛ ∃ x, x < 3"
"## Tactic State A:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\na' : ∃ x, x < 3\n⊢ Classical.choose a = Classical.choose a'\n## Tactic State B:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\na' : ∃ x, x < 3\n⊢ Classical.choose a = Classical.choose a'\n## Action:\n  guard_target =ₛ Classical.choose a = Classical.choose a'"
"## Tactic State A:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\na' : ∃ x, x < 3\n⊢ Classical.choose a = Classical.choose a'\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact test_sorry"
"## Tactic State A:\nx : ℕ\nh : x < 2\n⊢ Classical.choose ⋯ = Classical.choose ⋯\n## Tactic State B:\nx : ℕ\nh : x < 2\npf✝¹ : ∃ x, x < 2\npf✝ : ∃ x, x < 3\n⊢ Classical.choose pf✝¹ = Classical.choose pf✝\n## Action:\n  generalize_proofs"
"## Tactic State A:\nx : ℕ\nh : x < 2\npf✝¹ : ∃ x, x < 2\npf✝ : ∃ x, x < 3\n⊢ Classical.choose pf✝¹ = Classical.choose pf✝\n## Tactic State B:\nx : ℕ\nh : x < 2\npf✝¹ : ∃ x, x < 2\npf✝ : ∃ x, x < 3\n⊢ Classical.choose pf✝¹ = Classical.choose pf✝\n## Action:\n  guard_target = Classical.choose _ = Classical.choose _"
"## Tactic State A:\nx : ℕ\nh : x < 2\npf✝¹ : ∃ x, x < 2\npf✝ : ∃ x, x < 3\n⊢ Classical.choose pf✝¹ = Classical.choose pf✝\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact test_sorry"
"## Tactic State A:\nx : ℕ\nh : x < 2\n⊢ Classical.choose ⋯ = Classical.choose ⋯\n## Tactic State B:\nx : ℕ\nh : x < 2\npf✝ : ∃ x, x < 2\na : ∃ x, x < 3\n⊢ Classical.choose pf✝ = Classical.choose a\n## Action:\n  generalize_proofs _ a"
"## Tactic State A:\nx : ℕ\nh : x < 2\npf✝ : ∃ x, x < 2\na : ∃ x, x < 3\n⊢ Classical.choose pf✝ = Classical.choose a\n## Tactic State B:\nx : ℕ\nh : x < 2\npf✝ : ∃ x, x < 2\na : ∃ x, x < 3\n⊢ Classical.choose pf✝ = Classical.choose a\n## Action:\n  guard_hyp a : ∃ x, x < 3"
"## Tactic State A:\nx : ℕ\nh : x < 2\npf✝ : ∃ x, x < 2\na : ∃ x, x < 3\n⊢ Classical.choose pf✝ = Classical.choose a\n## Tactic State B:\nx : ℕ\nh : x < 2\npf✝ : ∃ x, x < 2\na : ∃ x, x < 3\n⊢ Classical.choose pf✝ = Classical.choose a\n## Action:\n  guard_target = Classical.choose _ = Classical.choose a"
"## Tactic State A:\nx : ℕ\nh : x < 2\npf✝ : ∃ x, x < 2\na : ∃ x, x < 3\n⊢ Classical.choose pf✝ = Classical.choose a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact test_sorry"
"## Tactic State A:\na : ∃ x, x < 2\n⊢ Classical.choose a < 2\n## Tactic State B:\na : ∃ x, x < 2\n⊢ Classical.choose a < 2\n## Action:\n  generalize_proofs"
"## Tactic State A:\na : ∃ x, x < 2\n⊢ Classical.choose a < 2\n## Tactic State B:\na : ∃ x, x < 2\n⊢ Classical.choose a < 2\n## Action:\n  guard_target =ₛ Classical.choose a < 2"
"## Tactic State A:\na : ∃ x, x < 2\n⊢ Classical.choose a < 2\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact Classical.choose_spec a"
"## Tactic State A:\na : ∃ x, x < 2\n⊢ Classical.choose a < 2\n## Tactic State B:\na : ∃ x, x < 2\n⊢ Classical.choose a < 2\n## Action:\n  generalize_proofs t"
"## Tactic State A:\na : ∃ x, x < 2\n⊢ Classical.choose a < 2\n## Tactic State B:\na : ∃ x, x < 2\n⊢ Classical.choose a < 2\n## Action:\n  guard_target =ₛ Classical.choose a < 2"
"## Tactic State A:\na : ∃ x, x < 2\n⊢ Classical.choose a < 2\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact Classical.choose_spec a"
"## Tactic State A:\nx : ℕ\nh : x < 2\nH : Classical.choose ⋯ < 2\n⊢ Classical.choose ⋯ < 2\n## Tactic State B:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\nH : Classical.choose a < 2\n⊢ Classical.choose a < 2\n## Action:\n  generalize_proofs a at H ⊢"
"## Tactic State A:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\nH : Classical.choose a < 2\n⊢ Classical.choose a < 2\n## Tactic State B:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\nH : Classical.choose a < 2\n⊢ Classical.choose a < 2\n## Action:\n  guard_hyp a :ₛ ∃ x, x < 2"
"## Tactic State A:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\nH : Classical.choose a < 2\n⊢ Classical.choose a < 2\n## Tactic State B:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\nH : Classical.choose a < 2\n⊢ Classical.choose a < 2\n## Action:\n  guard_hyp H :ₛ Classical.choose a < 2"
"## Tactic State A:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\nH : Classical.choose a < 2\n⊢ Classical.choose a < 2\n## Tactic State B:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\nH : Classical.choose a < 2\n⊢ Classical.choose a < 2\n## Action:\n  guard_target =ₛ Classical.choose a < 2"
"## Tactic State A:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\nH : Classical.choose a < 2\n⊢ Classical.choose a < 2\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact H"
"## Tactic State A:\nH : ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n⊢ ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n## Tactic State B:\nH : ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n⊢ ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n## Action:\n  generalize_proofs (config := { abstract := false })"
"## Tactic State A:\nH : ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n⊢ ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n## Tactic State B:\nH : ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n⊢ ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n## Action:\n  guard_target =ₛ ∀ y, ∃ (x : ℕ) (h : x < y), Classical.choose (⟨x, h⟩ : ∃ x, x < y) < y"
"## Tactic State A:\nH : ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n⊢ ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n## Tactic State B:\na : ∀ (y x : ℕ), x < y → ∃ x, x < y\nH : ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n⊢ ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n## Action:\n  generalize_proofs a at H ⊢"
"## Tactic State A:\na : ∀ (y x : ℕ), x < y → ∃ x, x < y\nH : ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n⊢ ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n## Tactic State B:\na : ∀ (y x : ℕ), x < y → ∃ x, x < y\nH : ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n⊢ ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n## Action:\n  guard_hyp a :ₛ ∀ (y w : ℕ), w < y → ∃ x, x < y"
"## Tactic State A:\na : ∀ (y x : ℕ), x < y → ∃ x, x < y\nH : ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n⊢ ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n## Tactic State B:\na : ∀ (y x : ℕ), x < y → ∃ x, x < y\nH : ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n⊢ ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n## Action:\n  guard_hyp H :ₛ ∀ (y : ℕ), ∃ x h, Classical.choose (a y x h) < y"
"## Tactic State A:\na : ∀ (y x : ℕ), x < y → ∃ x, x < y\nH : ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n⊢ ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n## Tactic State B:\na : ∀ (y x : ℕ), x < y → ∃ x, x < y\nH : ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n⊢ ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n## Action:\n  guard_target =ₛ ∀ (y : ℕ), ∃ x h, Classical.choose (a y x h) < y"
"## Tactic State A:\na : ∀ (y x : ℕ), x < y → ∃ x, x < y\nH : ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n⊢ ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact H"
"## Tactic State A:\nH : ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n⊢ ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n## Tactic State B:\na : ∀ (y x : ℕ), x < y → ∃ x, x < y\nH : ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n⊢ ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n## Action:\n  generalize_proofs a at *"
"## Tactic State A:\na : ∀ (y x : ℕ), x < y → ∃ x, x < y\nH : ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n⊢ ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n## Tactic State B:\na : ∀ (y x : ℕ), x < y → ∃ x, x < y\nH : ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n⊢ ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n## Action:\n  guard_hyp a :ₛ ∀ (y w : ℕ), w < y → ∃ x, x < y"
"## Tactic State A:\na : ∀ (y x : ℕ), x < y → ∃ x, x < y\nH : ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n⊢ ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n## Tactic State B:\na : ∀ (y x : ℕ), x < y → ∃ x, x < y\nH : ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n⊢ ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n## Action:\n  guard_hyp H :ₛ ∀ (y : ℕ), ∃ x h, Classical.choose (a y x h) < y"
"## Tactic State A:\na : ∀ (y x : ℕ), x < y → ∃ x, x < y\nH : ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n⊢ ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n## Tactic State B:\na : ∀ (y x : ℕ), x < y → ∃ x, x < y\nH : ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n⊢ ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n## Action:\n  guard_target =ₛ ∀ (y : ℕ), ∃ x h, Classical.choose (a y x h) < y"
"## Tactic State A:\na : ∀ (y x : ℕ), x < y → ∃ x, x < y\nH : ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n⊢ ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact H"
"## Tactic State A:\nM : Type u\ninst✝¹ : Monoid M\nS✝ S' : Submonoid M\nR : Type u_1\nx y z : R\ninst✝ : Ring R\nS : Subring R\nhx : x ∈ S\nhy : y ∈ S\nhz : z ∈ S\nn m : ℕ\n⊢ n • x ^ 3 - 2 • y + z ^ m ∈ S\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  aesop"
"## Tactic State A:\nM : Type u\ninst✝¹ : Monoid M\nS✝ S' : Submonoid M\nR : Type u_1\nx y z : R\ninst✝ : Ring R\nS : Set R\nhx : x ∈ S\nhy : y ∈ S\nhz : z ∈ S\nn m : ℕ\n⊢ n • x ^ 3 - y + z ^ m ∈ Subring.closure S\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  aesop"
"## Tactic State A:\nM : Type u\ninst✝⁶ : Monoid M\nS S' : Submonoid M\nR : Type u_1\nA : Type u_2\ninst✝⁵ : CommRing R\ninst✝⁴ : Ring A\ninst✝³ : Algebra R A\ninst✝² : StarRing R\ninst✝¹ : StarRing A\ninst✝ : StarModule R A\nr : R\na b c : A\nn : ℕ\n⊢ -b + star ((algebraMap R A) r) + a ^ n * c ∈ StarAlgebra.adjoin R {a, b, c}\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  aesop"
"## Tactic State A:\nM : Type u\ninst✝¹ : Monoid M\nS S' : Submonoid M\ninst✝ : Monoid M\nx : M\nn : ℕ\n⊢ x ^ n ∈ Submonoid.closure {x}\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  aesop"
"## Tactic State A:\nM : Type u\ninst✝¹ : Monoid M\nS S' : Submonoid M\ninst✝ : Monoid M\nx y z w : M\nn : ℕ\n⊢ (x * y) ^ n * w ∈ Submonoid.closure {x, y, z, w}\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  aesop"
"## Tactic State A:\nM : Type u\ninst✝¹ : Monoid M\nS S' : Submonoid M\ninst✝ : Group M\nx : M\nn : ℤ\n⊢ x ^ n ∈ Subgroup.closure {x}\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  aesop"
"## Tactic State A:\nM : Type u\ninst✝¹ : Monoid M\nS S' : Submonoid M\ninst✝ : Monoid M\nx y z : M\nS₁ S₂ : Submonoid M\nh : S₁ ≤ S₂\nhx : x ∈ S₁\nhy : y ∈ S₁\nhz : z ∈ S₂\n⊢ x * y * z ∈ S₂\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  aesop"
"## Tactic State A:\nM : Type u\ninst✝¹ : Monoid M\nS S' : Submonoid M\ninst✝ : Monoid M\nx y z : M\nS₁ S₂ : Submonoid M\nh : S₁ ≤ S₂\nhx : x ∈ S₁\nhy : y ∈ S₁\nhz : z ∈ S₂\n⊢ x * y * z ∈ S₁ ⊔ S₂\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  aesop"
"## Tactic State A:\nM : Type u\ninst✝¹ : Monoid M\nS✝ S' : Submonoid M\ninst✝ : Monoid M\nx y z : M\nS : Submonoid M\nhxy : x * y ∈ S\nhz : z ∈ S\n⊢ z * (x * y) ∈ S\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  aesop"
"## Tactic State A:\nM : Type u\ninst✝¹ : Monoid M\nS✝ S' : Submonoid M\nF : Type u_1\ninst✝ : Field F\nS : Subfield F\nq : ℚ\n⊢ ↑q ∈ S\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  aesop"
"## Tactic State A:\nM : Type u\ninst✝¹ : Monoid M\nS✝ S' : Submonoid M\nF : Type u_1\ninst✝ : Field F\nS : Subfield F\n⊢ 1.2 ∈ S\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  aesop"
"## Tactic State A:\nM : Type u\ninst✝¹ : Monoid M\nS✝ S' : Submonoid M\nF : Type u_1\ninst✝ : Field F\nS : Subfield F\nx : F\nhx : x ∈ S\n⊢ 12e-100 • x⁻¹ ∈ S\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  aesop"
"## Tactic State A:\nα : Type u_1\ninst✝¹ : TopologicalSpace α\ninst : MeasurableSpace α\ninst✝ : BorelSpace α\n⊢ MeasurableSet ∅\n## Tactic State B:\nα : Type u_1\ninst✝¹ : TopologicalSpace α\ninst : MeasurableSpace α\ninst✝ : BorelSpace α\n⊢ MeasurableSet ∅\n## Action:\n  guard_target = @MeasurableSet α inst ∅"
"## Tactic State A:\nα : Type u_1\ninst✝¹ : TopologicalSpace α\ninst : MeasurableSpace α\ninst✝ : BorelSpace α\n⊢ MeasurableSet ∅\n## Tactic State B:\nα : Type u_1\ninst✝¹ : TopologicalSpace α\ninst✝ : BorelSpace α\nthis✝ : MeasurableSpace α := borel α\n⊢ MeasurableSet ∅\n## Action:\n  borelize α"
"## Tactic State A:\nα : Type u_1\ninst✝¹ : TopologicalSpace α\ninst✝ : BorelSpace α\nthis✝ : MeasurableSpace α := borel α\n⊢ MeasurableSet ∅\n## Tactic State B:\nα : Type u_1\ninst✝¹ : TopologicalSpace α\ninst✝ : BorelSpace α\nthis✝ : MeasurableSpace α := borel α\n⊢ MeasurableSet ∅\n## Action:\n  guard_target = @MeasurableSet α (borel α) ∅"
"## Tactic State A:\nα : Type u_1\ninst✝¹ : TopologicalSpace α\ninst✝ : BorelSpace α\nthis✝ : MeasurableSpace α := borel α\n⊢ MeasurableSet ∅\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  apply MeasurableSet.empty"
"## Tactic State A:\nα : Type u_1\ninst✝ : TopologicalSpace α\n⊢ True\n## Tactic State B:\nα : Type u_1\ninst✝ : TopologicalSpace α\nthis✝¹ : MeasurableSpace α := borel α\nthis✝ : BorelSpace α\n⊢ True\n## Action:\n  borelize α"
"## Tactic State A:\nα : Type u_1\ninst✝ : TopologicalSpace α\nthis✝¹ : MeasurableSpace α := borel α\nthis✝ : BorelSpace α\n⊢ True\n## Tactic State B:\nα : Type u_1\ninst✝ : TopologicalSpace α\nthis✝¹ : MeasurableSpace α := borel α\nthis✝ : BorelSpace α\nh : MeasurableSet ∅\n⊢ True\n## Action:\n  have h : MeasurableSet (∅ : Set α) := MeasurableSet.empty"
"## Tactic State A:\nα : Type u_1\ninst✝ : TopologicalSpace α\nthis✝¹ : MeasurableSpace α := borel α\nthis✝ : BorelSpace α\nh : MeasurableSet ∅\n⊢ True\n## Tactic State B:\nα : Type u_1\ninst✝ : TopologicalSpace α\nthis✝¹ : MeasurableSpace α := borel α\nthis✝ : BorelSpace α\nh : MeasurableSet ∅\n⊢ True\n## Action:\n  guard_hyp h : @MeasurableSet α (borel α) ∅"
"## Tactic State A:\nα : Type u_1\ninst✝ : TopologicalSpace α\nthis✝¹ : MeasurableSpace α := borel α\nthis✝ : BorelSpace α\nh : MeasurableSet ∅\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial"
"## Tactic State A:\n⊢ True\n## Tactic State B:\ncase intro.intro\nα : Type\nhα : TopologicalSpace α\n⊢ True\n## Action:\n  obtain ⟨α, ⟨hα⟩⟩ : ∃ α : Type, Nonempty (TopologicalSpace α) := ⟨ℕ, ⟨inferInstance⟩⟩"
"## Tactic State A:\ncase intro.intro\nα : Type\nhα : TopologicalSpace α\n⊢ True\n## Tactic State B:\ncase intro.intro\nα : Type\nhα : TopologicalSpace α\nthis✝¹ : MeasurableSpace α := borel α\nthis✝ : BorelSpace α\n⊢ True\n## Action:\n  borelize α"
"## Tactic State A:\ncase intro.intro\nα : Type\nhα : TopologicalSpace α\nthis✝¹ : MeasurableSpace α := borel α\nthis✝ : BorelSpace α\n⊢ True\n## Tactic State B:\ncase intro.intro\nα : Type\nhα : TopologicalSpace α\nthis✝¹ : MeasurableSpace α := borel α\nthis✝ : BorelSpace α\nh : MeasurableSet ∅\n⊢ True\n## Action:\n  have h : MeasurableSet (∅ : Set α) := MeasurableSet.empty"
"## Tactic State A:\ncase intro.intro\nα : Type\nhα : TopologicalSpace α\nthis✝¹ : MeasurableSpace α := borel α\nthis✝ : BorelSpace α\nh : MeasurableSet ∅\n⊢ True\n## Tactic State B:\ncase intro.intro\nα : Type\nhα : TopologicalSpace α\nthis✝¹ : MeasurableSpace α := borel α\nthis✝ : BorelSpace α\nh : MeasurableSet ∅\n⊢ True\n## Action:\n  guard_hyp h : @MeasurableSet α (borel α) ∅"
"## Tactic State A:\ncase intro.intro\nα : Type\nhα : TopologicalSpace α\nthis✝¹ : MeasurableSpace α := borel α\nthis✝ : BorelSpace α\nh : MeasurableSet ∅\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial"
"## Tactic State A:\n⊢ True\n## Tactic State B:\nα : Type := ℕ\n⊢ True\n## Action:\n  set α := ℕ"
"## Tactic State A:\nα : Type := ℕ\n⊢ True\n## Tactic State B:\nα : Type := ℕ\nthis✝¹ : MeasurableSpace α := borel α\nthis✝ : BorelSpace α\n⊢ True\n## Action:\n  borelize α"
"## Tactic State A:\nα : Type := ℕ\nthis✝¹ : MeasurableSpace α := borel α\nthis✝ : BorelSpace α\n⊢ True\n## Tactic State B:\nα : Type := ℕ\nthis✝¹ : MeasurableSpace α := borel α\nthis✝ : BorelSpace α\nh : MeasurableSet ∅\n⊢ True\n## Action:\n  have h : MeasurableSet (∅ : Set α) := MeasurableSet.empty"
"## Tactic State A:\nα : Type := ℕ\nthis✝¹ : MeasurableSpace α := borel α\nthis✝ : BorelSpace α\nh : MeasurableSet ∅\n⊢ True\n## Tactic State B:\nα : Type := ℕ\nthis✝¹ : MeasurableSpace α := borel α\nthis✝ : BorelSpace α\nh : MeasurableSet ∅\n⊢ True\n## Action:\n  guard_hyp h : @MeasurableSet α (borel α) ∅"
"## Tactic State A:\nα : Type := ℕ\nthis✝¹ : MeasurableSpace α := borel α\nthis✝ : BorelSpace α\nh : MeasurableSet ∅\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial"
"## Tactic State A:\n⊢ True\n## Tactic State B:\nh1 : MeasurableSet ∅\n⊢ True\n## Action:\n  have h1 : MeasurableSet (∅ : Set ℕ) := MeasurableSet.empty"
"## Tactic State A:\nh1 : MeasurableSet ∅\n⊢ True\n## Tactic State B:\nh1 : MeasurableSet ∅\n⊢ True\n## Action:\n  guard_hyp h1 : @MeasurableSet ℕ Nat.instMeasurableSpace ∅"
"## Tactic State A:\nh1 : MeasurableSet ∅\n⊢ True\n## Tactic State B:\nh1 : MeasurableSet ∅\nthis✝¹ : MeasurableSpace ℕ := borel ℕ\nthis✝ : BorelSpace ℕ\n⊢ True\n## Action:\n  borelize ℕ"
"## Tactic State A:\nh1 : MeasurableSet ∅\nthis✝¹ : MeasurableSpace ℕ := borel ℕ\nthis✝ : BorelSpace ℕ\n⊢ True\n## Tactic State B:\nh1 : MeasurableSet ∅\nthis✝¹ : MeasurableSpace ℕ := borel ℕ\nthis✝ : BorelSpace ℕ\nh2 : MeasurableSet ∅\n⊢ True\n## Action:\n  have h2 : MeasurableSet (∅ : Set ℕ) := MeasurableSet.empty"
"## Tactic State A:\nh1 : MeasurableSet ∅\nthis✝¹ : MeasurableSpace ℕ := borel ℕ\nthis✝ : BorelSpace ℕ\nh2 : MeasurableSet ∅\n⊢ True\n## Tactic State B:\nh1 : MeasurableSet ∅\nthis✝¹ : MeasurableSpace ℕ := borel ℕ\nthis✝ : BorelSpace ℕ\nh2 : MeasurableSet ∅\n⊢ True\n## Action:\n  guard_hyp h2 : @MeasurableSet ℕ (borel ℕ) ∅"
"## Tactic State A:\nh1 : MeasurableSet ∅\nthis✝¹ : MeasurableSpace ℕ := borel ℕ\nthis✝ : BorelSpace ℕ\nh2 : MeasurableSet ∅\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial"
"## Tactic State A:\n⊢ id (1 = 1)\n## Tactic State B:\n⊢ id (1 = 1)\n## Action:\n  with_reducible whnf"
"## Tactic State A:\n⊢ id (1 = 1)\n## Tactic State B:\n⊢ id (1 = 1)\n## Action:\n  guard_target =ₛ id (1 = 1)"
"## Tactic State A:\n⊢ id (1 = 1)\n## Tactic State B:\n⊢ 1 = 1\n## Action:\n  whnf"
"## Tactic State A:\n⊢ 1 = 1\n## Tactic State B:\n⊢ 1 = 1\n## Action:\n  guard_target =ₛ 1 = 1"
"## Tactic State A:\n⊢ 1 = 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rfl"
"## Tactic State A:\n⊢ (fun x => 1 + x) 1 = 2\n## Tactic State B:\n⊢ 1 + 1 = 2\n## Action:\n  beta_reduce"
"## Tactic State A:\n⊢ 1 + 1 = 2\n## Tactic State B:\n⊢ 1 + 1 = 2\n## Action:\n  guard_target =ₛ 1 + 1 = 2"
"## Tactic State A:\n⊢ 1 + 1 = 2\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rfl"
