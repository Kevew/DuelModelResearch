{"declaration": "example (a b: Nat) (h1: a + b = a): a + b = a := by\n  exact h1", "file": "/lustre07/scratch/kevew/DuelModelResearch/mathlib4/test.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "a b : \u2115\nh1 : a + b = a\n\u22a2 a + b = a"}, {"line": "  exact h1", "tactic_state": ""}]}
{"declaration": "theorem not_irrational_rpow :\n   \u00ac \u2200 a b : \u211d, Irrational a \u2192 Irrational b \u2192 0 < a \u2192 Irrational (a ^ b) := by\n  push_neg\n  by_cases hc : Irrational (\u221a2 ^ \u221a2)\n  \u00b7 use (\u221a2 ^ \u221a2), \u221a2, hc, irrational_sqrt_two, by positivity\n    rw [\u2190 rpow_mul, mul_self_sqrt, rpow_two, sq_sqrt] <;> norm_num\n  \u00b7 use \u221a2, \u221a2, irrational_sqrt_two, irrational_sqrt_two, by positivity, hc\n", "file": "/lustre07/scratch/kevew/DuelModelResearch/mathlib4/Counterexamples/IrrationalPowerOfIrrational.lean", "context": {"open": ["Real"], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "\u22a2 \u00ac\u2200 (a b : \u211d), Irrational a \u2192 Irrational b \u2192 0 < a \u2192 Irrational (a ^ b)"}, {"line": "  push_neg", "tactic_state": "\u22a2 \u2203 a b, Irrational a \u2227 Irrational b \u2227 0 < a \u2227 \u00acIrrational (a ^ b)"}, {"line": "  by_cases hc : Irrational (\u221a2 ^ \u221a2)", "tactic_state": "case pos\nhc : Irrational (\u221a2 ^ \u221a2)\n\u22a2 \u2203 a b, Irrational a \u2227 Irrational b \u2227 0 < a \u2227 \u00acIrrational (a ^ b)\n---\ncase neg\nhc : \u00acIrrational (\u221a2 ^ \u221a2)\n\u22a2 \u2203 a b, Irrational a \u2227 Irrational b \u2227 0 < a \u2227 \u00acIrrational (a ^ b)"}, {"line": "  \u00b7 use (\u221a2 ^ \u221a2), \u221a2, hc, irrational_sqrt_two, by positivity", "tactic_state": "case right\nhc : Irrational (\u221a2 ^ \u221a2)\n\u22a2 \u00acIrrational ((\u221a2 ^ \u221a2) ^ \u221a2)"}, {"line": "    rw [\u2190 rpow_mul, mul_self_sqrt, rpow_two, sq_sqrt] <;> norm_num", "tactic_state": ""}, {"line": "  \u00b7 use \u221a2, \u221a2, irrational_sqrt_two, irrational_sqrt_two, by positivity, hc", "tactic_state": ""}]}
{"declaration": "theorem euclid (n : \u2115) : \u2203 N, n < N \u2227 N.Prime := by\n  let N := n.factorial + 1\n  let p := minFac N\n  use p\n  have prime : p.Prime := by\n    apply minFac_prime\n    observe : n.factorial > 0\n    omega\n  constructor\n  \u00b7 by_contra!\n    observe : p \u2223 n.factorial\n    observe : p \u2223 N\n    observe : p \u2223 1\n    observe : \u00ac p \u2223 1\n    contradiction\n  \u00b7 exact prime", "file": "/lustre07/scratch/kevew/DuelModelResearch/mathlib4/MathlibTest/observe.lean", "context": {"open": ["Nat"], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "n : \u2115\n\u22a2 \u2203 N, n < N \u2227 Nat.Prime N"}, {"line": "  let N := n.factorial + 1", "tactic_state": "n : \u2115\nN : \u2115 := n ! + 1\n\u22a2 \u2203 N, n < N \u2227 Nat.Prime N"}, {"line": "  let p := minFac N", "tactic_state": "n : \u2115\nN : \u2115 := n ! + 1\np : \u2115 := N.minFac\n\u22a2 \u2203 N, n < N \u2227 Nat.Prime N"}, {"line": "  use p", "tactic_state": "case h\nn : \u2115\nN : \u2115 := n ! + 1\np : \u2115 := N.minFac\n\u22a2 n < p \u2227 Nat.Prime p"}, {"line": "  have prime : p.Prime := by", "tactic_state": "case h\nn : \u2115\nN : \u2115 := n ! + 1\np : \u2115 := N.minFac\nprime : Nat.Prime p\n\u22a2 n < p \u2227 Nat.Prime p"}, {"line": "    apply minFac_prime", "tactic_state": "case h.left\nn : \u2115\nN : \u2115 := n ! + 1\np : \u2115 := N.minFac\nprime : Nat.Prime p\n\u22a2 n < p\n---\ncase h.right\nn : \u2115\nN : \u2115 := n ! + 1\np : \u2115 := N.minFac\nprime : Nat.Prime p\n\u22a2 Nat.Prime p"}, {"line": "    observe : n.factorial > 0", "tactic_state": "case h.left\nn : \u2115\nN : \u2115 := n ! + 1\np : \u2115 := N.minFac\nprime : Nat.Prime p\nthis : p \u2264 n\n\u22a2 False"}, {"line": "    omega", "tactic_state": "case h.left\nn : \u2115\nN : \u2115 := n ! + 1\np : \u2115 := N.minFac\nprime : Nat.Prime p\nthis\u271d : p \u2264 n\nthis : p \u2223 n !\n\u22a2 False"}, {"line": "  constructor", "tactic_state": "case h.left\nn : \u2115\nN : \u2115 := n ! + 1\np : \u2115 := N.minFac\nprime : Nat.Prime p\nthis\u271d\u00b9 : p \u2264 n\nthis\u271d : p \u2223 n !\nthis : N.minFac \u2223 N\n\u22a2 False"}, {"line": "  \u00b7 by_contra!", "tactic_state": "case h.left\nn : \u2115\nN : \u2115 := n ! + 1\np : \u2115 := N.minFac\nprime : Nat.Prime p\nthis\u271d\u00b2 : p \u2264 n\nthis\u271d\u00b9 : p \u2223 n !\nthis\u271d : N.minFac \u2223 N\nthis : p \u2223 1\n\u22a2 False"}, {"line": "    observe : p \u2223 n.factorial", "tactic_state": "case h.left\nn : \u2115\nN : \u2115 := n ! + 1\np : \u2115 := N.minFac\nprime : Nat.Prime p\nthis\u271d\u00b3 : p \u2264 n\nthis\u271d\u00b2 : p \u2223 n !\nthis\u271d\u00b9 : N.minFac \u2223 N\nthis\u271d : p \u2223 1\nthis : \u00acp \u2223 1\n\u22a2 False"}, {"line": "    observe : p \u2223 N", "tactic_state": ""}, {"line": "    observe : p \u2223 1", "tactic_state": ""}]}
{"declaration": "example : \u2203 x : Nat, x = x := by use 42\n", "file": "/lustre07/scratch/kevew/DuelModelResearch/mathlib4/MathlibTest/Use.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "\u22a2 \u2203 x, x = x"}]}
{"declaration": "example : \u2203 x : Nat, x = x := by use 42, rfl\n", "file": "/lustre07/scratch/kevew/DuelModelResearch/mathlib4/MathlibTest/Use.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "\u22a2 \u2203 x, x = x"}]}
{"declaration": "example : \u2203 x : Nat, x = x := by use! 42\n", "file": "/lustre07/scratch/kevew/DuelModelResearch/mathlib4/MathlibTest/Use.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "\u22a2 \u2203 x, x = x"}]}
{"declaration": "example (h : 42 = y) : \u2203 x : Nat, x = y := by use 42, h\n", "file": "/lustre07/scratch/kevew/DuelModelResearch/mathlib4/MathlibTest/Use.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "y : \u2115\nh : 42 = y\n\u22a2 \u2203 x, x = y"}]}
{"declaration": "example (h : 42 = y) : \u2203 x : Nat, x = y := by use 42\n", "file": "/lustre07/scratch/kevew/DuelModelResearch/mathlib4/MathlibTest/Use.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "y : \u2115\nh : 42 = y\n\u22a2 \u2203 x, x = y"}]}
{"declaration": "example (n : Fin 3) : \u2203 x : Nat, x = x := show_term by use n\n", "file": "/lustre07/scratch/kevew/DuelModelResearch/mathlib4/MathlibTest/Use.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "n : Fin 3\n\u22a2 \u2203 x, x = x"}]}
{"declaration": "example : \u2203 x : Nat, \u2203 y : Nat, x = y := by use 42, 42\n", "file": "/lustre07/scratch/kevew/DuelModelResearch/mathlib4/MathlibTest/Use.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "\u22a2 \u2203 x y, x = y"}]}
{"declaration": "example : \u2203 p : Nat \u00d7 Nat, p.1 = p.2 := by use 42; sorry\n", "file": "/lustre07/scratch/kevew/DuelModelResearch/mathlib4/MathlibTest/Use.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "\u22a2 \u2203 p, p.1 = p.2"}]}
{"declaration": "example : \u2203 p : Nat \u00d7 Nat, p.1 = p.2 := by use! 42, 42\n", "file": "/lustre07/scratch/kevew/DuelModelResearch/mathlib4/MathlibTest/Use.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "\u22a2 \u2203 p, p.1 = p.2"}]}
{"declaration": "example : \u2203 p : Nat \u00d7 Nat, p.1 = p.2 := by use! (42, 42)\n", "file": "/lustre07/scratch/kevew/DuelModelResearch/mathlib4/MathlibTest/Use.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "\u22a2 \u2203 p, p.1 = p.2"}]}
{"declaration": "example (r : Nat \u2192 Nat \u2192 Prop) (h : \u2200 x, r x x) :\n    \u2203 p : Nat \u00d7 Nat, r p.1 p.2 := by use! 42; use! 42; apply h\n", "file": "/lustre07/scratch/kevew/DuelModelResearch/mathlib4/MathlibTest/Use.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "r : \u2115 \u2192 \u2115 \u2192 Prop\nh : \u2200 (x : \u2115), r x x\n\u22a2 \u2203 p, r p.1 p.2"}]}
{"declaration": "example (r : Nat \u2192 Nat \u2192 Prop) (h : \u2200 x, r x x) :\n    \u2203 p : Nat \u00d7 Nat, r p.1 p.2 := by use! 42, 42; apply h\n", "file": "/lustre07/scratch/kevew/DuelModelResearch/mathlib4/MathlibTest/Use.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "r : \u2115 \u2192 \u2115 \u2192 Prop\nh : \u2200 (x : \u2115), r x x\n\u22a2 \u2203 p, r p.1 p.2"}]}
{"declaration": "example (r : Nat \u2192 Nat \u2192 Prop) (h : \u2200 x, r x x) :\n    \u2203 p : Nat \u00d7 Nat, r p.1 p.2 := by use! 42, 42, h _\n", "file": "/lustre07/scratch/kevew/DuelModelResearch/mathlib4/MathlibTest/Use.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "r : \u2115 \u2192 \u2115 \u2192 Prop\nh : \u2200 (x : \u2115), r x x\n\u22a2 \u2203 p, r p.1 p.2"}]}
{"declaration": "example : \u2203 x : String \u00d7 String, x.1 = x.2 := by use (\"a\", \"a\")\n", "file": "/lustre07/scratch/kevew/DuelModelResearch/mathlib4/MathlibTest/Use.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "\u22a2 \u2203 x, x.1 = x.2"}]}
{"declaration": "example : \u2203 x : String \u00d7 String, x.1 = x.2 := by use! \"a\", \"a\"\n", "file": "/lustre07/scratch/kevew/DuelModelResearch/mathlib4/MathlibTest/Use.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "\u22a2 \u2203 x, x.1 = x.2"}]}
{"declaration": "example : \u2203 x : Nat, x = x := by\n  use ?_\n  exact 42\n", "file": "/lustre07/scratch/kevew/DuelModelResearch/mathlib4/MathlibTest/Use.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "\u22a2 \u2203 x, x = x"}, {"line": "  use ?_", "tactic_state": "case w\n\u22a2 \u2115"}, {"line": "  exact 42", "tactic_state": ""}]}
{"declaration": "example (\u03b1 : Type) : \u2203 S : List \u03b1, S = S := by use \u2205\n", "file": "/lustre07/scratch/kevew/DuelModelResearch/mathlib4/MathlibTest/Use.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "\u03b1 : Type\n\u22a2 \u2203 S, S = S"}]}
{"declaration": "example : \u2203 x : Int, x = x := by use 42\n", "file": "/lustre07/scratch/kevew/DuelModelResearch/mathlib4/MathlibTest/Use.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "\u22a2 \u2203 x, x = x"}]}
{"declaration": "example : \u2203 a b c : Int, a + b + c = 6 := by\n  use 1, 2, 3\n  rfl\n", "file": "/lustre07/scratch/kevew/DuelModelResearch/mathlib4/MathlibTest/Use.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "\u22a2 \u2203 a b c, a + b + c = 6"}, {"line": "  use 1, 2, 3", "tactic_state": "case h\n\u22a2 1 + 2 + 3 = 6"}, {"line": "  rfl", "tactic_state": ""}]}
{"declaration": "example : \u2203 p : Int \u00d7 Int, p.1 = 1 := by use \u27e81, 42\u27e9\n", "file": "/lustre07/scratch/kevew/DuelModelResearch/mathlib4/MathlibTest/Use.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "\u22a2 \u2203 p, p.1 = 1"}]}
{"declaration": "example : \u2203 p : Int \u00d7 Int, p.1 = 1 := by use! 1, 42\n", "file": "/lustre07/scratch/kevew/DuelModelResearch/mathlib4/MathlibTest/Use.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "\u22a2 \u2203 p, p.1 = 1"}]}
{"declaration": "example : \u2203 n : Int, n * 3 = 3 * 2 := by\n  use 2\n  rfl\n", "file": "/lustre07/scratch/kevew/DuelModelResearch/mathlib4/MathlibTest/Use.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "\u22a2 \u2203 n, n * 3 = 3 * 2"}, {"line": "  use 2", "tactic_state": "case h\n\u22a2 2 * 3 = 3 * 2"}, {"line": "  rfl", "tactic_state": ""}]}
{"declaration": "example : \u03a3 _x _y : Int, Int \u00d7 Int \u00d7 Int := by\n  use 1, 2, 3, 4, 5\n", "file": "/lustre07/scratch/kevew/DuelModelResearch/mathlib4/MathlibTest/Use.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "\u22a2 (_ : \u2124) \u00d7 (_ : \u2124) \u00d7 \u2124 \u00d7 \u2124 \u00d7 \u2124"}, {"line": "  use 1, 2, 3, 4, 5", "tactic_state": ""}]}
{"declaration": "example : \u03a3 _x _y : Int, (Int \u00d7 Int) \u00d7 Int := by\n  use! 1, 2, 3, 4, 5\n", "file": "/lustre07/scratch/kevew/DuelModelResearch/mathlib4/MathlibTest/Use.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "\u22a2 (_ : \u2124) \u00d7 (_ : \u2124) \u00d7 (\u2124 \u00d7 \u2124) \u00d7 \u2124"}, {"line": "  use! 1, 2, 3, 4, 5", "tactic_state": ""}]}
{"declaration": "example : Option Nat := by use 1\n", "file": "/lustre07/scratch/kevew/DuelModelResearch/mathlib4/MathlibTest/Use.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "\u22a2 Option \u2115"}]}
{"declaration": "example : Nat \u2192 Nat := by use 1\n", "file": "/lustre07/scratch/kevew/DuelModelResearch/mathlib4/MathlibTest/Use.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "\u22a2 \u2115 \u2192 \u2115"}]}
{"declaration": "example : foo := by\n  use 100, \u27e8true, 4\u27e9, 3\n", "file": "/lustre07/scratch/kevew/DuelModelResearch/mathlib4/MathlibTest/Use.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "foo : Sort ?u.5\n\u22a2 foo"}, {"line": "  use 100, \u27e8true, 4\u27e9, 3", "tactic_state": ""}]}
{"declaration": "example : foo := by\n  use! 100, true, 4, 3\n", "file": "/lustre07/scratch/kevew/DuelModelResearch/mathlib4/MathlibTest/Use.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "foo : Sort ?u.5\n\u22a2 foo"}, {"line": "  use! 100, true, 4, 3", "tactic_state": ""}]}
{"declaration": "example : foo := show_term by\n  use ?x, \u27e8?b, 4\u27e9\n  exact (3 : Nat)\n  exact (100 : Nat)\n  exact true\n", "file": "/lustre07/scratch/kevew/DuelModelResearch/mathlib4/MathlibTest/Use.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "foo : Sort ?u.5\n\u22a2 foo"}, {"line": "  use ?x, \u27e8?b, 4\u27e9", "tactic_state": ""}]}
{"declaration": "example : foo := show_term by\n  -- Type ascriptions keep refinement from occurring before applying the constructor\n  use! (?x : Nat), (?b : Bool), 4\n  exact (3 : Nat)\n  exact (100 : Nat)\n  exact true\n", "file": "/lustre07/scratch/kevew/DuelModelResearch/mathlib4/MathlibTest/Use.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "foo : Sort ?u.5\n\u22a2 foo"}, {"line": "  -- Type ascriptions keep refinement from occurring before applying the constructor", "tactic_state": ""}]}
{"declaration": "example : \u2203 p : {x : Nat // 0 < x}, 1 < p.1 := by use! 2 <;> decide\n", "file": "/lustre07/scratch/kevew/DuelModelResearch/mathlib4/MathlibTest/Use.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "\u22a2 \u2203 p, 1 < \u2191p"}]}
{"declaration": "example : Baz 0 3 := by use _\n", "file": "/lustre07/scratch/kevew/DuelModelResearch/mathlib4/MathlibTest/Use.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "x\u271d : Sort ?u.2\nBaz : x\u271d\n\u22a2 sorry"}]}
{"declaration": "example : Baz 0 3 := by use 3\n", "file": "/lustre07/scratch/kevew/DuelModelResearch/mathlib4/MathlibTest/Use.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "x\u271d : Sort ?u.2\nBaz : x\u271d\n\u22a2 sorry"}]}
{"declaration": "example : Baz 0 3 := by use 4\n", "file": "/lustre07/scratch/kevew/DuelModelResearch/mathlib4/MathlibTest/Use.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "x\u271d : Sort ?u.2\nBaz : x\u271d\n\u22a2 sorry"}]}
{"declaration": "example : Baz 1 3 := by use (3 : Nat)\n", "file": "/lustre07/scratch/kevew/DuelModelResearch/mathlib4/MathlibTest/Use.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "x\u271d : Sort ?u.2\nBaz : x\u271d\n\u22a2 sorry"}]}
{"declaration": "example : DecidableType := by\n  use Nat\n", "file": "/lustre07/scratch/kevew/DuelModelResearch/mathlib4/MathlibTest/Use.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "DecidableType : Sort ?u.5\n\u22a2 DecidableType"}, {"line": "  use Nat", "tactic_state": ""}]}
{"declaration": "example (\u03b2 : Type) [DecidableEq \u03b2] : DecidableType := by\n  use \u03b2\n", "file": "/lustre07/scratch/kevew/DuelModelResearch/mathlib4/MathlibTest/Use.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "DecidableType : Sort ?u.27\n\u03b2 : Type\ninst\u271d : DecidableEq \u03b2\n\u22a2 DecidableType"}, {"line": "  use \u03b2", "tactic_state": ""}]}