"## Tactic State A:\na b : ℕ\nh1 : a + b = a\n⊢ a + b = a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h1"
"## Tactic State A:\n⊢ ¬∀ (a b : ℝ), Irrational a → Irrational b → 0 < a → Irrational (a ^ b)\n## Tactic State B:\n⊢ ∃ a b, Irrational a ∧ Irrational b ∧ 0 < a ∧ ¬Irrational (a ^ b)\n## Action:\n  push_neg"
"## Tactic State A:\n⊢ ∃ a b, Irrational a ∧ Irrational b ∧ 0 < a ∧ ¬Irrational (a ^ b)\n## Tactic State B:\ncase pos\nhc : Irrational (√2 ^ √2)\n⊢ ∃ a b, Irrational a ∧ Irrational b ∧ 0 < a ∧ ¬Irrational (a ^ b)\n---\ncase neg\nhc : ¬Irrational (√2 ^ √2)\n⊢ ∃ a b, Irrational a ∧ Irrational b ∧ 0 < a ∧ ¬Irrational (a ^ b)\n## Action:\n  by_cases hc : Irrational (√2 ^ √2)"
"## Tactic State A:\ncase pos\nhc : Irrational (√2 ^ √2)\n⊢ ∃ a b, Irrational a ∧ Irrational b ∧ 0 < a ∧ ¬Irrational (a ^ b)\n---\ncase neg\nhc : ¬Irrational (√2 ^ √2)\n⊢ ∃ a b, Irrational a ∧ Irrational b ∧ 0 < a ∧ ¬Irrational (a ^ b)\n## Tactic State B:\ncase right\nhc : Irrational (√2 ^ √2)\n⊢ ¬Irrational ((√2 ^ √2) ^ √2)\n## Action:\n  · use (√2 ^ √2), √2, hc, irrational_sqrt_two, by positivity"
"## Tactic State A:\ncase right\nhc : Irrational (√2 ^ √2)\n⊢ ¬Irrational ((√2 ^ √2) ^ √2)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    rw [← rpow_mul, mul_self_sqrt, rpow_two, sq_sqrt] <;> norm_num"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · use √2, √2, irrational_sqrt_two, irrational_sqrt_two, by positivity, hc"
"## Tactic State A:\nn : ℕ\n⊢ ∃ N, n < N ∧ Nat.Prime N\n## Tactic State B:\nn : ℕ\nN : ℕ := n ! + 1\n⊢ ∃ N, n < N ∧ Nat.Prime N\n## Action:\n  let N := n.factorial + 1"
"## Tactic State A:\nn : ℕ\nN : ℕ := n ! + 1\n⊢ ∃ N, n < N ∧ Nat.Prime N\n## Tactic State B:\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\n⊢ ∃ N, n < N ∧ Nat.Prime N\n## Action:\n  let p := minFac N"
"## Tactic State A:\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\n⊢ ∃ N, n < N ∧ Nat.Prime N\n## Tactic State B:\ncase h\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\n⊢ n < p ∧ Nat.Prime p\n## Action:\n  use p"
"## Tactic State A:\ncase h\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\n⊢ n < p ∧ Nat.Prime p\n## Tactic State B:\ncase h\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\nprime : Nat.Prime p\n⊢ n < p ∧ Nat.Prime p\n## Action:\n  have prime : p.Prime := by"
"## Tactic State A:\ncase h\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\nprime : Nat.Prime p\n⊢ n < p ∧ Nat.Prime p\n## Tactic State B:\ncase h.left\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\nprime : Nat.Prime p\n⊢ n < p\n---\ncase h.right\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\nprime : Nat.Prime p\n⊢ Nat.Prime p\n## Action:\n    apply minFac_prime"
"## Tactic State A:\ncase h.left\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\nprime : Nat.Prime p\n⊢ n < p\n---\ncase h.right\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\nprime : Nat.Prime p\n⊢ Nat.Prime p\n## Tactic State B:\ncase h.left\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\nprime : Nat.Prime p\nthis : p ≤ n\n⊢ False\n## Action:\n    observe : n.factorial > 0"
"## Tactic State A:\ncase h.left\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\nprime : Nat.Prime p\nthis : p ≤ n\n⊢ False\n## Tactic State B:\ncase h.left\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\nprime : Nat.Prime p\nthis✝ : p ≤ n\nthis : p ∣ n !\n⊢ False\n## Action:\n    omega"
"## Tactic State A:\ncase h.left\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\nprime : Nat.Prime p\nthis✝ : p ≤ n\nthis : p ∣ n !\n⊢ False\n## Tactic State B:\ncase h.left\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\nprime : Nat.Prime p\nthis✝¹ : p ≤ n\nthis✝ : p ∣ n !\nthis : N.minFac ∣ N\n⊢ False\n## Action:\n  constructor"
"## Tactic State A:\ncase h.left\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\nprime : Nat.Prime p\nthis✝¹ : p ≤ n\nthis✝ : p ∣ n !\nthis : N.minFac ∣ N\n⊢ False\n## Tactic State B:\ncase h.left\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\nprime : Nat.Prime p\nthis✝² : p ≤ n\nthis✝¹ : p ∣ n !\nthis✝ : N.minFac ∣ N\nthis : p ∣ 1\n⊢ False\n## Action:\n  · by_contra!"
"## Tactic State A:\ncase h.left\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\nprime : Nat.Prime p\nthis✝² : p ≤ n\nthis✝¹ : p ∣ n !\nthis✝ : N.minFac ∣ N\nthis : p ∣ 1\n⊢ False\n## Tactic State B:\ncase h.left\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\nprime : Nat.Prime p\nthis✝³ : p ≤ n\nthis✝² : p ∣ n !\nthis✝¹ : N.minFac ∣ N\nthis✝ : p ∣ 1\nthis : ¬p ∣ 1\n⊢ False\n## Action:\n    observe : p ∣ n.factorial"
"## Tactic State A:\ncase h.left\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\nprime : Nat.Prime p\nthis✝³ : p ≤ n\nthis✝² : p ∣ n !\nthis✝¹ : N.minFac ∣ N\nthis✝ : p ∣ 1\nthis : ¬p ∣ 1\n⊢ False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    observe : p ∣ N"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    observe : p ∣ 1"
"## Tactic State A:\n⊢ ∃ x, x = x\n## Tactic State B:\ncase w\n⊢ ℕ\n## Action:\n  use ?_"
"## Tactic State A:\ncase w\n⊢ ℕ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact 42"
"## Tactic State A:\n⊢ ∃ a b c, a + b + c = 6\n## Tactic State B:\ncase h\n⊢ 1 + 2 + 3 = 6\n## Action:\n  use 1, 2, 3"
"## Tactic State A:\ncase h\n⊢ 1 + 2 + 3 = 6\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rfl"
"## Tactic State A:\n⊢ ∃ n, n * 3 = 3 * 2\n## Tactic State B:\ncase h\n⊢ 2 * 3 = 3 * 2\n## Action:\n  use 2"
"## Tactic State A:\ncase h\n⊢ 2 * 3 = 3 * 2\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rfl"
"## Tactic State A:\n⊢ (_ : ℤ) × (_ : ℤ) × ℤ × ℤ × ℤ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  use 1, 2, 3, 4, 5"
"## Tactic State A:\n⊢ (_ : ℤ) × (_ : ℤ) × (ℤ × ℤ) × ℤ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  use! 1, 2, 3, 4, 5"
"## Tactic State A:\nfoo : Sort ?u.5\n⊢ foo\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  use 100, ⟨true, 4⟩, 3"
"## Tactic State A:\nfoo : Sort ?u.5\n⊢ foo\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  use! 100, true, 4, 3"
"## Tactic State A:\nfoo : Sort ?u.5\n⊢ foo\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  use ?x, ⟨?b, 4⟩"
"## Tactic State A:\nfoo : Sort ?u.5\n⊢ foo\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  -- Type ascriptions keep refinement from occurring before applying the constructor"
"## Tactic State A:\nDecidableType : Sort ?u.5\n⊢ DecidableType\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  use Nat"
"## Tactic State A:\nDecidableType : Sort ?u.27\nβ : Type\ninst✝ : DecidableEq β\n⊢ DecidableType\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  use β"
"## Tactic State A:\nDecidableType : Sort ?u.9\nβ : Type\n⊢ DecidableType\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  use β"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  guard_target = DecidableEq β"
"## Tactic State A:\nx✝ : Sort ?u.6\nEmbedding : x✝\nα : Type u\n⊢ sorry × Unit\n## Tactic State B:\ncase fst\nx✝ : Sort ?u.6\nEmbedding : x✝\nα : Type u\n⊢ sorry\n---\ncase snd\nx✝ : Sort ?u.6\nEmbedding : x✝\nα : Type u\n⊢ Unit\n## Action:\n  constructor"
"## Tactic State A:\ncase fst\nx✝ : Sort ?u.6\nEmbedding : x✝\nα : Type u\n⊢ sorry\n---\ncase snd\nx✝ : Sort ?u.6\nEmbedding : x✝\nα : Type u\n⊢ Unit\n## Tactic State B:\ncase snd\nx✝ : Sort ?u.6\nEmbedding : x✝\nα : Type u\n⊢ Unit\n## Action:\n  -- testing that `use` actually focuses on the main goal"
"## Tactic State A:\ncase snd\nx✝ : Sort ?u.6\nEmbedding : x✝\nα : Type u\n⊢ Unit\n## Tactic State B:\ncase snd\nx✝ : Sort ?u.6\nEmbedding : x✝\nα : Type u\n⊢ Unit\n## Action:\n  use id"
"## Tactic State A:\ncase snd\nx✝ : Sort ?u.6\nEmbedding : x✝\nα : Type u\n⊢ Unit\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · simp"
"## Tactic State A:\nh1 : 1 > 0\n⊢ ∃ n, ∃ (_ : n > 0), n = n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  use 1"
"## Tactic State A:\n⊢ let P := fun _x => ∃ _n, True;\n  P 1\n## Tactic State B:\nP : ℕ → Prop := fun _x => ∃ _n, True\n⊢ P 1\n## Action:\n  intro P"
"## Tactic State A:\nP : ℕ → Prop := fun _x => ∃ _n, True\n⊢ P 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  use 1"
"## Tactic State A:\n⊢ ∃ f, f 1 = 1\n## Tactic State B:\ncase h\n⊢ sorry 1 = 1\n## Action:\n  use ·"
"## Tactic State A:\n⊢ ∃ f, f 1 = 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  use (·)"
"## Tactic State A:\nα : Type u_1\nβ : Type u_2\ninst✝⁴ : MeasurableSpace α\ninst✝³ : MeasurableSpace β\ninst✝² : TopologicalSpace β\ninst✝¹ : PseudoMetrizableSpace β\ninst✝ : BorelSpace β\nF : ℕ → α → β\nhF : ∀ (i : ℕ), StronglyMeasurable (F i)\n⊢ Measurable (F 0)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  measurability"
"## Tactic State A:\nα : Type u_1\nβ : Type u_2\ninst✝⁶ : MeasurableSpace α\ninst✝⁵ : MeasurableSpace β\ninst✝⁴ : TopologicalSpace β\ninst✝³ : PseudoMetrizableSpace β\ninst✝² : BorelSpace β\ninst✝¹ : AddCommMonoid β\ninst✝ : MeasurableAdd₂ β\ns : Finset ℕ\nF : ℕ → α → β\nhF : ∀ (i : ℕ), Measurable (F i)\n⊢ Measurable (∑ i ∈ s, fun x => F (i + 1) x + F i x)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  fun_prop"
"## Tactic State A:\nα : Type u_1\nβ : Type u_2\ninst✝⁷ : MeasurableSpace α\ninst✝⁶ : MeasurableSpace β\ninst✝⁵ : TopologicalSpace β\ninst✝⁴ : PseudoMetrizableSpace β\ninst✝³ : BorelSpace β\ninst✝² : MeasurableSpace α\nμ : Measure α\ninst✝¹ : AddCommMonoid β\ninst✝ : MeasurableAdd₂ β\ns : Finset ℕ\nF : ℕ → α → β\nhF : ∀ (i : ℕ), AEMeasurable (F i) μ\n⊢ AEMeasurable (∑ i ∈ s, fun x => F (i + 1) x + F i x) μ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  measurability"
"## Tactic State A:\nα : Type u_1\nβ : Type u_2\ninst✝¹¹ : MeasurableSpace α\ninst✝¹⁰ : MeasurableSpace β\ninst✝⁹ : TopologicalSpace β\ninst✝⁸ : PseudoMetrizableSpace β\ninst✝⁷ : BorelSpace β\ninst✝⁶ : MeasurableSpace α\nμ : Measure α\ninst✝⁵ : TopologicalSpace α\ninst✝⁴ : BorelSpace α\ninst✝³ : NormedAddCommGroup β\ninst✝² : BorelSpace β\ninst✝¹ : MeasurableAdd₂ β\ninst✝ : MeasurableSub₂ β\ns : Finset ℕ\nF : ℕ → α → β\nhF : ∀ (i : ℕ), Measurable (F i)\n⊢ AEMeasurable (∑ i ∈ s, fun x => F (i + 1) x - F i x) μ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  measurability"
"## Tactic State A:\na b c d e : ℕ\nh1 : a ≤ b\nh2 : c ≤ d\nh3 : 0 ≤ e\n⊢ a + c * e + a + c + 0 ≤ b + d * e + b + d + e\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  apply_rules [Nat.add_le_add, Nat.mul_le_mul_right]"
"## Tactic State A:\na b c d e : ℕ\nh1 : a ≤ b\nh2 : c ≤ d\nh3 : 0 ≤ e\n⊢ a + c * e + a + c + 0 ≤ b + d * e + b + d + e\n## Tactic State B:\ncase h₂\na b c d e : ℕ\nh1 : a ≤ b\nh2 : c ≤ d\nh3 : 0 ≤ e\n⊢ 0 ≤ e\n## Action:\n  apply_rules (config := {maxDepth := 9}) [Nat.add_le_add, Nat.mul_le_mul_right]"
"## Tactic State A:\ncase h₂\na b c d e : ℕ\nh1 : a ≤ b\nh2 : c ≤ d\nh3 : 0 ≤ e\n⊢ 0 ≤ e\n## Tactic State B:\ncase h₂\na b c d e : ℕ\nh1 : a ≤ b\nh2 : c ≤ d\nh3 : 0 ≤ e\n⊢ 0 ≤ e\n## Action:\n  guard_target = 0 ≤ e"
"## Tactic State A:\ncase h₂\na b c d e : ℕ\nh1 : a ≤ b\nh2 : c ≤ d\nh3 : 0 ≤ e\n⊢ 0 ≤ e\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  assumption"
"## Tactic State A:\nP Q : Prop\np : P\nf : P → Q\n⊢ Q\n## Tactic State B:\nP Q : Prop\np : P\nf : P → Q\n⊢ P\n## Action:\n  apply_rules only [f]"
"## Tactic State A:\nP Q : Prop\np : P\nf : P → Q\n⊢ P\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact p"
"## Tactic State A:\nP Q : Prop\np : P\nf : P → Q\n⊢ Q\n## Tactic State B:\nP Q : Prop\np : P\nf : P → Q\n⊢ P\n## Action:\n  apply_rules [-p]"
"## Tactic State A:\nP Q : Prop\np : P\nf : P → Q\n⊢ P\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact p"
"## Tactic State A:\nP : ℕ → Type\nf : {n : ℕ} → P n → P (n + 1)\ng : P 0\n⊢ P 2\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  apply_rules only [f, g]"
"## Tactic State A:\nQ : Type\nf : ℕ → Q\n⊢ ℤ × Q\n## Tactic State B:\ncase fst\nQ : Type\nf : ℕ → Q\n⊢ ℤ\n---\ncase snd\nQ : Type\nf : ℕ → Q\n⊢ ℕ\n## Action:\n  apply_rules only [Prod.mk, f]"
"## Tactic State A:\ncase fst\nQ : Type\nf : ℕ → Q\n⊢ ℤ\n---\ncase snd\nQ : Type\nf : ℕ → Q\n⊢ ℕ\n## Tactic State B:\ncase fst\nQ : Type\nf : ℕ → Q\n⊢ ℤ\n---\ncase snd\nQ : Type\nf : ℕ → Q\n⊢ ℕ\n## Action:\n  guard_target = Int"
"## Tactic State A:\ncase fst\nQ : Type\nf : ℕ → Q\n⊢ ℤ\n---\ncase snd\nQ : Type\nf : ℕ → Q\n⊢ ℕ\n## Tactic State B:\ncase snd\nQ : Type\nf : ℕ → Q\n⊢ ℕ\n## Action:\n  exact 0"
"## Tactic State A:\ncase snd\nQ : Type\nf : ℕ → Q\n⊢ ℕ\n## Tactic State B:\ncase snd\nQ : Type\nf : ℕ → Q\n⊢ ℕ\n## Action:\n  guard_target = Nat"
"## Tactic State A:\ncase snd\nQ : Type\nf : ℕ → Q\n⊢ ℕ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact 37"
"## Tactic State A:\nα : Type u_1\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b : α\nhb : 0 ≤ b\nhab : a ≤ b\n⊢ a / 2 ≤ b / 2\n## Tactic State B:\nα : Type u_1\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b : α\nhb : 0 ≤ b\nhab : a ≤ b\n⊢ a / 2 ≤ b / 2\n## Action:\n  fail_if_success"
"## Tactic State A:\nα : Type u_1\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b : α\nhb : 0 ≤ b\nhab : a ≤ b\n⊢ a / 2 ≤ b / 2\n## Tactic State B:\nα : Type u_1\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b : α\nhb : 0 ≤ b\nhab : a ≤ b\n⊢ a / 2 ≤ b / 2\n## Action:\n    apply_rules (config := { transparency := .reducible }) [mul_le_mul]"
"## Tactic State A:\nα : Type u_1\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b : α\nhb : 0 ≤ b\nhab : a ≤ b\n⊢ a / 2 ≤ b / 2\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  guard_target = a / 2 ≤ b / 2"
"## Tactic State A:\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  refine' (by refine' .intro)"
"## Tactic State A:\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  refine' (by refine' .intro)"
"## Tactic State A:\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  refine' (by refine' .intro)"
"## Tactic State A:\na : (True ∨ True) ∨ True ∨ True\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cases' a with b b <;> cases' b <;> trivial"
"## Tactic State A:\na : (True ∨ True) ∨ True ∨ True\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cases' a with b b <;> cases' b <;> trivial"
"## Tactic State A:\n⊢ True ∧ True\n## Tactic State B:\nthis : True\n⊢ True ∧ True\n## Action:\n  have : True := by"
"## Tactic State A:\nthis : True\n⊢ True ∧ True\n## Tactic State B:\nthis : True\nfoo : ℕ := sorry\n⊢ True ∧ True\n## Action:\n    · admit"
"## Tactic State A:\nthis : True\nfoo : ℕ := sorry\n⊢ True ∧ True\n## Tactic State B:\ncase refine_1\nthis : True\nfoo : ℕ := sorry\n⊢ True\n---\ncase refine_2\nthis : True\nfoo : ℕ := sorry\n⊢ True\n## Action:\n  let foo : Nat := by admit"
"## Tactic State A:\ncase refine_1\nthis : True\nfoo : ℕ := sorry\n⊢ True\n---\ncase refine_2\nthis : True\nfoo : ℕ := sorry\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  refine ⟨?_, ?_⟩"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · admit"
"## Tactic State A:\np✝² q✝² r✝¹ : Prop\nh✝¹ : p✝² ∧ q✝² ∨ p✝² ∧ r✝¹\nα✝ : Type\np✝¹ q✝¹ r✝ : α✝ → Prop\nh✝ : (∃ x, p✝¹ x ∧ q✝¹ x) ∨ ∃ x, p✝¹ x ∧ r✝ x\nα : Type\nx : α\np✝ q✝ r : α → Prop\nh₀ : (∀ (x : α), p✝ x → q✝ x → r x) ∨ r x\nh₁ : p✝ x\nh₂ : q✝ x\np q : Prop\nh : ¬(p ↔ q)\nh' : ¬q\nh'' : ¬p\n⊢ False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  tauto"
"## Tactic State A:\np✝² q✝² r✝² : Prop\nh✝¹ : p✝² ∧ q✝² ∨ p✝² ∧ r✝²\nα✝ : Type\np✝¹ q✝¹ r✝¹ : α✝ → Prop\nh✝ : (∃ x, p✝¹ x ∧ q✝¹ x) ∨ ∃ x, p✝¹ x ∧ r✝¹ x\nα : Type\nx : α\np✝ q✝ r✝ : α → Prop\nh₀ : (∀ (x : α), p✝ x → q✝ x → r✝ x) ∨ r✝ x\nh₁ : p✝ x\nh₂ : q✝ x\np q r : Prop\nh : p ↔ q\nh' : r ↔ q\nh'' : ¬r\n⊢ ¬p\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  tauto"
"## Tactic State A:\np✝² q✝¹ r✝¹ : Prop\nh✝¹ : p✝² ∧ q✝¹ ∨ p✝² ∧ r✝¹\nα✝ : Type\np✝¹ q✝ r✝ : α✝ → Prop\nh✝ : (∃ x, p✝¹ x ∧ q✝ x) ∨ ∃ x, p✝¹ x ∧ r✝ x\nα : Type\nx : α\np✝ q r : α → Prop\nh₀ : (∀ (x : α), p✝ x → q x → r x) ∨ r x\nh₁ : p✝ x\nh₂ : q x\np : Prop\nh : False\n⊢ p\n## Tactic State B:\np✝² q✝¹ r✝¹ : Prop\nh✝¹ : p✝² ∧ q✝¹ ∨ p✝² ∧ r✝¹\nα✝ : Type\np✝¹ q✝ r✝ : α✝ → Prop\nh✝ : (∃ x, p✝¹ x ∧ q✝ x) ∨ ∃ x, p✝¹ x ∧ r✝ x\nα : Type\nx : α\np✝ q r : α → Prop\nh₀ : (∀ (x : α), p✝ x → q x → r x) ∨ r x\nh₁ : p✝ x\nh₂ : q x\np : Prop\nh h' : False\n⊢ p\n## Action:\n  -- causes `h'` to have a type that's a metavariable:"
"## Tactic State A:\np✝² q✝¹ r✝¹ : Prop\nh✝¹ : p✝² ∧ q✝¹ ∨ p✝² ∧ r✝¹\nα✝ : Type\np✝¹ q✝ r✝ : α✝ → Prop\nh✝ : (∃ x, p✝¹ x ∧ q✝ x) ∨ ∃ x, p✝¹ x ∧ r✝ x\nα : Type\nx : α\np✝ q r : α → Prop\nh₀ : (∀ (x : α), p✝ x → q x → r x) ∨ r x\nh₁ : p✝ x\nh₂ : q x\np : Prop\nh h' : False\n⊢ p\n## Tactic State B:\np✝² q✝¹ r✝¹ : Prop\nh✝ : p✝² ∧ q✝¹ ∨ p✝² ∧ r✝¹\nα✝ : Type\np✝¹ q✝ r✝ : α✝ → Prop\nh : (∃ x, p✝¹ x ∧ q✝ x) ∨ ∃ x, p✝¹ x ∧ r✝ x\nα : Type\nx : α\np✝ q r : α → Prop\nh₀ : (∀ (x : α), p✝ x → q x → r x) ∨ r x\nh₁ : p✝ x\nh₂ : q x\np : Prop\nh' : False\n⊢ p\n## Action:\n  have h' := h"
"## Tactic State A:\np✝² q✝¹ r✝¹ : Prop\nh✝ : p✝² ∧ q✝¹ ∨ p✝² ∧ r✝¹\nα✝ : Type\np✝¹ q✝ r✝ : α✝ → Prop\nh : (∃ x, p✝¹ x ∧ q✝ x) ∨ ∃ x, p✝¹ x ∧ r✝ x\nα : Type\nx : α\np✝ q r : α → Prop\nh₀ : (∀ (x : α), p✝ x → q x → r x) ∨ r x\nh₁ : p✝ x\nh₂ : q x\np : Prop\nh' : False\n⊢ p\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  clear h"
"## Tactic State A:\np✝¹ q✝¹ r✝¹ : Prop\nh✝ : p✝¹ ∧ q✝¹ ∨ p✝¹ ∧ r✝¹\nα✝ : Type\np✝ q✝ r✝ : α✝ → Prop\nh : (∃ x, p✝ x ∧ q✝ x) ∨ ∃ x, p✝ x ∧ r✝ x\nα : Type\nx : α\np q r : α → Prop\nh₀ : (∀ (x : α), p x → q x → r x) ∨ r x\nh₁ : p x\nh₂ : q x\nP : ℕ → Prop\nn : ℕ\n⊢ P n → n = 7 ∨ n = 0 ∨ ¬(n = 7 ∨ n = 0) ∧ P n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  tauto"
"## Tactic State A:\np✝¹ q✝¹ r✝¹ : Prop\nh✝ : p✝¹ ∧ q✝¹ ∨ p✝¹ ∧ r✝¹\nα✝ : Type\np✝ q✝ r✝ : α✝ → Prop\nh : (∃ x, p✝ x ∧ q✝ x) ∨ ∃ x, p✝ x ∧ r✝ x\nα : Type\nx : α\np q r : α → Prop\nh₀ : (∀ (x : α), p x → q x → r x) ∨ r x\nh₁ : p x\nh₂ : q x\na b c : ℕ\n⊢ ¬(¬a ≤ b ∧ a ≤ c ∨ ¬a ≤ c ∧ a ≤ b) ↔ a ≤ b ∧ a ≤ c ∨ ¬a ≤ c ∧ ¬a ≤ b\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  tauto"
"## Tactic State A:\np✝² q✝² r✝² : Prop\nh✝¹ : p✝² ∧ q✝² ∨ p✝² ∧ r✝²\nα✝³ : Type\np✝¹ q✝¹ r✝¹ : α✝³ → Prop\nh✝ : (∃ x, p✝¹ x ∧ q✝¹ x) ∨ ∃ x, p✝¹ x ∧ r✝¹ x\nα✝² : Type\nx✝¹ : α✝²\np✝ q✝ r✝ : α✝² → Prop\nh₀ : (∀ (x : α✝²), p✝ x → q✝ x → r✝ x) ∨ r✝ x✝¹\nh₁ : p✝ x✝¹\nh₂ : q✝ x✝¹\na✝ b c : ℕ\np q r : Prop\nα✝¹ : Type\nx✝ y✝ : α✝¹\nh : x✝ = y✝\nh'' : (p ∧ q ↔ q ∨ r) ↔ (r ∧ p ↔ r ∨ q)\nα✝ : Type\nx y z w : α✝\nα : Type u_1\nβ : Type u_2\na : α\ns_1 : Set α\n⊢ ∃ a_1, a_1 = a ∨ a_1 ∈ s_1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  tauto {closer := `[simp]}"
"## Tactic State A:\np✝³ q✝³ r✝³ : Prop\nh✝² : p✝³ ∧ q✝³ ∨ p✝³ ∧ r✝³\nα✝³ : Type\np✝² q✝² r✝² : α✝³ → Prop\nh✝¹ : (∃ x, p✝² x ∧ q✝² x) ∨ ∃ x, p✝² x ∧ r✝² x\nα✝² : Type\nx✝² : α✝²\np✝¹ q✝¹ r✝¹ : α✝² → Prop\nh₀ : (∀ (x : α✝²), p✝¹ x → q✝¹ x → r✝¹ x) ∨ r✝¹ x✝²\nh₁✝ : p✝¹ x✝²\nh₂✝ : q✝¹ x✝²\na b c : ℕ\np✝ q✝ r✝ : Prop\nα✝¹ : Type\nx✝¹ y✝¹ : α✝¹\nh✝ : x✝¹ = y✝¹\nh''✝ : (p✝ ∧ q✝ ↔ q✝ ∨ r✝) ↔ (r✝ ∧ p✝ ↔ r✝ ∨ q✝)\nα✝ : Type\nx✝ y✝ z✝ w✝ : α✝\np q r : Prop\nα : Type\nx y z w : α\nh : x = y\nh₁ : y = z\nh₂ : z = w\nh'' : (p ∧ q ↔ q ∨ r) ↔ (r ∧ p ↔ r ∨ q)\n⊢ (r ∧ p ↔ r ∨ q) ∧ (q ∨ r) → p ∧ x = w ∧ (¬x = w → p ∧ q ∧ r)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  tauto {closer := `[cc]}"
"## Tactic State A:\np✝³ q✝³ r✝³ : Prop\nh✝³ : p✝³ ∧ q✝³ ∨ p✝³ ∧ r✝³\nα✝³ : Type\np✝² q✝² r✝² : α✝³ → Prop\nh✝² : (∃ x, p✝² x ∧ q✝² x) ∨ ∃ x, p✝² x ∧ r✝² x\nα✝² : Type\nx✝³ : α✝²\np✝¹ q✝¹ r✝¹ : α✝² → Prop\nh₀ : (∀ (x : α✝²), p✝¹ x → q✝¹ x → r✝¹ x) ∨ r✝¹ x✝³\nh₁✝ : p✝¹ x✝³\nh₂✝ : q✝¹ x✝³\na b c : ℕ\np✝ q✝ r✝ : Prop\nα✝¹ : Type\nx✝² y✝² : α✝¹\nh✝¹ : x✝² = y✝²\nh''✝ : (p✝ ∧ q✝ ↔ q✝ ∨ r✝) ↔ (r✝ ∧ p✝ ↔ r✝ ∨ q✝)\nα✝ : Type\nx✝¹ y✝¹ z✝ w✝ : α✝\np q r : Prop\nα : Type\nx✝ y✝ z w : α\nh✝ : x✝ = y✝\nh₁ : y✝ = z\nh₂ : z = w\nh'' : (p ∧ q ↔ q ∨ r) ↔ (r ∧ p ↔ r ∨ q)\nx y : ℕ\nh : ¬x ≠ y\n⊢ x = y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  tauto"
"## Tactic State A:\np✝⁴ q✝³ r✝³ : Prop\nh✝³ : p✝⁴ ∧ q✝³ ∨ p✝⁴ ∧ r✝³\nα✝³ : Type\np✝³ q✝² r✝² : α✝³ → Prop\nh✝² : (∃ x, p✝³ x ∧ q✝² x) ∨ ∃ x, p✝³ x ∧ r✝² x\nα✝² : Type\nx✝³ : α✝²\np✝² q✝¹ r✝¹ : α✝² → Prop\nh₀ : (∀ (x : α✝²), p✝² x → q✝¹ x → r✝¹ x) ∨ r✝¹ x✝³\nh₁✝ : p✝² x✝³\nh₂✝ : q✝¹ x✝³\na✝ b c : ℕ\np✝¹ q✝ r✝ : Prop\nα✝¹ : Type\nx✝² y✝¹ : α✝¹\nh✝¹ : x✝² = y✝¹\nh''✝ : (p✝¹ ∧ q✝ ↔ q✝ ∨ r✝) ↔ (r✝ ∧ p✝¹ ↔ r✝ ∨ q✝)\nα✝ : Type\nx✝¹ y✝ z✝ w✝ : α✝\np✝ q r : Prop\nα : Type\nx y z w : α\nh✝ : x = y\nh₁ : y = z\nh₂ : z = w\nh'' : (p✝ ∧ q ↔ q ∨ r) ↔ (r ∧ p✝ ↔ r ∨ q)\nx✝ : Sort u_1\nrestrict : x✝\np : Prop\no : Part α\nh : p → o.Dom\na : α\n⊢ a ∈ sorry ↔ p ∧ a ∈ o\n## Tactic State B:\np✝⁴ q✝³ r✝³ : Prop\nh✝³ : p✝⁴ ∧ q✝³ ∨ p✝⁴ ∧ r✝³\nα✝³ : Type\np✝³ q✝² r✝² : α✝³ → Prop\nh✝² : (∃ x, p✝³ x ∧ q✝² x) ∨ ∃ x, p✝³ x ∧ r✝² x\nα✝² : Type\nx✝³ : α✝²\np✝² q✝¹ r✝¹ : α✝² → Prop\nh₀ : (∀ (x : α✝²), p✝² x → q✝¹ x → r✝¹ x) ∨ r✝¹ x✝³\nh₁✝ : p✝² x✝³\nh₂✝ : q✝¹ x✝³\na✝ b c : ℕ\np✝¹ q✝ r✝ : Prop\nα✝¹ : Type\nx✝² y✝¹ : α✝¹\nh✝¹ : x✝² = y✝¹\nh''✝ : (p✝¹ ∧ q✝ ↔ q✝ ∨ r✝) ↔ (r✝ ∧ p✝¹ ↔ r✝ ∨ q✝)\nα✝ : Type\nx✝¹ y✝ z✝ w✝ : α✝\np✝ q r : Prop\nα : Type\nx y z w : α\nh✝ : x = y\nh₁ : y = z\nh₂ : z = w\nh'' : (p✝ ∧ q ↔ q ∨ r) ↔ (r ∧ p✝ ↔ r ∨ q)\nx✝ : Sort u_1\nrestrict : x✝\np : Prop\no : Part α\nh : p → o.Dom\na : α\n⊢ a ∈ sorry () ↔ p ∧ a ∈ o\n## Action:\n  dsimp [restrict, mem_eq]"
"## Tactic State A:\np✝⁴ q✝³ r✝³ : Prop\nh✝³ : p✝⁴ ∧ q✝³ ∨ p✝⁴ ∧ r✝³\nα✝³ : Type\np✝³ q✝² r✝² : α✝³ → Prop\nh✝² : (∃ x, p✝³ x ∧ q✝² x) ∨ ∃ x, p✝³ x ∧ r✝² x\nα✝² : Type\nx✝³ : α✝²\np✝² q✝¹ r✝¹ : α✝² → Prop\nh₀ : (∀ (x : α✝²), p✝² x → q✝¹ x → r✝¹ x) ∨ r✝¹ x✝³\nh₁✝ : p✝² x✝³\nh₂✝ : q✝¹ x✝³\na✝ b c : ℕ\np✝¹ q✝ r✝ : Prop\nα✝¹ : Type\nx✝² y✝¹ : α✝¹\nh✝¹ : x✝² = y✝¹\nh''✝ : (p✝¹ ∧ q✝ ↔ q✝ ∨ r✝) ↔ (r✝ ∧ p✝¹ ↔ r✝ ∨ q✝)\nα✝ : Type\nx✝¹ y✝ z✝ w✝ : α✝\np✝ q r : Prop\nα : Type\nx y z w : α\nh✝ : x = y\nh₁ : y = z\nh₂ : z = w\nh'' : (p✝ ∧ q ↔ q ∨ r) ↔ (r ∧ p✝ ↔ r ∨ q)\nx✝ : Sort u_1\nrestrict : x✝\np : Prop\no : Part α\nh : p → o.Dom\na : α\n⊢ a ∈ sorry () ↔ p ∧ a ∈ o\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  tauto"
"## Tactic State A:\nx : ℕ\nh : x = x\n⊢ x = x\n## Tactic State B:\nx : ℕ\nh : x = x\np : x = x := h\n⊢ x = x\n## Action:\n  set! p := h"
"## Tactic State A:\nx : ℕ\nh : x = x\np : x = x := h\n⊢ x = x\n## Tactic State B:\nx : ℕ\nh : x = x\np : x = x := h\nq : x = x := p\n⊢ x = x\n## Action:\n  set q : x = x := p"
"## Tactic State A:\nx : ℕ\nh : x = x\np : x = x := h\nq : x = x := p\n⊢ x = x\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  apply q"
"## Tactic State A:\nx : ℕ\nh : x + x - x = 3\n⊢ x + x - x = 3\n## Tactic State B:\nx : ℕ\nh : x + x - x = 3\ny : ℕ := x\nh2 : x = y\n⊢ x + x - x = 3\n## Action:\n  set! y := x with ← h2"
"## Tactic State A:\nx : ℕ\nh : x + x - x = 3\ny : ℕ := x\nh2 : x = y\n⊢ x + x - x = 3\n## Tactic State B:\nx : ℕ\ny : ℕ := x\nw : ℕ := x\nh : w + w - w = 3\nh2 : w = y\n⊢ w + w - w = 3\n## Action:\n  set w := x"
"## Tactic State A:\nx : ℕ\ny : ℕ := x\nw : ℕ := x\nh : w + w - w = 3\nh2 : w = y\n⊢ w + w - w = 3\n## Tactic State B:\nx : ℕ\ny : ℕ := x\nw : ℕ := x\nh : w + w - w = 3\nh2 : w = y\n⊢ w + w - w = 3\n## Action:\n  guard_hyp y := x"
"## Tactic State A:\nx : ℕ\ny : ℕ := x\nw : ℕ := x\nh : w + w - w = 3\nh2 : w = y\n⊢ w + w - w = 3\n## Tactic State B:\nx : ℕ\ny : ℕ := x\nw : ℕ := x\nh : w + w - w = 3\nh2 : w = y\n⊢ w + w - w = 3\n## Action:\n  guard_hyp w := x"
"## Tactic State A:\nx : ℕ\ny : ℕ := x\nw : ℕ := x\nh : w + w - w = 3\nh2 : w = y\n⊢ w + w - w = 3\n## Tactic State B:\nx : ℕ\ny : ℕ := x\nw : ℕ := x\nh : w + w - w = 3\nh2 : w = y\n⊢ w + w - w = 3\n## Action:\n  guard_hyp h : w + w - w = 3"
"## Tactic State A:\nx : ℕ\ny : ℕ := x\nw : ℕ := x\nh : w + w - w = 3\nh2 : w = y\n⊢ w + w - w = 3\n## Tactic State B:\nx : ℕ\ny : ℕ := x\nw : ℕ := x\nh : w + w - w = 3\nh2 : w = y\n⊢ w + w - w = 3\n## Action:\n  guard_hyp h2 : w = y"
"## Tactic State A:\nx : ℕ\ny : ℕ := x\nw : ℕ := x\nh : w + w - w = 3\nh2 : w = y\n⊢ w + w - w = 3\n## Tactic State B:\nx : ℕ\ny : ℕ := x\nw : ℕ := x\nz : ℕ := w\nh : z + z - z = 3\nh2 : z = y\n_h3 : z = w\n⊢ z + z - z = 3\n## Action:\n  set z := w with _h3"
"## Tactic State A:\nx : ℕ\ny : ℕ := x\nw : ℕ := x\nz : ℕ := w\nh : z + z - z = 3\nh2 : z = y\n_h3 : z = w\n⊢ z + z - z = 3\n## Tactic State B:\nx : ℕ\ny : ℕ := x\nw : ℕ := x\nz : ℕ := w\nh2 : z = y\n_h3 : z = w\na : ℕ := 3\nh : z + z - z = a\n⊢ z + z - z = a\n## Action:\n  set a := 3"
"## Tactic State A:\nx : ℕ\ny : ℕ := x\nw : ℕ := x\nz : ℕ := w\nh2 : z = y\n_h3 : z = w\na : ℕ := 3\nh : z + z - z = a\n⊢ z + z - z = a\n## Tactic State B:\nx : ℕ\ny : ℕ := x\nw : ℕ := x\nz : ℕ := w\nh2 : z = y\n_h3 : z = w\na : ℕ := 3\nh : z + z - z = a\n⊢ z + z - z = a\n## Action:\n  guard_target = z + z - z = a"
"## Tactic State A:\nx : ℕ\ny : ℕ := x\nw : ℕ := x\nz : ℕ := w\nh2 : z = y\n_h3 : z = w\na : ℕ := 3\nh : z + z - z = a\n⊢ z + z - z = a\n## Tactic State B:\nx : ℕ\ny : ℕ := x\nw : ℕ := x\nz : ℕ := w\nh2 : z = y\n_h3 : z = w\na : ℕ := 3\ni'm_the_goal : Prop := z + z - z = a\nh : i'm_the_goal\n⊢ i'm_the_goal\n## Action:\n  set i'm_the_goal : Prop := z + z - z = a"
"## Tactic State A:\nx : ℕ\ny : ℕ := x\nw : ℕ := x\nz : ℕ := w\nh2 : z = y\n_h3 : z = w\na : ℕ := 3\ni'm_the_goal : Prop := z + z - z = a\nh : i'm_the_goal\n⊢ i'm_the_goal\n## Tactic State B:\nx : ℕ\ny : ℕ := x\nw : ℕ := x\nz : ℕ := w\nh2 : z = y\n_h3 : z = w\na : ℕ := 3\ni'm_the_goal : Prop := z + z - z = a\nh : i'm_the_goal\n⊢ i'm_the_goal\n## Action:\n  guard_target = i'm_the_goal"
"## Tactic State A:\nx : ℕ\ny : ℕ := x\nw : ℕ := x\nz : ℕ := w\nh2 : z = y\n_h3 : z = w\na : ℕ := 3\ni'm_the_goal : Prop := z + z - z = a\nh : i'm_the_goal\n⊢ i'm_the_goal\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  apply h"
"## Tactic State A:\nx : ℕ\nh : x - x = 0\n⊢ x = x\n## Tactic State B:\nx : ℕ\ny : ℕ := x\nh : y - y = 0\n⊢ y = y\n## Action:\n  set y : Nat := x"
"## Tactic State A:\nx : ℕ\ny : ℕ := x\nh : y - y = 0\n⊢ y = y\n## Tactic State B:\nx : ℕ\ny : ℕ := x\nh : y - y = 0\nz : ℕ := y + 1\n_eq1 : y + 1 = z\n⊢ y = y\n## Action:\n  set! z := y + 1 with ← _eq1"
"## Tactic State A:\nx : ℕ\ny : ℕ := x\nh : y - y = 0\nz : ℕ := y + 1\n_eq1 : y + 1 = z\n⊢ y = y\n## Tactic State B:\nx : ℕ\ny : ℕ := x\nh : y - y = 0\nz : ℕ := y + 1\n_eq1 : y + 1 = z\np : x - x = 0 := h\n_eq2 : p = h\n⊢ y = y\n## Action:\n  set! p : x - x = 0 := h with _eq2"
"## Tactic State A:\nx : ℕ\ny : ℕ := x\nh : y - y = 0\nz : ℕ := y + 1\n_eq1 : y + 1 = z\np : x - x = 0 := h\n_eq2 : p = h\n⊢ y = y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rfl"
"## Tactic State A:\n⊢ True\n## Tactic State B:\ng : ℕ → ℤ := fun ε => ↑ε\n_h : g = fun ε => ↑ε\n⊢ True\n## Action:\n  set g : Nat → Int := (fun ε => ε) with _h"
"## Tactic State A:\ng : ℕ → ℤ := fun ε => ↑ε\n_h : g = fun ε => ↑ε\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial"
"## Tactic State A:\n_a _b _c _d _e _f _g _h : ℕ\n⊢ 1 = 1\n## Tactic State B:\n_a _b _c _d _e _f _g _h✝ : ℕ\na : ℕ := sorry\n_h : a = sorry\n⊢ 1 = 1\n## Action:\n  set a : Nat := test with _h"
"## Tactic State A:\n_a _b _c _d _e _f _g _h✝ : ℕ\na : ℕ := sorry\n_h : a = sorry\n⊢ 1 = 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial"
"## Tactic State A:\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  classical"
"## Tactic State A:\n⊢ True\n## Tactic State B:\n⊢ True\n## Action:\n  noise"
"## Tactic State A:\n⊢ True\n## Tactic State B:\n_zero : ℕ\nisLt✝ : _zero < 1\n⊢ True\n## Action:\n  have ⟨_zero, _⟩ : Fin 1 := ⟨0, Nat.zero_lt_one⟩"
"## Tactic State A:\n_zero : ℕ\nisLt✝ : _zero < 1\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact .intro"
"## Tactic State A:\n⊢ True\n## Tactic State B:\n_zero : ℕ\nisLt✝ : _zero < 1\n⊢ True\n## Action:\n  have ⟨_zero, _⟩ : Fin 1 := ⟨0, Nat.zero_lt_one⟩"
"## Tactic State A:\n_zero : ℕ\nisLt✝ : _zero < 1\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact .intro"
"## Tactic State A:\n⊢ True\n## Tactic State B:\n_zero : ℕ\nisLt✝ : _zero < 1\n⊢ True\n## Action:\n  have ⟨_zero, _⟩ : Fin 1 := ⟨0, Nat.zero_lt_one⟩"
"## Tactic State A:\n_zero : ℕ\nisLt✝ : _zero < 1\n⊢ True\n## Tactic State B:\n_zero : ℕ\nisLt✝ : _zero < 1\n⊢ True\n## Action:\n  noise"
"## Tactic State A:\n⊢ True\n## Tactic State B:\n_zero : ℕ\nisLt✝ : _zero < 1\n⊢ True\n## Action:\n  have ⟨_zero, _⟩ : Fin 1 := ⟨0, Nat.zero_lt_one⟩"
"## Tactic State A:\n_zero : ℕ\nisLt✝ : _zero < 1\n⊢ True\n## Tactic State B:\n_zero : ℕ\nisLt✝ : _zero < 1\n⊢ True\n## Action:\n  noise"
"## Tactic State A:\n⊢ True\n## Tactic State B:\n⊢ True\n## Action:\n  noise"
"## Tactic State A:\n⊢ True\n## Tactic State B:\ncase refine_2\nthis : ℕ\n⊢ True\n---\ncase refine_1\n⊢ ℕ\n## Action:\n  have := Nat.succ ?_;"
"## Tactic State A:\ncase refine_2\nthis : ℕ\n⊢ True\n---\ncase refine_1\n⊢ ℕ\n## Tactic State B:\ncase refine_2\nthis : ℕ\n⊢ True\n---\ncase refine_1\n⊢ ℕ\n## Action:\n  noise"
"## Tactic State A:\n⊢ True\n## Tactic State B:\ncase refine_5\nthis : ?refine_1 + ?refine_2 = ?refine_2 + ?refine_1 ∧ ?refine_3 + ?refine_4 = ?refine_4 + ?refine_3\n⊢ True\n---\ncase refine_1\n⊢ ℕ\n---\ncase refine_2\n⊢ ℕ\n---\ncase refine_3\n⊢ ℕ\n---\ncase refine_4\n⊢ ℕ\n## Action:\n  have := And.intro (Nat.add_comm ?_ ?_) (Nat.add_comm ?_ ?_)"
"## Tactic State A:\ncase refine_5\nthis : ?refine_1 + ?refine_2 = ?refine_2 + ?refine_1 ∧ ?refine_3 + ?refine_4 = ?refine_4 + ?refine_3\n⊢ True\n---\ncase refine_1\n⊢ ℕ\n---\ncase refine_2\n⊢ ℕ\n---\ncase refine_3\n⊢ ℕ\n---\ncase refine_4\n⊢ ℕ\n## Tactic State B:\ncase refine_1\n⊢ ℕ\n---\ncase refine_2\n⊢ ℕ\n---\ncase refine_3\n⊢ ℕ\n---\ncase refine_4\n⊢ ℕ\n## Action:\n  apply True.intro"
"## Tactic State A:\ncase refine_1\n⊢ ℕ\n---\ncase refine_2\n⊢ ℕ\n---\ncase refine_3\n⊢ ℕ\n---\ncase refine_4\n⊢ ℕ\n## Tactic State B:\ncase refine_1\n⊢ ℕ\n---\ncase refine_2\n⊢ ℕ\n---\ncase refine_3\n⊢ ℕ\n---\ncase refine_4\n⊢ ℕ\n## Action:\n  noise"
"## Tactic State A:\nh : False\n⊢ True\n## Tactic State B:\nh this : False\n⊢ True\n## Action:\n  have : False := h"
"## Tactic State A:\nh this : False\n⊢ True\n## Tactic State B:\nh this : False\n⊢ True\n## Action:\n  noise"
"## Tactic State A:\n⊢ True\n## Tactic State B:\n⊢ True\n## Action:\n  noise"
"## Tactic State A:\na✝ a : ℕ\n⊢ 0 = 0\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rw [] -- this goal is closed by the `rfl` implied by `rw`"
"## Tactic State A:\nα : Type u_1\na✝ b : α\ninst✝ : AddCommGroup α\nn : ℕ\na : α\n⊢ 0 + n • a = n • a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n"
"## Tactic State A:\nα : Type u_1\na✝ b✝ : α\ninst✝ : AddCommMonoid α\na b c d e : α\n⊢ a + (b + (a + (c + (a + (d + (a + e)))))) = e + d + c + b + 3 • a ∨ True\n## Tactic State B:\nα : Type u_1\na✝ b✝ : α\ninst✝ : AddCommMonoid α\na b c d e : α\n⊢ a + (b + (a + (c + (a + (d + (a + e)))))) = e + d + c + b + 3 • a ∨ True\n## Action:\n  fail_if_success"
"## Tactic State A:\nα : Type u_1\na✝ b✝ : α\ninst✝ : AddCommMonoid α\na b c d e : α\n⊢ a + (b + (a + (c + (a + (d + (a + e)))))) = e + d + c + b + 3 • a ∨ True\n## Tactic State B:\ncase h\nα : Type u_1\na✝ b✝ : α\ninst✝ : AddCommMonoid α\na b c d e : α\n⊢ True\n## Action:\n    left; abel1"
"## Tactic State A:\ncase h\nα : Type u_1\na✝ b✝ : α\ninst✝ : AddCommMonoid α\na b c d e : α\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  right; trivial"
"## Tactic State A:\nα : Type u_1\na✝ b✝ : α\ninst✝ : AddCommGroup α\na b c d e : α\n⊢ a + (b + (a + (c + (a + (d + (a + e)))))) = e + d + c + b + 3 • a ∨ True\n## Tactic State B:\nα : Type u_1\na✝ b✝ : α\ninst✝ : AddCommGroup α\na b c d e : α\n⊢ a + (b + (a + (c + (a + (d + (a + e)))))) = e + d + c + b + 3 • a ∨ True\n## Action:\n  fail_if_success"
"## Tactic State A:\nα : Type u_1\na✝ b✝ : α\ninst✝ : AddCommGroup α\na b c d e : α\n⊢ a + (b + (a + (c + (a + (d + (a + e)))))) = e + d + c + b + 3 • a ∨ True\n## Tactic State B:\ncase h\nα : Type u_1\na✝ b✝ : α\ninst✝ : AddCommGroup α\na b c d e : α\n⊢ True\n## Action:\n    left; abel1"
"## Tactic State A:\ncase h\nα : Type u_1\na✝ b✝ : α\ninst✝ : AddCommGroup α\na b c d e : α\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  right; trivial"
"## Tactic State A:\nα : Type u_1\na✝ b✝ : α\ninst✝ : AddCommGroup α\na b c d : α\n⊢ a + b + (c + d - a) = b + c - d ∨ True\n## Tactic State B:\nα : Type u_1\na✝ b✝ : α\ninst✝ : AddCommGroup α\na b c d : α\n⊢ a + b + (c + d - a) = b + c - d ∨ True\n## Action:\n  fail_if_success"
"## Tactic State A:\nα : Type u_1\na✝ b✝ : α\ninst✝ : AddCommGroup α\na b c d : α\n⊢ a + b + (c + d - a) = b + c - d ∨ True\n## Tactic State B:\ncase h\nα : Type u_1\na✝ b✝ : α\ninst✝ : AddCommGroup α\na b c d : α\n⊢ True\n## Action:\n    left; abel1"
"## Tactic State A:\ncase h\nα : Type u_1\na✝ b✝ : α\ninst✝ : AddCommGroup α\na b c d : α\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  right; trivial"
"## Tactic State A:\nα : Type u_1\na✝ b✝ : α\ninst✝ : AddCommGroup α\na b c : α\n⊢ a + b + c + (c - a - a) = -1 • a + b + c ∨ True\n## Tactic State B:\nα : Type u_1\na✝ b✝ : α\ninst✝ : AddCommGroup α\na b c : α\n⊢ a + b + c + (c - a - a) = -1 • a + b + c ∨ True\n## Action:\n  fail_if_success"
"## Tactic State A:\nα : Type u_1\na✝ b✝ : α\ninst✝ : AddCommGroup α\na b c : α\n⊢ a + b + c + (c - a - a) = -1 • a + b + c ∨ True\n## Tactic State B:\ncase h\nα : Type u_1\na✝ b✝ : α\ninst✝ : AddCommGroup α\na b c : α\n⊢ True\n## Action:\n    left; abel1"
"## Tactic State A:\ncase h\nα : Type u_1\na✝ b✝ : α\ninst✝ : AddCommGroup α\na b c : α\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  right; trivial"
"## Tactic State A:\nα : Type ?u.9\na b : α\nMyTrue : Sort ?u.19\n⊢ MyTrue\n## Tactic State B:\nα : Type ?u.9\na b : α\nMyTrue : Sort ?u.19\n⊢ MyTrue\n## Action:\n  abel_nf"
"## Tactic State A:\nα : Type u_2\na✝ b✝ : α\nx✝ : Sort u_1\nid' : x✝\ninst✝ : AddCommGroup α\na b : α\n⊢ a + b - b - sorry = 0\n## Tactic State B:\nα : Type u_2\na✝ b✝ : α\nx✝ : Sort u_1\nid' : x✝\ninst✝ : AddCommGroup α\na b : α\n⊢ a + b - b - sorry = 0\n## Action:\n  fail_if_success"
"## Tactic State A:\nα : Type u_2\na✝ b✝ : α\nx✝ : Sort u_1\nid' : x✝\ninst✝ : AddCommGroup α\na b : α\n⊢ a + b - b - sorry = 0\n## Tactic State B:\nα : Type u_2\na✝ b✝ : α\nx✝ : Sort u_1\nid' : x✝\ninst✝ : AddCommGroup α\na b : α\n⊢ a + b - b - sorry = 0\n## Action:\n    abel1"
"## Tactic State A:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\n⊢ True\n## Tactic State B:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nthis : ∀ (p q r s : α), s + p - q = s - r - (q - r - p)\n⊢ True\n## Action:\n  have : ∀ (p q r s : α), s + p - q = s - r - (q - r - p) := by"
"## Tactic State A:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nthis : ∀ (p q r s : α), s + p - q = s - r - (q - r - p)\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    intro p q r s"
"## Tactic State A:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\n⊢ y = x + z - (x - y + z)\n## Tactic State B:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\nthis : True\n⊢ y = x + z - (x - y + z)\n## Action:\n  have : True := trivial"
"## Tactic State A:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\nthis : True\n⊢ y = x + z - (x - y + z)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  abel"
"## Tactic State A:\nα : Type ?u.9\na b : α\n⊢ True\n## Tactic State B:\nα : Type ?u.9\na b : α\nthis : ℕ\n⊢ True\n## Action:\n  have := 0"
"## Tactic State A:\nα : Type ?u.9\na b : α\nthis : ℕ\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  abel_nf"
"## Tactic State A:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\nw : x = y + z\n⊢ False\n## Tactic State B:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\nw : x = y + z\n⊢ False\n## Action:\n  abel_nf at w"
"## Tactic State A:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\nh : False\nw : x - x = y + z\n⊢ False\n## Tactic State B:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\nh : False\nw : 0 = y + z\n⊢ False\n## Action:\n  abel_nf at w"
"## Tactic State A:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\nh : False\nw : 0 = y + z\n⊢ False\n## Tactic State B:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\nh : False\nw : 0 = y + z\n⊢ False\n## Action:\n  guard_hyp w : 0 = y + z"
"## Tactic State A:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\nh : False\nw : 0 = y + z\n⊢ False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  assumption"
"## Tactic State A:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\n_w : x = y + z\n⊢ False\n## Tactic State B:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\n_w : x = y + z\n⊢ False\n## Action:\n  abel_nf at *"
"## Tactic State A:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\n_w : x = y + z\n⊢ x - x = 0\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  abel_nf at *"
"## Tactic State A:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\nw : x = y + z\n⊢ x - x = 0\n## Tactic State B:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\nw : x = y + z\n⊢ x - x = 0\n## Action:\n  abel_nf at w ⊢"
"## Tactic State A:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\nw : x - x = y + z\n⊢ x = 0\n## Tactic State B:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\nw : 0 = y + z\n⊢ x = 0\n## Action:\n  abel_nf at w ⊢"
"## Tactic State A:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\nh : False\nw : x - x = y + z\n⊢ False\n## Tactic State B:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\nh : False\nw : 0 = y + z\n⊢ False\n## Action:\n  abel_nf at *"
"## Tactic State A:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\nh : False\nw : 0 = y + z\n⊢ False\n## Tactic State B:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\nh : False\nw : 0 = y + z\n⊢ False\n## Action:\n  guard_hyp w : 0 = y + z"
"## Tactic State A:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\nh : False\nw : 0 = y + z\n⊢ False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  assumption"
"## Tactic State A:\nα : Type ?u.9\na b : α\nx : ℤ\nR : ℤ → ℤ → Prop\nhR : Reflexive R\n⊢ True\n## Tactic State B:\nα : Type ?u.9\na b : α\nx : ℤ\nR : ℤ → ℤ → Prop\nhR : Reflexive R\n⊢ True\n## Action:\n  have h : R (myId x + x) (x + myId x) := hR .."
"## Tactic State A:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx : α\nf : α → α\n⊢ True\n## Tactic State B:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx : α\nf : α → α\ny : α := x\n⊢ True\n## Action:\n  let y := x"
"## Tactic State A:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx : α\nf : α → α\ny : α := x\n⊢ True\n## Tactic State B:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx : α\nf : α → α\ny : α := x\nthis : x = y\n⊢ True\n## Action:\n  have : x = y := by"
"## Tactic State A:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx : α\nf : α → α\ny : α := x\nthis : x = y\n⊢ True\n## Tactic State B:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx : α\nf : α → α\ny : α := x\nthis✝ : x = y\nthis : x - y = 0\n⊢ True\n## Action:\n    fail_if_success abel_nf"
"## Tactic State A:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx : α\nf : α → α\ny : α := x\nthis✝ : x = y\nthis : x - y = 0\n⊢ True\n## Tactic State B:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx : α\nf : α → α\ny : α := x\nthis✝¹ : x = y\nthis✝ : x - y = 0\nthis : f x = f y\n⊢ True\n## Action:\n    abel_nf!"
"## Tactic State A:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx : α\nf : α → α\ny : α := x\nthis✝¹ : x = y\nthis✝ : x - y = 0\nthis : f x = f y\n⊢ True\n## Tactic State B:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx : α\nf : α → α\ny : α := x\nthis✝² : x = y\nthis✝¹ : x - y = 0\nthis✝ : f x = f y\nthis : f x - f y = 0\n⊢ True\n## Action:\n  have : x - y = 0 := by"
"## Tactic State A:\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx : α\nf : α → α\ny : α := x\nthis✝² : x = y\nthis✝¹ : x - y = 0\nthis✝ : f x = f y\nthis : f x - f y = 0\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    abel_nf"
"## Tactic State A:\n⊢ True\n## Tactic State B:\n⊢ True\n## Action:\n  run_tac"
"## Tactic State A:\n⊢ True\n## Tactic State B:\n⊢ True\n## Action:\n  run_tac"
"## Tactic State A:\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    let t : Option Bool := (← Lean.MonadOptions.getOptions).get? `pp.all"
"## Tactic State A:\n⊢ True\n## Tactic State B:\n⊢ True\n## Action:\n  run_tac"
"## Tactic State A:\na b c d e f : Prop\nh : a ∧ b ∨ c ∧ d\nh2 : e ∧ f\n⊢ True\n## Tactic State B:\ncase inl.intro.intro\na b c d e f : Prop\nleft✝¹ : e\nright✝¹ : f\nleft✝ : a\nright✝ : b\n⊢ True\n---\ncase inr.intro.intro\na b c d e f : Prop\nleft✝¹ : e\nright✝¹ : f\nleft✝ : c\nright✝ : d\n⊢ True\n## Action:\n  casesm* _∨_, _∧_"
"## Tactic State A:\ncase inl.intro.intro\na b c d e f : Prop\nleft✝¹ : e\nright✝¹ : f\nleft✝ : a\nright✝ : b\n⊢ True\n---\ncase inr.intro.intro\na b c d e f : Prop\nleft✝¹ : e\nright✝¹ : f\nleft✝ : c\nright✝ : d\n⊢ True\n## Tactic State B:\ncase inl.intro.intro\na b c d e f : Prop\n⊢ True\n## Action:\n  · clear ‹a› ‹b› ‹e› ‹f›; (fail_if_success clear ‹c›); trivial"
"## Tactic State A:\ncase inl.intro.intro\na b c d e f : Prop\n⊢ True\n## Tactic State B:\ncase inl.intro.intro\na b c d e f : Prop\n⊢ True\n## Action:\n  · clear ‹c› ‹d› ‹e› ‹f›; trivial"
"## Tactic State A:\na b c d : Prop\nh : a ∧ b ∨ c ∧ d\n⊢ True\n## Tactic State B:\na b c d : Prop\nh : a ∧ b ∨ c ∧ d\n⊢ True\n## Action:\n  fail_if_success casesm* _∧_ -- no match expected"
"## Tactic State A:\na b c d : Prop\nh : a ∧ b ∨ c ∧ d\n⊢ True\n## Tactic State B:\na b c d : Prop\n⊢ True\n## Action:\n  clear ‹a ∧ b ∨ c ∧ d›; trivial"
"## Tactic State A:\na b c d : Prop\nh : a ∧ b ∨ c ∨ d\n⊢ True\n## Tactic State B:\ncase inl\na b c d : Prop\nh : a ∧ b\n⊢ True\n---\ncase inr.inl\na b c d : Prop\nh : c\n⊢ True\n---\ncase inr.inr\na b c d : Prop\nh : d\n⊢ True\n## Action:\n  casesm* _∨_"
"## Tactic State A:\ncase inl\na b c d : Prop\nh : a ∧ b\n⊢ True\n---\ncase inr.inl\na b c d : Prop\nh : c\n⊢ True\n---\ncase inr.inr\na b c d : Prop\nh : d\n⊢ True\n## Tactic State B:\ncase inl\na b c d : Prop\n⊢ True\n## Action:\n  · clear ‹a ∧ b›; trivial"
"## Tactic State A:\ncase inl\na b c d : Prop\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · clear ‹c›; trivial"
"## Tactic State A:\n\n## Tactic State B:\ncase inr.inl\na b c d : Prop\n⊢ True\n## Action:\n  · clear ‹d›; trivial"
"## Tactic State A:\na b c d : Prop\nh : a ∧ b ∨ c ∨ d\n⊢ True\n## Tactic State B:\ncase inl\na b c d : Prop\nh : a ∧ b\n⊢ True\n---\ncase inr\na b c d : Prop\nh : c ∨ d\n⊢ True\n## Action:\n  casesm _∨_"
"## Tactic State A:\ncase inl\na b c d : Prop\nh : a ∧ b\n⊢ True\n---\ncase inr\na b c d : Prop\nh : c ∨ d\n⊢ True\n## Tactic State B:\ncase inl\na b c d : Prop\n⊢ True\n## Action:\n  · clear ‹a ∧ b›; trivial"
"## Tactic State A:\ncase inl\na b c d : Prop\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · clear ‹c ∨ d›; trivial"
"## Tactic State A:\na b c d : Prop\nh : a ∧ b ∨ c ∨ d\n⊢ True\n## Tactic State B:\ncase inl\na b c d : Prop\nh : a ∧ b\n⊢ True\n---\ncase inr\na b c d : Prop\nh : c ∨ d\n⊢ True\n## Action:\n  cases_type And Or"
"## Tactic State A:\ncase inl\na b c d : Prop\nh : a ∧ b\n⊢ True\n---\ncase inr\na b c d : Prop\nh : c ∨ d\n⊢ True\n## Tactic State B:\ncase inl\na b c d : Prop\n⊢ True\n## Action:\n  · clear ‹a ∧ b›; trivial"
"## Tactic State A:\ncase inl\na b c d : Prop\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · clear ‹c ∨ d›; trivial"
"## Tactic State A:\na b c d : Prop\nh : a ∧ b ∨ c ∨ d\n⊢ True\n## Tactic State B:\na b c d : Prop\nh : a ∧ b ∨ c ∨ d\n⊢ True\n## Action:\n  fail_if_success cases_type* And -- no match expected"
"## Tactic State A:\na b c d : Prop\nh : a ∧ b ∨ c ∨ d\n⊢ True\n## Tactic State B:\na b c d : Prop\n⊢ True\n## Action:\n  · clear ‹a ∧ b ∨ c ∨ d›; trivial"
"## Tactic State A:\na b c d : Prop\nh : a ∧ b ∨ c ∨ d\n⊢ True\n## Tactic State B:\ncase inl\na b c d : Prop\nh : a ∧ b\n⊢ True\n---\ncase inr\na b c d : Prop\nh : c ∨ d\n⊢ True\n## Action:\n  cases_type Or"
"## Tactic State A:\ncase inl\na b c d : Prop\nh : a ∧ b\n⊢ True\n---\ncase inr\na b c d : Prop\nh : c ∨ d\n⊢ True\n## Tactic State B:\ncase inl\na b c d : Prop\n⊢ True\n## Action:\n  · clear ‹a ∧ b›; trivial"
"## Tactic State A:\ncase inl\na b c d : Prop\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · clear ‹c ∨ d›; trivial"
"## Tactic State A:\na b c d : Prop\nh : a ∧ b ∨ c ∨ d\n⊢ True\n## Tactic State B:\ncase inl\na b c d : Prop\nh : a ∧ b\n⊢ True\n---\ncase inr.inl\na b c d : Prop\nh : c\n⊢ True\n---\ncase inr.inr\na b c d : Prop\nh : d\n⊢ True\n## Action:\n  cases_type* Or"
"## Tactic State A:\ncase inl\na b c d : Prop\nh : a ∧ b\n⊢ True\n---\ncase inr.inl\na b c d : Prop\nh : c\n⊢ True\n---\ncase inr.inr\na b c d : Prop\nh : d\n⊢ True\n## Tactic State B:\ncase inl\na b c d : Prop\n⊢ True\n## Action:\n  · clear ‹a ∧ b›; trivial"
"## Tactic State A:\ncase inl\na b c d : Prop\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · clear ‹c›; trivial"
"## Tactic State A:\n\n## Tactic State B:\ncase inr.inl\na b c d : Prop\n⊢ True\n## Action:\n  · clear ‹d›; trivial"
"## Tactic State A:\na b c d : Prop\nh : a ∧ b ∨ c ∨ d\n⊢ True\n## Tactic State B:\na b c d : Prop\nh : a ∧ b ∨ c ∨ d\n⊢ True\n## Action:\n  fail_if_success cases_type!* And Or -- no match expected"
"## Tactic State A:\na b c d : Prop\nh : a ∧ b ∨ c ∨ d\n⊢ True\n## Tactic State B:\na b c d : Prop\n⊢ True\n## Action:\n  · clear ‹a ∧ b ∨ c ∨ d›; trivial"
"## Tactic State A:\na b c d : Prop\nh : a ∧ b ∧ (c ∨ d)\n⊢ True\n## Tactic State B:\ncase intro\na b c d : Prop\nh : a\nright✝ : b ∧ (c ∨ d)\n⊢ True\n## Action:\n  cases_type! And Or"
"## Tactic State A:\ncase intro\na b c d : Prop\nh : a\nright✝ : b ∧ (c ∨ d)\n⊢ True\n## Tactic State B:\ncase intro\na b c d : Prop\n⊢ True\n## Action:\n  · clear ‹a› ‹b ∧ (c ∨ d)›; trivial"
"## Tactic State A:\na b c d : Prop\nh : a ∧ b ∧ (c ∨ d)\n⊢ True\n## Tactic State B:\ncase intro.intro\na b c d : Prop\nh : a\nright✝¹ : b\nright✝ : c ∨ d\n⊢ True\n## Action:\n  cases_type!* And Or"
"## Tactic State A:\ncase intro.intro\na b c d : Prop\nh : a\nright✝¹ : b\nright✝ : c ∨ d\n⊢ True\n## Tactic State B:\ncase intro.intro\na b c d : Prop\n⊢ True\n## Action:\n  · clear ‹a› ‹b› ‹c ∨ d›; trivial"
"## Tactic State A:\nx✝¹ : Sort u_1\nTest : x✝¹\nx✝ : sorry\nh2 : sorry\n⊢ True\n## Tactic State B:\nx✝¹ : Sort u_1\nTest : x✝¹\nx✝ : sorry\nh2 : sorry\n⊢ True\n## Action:\n  cases_type!* Test"
"## Tactic State A:\nx✝¹ : Sort u_1\nTest : x✝¹\nx✝ : sorry\nh2 : sorry\n⊢ True\n## Tactic State B:\nx✝¹ : Sort u_1\nTest : x✝¹\nx✝ : sorry\nh2 : sorry\n⊢ True\n## Action:\n  cases_type Test"
"## Tactic State A:\nx✝¹ : Sort u_1\nTest : x✝¹\nx✝ : sorry\nh2 : sorry\n⊢ True\n## Tactic State B:\nx✝¹ : Sort u_1\nTest : x✝¹\nx✝ : sorry\nh2 : sorry\n⊢ True\n## Action:\n  cases_type* Test"
"## Tactic State A:\n⊢ True ∧ True ∧ True\n## Tactic State B:\n⊢ True ∧ True ∧ True\n## Action:\n  fail_if_success constructorm* True, _∨_ -- no match expected"
"## Tactic State A:\n⊢ True ∧ True ∧ True\n## Tactic State B:\n⊢ True ∧ True ∧ True\n## Action:\n  guard_target = True ∧ True ∧ True"
"## Tactic State A:\n⊢ True ∧ True ∧ True\n## Tactic State B:\ncase left\n⊢ True\n---\ncase right\n⊢ True ∧ True\n## Action:\n  constructorm _∧_"
"## Tactic State A:\ncase left\n⊢ True\n---\ncase right\n⊢ True ∧ True\n## Tactic State B:\ncase left\n⊢ True\n## Action:\n  · guard_target = True; constructorm True"
"## Tactic State A:\ncase left\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · guard_target = True ∧ True; constructorm* True, _∧_"
"## Tactic State A:\nn : ℕ\n⊢ True\n## Tactic State B:\nn : ℕ\n⊢ True\n## Action:\n  fail_if_success casesm! Nat  -- two constructors, so `casesm!` doesn't fire"
"## Tactic State A:\nn : ℕ\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial"
"## Tactic State A:\nh : Array ℕ\n⊢ True\n## Tactic State B:\ncase mk\nh : List ℕ\n⊢ True\n## Action:\n  casesm! Array _"
"## Tactic State A:\ncase mk\nh : List ℕ\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial"
"## Tactic State A:\nh : Array ℕ\n⊢ True\n## Tactic State B:\ncase mk\nh : List ℕ\n⊢ True\n## Action:\n  casesm Array _"
"## Tactic State A:\ncase mk\nh : List ℕ\n⊢ True\n## Tactic State B:\ncase mk\nh : List ℕ\n⊢ True\n## Action:\n  -- user facing name is preserved:"
"## Tactic State A:\ncase mk\nh : List ℕ\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  guard_hyp h : List Nat"
"## Tactic State A:\nn : ℕ\nh : n = 0\n⊢ True\n## Tactic State B:\ncase zero\nh : Nat.zero = 0\n⊢ True\n---\ncase succ\nn : ℕ\nh : n.succ = 0\n⊢ True\n## Action:\n  casesm Nat"
"## Tactic State A:\ncase zero\nh : Nat.zero = 0\n⊢ True\n---\ncase succ\nn : ℕ\nh : n.succ = 0\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · trivial"
"## Tactic State A:\n\n## Tactic State B:\ncase succ\nn : ℕ\nh : n.succ = 0\n⊢ True\n## Action:\n  · -- user facing name is preserved:"
"## Tactic State A:\ncase succ\nn : ℕ\nh : n.succ = 0\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    guard_hyp h : n + 1 = 0"
"## Tactic State A:\nP Q : Prop\nh : P ∧ Q\n⊢ True\n## Tactic State B:\ncase intro\nP Q : Prop\nleft✝ : P\nright✝ : Q\n⊢ True\n## Action:\n  casesm _ ∧ _"
"## Tactic State A:\ncase intro\nP Q : Prop\nleft✝ : P\nright✝ : Q\n⊢ True\n## Tactic State B:\ncase intro\nP Q : Prop\nleft✝ : P\nright✝ : Q\n⊢ True\n## Action:\n  -- user facing name is not used here, because there are multiple new hypotheses."
"## Tactic State A:\ncase intro\nP Q : Prop\nleft✝ : P\nright✝ : Q\n⊢ True\n## Tactic State B:\ncase intro\nP Q : Prop\np : P\nq : Q\n⊢ True\n## Action:\n  fail_if_success guard_hyp h : P"
"## Tactic State A:\ncase intro\nP Q : Prop\np : P\nq : Q\n⊢ True\n## Tactic State B:\ncase intro\nP Q : Prop\np : P\nq : Q\n⊢ True\n## Action:\n  rename_i p q"
"## Tactic State A:\ncase intro\nP Q : Prop\np : P\nq : Q\n⊢ True\n## Tactic State B:\ncase intro\nP Q : Prop\np : P\nq : Q\n⊢ True\n## Action:\n  guard_hyp p : P"
"## Tactic State A:\ncase intro\nP Q : Prop\np : P\nq : Q\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  guard_hyp q : Q"
"## Tactic State A:\np : Prop\n⊢ p ∧ p\n## Tactic State B:\np : Prop\nx✝ : ?m.27\n⊢ p ∧ p\n## Action:\n  cases h"
"## Tactic State A:\na b c : ℕ\nh : a - b = c\nhab : b ≤ a\n⊢ a = c + b\n## Tactic State B:\na b c : ℕ\nhab : b ≤ a\nh : ↑a - ↑b = ↑c\n⊢ ↑a = ↑c + ↑b\n## Action:\n  qify [hab] at h ⊢ -- `zify` does the same thing here."
"## Tactic State A:\na b c : ℕ\nhab : b ≤ a\nh : ↑a - ↑b = ↑c\n⊢ ↑a = ↑c + ↑b\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact sub_eq_iff_eq_add.1 h"
"## Tactic State A:\na b c : ℚ≥0\nh : a - b = c\nhab : b ≤ a\n⊢ a = c + b\n## Tactic State B:\na b c : ℚ≥0\nhab : b ≤ a\nh : ↑a - ↑b = ↑c\n⊢ ↑a = ↑c + ↑b\n## Action:\n  qify [hab] at h ⊢"
"## Tactic State A:\na b c : ℚ≥0\nhab : b ≤ a\nh : ↑a - ↑b = ↑c\n⊢ ↑a = ↑c + ↑b\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact sub_eq_iff_eq_add.1 h"
"## Tactic State A:\na b c : ℤ\nh : a / b = c\nhab : b ∣ a\nhb : b ≠ 0\n⊢ a = c * b\n## Tactic State B:\na b c : ℤ\nhab : b ∣ a\nh : ↑a / ↑b = ↑c\nhb : ↑b ≠ 0\n⊢ ↑a = ↑c * ↑b\n## Action:\n  qify [hab] at h hb ⊢"
"## Tactic State A:\na b c : ℤ\nhab : b ∣ a\nh : ↑a / ↑b = ↑c\nhb : ↑b ≠ 0\n⊢ ↑a = ↑c * ↑b\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact (div_eq_iff hb).1 h"
"## Tactic State A:\na b c : ℕ\nh : a / b = c\nhab : b ∣ a\nhb : b ≠ 0\n⊢ a = c * b\n## Tactic State B:\na b c : ℕ\nhab : b ∣ a\nh : ↑a / ↑b = ↑c\nhb : ↑b ≠ 0\n⊢ ↑a = ↑c * ↑b\n## Action:\n  qify [hab] at h hb ⊢"
"## Tactic State A:\na b c : ℕ\nhab : b ∣ a\nh : ↑a / ↑b = ↑c\nhb : ↑b ≠ 0\n⊢ ↑a = ↑c * ↑b\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact (div_eq_iff hb).1 h"
"## Tactic State A:\n⊢ ∃ x, x = x\n## Tactic State B:\n⊢ 42 = 42\n## Action:\n  existsi 42"
"## Tactic State A:\n⊢ 42 = 42\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rfl"
"## Tactic State A:\n⊢ ∃ x y, x = y\n## Tactic State B:\n⊢ 42 = 42\n## Action:\n  existsi 42, 42"
"## Tactic State A:\n⊢ 42 = 42\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rfl"
"## Tactic State A:\n⊢ ℕ\n## Tactic State B:\ncase h\n⊢ ℕ\n---\nh : ℕ\n⊢ ℕ\n## Action:\n  have h : Nat"
"## Tactic State A:\ncase h\n⊢ ℕ\n---\nh : ℕ\n⊢ ℕ\n## Tactic State B:\nh : ℕ\n⊢ ℕ\n## Action:\n  exact 5"
"## Tactic State A:\nh : ℕ\n⊢ ℕ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h"
"## Tactic State A:\n⊢ ℕ\n## Tactic State B:\ncase this\n⊢ ℕ\n---\nthis : ℕ\n⊢ ℕ\n## Action:\n  have : Nat"
"## Tactic State A:\ncase this\n⊢ ℕ\n---\nthis : ℕ\n⊢ ℕ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · exact 5"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact this"
"## Tactic State A:\na : ℕ\n⊢ a = a\n## Tactic State B:\ncase h\na : ℕ\n⊢ a = a\n---\na : ℕ\nh : a = a\n⊢ a = a\n## Action:\n  have h : a = a"
"## Tactic State A:\ncase h\na : ℕ\n⊢ a = a\n---\na : ℕ\nh : a = a\n⊢ a = a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · rfl"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h"
"## Tactic State A:\na : ℕ\n⊢ a = a\n## Tactic State B:\ncase this\na : ℕ\n⊢ a = a\n---\na : ℕ\nthis : a = a\n⊢ a = a\n## Action:\n  have : a = a"
"## Tactic State A:\ncase this\na : ℕ\n⊢ a = a\n---\na : ℕ\nthis : a = a\n⊢ a = a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · rfl"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact this"
"## Tactic State A:\n⊢ True\n## Tactic State B:\ncase _N\n⊢ ?m.5\n---\n_N : ?m.5 := ?_N\n⊢ True\n## Action:\n  let _N; -- FIXME: https://github.com/leanprover/lean4/issues/1670"
"## Tactic State A:\ncase _N\n⊢ ?m.5\n---\n_N : ?m.5 := ?_N\n⊢ True\n## Tactic State B:\n_N : Type := ℕ\n⊢ True\n## Action:\n  exact Nat"
"## Tactic State A:\n_N : Type := ℕ\n⊢ True\n## Tactic State B:\ncase this\n_N : Type := ℕ\n⊢ ?m.12\n---\n_N : Type := ℕ\nthis : ?m.12\n⊢ True\n## Action:\n  have"
"## Tactic State A:\ncase this\n_N : Type := ℕ\n⊢ ?m.12\n---\n_N : Type := ℕ\nthis : ?m.12\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · exact 0"
"## Tactic State A:\n\n## Tactic State B:\ncase _h\n_N : Type := ℕ\nthis : ℕ\n⊢ ℕ\n---\n_N : Type := ℕ\nthis _h : ℕ\n⊢ True\n## Action:\n  have _h : Nat"
"## Tactic State A:\ncase _h\n_N : Type := ℕ\nthis : ℕ\n⊢ ℕ\n---\n_N : Type := ℕ\nthis _h : ℕ\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · exact this"
"## Tactic State A:\n\n## Tactic State B:\ncase _h'\n_N : Type := ℕ\nthis _h x : ℕ\n⊢ x < x + 1\n---\n_N : Type := ℕ\nthis _h : ℕ\n_h' : ∀ (x : ℕ), x < x + 1\n⊢ True\n## Action:\n  have _h' x : x < x + 1"
"## Tactic State A:\ncase _h'\n_N : Type := ℕ\nthis _h x : ℕ\n⊢ x < x + 1\n---\n_N : Type := ℕ\nthis _h : ℕ\n_h' : ∀ (x : ℕ), x < x + 1\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · exact Nat.lt.base x"
"## Tactic State A:\n\n## Tactic State B:\ncase _h''\n_N : Type := ℕ\nthis _h : ℕ\n_h' : ∀ (x : ℕ), x < x + 1\nx : ℕ\n⊢ x < x + 1\n---\n_N : Type := ℕ\nthis _h : ℕ\n_h' _h'' : ∀ (x : ℕ), x < x + 1\n⊢ True\n## Action:\n  have _h'' (x : Nat) : x < x + 1"
"## Tactic State A:\ncase _h''\n_N : Type := ℕ\nthis _h : ℕ\n_h' : ∀ (x : ℕ), x < x + 1\nx : ℕ\n⊢ x < x + 1\n---\n_N : Type := ℕ\nthis _h : ℕ\n_h' _h'' : ∀ (x : ℕ), x < x + 1\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · exact Nat.lt.base x"
"## Tactic State A:\n\n## Tactic State B:\ncase _m\n_N : Type := ℕ\nthis _h : ℕ\n_h' _h'' : ∀ (x : ℕ), x < x + 1\n⊢ ?m.883\n---\n_N : Type := ℕ\nthis _h : ℕ\n_h' _h'' : ∀ (x : ℕ), x < x + 1\n_m : ?m.883 := ?_m\n⊢ True\n## Action:\n  let _m"
"## Tactic State A:\ncase _m\n_N : Type := ℕ\nthis _h : ℕ\n_h' _h'' : ∀ (x : ℕ), x < x + 1\n⊢ ?m.883\n---\n_N : Type := ℕ\nthis _h : ℕ\n_h' _h'' : ∀ (x : ℕ), x < x + 1\n_m : ?m.883 := ?_m\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · exact 6"
"## Tactic State A:\n\n## Tactic State B:\ncase _m'\n_N : Type := ℕ\nthis _h : ℕ\n_h' _h'' : ∀ (x : ℕ), x < x + 1\n_m : ℕ := 6\nx y : ℕ\n⊢ x + y = y + x\n---\n_N : Type := ℕ\nthis _h : ℕ\n_h' _h'' : ∀ (x : ℕ), x < x + 1\n_m : ℕ := 6\n_m' : ∀ (x y : ℕ), x + y = y + x := fun x y => ?_m'\n⊢ True\n## Action:\n  let _m' x (y : Nat) : x + y = y + x"
"## Tactic State A:\ncase _m'\n_N : Type := ℕ\nthis _h : ℕ\n_h' _h'' : ∀ (x : ℕ), x < x + 1\n_m : ℕ := 6\nx y : ℕ\n⊢ x + y = y + x\n---\n_N : Type := ℕ\nthis _h : ℕ\n_h' _h'' : ∀ (x : ℕ), x < x + 1\n_m : ℕ := 6\n_m' : ∀ (x y : ℕ), x + y = y + x := fun x y => ?_m'\n⊢ True\n## Tactic State B:\n_N : Type := ℕ\nthis _h : ℕ\n_h' _h'' : ∀ (x : ℕ), x < x + 1\n_m : ℕ := 6\n_m' : ∀ (x y : ℕ), x + y = y + x :=\n  fun x y => Eq.mpr (id (congrArg (fun _a => _a = y + x) (Nat.add_comm x y))) (Eq.refl (y + x))\n⊢ True\n## Action:\n  rw [Nat.add_comm]"
"## Tactic State A:\n_N : Type := ℕ\nthis _h : ℕ\n_h' _h'' : ∀ (x : ℕ), x < x + 1\n_m : ℕ := 6\n_m' : ∀ (x y : ℕ), x + y = y + x :=\n  fun x y => Eq.mpr (id (congrArg (fun _a => _a = y + x) (Nat.add_comm x y))) (Eq.refl (y + x))\n⊢ True\n## Tactic State B:\ncase _q\n_N : Type := ℕ\nthis _h : ℕ\n_h' _h'' : ∀ (x : ℕ), x < x + 1\n_m : ℕ := 6\n_m' : ∀ (x y : ℕ), x + y = y + x :=\n  fun x y => Eq.mpr (id (congrArg (fun _a => _a = y + x) (Nat.add_comm x y))) (Eq.refl (y + x))\n⊢ ?m.1001\n---\n_N : Type := ℕ\nthis _h : ℕ\n_h' _h'' : ∀ (x : ℕ), x < x + 1\n_m : ℕ := 6\n_m' : ∀ (x y : ℕ), x + y = y + x :=\n  fun x y => Eq.mpr (id (congrArg (fun _a => _a = y + x) (Nat.add_comm x y))) (Eq.refl (y + x))\n_q : ?m.1001\n⊢ True\n## Action:\n  have _q"
"## Tactic State A:\ncase _q\n_N : Type := ℕ\nthis _h : ℕ\n_h' _h'' : ∀ (x : ℕ), x < x + 1\n_m : ℕ := 6\n_m' : ∀ (x y : ℕ), x + y = y + x :=\n  fun x y => Eq.mpr (id (congrArg (fun _a => _a = y + x) (Nat.add_comm x y))) (Eq.refl (y + x))\n⊢ ?m.1001\n---\n_N : Type := ℕ\nthis _h : ℕ\n_h' _h'' : ∀ (x : ℕ), x < x + 1\n_m : ℕ := 6\n_m' : ∀ (x y : ℕ), x + y = y + x :=\n  fun x y => Eq.mpr (id (congrArg (fun _a => _a = y + x) (Nat.add_comm x y))) (Eq.refl (y + x))\n_q : ?m.1001\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · exact 6"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  simp"
"## Tactic State A:\na b c : ℕ\nh : a = b\n⊢ a + c = b + c\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  congr!"
"## Tactic State A:\na b : ℕ\nh : a = b\n⊢ ∀ (c : ℕ), a + c = b + c\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  congr!"
"## Tactic State A:\na b : ℕ\nh : a = b\n⊢ (fun c => a + c) = fun c => b + c\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  congr!"
"## Tactic State A:\na b : ℕ\n⊢ Fin (a + b) = Fin (b + a)\n## Tactic State B:\ncase h.e'_1\na b : ℕ\n⊢ a + b = b + a\n## Action:\n  congr! 1"
"## Tactic State A:\ncase h.e'_1\na b : ℕ\n⊢ a + b = b + a\n## Tactic State B:\ncase h.e'_1\na b : ℕ\n⊢ a + b = b + a\n## Action:\n  guard_target = a + b = b + a"
"## Tactic State A:\ncase h.e'_1\na b : ℕ\n⊢ a + b = b + a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  apply Nat.add_comm"
"## Tactic State A:\n⊢ ((a : ℕ) → Fin (a + 1)) = ((a : ℕ) → Fin (1 + a))\n## Tactic State B:\ncase h.h.e'_1\na : ℕ\n⊢ a + 1 = 1 + a\n## Action:\n  congr! 2 with a"
"## Tactic State A:\ncase h.h.e'_1\na : ℕ\n⊢ a + 1 = 1 + a\n## Tactic State B:\ncase h.h.e'_1\na : ℕ\n⊢ a + 1 = 1 + a\n## Action:\n  guard_target = a + 1 = 1 + a"
"## Tactic State A:\ncase h.h.e'_1\na : ℕ\n⊢ a + 1 = 1 + a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  apply Nat.add_comm"
"## Tactic State A:\n⊢ ((a : ℕ) × Fin (a + 1)) = ((a : ℕ) × Fin (1 + a))\n## Tactic State B:\ncase h.e'_2.h.h.e'_1\na : ℕ\n⊢ a + 1 = 1 + a\n## Action:\n  congr! 3 with a"
"## Tactic State A:\ncase h.e'_2.h.h.e'_1\na : ℕ\n⊢ a + 1 = 1 + a\n## Tactic State B:\ncase h.e'_2.h.h.e'_1\na : ℕ\n⊢ a + 1 = 1 + a\n## Action:\n  guard_target = a + 1 = 1 + a"
"## Tactic State A:\ncase h.e'_2.h.h.e'_1\na : ℕ\n⊢ a + 1 = 1 + a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  apply Nat.add_comm"
"## Tactic State A:\np : Prop\nh1 h2 : p\n⊢ h1 = h2\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  congr!"
"## Tactic State A:\np q : Prop\nh1 : p\nh2 : q\n⊢ HEq h1 h2\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  congr!"
"## Tactic State A:\na b : ℕ\nh : a = b\n⊢ a + 1 ≤ b + 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  congr!"
"## Tactic State A:\nx y : Unit\n⊢ x = y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  congr!"
"## Tactic State A:\np q r : ℕ → Prop\nh : q = r\n⊢ (∀ (n : ℕ), p n → q n) ↔ ∀ (n : ℕ), p n → r n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  congr!"
"## Tactic State A:\np q : Prop\nh : p ↔ q\n⊢ p = q\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  congr!"
"## Tactic State A:\nα : Sort u_1\nx y : α\nh : x = y\nf : α → ℕ\n⊢ f x = f y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  congr!"
"## Tactic State A:\nα : Type\nf : ℕ → ℕ\nh : ∀ (x : ℕ), f x = 0\nz : α\nhz : HEq z 0\n⊢ HEq f fun x => z\n## Tactic State B:\ncase hα\nα : Type\nf : ℕ → ℕ\nh : ∀ (x : ℕ), f x = 0\nz : α\nhz : HEq z 0\n⊢ ℕ = α\n---\ncase h\nα : Type\nf : ℕ → ℕ\nh : ∀ (x : ℕ), f x = 0\nz : α\nhz : HEq z 0\na✝¹ : ℕ\na'✝ : α\na✝ : HEq a✝¹ a'✝\n⊢ HEq (f a✝¹) z\n## Action:\n  congr!"
"## Tactic State A:\ncase hα\nα : Type\nf : ℕ → ℕ\nh : ∀ (x : ℕ), f x = 0\nz : α\nhz : HEq z 0\n⊢ ℕ = α\n---\ncase h\nα : Type\nf : ℕ → ℕ\nh : ∀ (x : ℕ), f x = 0\nz : α\nhz : HEq z 0\na✝¹ : ℕ\na'✝ : α\na✝ : HEq a✝¹ a'✝\n⊢ HEq (f a✝¹) z\n## Tactic State B:\ncase hα\nα : Type\nf : ℕ → ℕ\nh : ∀ (x : ℕ), f x = 0\nz : α\nhz : HEq z 0\n⊢ ℕ = α\n## Action:\n  · guard_target = Nat = α"
"## Tactic State A:\ncase hα\nα : Type\nf : ℕ → ℕ\nh : ∀ (x : ℕ), f x = 0\nz : α\nhz : HEq z 0\n⊢ ℕ = α\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    exact type_eq_of_heq hz.symm"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  next n x _ =>"
"## Tactic State A:\np q : ℕ → Prop\n⊢ (∀ ε > 0, p ε) ↔ ∀ ε > 0, q ε\n## Tactic State B:\ncase a.h.h'.a\np q : ℕ → Prop\nε : ℕ\nhε : ε > 0\n⊢ p ε ↔ q ε\n## Action:\n  congr! 2 with ε hε"
"## Tactic State A:\ncase a.h.h'.a\np q : ℕ → Prop\nε : ℕ\nhε : ε > 0\n⊢ p ε ↔ q ε\n## Tactic State B:\ncase a.h.h'.a\np q : ℕ → Prop\nε : ℕ\nhε : ε > 0\n⊢ p ε ↔ q ε\n## Action:\n  guard_hyp hε : ε > 0"
"## Tactic State A:\ncase a.h.h'.a\np q : ℕ → Prop\nε : ℕ\nhε : ε > 0\n⊢ p ε ↔ q ε\n## Tactic State B:\ncase a.h.h'.a\np q : ℕ → Prop\nε : ℕ\nhε : ε > 0\n⊢ p ε ↔ q ε\n## Action:\n  guard_target = p ε ↔ q ε"
"## Tactic State A:\ncase a.h.h'.a\np q : ℕ → Prop\nε : ℕ\nhε : ε > 0\n⊢ p ε ↔ q ε\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact test_sorry"
"## Tactic State A:\nα : Type u_1\ns t : Set α\n⊢ (ℕ × Subtype s) = (ℕ × Subtype t)\n## Tactic State B:\ncase h.e'_2\nα : Type u_1\ns t : Set α\n⊢ Subtype s = Subtype t\n## Action:\n  congr! 1"
"## Tactic State A:\ncase h.e'_2\nα : Type u_1\ns t : Set α\n⊢ Subtype s = Subtype t\n## Tactic State B:\ncase h.e'_2\nα : Type u_1\ns t : Set α\n⊢ Subtype s = Subtype t\n## Action:\n  guard_target = Subtype s = Subtype t"
"## Tactic State A:\ncase h.e'_2\nα : Type u_1\ns t : Set α\n⊢ Subtype s = Subtype t\n## Tactic State B:\ncase h.e'_2.h.e'_2\nα : Type u_1\ns t : Set α\n⊢ s = t\n## Action:\n  congr! 1"
"## Tactic State A:\ncase h.e'_2.h.e'_2\nα : Type u_1\ns t : Set α\n⊢ s = t\n## Tactic State B:\ncase h.e'_2.h.e'_2\nα : Type u_1\ns t : Set α\n⊢ s = t\n## Action:\n  guard_target = s = t"
"## Tactic State A:\ncase h.e'_2.h.e'_2\nα : Type u_1\ns t : Set α\n⊢ s = t\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact test_sorry"
"## Tactic State A:\nα : Type u_1\ns t : Set α\nf : Subtype s → α\ng : Subtype t → α\n⊢ f '' Set.univ = g '' Set.univ\n## Tactic State B:\ncase h.e'_1.h.e'_2\nα : Type u_1\ns t : Set α\nf : Subtype s → α\ng : Subtype t → α\n⊢ s = t\n---\ncase h.e'_3\nα : Type u_1\ns t : Set α\nf : Subtype s → α\ng : Subtype t → α\ne_1✝ : Subtype s = Subtype t\n⊢ HEq f g\n## Action:\n  congr!"
"## Tactic State A:\ncase h.e'_1.h.e'_2\nα : Type u_1\ns t : Set α\nf : Subtype s → α\ng : Subtype t → α\n⊢ s = t\n---\ncase h.e'_3\nα : Type u_1\ns t : Set α\nf : Subtype s → α\ng : Subtype t → α\ne_1✝ : Subtype s = Subtype t\n⊢ HEq f g\n## Tactic State B:\ncase h.e'_1.h.e'_2\nα : Type u_1\ns t : Set α\nf : Subtype s → α\ng : Subtype t → α\n⊢ s = t\n## Action:\n  · guard_target = s = t"
"## Tactic State A:\ncase h.e'_1.h.e'_2\nα : Type u_1\ns t : Set α\nf : Subtype s → α\ng : Subtype t → α\n⊢ s = t\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    exact test_sorry"
"## Tactic State A:\n\n## Tactic State B:\ncase h.e'_3\nα : Type u_1\ns t : Set α\nf : Subtype s → α\ng : Subtype t → α\ne_1✝ : Subtype s = Subtype t\n⊢ HEq f g\n## Action:\n  · guard_target = HEq f g"
"## Tactic State A:\ncase h.e'_3\nα : Type u_1\ns t : Set α\nf : Subtype s → α\ng : Subtype t → α\ne_1✝ : Subtype s = Subtype t\n⊢ HEq f g\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    exact test_sorry"
"## Tactic State A:\nα : Type u_1\nι κ : Type u\nf : ι → α\ng : κ → α\n⊢ f '' Set.univ = g '' Set.univ\n## Tactic State B:\nα : Type u_1\nι κ : Type u\nf : ι → α\ng : κ → α\n⊢ f '' Set.univ = g '' Set.univ\n## Action:\n  congr!"
"## Tactic State A:\nα : Type u_1\nι κ : Type u\nf : ι → α\ng : κ → α\n⊢ f '' Set.univ = g '' Set.univ\n## Tactic State B:\nα : Type u_1\nι κ : Type u\nf : ι → α\ng : κ → α\n⊢ f '' Set.univ = g '' Set.univ\n## Action:\n  guard_target = Set.image f Set.univ = Set.image g Set.univ"
"## Tactic State A:\nα : Type u_1\nι κ : Type u\nf : ι → α\ng : κ → α\n⊢ f '' Set.univ = g '' Set.univ\n## Tactic State B:\ncase h.e'_1\nα : Type u_1\nι κ : Type u\nf : ι → α\ng : κ → α\n⊢ ι = κ\n---\ncase h.e'_3\nα : Type u_1\nι κ : Type u\nf : ι → α\ng : κ → α\ne_1✝ : ι = κ\n⊢ HEq f g\n## Action:\n  congr! (config := {typeEqs := true})"
"## Tactic State A:\ncase h.e'_1\nα : Type u_1\nι κ : Type u\nf : ι → α\ng : κ → α\n⊢ ι = κ\n---\ncase h.e'_3\nα : Type u_1\nι κ : Type u\nf : ι → α\ng : κ → α\ne_1✝ : ι = κ\n⊢ HEq f g\n## Tactic State B:\ncase h.e'_1\nα : Type u_1\nι κ : Type u\nf : ι → α\ng : κ → α\n⊢ ι = κ\n## Action:\n  · guard_target = ι = κ"
"## Tactic State A:\ncase h.e'_1\nα : Type u_1\nι κ : Type u\nf : ι → α\ng : κ → α\n⊢ ι = κ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    exact test_sorry"
"## Tactic State A:\n\n## Tactic State B:\ncase h.e'_3\nα : Type u_1\nι κ : Type u\nf : ι → α\ng : κ → α\ne_1✝ : ι = κ\n⊢ HEq f g\n## Action:\n  · guard_target = HEq f g"
"## Tactic State A:\ncase h.e'_3\nα : Type u_1\nι κ : Type u\nf : ι → α\ng : κ → α\ne_1✝ : ι = κ\n⊢ HEq f g\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    exact test_sorry"
"## Tactic State A:\nα β : Type u_1\ns : Set α\nt : Set β\n⊢ (ℕ × Subtype s) = (ℕ × Subtype t)\n## Tactic State B:\ncase h.e'_2\nα β : Type u_1\ns : Set α\nt : Set β\n⊢ Subtype s = Subtype t\n## Action:\n  congr!"
"## Tactic State A:\ncase h.e'_2\nα β : Type u_1\ns : Set α\nt : Set β\n⊢ Subtype s = Subtype t\n## Tactic State B:\ncase h.e'_2\nα β : Type u_1\ns : Set α\nt : Set β\n⊢ Subtype s = Subtype t\n## Action:\n  guard_target = Subtype s = Subtype t"
"## Tactic State A:\ncase h.e'_2\nα β : Type u_1\ns : Set α\nt : Set β\n⊢ Subtype s = Subtype t\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact test_sorry"
"## Tactic State A:\nm n : ℕ\nh : m = n\nx : Fin m\ny : Fin n\n⊢ HEq (x + x) (y + y)\n## Tactic State B:\ncase e'_5\nm n : ℕ\nh : m = n\nx : Fin m\ny : Fin n\ne_1✝ : Fin m = Fin n\n⊢ HEq x y\n---\ncase e'_6\nm n : ℕ\nh : m = n\nx : Fin m\ny : Fin n\ne_2✝ : Fin m = Fin n\n⊢ HEq x y\n## Action:\n  congr!"
"## Tactic State A:\ncase e'_5\nm n : ℕ\nh : m = n\nx : Fin m\ny : Fin n\ne_1✝ : Fin m = Fin n\n⊢ HEq x y\n---\ncase e'_6\nm n : ℕ\nh : m = n\nx : Fin m\ny : Fin n\ne_2✝ : Fin m = Fin n\n⊢ HEq x y\n## Tactic State B:\ncase e'_5\nm n : ℕ\nh : m = n\nx : Fin m\ny : Fin n\ne_1✝ : Fin m = Fin n\n⊢ HEq x y\n---\ncase e'_6\nm n : ℕ\nh : m = n\nx : Fin m\ny : Fin n\ne_2✝ : Fin m = Fin n\n⊢ HEq x y\n## Action:\n  guard_target = HEq x y"
"## Tactic State A:\ncase e'_5\nm n : ℕ\nh : m = n\nx : Fin m\ny : Fin n\ne_1✝ : Fin m = Fin n\n⊢ HEq x y\n---\ncase e'_6\nm n : ℕ\nh : m = n\nx : Fin m\ny : Fin n\ne_2✝ : Fin m = Fin n\n⊢ HEq x y\n## Tactic State B:\ncase e'_6\nm n : ℕ\nh : m = n\nx : Fin m\ny : Fin n\ne_2✝ : Fin m = Fin n\n⊢ HEq x y\n## Action:\n  exact test_sorry"
"## Tactic State A:\ncase e'_6\nm n : ℕ\nh : m = n\nx : Fin m\ny : Fin n\ne_2✝ : Fin m = Fin n\n⊢ HEq x y\n## Tactic State B:\ncase e'_6\nm n : ℕ\nh : m = n\nx : Fin m\ny : Fin n\ne_2✝ : Fin m = Fin n\n⊢ HEq x y\n## Action:\n  guard_target = HEq x y"
"## Tactic State A:\ncase e'_6\nm n : ℕ\nh : m = n\nx : Fin m\ny : Fin n\ne_2✝ : Fin m = Fin n\n⊢ HEq x y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact test_sorry"
"## Tactic State A:\np q r : Prop\n⊢ p ∧ q ↔ p ∧ r\n## Tactic State B:\ncase a.h.e'_2.a\np q r : Prop\n⊢ q ↔ r\n## Action:\n  congr!"
"## Tactic State A:\ncase a.h.e'_2.a\np q r : Prop\n⊢ q ↔ r\n## Tactic State B:\ncase a.h.e'_2.a\np q r : Prop\n⊢ q ↔ r\n## Action:\n  guard_target = q ↔ r"
"## Tactic State A:\ncase a.h.e'_2.a\np q r : Prop\n⊢ q ↔ r\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact test_sorry"
"## Tactic State A:\nα β : Type u_1\ninst1 : Add α\ninst2 : Add β\nx : α\ny : β\n⊢ HEq (x + x) (y + y)\n## Tactic State B:\nα β : Type u_1\ninst1 : Add α\ninst2 : Add β\nx : α\ny : β\n⊢ HEq (x + x) (y + y)\n## Action:\n  congr!"
"## Tactic State A:\nα β : Type u_1\ninst1 : Add α\ninst2 : Add β\nx : α\ny : β\n⊢ HEq (x + x) (y + y)\n## Tactic State B:\nα β : Type u_1\ninst1 : Add α\ninst2 : Add β\nx : α\ny : β\n⊢ HEq (x + x) (y + y)\n## Action:\n  guard_target = HEq (x + x) (y + y)"
"## Tactic State A:\nα β : Type u_1\ninst1 : Add α\ninst2 : Add β\nx : α\ny : β\n⊢ HEq (x + x) (y + y)\n## Tactic State B:\nα β : Type u_1\ninst1 : Add α\ninst2 : Add β\nx : α\ny : β\nthis : α = β\n⊢ HEq (x + x) (y + y)\n## Action:\n  -- But with typeEqs we can get it to generate the congruence anyway:"
"## Tactic State A:\nα β : Type u_1\ninst1 : Add α\ninst2 : Add β\nx : α\ny : β\nthis : α = β\n⊢ HEq (x + x) (y + y)\n## Tactic State B:\nα β : Type u_1\ninst1 : Add α\ninst2 : Add β\nx : α\ny : β\nthis✝ : α = β\nthis : HEq inst1 inst2\n⊢ HEq (x + x) (y + y)\n## Action:\n  have : α = β := test_sorry"
"## Tactic State A:\nα β : Type u_1\ninst1 : Add α\ninst2 : Add β\nx : α\ny : β\nthis✝ : α = β\nthis : HEq inst1 inst2\n⊢ HEq (x + x) (y + y)\n## Tactic State B:\ncase e'_5\nα β : Type u_1\ninst1 : Add α\ninst2 : Add β\nx : α\ny : β\nthis✝ : α = β\nthis : HEq inst1 inst2\n⊢ HEq x y\n---\ncase e'_6\nα β : Type u_1\ninst1 : Add α\ninst2 : Add β\nx : α\ny : β\nthis✝ : α = β\nthis : HEq inst1 inst2\n⊢ HEq x y\n## Action:\n  have : HEq inst1 inst2 := test_sorry"
"## Tactic State A:\ncase e'_5\nα β : Type u_1\ninst1 : Add α\ninst2 : Add β\nx : α\ny : β\nthis✝ : α = β\nthis : HEq inst1 inst2\n⊢ HEq x y\n---\ncase e'_6\nα β : Type u_1\ninst1 : Add α\ninst2 : Add β\nx : α\ny : β\nthis✝ : α = β\nthis : HEq inst1 inst2\n⊢ HEq x y\n## Tactic State B:\ncase e'_5\nα β : Type u_1\ninst1 : Add α\ninst2 : Add β\nx : α\ny : β\nthis✝ : α = β\nthis : HEq inst1 inst2\n⊢ HEq x y\n---\ncase e'_6\nα β : Type u_1\ninst1 : Add α\ninst2 : Add β\nx : α\ny : β\nthis✝ : α = β\nthis : HEq inst1 inst2\n⊢ HEq x y\n## Action:\n  congr! (config := { typeEqs := true })"
"## Tactic State A:\ncase e'_5\nα β : Type u_1\ninst1 : Add α\ninst2 : Add β\nx : α\ny : β\nthis✝ : α = β\nthis : HEq inst1 inst2\n⊢ HEq x y\n---\ncase e'_6\nα β : Type u_1\ninst1 : Add α\ninst2 : Add β\nx : α\ny : β\nthis✝ : α = β\nthis : HEq inst1 inst2\n⊢ HEq x y\n## Tactic State B:\ncase e'_6\nα β : Type u_1\ninst1 : Add α\ninst2 : Add β\nx : α\ny : β\nthis✝ : α = β\nthis : HEq inst1 inst2\n⊢ HEq x y\n## Action:\n  guard_target = HEq x y"
"## Tactic State A:\ncase e'_6\nα β : Type u_1\ninst1 : Add α\ninst2 : Add β\nx : α\ny : β\nthis✝ : α = β\nthis : HEq inst1 inst2\n⊢ HEq x y\n## Tactic State B:\ncase e'_6\nα β : Type u_1\ninst1 : Add α\ninst2 : Add β\nx : α\ny : β\nthis✝ : α = β\nthis : HEq inst1 inst2\n⊢ HEq x y\n## Action:\n  exact test_sorry"
"## Tactic State A:\ncase e'_6\nα β : Type u_1\ninst1 : Add α\ninst2 : Add β\nx : α\ny : β\nthis✝ : α = β\nthis : HEq inst1 inst2\n⊢ HEq x y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  guard_target = HEq x y"
"## Tactic State A:\nprime : ℕ → Prop\nn : ℕ\n⊢ prime (2 * n + 1) = prime (n + n + 1)\n## Tactic State B:\ncase h.e'_1.h.e'_5.h.e\nprime : ℕ → Prop\nn : ℕ\n⊢ HMul.hMul = HAdd.hAdd\n---\ncase h.e'_1.h.e'_5.h.e'_1\nprime : ℕ → Prop\nn : ℕ\n⊢ 2 = n\n## Action:\n  congr!"
"## Tactic State A:\ncase h.e'_1.h.e'_5.h.e\nprime : ℕ → Prop\nn : ℕ\n⊢ HMul.hMul = HAdd.hAdd\n---\ncase h.e'_1.h.e'_5.h.e'_1\nprime : ℕ → Prop\nn : ℕ\n⊢ 2 = n\n## Tactic State B:\ncase h.e'_1.h.e'_5.h.e\nprime : ℕ → Prop\nn : ℕ\n⊢ HMul.hMul = HAdd.hAdd\n## Action:\n  · guard_target =ₛ (HMul.hMul : Nat → Nat → Nat) = HAdd.hAdd"
"## Tactic State A:\ncase h.e'_1.h.e'_5.h.e\nprime : ℕ → Prop\nn : ℕ\n⊢ HMul.hMul = HAdd.hAdd\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    exact test_sorry"
"## Tactic State A:\n\n## Tactic State B:\ncase h.e'_1.h.e'_5.h.e'_1\nprime : ℕ → Prop\nn : ℕ\n⊢ 2 = n\n## Action:\n  · guard_target = 2 = n"
"## Tactic State A:\ncase h.e'_1.h.e'_5.h.e'_1\nprime : ℕ → Prop\nn : ℕ\n⊢ 2 = n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    exact test_sorry"
"## Tactic State A:\nprime : ℕ → Prop\nn : ℕ\n⊢ prime (2 * n + 1) = prime (n + n + 1)\n## Tactic State B:\ncase h.e'_1.h.e'_5.h.e\nprime : ℕ → Prop\nn : ℕ\n⊢ (fun a a_1 => a * a_1) = fun a a_1 => a + a_1\n---\ncase h.e'_1.h.e'_5.h.e'_1\nprime : ℕ → Prop\nn : ℕ\n⊢ 2 = n\n## Action:\n  congr! (config := {etaExpand := true})"
"## Tactic State A:\ncase h.e'_1.h.e'_5.h.e\nprime : ℕ → Prop\nn : ℕ\n⊢ (fun a a_1 => a * a_1) = fun a a_1 => a + a_1\n---\ncase h.e'_1.h.e'_5.h.e'_1\nprime : ℕ → Prop\nn : ℕ\n⊢ 2 = n\n## Tactic State B:\ncase h.e'_1.h.e'_5.h.e\nprime : ℕ → Prop\nn : ℕ\n⊢ (fun a a_1 => a * a_1) = fun a a_1 => a + a_1\n## Action:\n  · guard_target =ₛ (fun (x y : Nat) => x * y) = (fun (x y : Nat) => x + y)"
"## Tactic State A:\ncase h.e'_1.h.e'_5.h.e\nprime : ℕ → Prop\nn : ℕ\n⊢ (fun a a_1 => a * a_1) = fun a a_1 => a + a_1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    exact test_sorry"
"## Tactic State A:\n\n## Tactic State B:\ncase h.e'_1.h.e'_5.h.e'_1\nprime : ℕ → Prop\nn : ℕ\n⊢ 2 = n\n## Action:\n  · guard_target = 2 = n"
"## Tactic State A:\ncase h.e'_1.h.e'_5.h.e'_1\nprime : ℕ → Prop\nn : ℕ\n⊢ 2 = n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    exact test_sorry"
"## Tactic State A:\nprime : ℕ → Prop\nn : ℕ\n⊢ prime (2 * n + 1) = prime (n + n + 1)\n## Tactic State B:\ncase h.e'_1.h.e'_5\nprime : ℕ → Prop\nn : ℕ\n⊢ 2 * n = n + n\n## Action:\n  congr! 2"
"## Tactic State A:\ncase h.e'_1.h.e'_5\nprime : ℕ → Prop\nn : ℕ\n⊢ 2 * n = n + n\n## Tactic State B:\ncase h.e'_1.h.e'_5\nprime : ℕ → Prop\nn : ℕ\n⊢ 2 * n = n + n\n## Action:\n  guard_target = 2 * n = n + n"
"## Tactic State A:\ncase h.e'_1.h.e'_5\nprime : ℕ → Prop\nn : ℕ\n⊢ 2 * n = n + n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact test_sorry"
"## Tactic State A:\nprime : ℕ → Prop\nn : ℕ\n⊢ prime (2 * n + 1) = prime (n + n + 1)\n## Tactic State B:\ncase h.e'_1.h.e'_5\nprime : ℕ → Prop\nn : ℕ\n⊢ 2 * n = n + n\n## Action:\n  congr! (config := .unfoldSameFun)"
"## Tactic State A:\ncase h.e'_1.h.e'_5\nprime : ℕ → Prop\nn : ℕ\n⊢ 2 * n = n + n\n## Tactic State B:\ncase h.e'_1.h.e'_5\nprime : ℕ → Prop\nn : ℕ\n⊢ 2 * n = n + n\n## Action:\n  guard_target = 2 * n = n + n"
"## Tactic State A:\ncase h.e'_1.h.e'_5\nprime : ℕ → Prop\nn : ℕ\n⊢ 2 * n = n + n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact test_sorry"
"## Tactic State A:\nx✝ : Sort u_1\npartiallyApplied : x✝\n⊢ sorry = sorry\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  congr!"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  decide"
"## Tactic State A:\nx✝ : Sort u_1\nwalk : x✝\nα : Sort u_2\nβ : Sort u_3\nw : sorry\nw' : sorry\nf : α → β\n⊢ HEq sorry sorry\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  congr!"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  guard_target = x = x'"
"## Tactic State A:\nx✝ : Sort u_1\nwalk : x✝\nα : Sort u_2\nβ : Sort u_3\nw : sorry\nw' : sorry\nf : α → β\n⊢ HEq sorry sorry\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  congr! with rfl rfl"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  guard_target = x = x'"
"## Tactic State A:\nx✝ : Sort u_1\nMySet : x✝\nα : Sort u_2\nβ : Sort u_3\ns : sorry\nt : sorry\nf g : α → β\nh1 : s = t\nh2 : f = g\n⊢ sorry = sorry\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  congr!"
"## Tactic State A:\nc : Prop → Prop → Prop → Prop\nx x' y z z' : Prop\nh₀ : x ↔ x'\nh₁ : z ↔ z'\n⊢ c x y z ↔ c x' y z'\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  congr!"
"## Tactic State A:\nα : Sort u_1\nβ : Sort u_2\nγ : Sort u_3\nδ : Sort u_4\nF : {α : Sort u_1} → {β : Sort u_2} → (α → β) → γ → δ\nf g : α → β\ns : γ\nh : ∀ (x : α), f x = g x\n⊢ F f s = F g s\n## Tactic State B:\ncase h.e'_3\nα : Sort u_1\nβ : Sort u_2\nγ : Sort u_3\nδ : Sort u_4\nF : {α : Sort u_1} → {β : Sort u_2} → (α → β) → γ → δ\nf g : α → β\ns : γ\nh : ∀ (x : α), f x = g x\n⊢ f = g\n## Action:\n  congr!"
"## Tactic State A:\ncase h.e'_3\nα : Sort u_1\nβ : Sort u_2\nγ : Sort u_3\nδ : Sort u_4\nF : {α : Sort u_1} → {β : Sort u_2} → (α → β) → γ → δ\nf g : α → β\ns : γ\nh : ∀ (x : α), f x = g x\n⊢ f = g\n## Tactic State B:\ncase h.e'_3.h\nα : Sort u_1\nβ : Sort u_2\nγ : Sort u_3\nδ : Sort u_4\nF : {α : Sort u_1} → {β : Sort u_2} → (α → β) → γ → δ\nf g : α → β\ns : γ\nh : ∀ (x : α), f x = g x\nx✝ : α\n⊢ f x✝ = g x✝\n## Action:\n  funext"
"## Tactic State A:\ncase h.e'_3.h\nα : Sort u_1\nβ : Sort u_2\nγ : Sort u_3\nδ : Sort u_4\nF : {α : Sort u_1} → {β : Sort u_2} → (α → β) → γ → δ\nf g : α → β\ns : γ\nh : ∀ (x : α), f x = g x\nx✝ : α\n⊢ f x✝ = g x✝\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  apply h"
"## Tactic State A:\nα : Sort u_1\nβ : Sort u_2\nf : { x // x = x } → β\nx y : { x // x = x }\nh : ↑x = ↑y\n⊢ f x = f y\n## Tactic State B:\ncase h.e'_1\nα : Sort u_1\nβ : Sort u_2\nf : { x // x = x } → β\nx y : { x // x = x }\nh : ↑x = ↑y\n⊢ x = y\n## Action:\n  congr! 1"
"## Tactic State A:\ncase h.e'_1\nα : Sort u_1\nβ : Sort u_2\nf : { x // x = x } → β\nx y : { x // x = x }\nh : ↑x = ↑y\n⊢ x = y\n## Tactic State B:\ncase h.e'_1.a\nα : Sort u_1\nβ : Sort u_2\nf : { x // x = x } → β\nx y : { x // x = x }\nh : ↑x = ↑y\n⊢ ↑x = ↑y\n## Action:\n  ext1"
"## Tactic State A:\ncase h.e'_1.a\nα : Sort u_1\nβ : Sort u_2\nf : { x // x = x } → β\nx y : { x // x = x }\nh : ↑x = ↑y\n⊢ ↑x = ↑y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h"
"## Tactic State A:\nα : Sort u_1\nβ : Sort u_2\nF : { f // f = f } → β\nf g : { f // f = f }\nh : ∀ (x : α), ↑f x = ↑g x\n⊢ F f = F g\n## Tactic State B:\ncase h.e'_1\nα : Sort u_1\nβ : Sort u_2\nF : { f // f = f } → β\nf g : { f // f = f }\nh : ∀ (x : α), ↑f x = ↑g x\n⊢ f = g\n## Action:\n  congr!"
"## Tactic State A:\ncase h.e'_1\nα : Sort u_1\nβ : Sort u_2\nF : { f // f = f } → β\nf g : { f // f = f }\nh : ∀ (x : α), ↑f x = ↑g x\n⊢ f = g\n## Tactic State B:\ncase h.e'_1.a.h\nα : Sort u_1\nβ : Sort u_2\nF : { f // f = f } → β\nf g : { f // f = f }\nh : ∀ (x : α), ↑f x = ↑g x\nx : α\n⊢ ↑f x = ↑g x\n## Action:\n  ext x"
"## Tactic State A:\ncase h.e'_1.a.h\nα : Sort u_1\nβ : Sort u_2\nF : { f // f = f } → β\nf g : { f // f = f }\nh : ∀ (x : α), ↑f x = ↑g x\nx : α\n⊢ ↑f x = ↑g x\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  apply h"
"## Tactic State A:\nls : List ℕ\n⊢ List.map (fun x => (List.map (fun y => 1 + y) ls).sum + 1) ls =\n    List.map (fun x => (List.map (fun y => y.succ) ls).sum + 1) ls\n## Tactic State B:\ncase h.e'_3.h.h.e'_5.h.e'_4.h.e'_3.h\nls : List ℕ\ny : ℕ\n⊢ 1 + y = y.succ\n## Action:\n  congr! 6 with - y"
"## Tactic State A:\ncase h.e'_3.h.h.e'_5.h.e'_4.h.e'_3.h\nls : List ℕ\ny : ℕ\n⊢ 1 + y = y.succ\n## Tactic State B:\ncase h.e'_3.h.h.e'_5.h.e'_4.h.e'_3.h\nls : List ℕ\ny : ℕ\n⊢ 1 + y = y.succ\n## Action:\n  guard_target = 1 + y = y.succ"
"## Tactic State A:\ncase h.e'_3.h.h.e'_5.h.e'_4.h.e'_3.h\nls : List ℕ\ny : ℕ\n⊢ 1 + y = y.succ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rw [Nat.add_comm]"
"## Tactic State A:\nls : List ℕ\nf g : ℕ → ℕ\nh : ∀ (x : ℕ), f x = g x\n⊢ List.map (fun x => f x + 3) ls = List.map (fun x => g x + 3) ls\n## Tactic State B:\ncase h.e'_3.h.h.e'_5\nls : List ℕ\nf g : ℕ → ℕ\nh : ∀ (x : ℕ), f x = g x\nx : ℕ\n⊢ f x = g x\n## Action:\n  congr! 3 with x -- it's a little too powerful and will get to `f = g`"
"## Tactic State A:\ncase h.e'_3.h.h.e'_5\nls : List ℕ\nf g : ℕ → ℕ\nh : ∀ (x : ℕ), f x = g x\nx : ℕ\n⊢ f x = g x\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h x"
"## Tactic State A:\nα : Sort u_1\na b : α\nh : false = true\n⊢ a = b\n## Tactic State B:\nα : Sort u_1\na b : α\nh : false = true\n⊢ a = b\n## Action:\n  fail_if_success { congr! }"
"## Tactic State A:\nα : Sort u_1\na b : α\nh : false = true\n⊢ a = b\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cases h"
"## Tactic State A:\nx✝ : Sort u_1\ng : x✝\nx y z : ℕ\nh : x = z\nhy : y = 2\n⊢ 1 + x + y = sorry + 2\n## Tactic State B:\ncase h.e'_5\nx✝ : Sort u_1\ng : x✝\nx y z : ℕ\nh : x = z\nhy : y = 2\n⊢ 1 + x = sorry\n## Action:\n  congr!"
"## Tactic State A:\ncase h.e'_5\nx✝ : Sort u_1\ng : x✝\nx y z : ℕ\nh : x = z\nhy : y = 2\n⊢ 1 + x = sorry\n## Tactic State B:\ncase h.e'_5\nx✝ : Sort u_1\ng : x✝\nx y z : ℕ\nh : x = z\nhy : y = 2\n⊢ 1 + x = sorry\n## Action:\n  guard_target = HAdd.hAdd 1 = g"
"## Tactic State A:\nFintype : Type → Type\nα β : Type\ninst : Fintype α\ninst' : Fintype β\n⊢ HEq inst inst'\n## Tactic State B:\nFintype : Type → Type\nα β : Type\ninst : Fintype α\ninst' : Fintype β\n⊢ HEq inst inst'\n## Action:\n  congr!"
"## Tactic State A:\nFintype : Type → Type\nα β : Type\ninst : Fintype α\ninst' : Fintype β\n⊢ HEq inst inst'\n## Tactic State B:\nFintype : Type → Type\nα β : Type\ninst : Fintype α\ninst' : Fintype β\n⊢ HEq inst inst'\n## Action:\n  guard_target = HEq inst inst'"
"## Tactic State A:\nFintype : Type → Type\nα β : Type\ninst : Fintype α\ninst' : Fintype β\n⊢ HEq inst inst'\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact test_sorry"
"## Tactic State A:\nFintype : Type → Type\ninst✝ : ∀ (γ : Type), Subsingleton (Fintype γ)\nα β : Type\ninst : Fintype α\ninst' : Fintype β\n⊢ HEq inst inst'\n## Tactic State B:\ncase h.e'_1\nFintype : Type → Type\ninst✝¹ : ∀ (γ : Type), Subsingleton (Fintype γ)\nα β : Type\ninst✝ : Fintype α\ninst' : Fintype β\ninst : ∀ (γ : Type), Lean.Meta.FastSubsingleton (Fintype γ)\n⊢ α = β\n## Action:\n  congr!"
"## Tactic State A:\ncase h.e'_1\nFintype : Type → Type\ninst✝¹ : ∀ (γ : Type), Subsingleton (Fintype γ)\nα β : Type\ninst✝ : Fintype α\ninst' : Fintype β\ninst : ∀ (γ : Type), Lean.Meta.FastSubsingleton (Fintype γ)\n⊢ α = β\n## Tactic State B:\ncase h.e'_1\nFintype : Type → Type\ninst✝¹ : ∀ (γ : Type), Subsingleton (Fintype γ)\nα β : Type\ninst✝ : Fintype α\ninst' : Fintype β\ninst : ∀ (γ : Type), Lean.Meta.FastSubsingleton (Fintype γ)\n⊢ α = β\n## Action:\n  guard_target = α = β"
"## Tactic State A:\ncase h.e'_1\nFintype : Type → Type\ninst✝¹ : ∀ (γ : Type), Subsingleton (Fintype γ)\nα β : Type\ninst✝ : Fintype α\ninst' : Fintype β\ninst : ∀ (γ : Type), Lean.Meta.FastSubsingleton (Fintype γ)\n⊢ α = β\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact test_sorry"
"## Tactic State A:\nn m : ℕ\n⊢ n = m → 3 + n = m + 3\n## Tactic State B:\nn : ℕ\n⊢ 3 + n = n + 3\n## Action:\n  congr! 0 with rfl"
"## Tactic State A:\nn : ℕ\n⊢ 3 + n = n + 3\n## Tactic State B:\nn : ℕ\n⊢ 3 + n = n + 3\n## Action:\n  guard_target = 3 + n = n + 3"
"## Tactic State A:\nn : ℕ\n⊢ 3 + n = n + 3\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  apply add_comm"
"## Tactic State A:\nx y x' y' : ℕ\nhx : x = x'\nhy : y = y'\n⊢ x + y = x' + y'\n## Tactic State B:\ncase h.e'_5\nx y x' y' : ℕ\nhx : x = x'\nhy : y = y'\n⊢ x = x'\n---\ncase h.e'_6\nx y x' y' : ℕ\nhx : x = x'\nhy : y = y'\n⊢ y = y'\n## Action:\n  congr! (config := { closePre := false, closePost := false })"
"## Tactic State A:\ncase h.e'_5\nx y x' y' : ℕ\nhx : x = x'\nhy : y = y'\n⊢ x = x'\n---\ncase h.e'_6\nx y x' y' : ℕ\nhx : x = x'\nhy : y = y'\n⊢ y = y'\n## Tactic State B:\ncase h.e'_6\nx y x' y' : ℕ\nhx : x = x'\nhy : y = y'\n⊢ y = y'\n## Action:\n  exact hx"
"## Tactic State A:\ncase h.e'_6\nx y x' y' : ℕ\nhx : x = x'\nhy : y = y'\n⊢ y = y'\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact hy"
"## Tactic State A:\nx y x' : ℕ\nhx : id x = id x'\n⊢ x + y = x' + y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  congr!"
"## Tactic State A:\nx y x' : ℕ\nhx : id x = id x'\n⊢ x + y = x' + y\n## Tactic State B:\ncase h.e'_5\nx y x' : ℕ\nhx : id x = id x'\n⊢ x = x'\n## Action:\n  congr! (config := { closePost := false })"
"## Tactic State A:\ncase h.e'_5\nx y x' : ℕ\nhx : id x = id x'\n⊢ x = x'\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact hx"
"## Tactic State A:\n⊢ ?m.58 = id\n## Tactic State B:\n⊢ ?m.58 = id\n## Action:\n  ⟨?_, by"
"## Tactic State A:\n⊢ ?m.58 = id\n## Tactic State B:\ncase h\nx : ℕ\n⊢ ?m.58 x = id x\n## Action:\n    -- prevents `rfl` from solving for `?m` in `?m = id`:"
"## Tactic State A:\ncase h\nx : ℕ\n⊢ ?m.58 x = id x\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    congr! (config := { closePre := false, closePost := false })"
"## Tactic State A:\nα✝ : Sort u_1\nz y x : α✝\nh : z = y\n⊢ x = y ∨ x = z → x = y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  congr! with (rfl|rfl)"
"## Tactic State A:\nα : Type u_1\ninst✝¹ : AddCommMonoid α\ninst✝ : PartialOrder α\na b c d e f g : α\n⊢ a + b + (c + d) + (e + f) + g ≤ a + d + e + f + c + g + b\n## Tactic State B:\ncase h.e'_3\nα : Type u_1\ninst✝¹ : AddCommMonoid α\ninst✝ : PartialOrder α\na b c d e f g : α\n⊢ a + b + (c + d) + (e + f) + g = a + d + e + f + c + g + b\n---\ncase convert_2\nα : Type u_1\ninst✝¹ : AddCommMonoid α\ninst✝ : PartialOrder α\na b c d e f g : α\n⊢ a + d + e + f + c + g + b ≤ a + d + e + f + c + g + b\n## Action:\n  ac_change a + d + e + f + c + g + b ≤ _; rfl"
"## Tactic State A:\nα : Type u_1\ninst✝¹ : AddCommMonoid α\ninst✝ : PartialOrder α\na b c d e f g : α\n⊢ a + b + (c + d) + (e + f) + g ≤ a + d + e + f + c + b + g\n## Tactic State B:\ncase h.e'_3\nα : Type u_1\ninst✝¹ : AddCommMonoid α\ninst✝ : PartialOrder α\na b c d e f g : α\n⊢ a + b + (c + d) + (e + f) + g = a + d + e + f + c + g + b\n---\ncase h.e'_4\nα : Type u_1\ninst✝¹ : AddCommMonoid α\ninst✝ : PartialOrder α\na b c d e f g : α\n⊢ a + d + e + f + c + b + g = a + d + e + f + c + g + b\n---\nα : Type u_1\ninst✝¹ : AddCommMonoid α\ninst✝ : PartialOrder α\na b c d e f g : α\n⊢ a + d + e + f + c + g + b ≤ a + d + e + f + c + g + b\n## Action:\n  ac_change a + d + e + f + c + g + b ≤ a + d + e + f + c + g + b"
"## Tactic State A:\ncase h.e'_3\nα : Type u_1\ninst✝¹ : AddCommMonoid α\ninst✝ : PartialOrder α\na b c d e f g : α\n⊢ a + b + (c + d) + (e + f) + g = a + d + e + f + c + g + b\n---\ncase h.e'_4\nα : Type u_1\ninst✝¹ : AddCommMonoid α\ninst✝ : PartialOrder α\na b c d e f g : α\n⊢ a + d + e + f + c + b + g = a + d + e + f + c + g + b\n---\nα : Type u_1\ninst✝¹ : AddCommMonoid α\ninst✝ : PartialOrder α\na b c d e f g : α\n⊢ a + d + e + f + c + g + b ≤ a + d + e + f + c + g + b\n## Tactic State B:\ncase h.e'_3\nα : Type u_1\ninst✝¹ : AddCommMonoid α\ninst✝ : PartialOrder α\na b c d e f g : α\n⊢ a + b + (c + d) + (e + f) + g = a + d + e + f + c + g + b\n---\ncase h.e'_4\nα : Type u_1\ninst✝¹ : AddCommMonoid α\ninst✝ : PartialOrder α\na b c d e f g : α\n⊢ a + d + e + f + c + b + g = a + d + e + f + c + g + b\n---\nα : Type u_1\ninst✝¹ : AddCommMonoid α\ninst✝ : PartialOrder α\na b c d e f g : α\n⊢ a + d + e + f + c + g + b ≤ a + d + e + f + c + g + b\n## Action:\n  rfl"
"## Tactic State A:\n⊢ True\n## Tactic State B:\ncase intro.intro\nn : ℕ\nh : n = n\n⊢ True\n---\n⊢ ∃ n, n = n ∧ True\n## Action:\n  rsuffices ⟨n : ℕ, h : n = n, -⟩ : ∃ n : ℕ, n = n ∧ True"
"## Tactic State A:\ncase intro.intro\nn : ℕ\nh : n = n\n⊢ True\n---\n⊢ ∃ n, n = n ∧ True\n## Tactic State B:\ncase intro.intro\nn : ℕ\nh : n = n\n⊢ True\n## Action:\n  · guard_hyp n : ℕ"
"## Tactic State A:\ncase intro.intro\nn : ℕ\nh : n = n\n⊢ True\n## Tactic State B:\ncase intro.intro\nn : ℕ\nh : n = n\n⊢ True\n## Action:\n    guard_hyp h : n = n"
"## Tactic State A:\ncase intro.intro\nn : ℕ\nh : n = n\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    trivial"
"## Tactic State A:\n\n## Tactic State B:\n⊢ 0 = 0 ∧ True\n## Action:\n  · existsi 0"
"## Tactic State A:\n⊢ 0 = 0 ∧ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    simp"
"## Tactic State A:\n⊢ True\n## Tactic State B:\nthis✝ : ∃ n, n = n ∧ True\n⊢ True\n---\n⊢ ∃ n, n = n ∧ True\n## Action:\n  rsuffices : ∃ n : ℕ, n = n ∧ True"
"## Tactic State A:\nthis✝ : ∃ n, n = n ∧ True\n⊢ True\n---\n⊢ ∃ n, n = n ∧ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · trivial"
"## Tactic State A:\n\n## Tactic State B:\n⊢ 0 = 0 ∧ True\n## Action:\n  · existsi 0"
"## Tactic State A:\n⊢ 0 = 0 ∧ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    simp"
"## Tactic State A:\n⊢ True\n## Tactic State B:\ncase inl\nh : True\n⊢ True\n---\n⊢ True ∨ False\n## Action:\n  rsuffices (h : True) | ⟨⟨⟩⟩ : True ∨ False"
"## Tactic State A:\ncase inl\nh : True\n⊢ True\n---\n⊢ True ∨ False\n## Tactic State B:\ncase inl\nh : True\n⊢ True\n## Action:\n  · guard_hyp h : True"
"## Tactic State A:\ncase inl\nh : True\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    trivial"
"## Tactic State A:\n\n## Tactic State B:\ncase h\n⊢ True\n## Action:\n  · left"
"## Tactic State A:\ncase h\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    trivial"
"## Tactic State A:\nα : Type u_1\nβ : Type u_2\nx y : α × β\n⊢ True\n## Tactic State B:\ncase mk.mk.mk\nα : Type u_1\nβ : Type u_2\nx y : α × β\na : α\nb : β\nc : α\nd : β\n⊢ True\n---\nα : Type u_1\nβ : Type u_2\nx y : α × β\n⊢ (α × β) × α × β\n## Action:\n  rsuffices ⟨⟨a, b⟩, c, d⟩ : (α × β) × (α × β)"
"## Tactic State A:\ncase mk.mk.mk\nα : Type u_1\nβ : Type u_2\nx y : α × β\na : α\nb : β\nc : α\nd : β\n⊢ True\n---\nα : Type u_1\nβ : Type u_2\nx y : α × β\n⊢ (α × β) × α × β\n## Tactic State B:\ncase mk.mk.mk\nα : Type u_1\nβ : Type u_2\nx y : α × β\na : α\nb : β\nc : α\nd : β\n⊢ True\n## Action:\n  · guard_hyp a : α"
"## Tactic State A:\ncase mk.mk.mk\nα : Type u_1\nβ : Type u_2\nx y : α × β\na : α\nb : β\nc : α\nd : β\n⊢ True\n## Tactic State B:\ncase mk.mk.mk\nα : Type u_1\nβ : Type u_2\nx y : α × β\na : α\nb : β\nc : α\nd : β\n⊢ True\n## Action:\n    guard_hyp b : β"
"## Tactic State A:\ncase mk.mk.mk\nα : Type u_1\nβ : Type u_2\nx y : α × β\na : α\nb : β\nc : α\nd : β\n⊢ True\n## Tactic State B:\ncase mk.mk.mk\nα : Type u_1\nβ : Type u_2\nx y : α × β\na : α\nb : β\nc : α\nd : β\n⊢ True\n## Action:\n    guard_hyp c : α"
"## Tactic State A:\ncase mk.mk.mk\nα : Type u_1\nβ : Type u_2\nx y : α × β\na : α\nb : β\nc : α\nd : β\n⊢ True\n## Tactic State B:\ncase mk.mk.mk\nα : Type u_1\nβ : Type u_2\nx y : α × β\na : α\nb : β\nc : α\nd : β\n⊢ True\n## Action:\n    guard_hyp d : β"
"## Tactic State A:\ncase mk.mk.mk\nα : Type u_1\nβ : Type u_2\nx y : α × β\na : α\nb : β\nc : α\nd : β\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    trivial"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · exact ⟨x, y⟩"
"## Tactic State A:\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\n⊢ True\n## Tactic State B:\ncase mk.inl.inl\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\na c : α\n⊢ True\n---\ncase mk.inl.inr\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\na : α\nd : β\n⊢ True\n---\ncase mk.inr.inl\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\nb : β\nc : α\n⊢ True\n---\ncase mk.inr.inr\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\nb d : β\n⊢ True\n---\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\n⊢ (α ⊕ β) × (α ⊕ β)\n## Action:\n  rsuffices ⟨a|b, c|d⟩ : (α ⊕ β) × (α ⊕ β)"
"## Tactic State A:\ncase mk.inl.inl\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\na c : α\n⊢ True\n---\ncase mk.inl.inr\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\na : α\nd : β\n⊢ True\n---\ncase mk.inr.inl\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\nb : β\nc : α\n⊢ True\n---\ncase mk.inr.inr\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\nb d : β\n⊢ True\n---\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\n⊢ (α ⊕ β) × (α ⊕ β)\n## Tactic State B:\ncase mk.inl.inl\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\na c : α\n⊢ True\n## Action:\n  · guard_hyp a : α"
"## Tactic State A:\ncase mk.inl.inl\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\na c : α\n⊢ True\n## Tactic State B:\ncase mk.inl.inl\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\na c : α\n⊢ True\n## Action:\n    guard_hyp c : α"
"## Tactic State A:\ncase mk.inl.inl\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\na c : α\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    trivial"
"## Tactic State A:\n\n## Tactic State B:\ncase mk.inl.inr\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\na : α\nd : β\n⊢ True\n## Action:\n  · guard_hyp a : α"
"## Tactic State A:\ncase mk.inl.inr\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\na : α\nd : β\n⊢ True\n## Tactic State B:\ncase mk.inl.inr\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\na : α\nd : β\n⊢ True\n## Action:\n    guard_hyp d : β"
"## Tactic State A:\ncase mk.inl.inr\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\na : α\nd : β\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    trivial"
"## Tactic State A:\n\n## Tactic State B:\ncase mk.inr.inl\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\nb : β\nc : α\n⊢ True\n## Action:\n  · guard_hyp b : β"
"## Tactic State A:\ncase mk.inr.inl\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\nb : β\nc : α\n⊢ True\n## Tactic State B:\ncase mk.inr.inl\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\nb : β\nc : α\n⊢ True\n## Action:\n    guard_hyp c : α"
"## Tactic State A:\ncase mk.inr.inl\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\nb : β\nc : α\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    trivial"
"## Tactic State A:\n\n## Tactic State B:\ncase mk.inr.inr\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\nb d : β\n⊢ True\n## Action:\n  · guard_hyp b : β"
"## Tactic State A:\ncase mk.inr.inr\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\nb d : β\n⊢ True\n## Tactic State B:\ncase mk.inr.inr\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\nb d : β\n⊢ True\n## Action:\n    guard_hyp d : β"
"## Tactic State A:\ncase mk.inr.inr\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\nb d : β\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    trivial"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact ⟨x, y⟩"
"## Tactic State A:\nα : Type u_1\nV : Set α\nw : True → ∃ p, p ∈ sorry ∩ sorry\n⊢ True\n## Tactic State B:\ncase intro\nα : Type u_1\nV : Set α\nw : True → ∃ p, p ∈ sorry ∩ sorry\nw✝ : ?m.625\nh✝ : w✝ ∈ sorry ∩ sorry\n⊢ True\n---\nα : Type u_1\nV : Set α\nw : True → ∃ p, p ∈ sorry ∩ sorry\n⊢ ∃ p, p ∈ sorry ∩ sorry\n## Action:\n  rsuffices ⟨_, _⟩ : ∃ p, p ∈ (V.foo V) ∩ (V.foo V)"
"## Tactic State A:\ncase intro\nα : Type u_1\nV : Set α\nw : True → ∃ p, p ∈ sorry ∩ sorry\nw✝ : ?m.625\nh✝ : w✝ ∈ sorry ∩ sorry\n⊢ True\n---\nα : Type u_1\nV : Set α\nw : True → ∃ p, p ∈ sorry ∩ sorry\n⊢ ∃ p, p ∈ sorry ∩ sorry\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · trivial"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · exact w trivial"
"## Tactic State A:\na : ℕ\nb : ℤ\n⊢ ℤ × ℕ\n## Tactic State B:\nc : ℕ\nd : ℤ\n⊢ ℤ × ℕ\n## Action:\n  rename' a => c, b => d"
"## Tactic State A:\nc : ℕ\nd : ℤ\n⊢ ℤ × ℕ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact (d, c)"
"## Tactic State A:\na : ℕ\nb : ℤ\n⊢ ℤ × ℕ\n## Tactic State B:\nb : ℕ\na : ℤ\n⊢ ℤ × ℕ\n## Action:\n  rename' a => b, b => a"
"## Tactic State A:\nb : ℕ\na : ℤ\n⊢ ℤ × ℕ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact (a, b)"
"## Tactic State A:\na b : ℕ∞\nh : a = b\n⊢ a - b = b - a\n## Tactic State B:\ncase coe.coe\na b : ℕ\nh : a = b\n⊢ a - b = b - a\n## Action:\n  enat_to_nat"
"## Tactic State A:\ncase coe.coe\na b : ℕ\nh : a = b\n⊢ a - b = b - a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  omega"
"## Tactic State A:\na b : ℕ∞\nh : a ≤ b\n⊢ a - b < b + 1\n## Tactic State B:\ncase coe.coe\na b : ℕ\nh : a ≤ b\n⊢ a - b < b + 1\n## Action:\n  enat_to_nat"
"## Tactic State A:\ncase coe.coe\na b : ℕ\nh : a ≤ b\n⊢ a - b < b + 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  omega"
"## Tactic State A:\na b : ℕ∞\nh : a ≤ b\n⊢ a - 2 * b ≤ b + 1\n## Tactic State B:\ncase coe.coe\na b : ℕ\nh : a ≤ b\n⊢ a - 2 * b ≤ b + 1\n## Action:\n  enat_to_nat"
"## Tactic State A:\ncase coe.coe\na b : ℕ\nh : a ≤ b\n⊢ a - 2 * b ≤ b + 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  omega"
"## Tactic State A:\na b c : ℕ∞\nhab : a ≥ b\nhbc : b ≥ c\n⊢ a ≥ c\n## Tactic State B:\ncase coe.coe.coe\na b c : ℕ\nhab : b ≤ a\nhbc : c ≤ b\n⊢ c ≤ a\n## Action:\n  enat_to_nat"
"## Tactic State A:\ncase coe.coe.coe\na b c : ℕ\nhab : b ≤ a\nhbc : c ≤ b\n⊢ c ≤ a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  omega"
"## Tactic State A:\na b : ℕ∞\nh : a = b\n⊢ a - b = b - a\n## Tactic State B:\na✝ b : ℕ∞\nh : a✝ = b\na : ℤ := 42\n⊢ a✝ - b = b - a✝\n## Action:\n  -- to test if the tactic works with inaccessible names"
"## Tactic State A:\na✝ b : ℕ∞\nh : a✝ = b\na : ℤ := 42\n⊢ a✝ - b = b - a✝\n## Tactic State B:\na✝ b✝ : ℕ∞\nh : a✝ = b✝\na : ℤ := 42\nb : ℤ := 32\n⊢ a✝ - b✝ = b✝ - a✝\n## Action:\n  let a : ℤ := 42"
"## Tactic State A:\na✝ b✝ : ℕ∞\nh : a✝ = b✝\na : ℤ := 42\nb : ℤ := 32\n⊢ a✝ - b✝ = b✝ - a✝\n## Tactic State B:\ncase coe.coe\na : ℤ := 42\nb : ℤ := 32\na✝¹ a✝ : ℕ\nh : a✝¹ = a✝\n⊢ a✝¹ - a✝ = a✝ - a✝¹\n## Action:\n  let b : ℤ := 32"
"## Tactic State A:\ncase coe.coe\na : ℤ := 42\nb : ℤ := 32\na✝¹ a✝ : ℕ\nh : a✝¹ = a✝\n⊢ a✝¹ - a✝ = a✝ - a✝¹\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  enat_to_nat"
"## Tactic State A:\nx : ℕ\nh : x ∈ [0, 2, 37]\n⊢ x ≤ 57\n## Tactic State B:\ncase «0»\n⊢ 0 ≤ 57\n---\ncase «1»\n⊢ 2 ≤ 57\n---\ncase «2»\n⊢ 37 ≤ 57\n## Action:\n  fin_cases h"
"## Tactic State A:\ncase «0»\n⊢ 0 ≤ 57\n---\ncase «1»\n⊢ 2 ≤ 57\n---\ncase «2»\n⊢ 37 ≤ 57\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  repeat decide"
"## Tactic State A:\nx : ℕ\nh : x ∈ [0, 2, 37]\n⊢ x = 0 ∨ x = 2 ∨ x = 37\n## Tactic State B:\ncase «0»\n⊢ 0 = 0 ∨ 0 = 2 ∨ 0 = 37\n---\ncase «1»\n⊢ 2 = 0 ∨ 2 = 2 ∨ 2 = 37\n---\ncase «2»\n⊢ 37 = 0 ∨ 37 = 2 ∨ 37 = 37\n## Action:\n  fin_cases h"
"## Tactic State A:\ncase «0»\n⊢ 0 = 0 ∨ 0 = 2 ∨ 0 = 37\n---\ncase «1»\n⊢ 2 = 0 ∨ 2 = 2 ∨ 2 = 37\n---\ncase «2»\n⊢ 37 = 0 ∨ 37 = 2 ∨ 37 = 37\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  repeat simp"
"## Tactic State A:\nx : ℕ\nh : x ∈ List.range 5\n⊢ x ≤ 4\n## Tactic State B:\ncase «0»\n⊢ 0 ≤ 4\n---\ncase «1»\n⊢ 1 ≤ 4\n---\ncase «2»\n⊢ 2 ≤ 4\n---\ncase «3»\n⊢ 3 ≤ 4\n---\ncase «4»\n⊢ 4 ≤ 4\n## Action:\n  fin_cases h"
"## Tactic State A:\ncase «0»\n⊢ 0 ≤ 4\n---\ncase «1»\n⊢ 1 ≤ 4\n---\ncase «2»\n⊢ 2 ≤ 4\n---\ncase «3»\n⊢ 3 ≤ 4\n---\ncase «4»\n⊢ 4 ≤ 4\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  repeat decide"
"## Tactic State A:\np : Fin 4 → Prop\ni : Fin 4\nh : p i\n⊢ p i\n## Tactic State B:\ncase «0»\np : Fin 4 → Prop\nh : p ((fun i => i) ⟨0, ⋯⟩)\n⊢ p ((fun i => i) ⟨0, ⋯⟩)\n---\ncase «1»\np : Fin 4 → Prop\nh : p ((fun i => i) ⟨1, ⋯⟩)\n⊢ p ((fun i => i) ⟨1, ⋯⟩)\n---\ncase «2»\np : Fin 4 → Prop\nh : p ((fun i => i) ⟨2, ⋯⟩)\n⊢ p ((fun i => i) ⟨2, ⋯⟩)\n---\ncase «3»\np : Fin 4 → Prop\nh : p ((fun i => i) ⟨3, ⋯⟩)\n⊢ p ((fun i => i) ⟨3, ⋯⟩)\n## Action:\n  fin_cases i"
"## Tactic State A:\ncase «0»\np : Fin 4 → Prop\nh : p ((fun i => i) ⟨0, ⋯⟩)\n⊢ p ((fun i => i) ⟨0, ⋯⟩)\n---\ncase «1»\np : Fin 4 → Prop\nh : p ((fun i => i) ⟨1, ⋯⟩)\n⊢ p ((fun i => i) ⟨1, ⋯⟩)\n---\ncase «2»\np : Fin 4 → Prop\nh : p ((fun i => i) ⟨2, ⋯⟩)\n⊢ p ((fun i => i) ⟨2, ⋯⟩)\n---\ncase «3»\np : Fin 4 → Prop\nh : p ((fun i => i) ⟨3, ⋯⟩)\n⊢ p ((fun i => i) ⟨3, ⋯⟩)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  repeat exact h"
"## Tactic State A:\nf : ℕ → Prop\np : Fin 3\nh0 : f 0\nh1 : f 1\nh2 : f 2\n⊢ f ↑p\n## Tactic State B:\ncase «0»\nf : ℕ → Prop\nh0 : f 0\nh1 : f 1\nh2 : f 2\n⊢ f ↑((fun i => i) ⟨0, ⋯⟩)\n---\ncase «1»\nf : ℕ → Prop\nh0 : f 0\nh1 : f 1\nh2 : f 2\n⊢ f ↑((fun i => i) ⟨1, ⋯⟩)\n---\ncase «2»\nf : ℕ → Prop\nh0 : f 0\nh1 : f 1\nh2 : f 2\n⊢ f ↑((fun i => i) ⟨2, ⋯⟩)\n## Action:\n  fin_cases p"
"## Tactic State A:\ncase «0»\nf : ℕ → Prop\nh0 : f 0\nh1 : f 1\nh2 : f 2\n⊢ f ↑((fun i => i) ⟨0, ⋯⟩)\n---\ncase «1»\nf : ℕ → Prop\nh0 : f 0\nh1 : f 1\nh2 : f 2\n⊢ f ↑((fun i => i) ⟨1, ⋯⟩)\n---\ncase «2»\nf : ℕ → Prop\nh0 : f 0\nh1 : f 1\nh2 : f 2\n⊢ f ↑((fun i => i) ⟨2, ⋯⟩)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  all_goals"
"## Tactic State A:\nf : ℕ → Prop\np : Fin 0\n⊢ f ↑p\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  fin_cases p"
"## Tactic State A:\nx2 : Fin 2\nx3 : Fin 3\n⊢ True\n## Tactic State B:\ncase «0».«0»\n⊢ True\n---\ncase «0».«1»\n⊢ True\n---\ncase «0».«2»\n⊢ True\n---\ncase «1».«0»\n⊢ True\n---\ncase «1».«1»\n⊢ True\n---\ncase «1».«2»\n⊢ True\n## Action:\n  fin_cases x2, x3"
"## Tactic State A:\ncase «0».«0»\n⊢ True\n---\ncase «0».«1»\n⊢ True\n---\ncase «0».«2»\n⊢ True\n---\ncase «1».«0»\n⊢ True\n---\ncase «1».«1»\n⊢ True\n---\ncase «1».«2»\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  all_goals trivial"
"## Tactic State A:\np : ℕ\nh2 : 2 < p\nh5 : p < 5\n⊢ p = 3 ∨ p = 4\n## Tactic State B:\ncase refine_2\np : ℕ\nh2 : 2 < p\nh5 : p < 5\nhp : ?refine_1\n⊢ p = 3 ∨ p = 4\n---\ncase refine_1\np : ℕ\nh2 : 2 < p\nh5 : p < 5\n⊢ Sort ?u.129\n---\ncase foo\np : ℕ\nh2 : 2 < p\nh5 : p < 5\n⊢ ?refine_1\n## Action:\n  have hp : ?_ := ?foo"
"## Tactic State A:\ncase refine_2\np : ℕ\nh2 : 2 < p\nh5 : p < 5\nhp : ?refine_1\n⊢ p = 3 ∨ p = 4\n---\ncase refine_1\np : ℕ\nh2 : 2 < p\nh5 : p < 5\n⊢ Sort ?u.129\n---\ncase foo\np : ℕ\nh2 : 2 < p\nh5 : p < 5\n⊢ ?refine_1\n## Tactic State B:\ncase refine_2\np : ℕ\nh2 : 2 < p\nh5 : p < 5\nhp : p ∈ Finset.Ioo 2 5\n⊢ p = 3 ∨ p = 4\n## Action:\n  case foo => exact (Finset.mem_Ioo).2 ⟨h2, h5⟩"
"## Tactic State A:\ncase refine_2\np : ℕ\nh2 : 2 < p\nh5 : p < 5\nhp : p ∈ Finset.Ioo 2 5\n⊢ p = 3 ∨ p = 4\n## Tactic State B:\ncase refine_2.«0»\nh2 : 2 < 2 + 1\nh5 : 2 + 1 < 5\n⊢ 2 + 1 = 3 ∨ 2 + 1 = 4\n---\ncase refine_2.«1»\nh2 : 2 < 2 + 1 + 1\nh5 : 2 + 1 + 1 < 5\n⊢ 2 + 1 + 1 = 3 ∨ 2 + 1 + 1 = 4\n## Action:\n  fin_cases hp"
"## Tactic State A:\ncase refine_2.«0»\nh2 : 2 < 2 + 1\nh5 : 2 + 1 < 5\n⊢ 2 + 1 = 3 ∨ 2 + 1 = 4\n---\ncase refine_2.«1»\nh2 : 2 < 2 + 1 + 1\nh5 : 2 + 1 + 1 < 5\n⊢ 2 + 1 + 1 = 3 ∨ 2 + 1 + 1 = 4\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · norm_num"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · norm_num"
"## Tactic State A:\nx y : Fin 2\n⊢ True\n## Tactic State B:\ncase «0».«0»\n⊢ True\n---\ncase «0».«1»\n⊢ True\n---\ncase «1».«0»\n⊢ True\n---\ncase «1».«1»\n⊢ True\n## Action:\n  fin_cases x, y"
"## Tactic State A:\ncase «0».«0»\n⊢ True\n---\ncase «0».«1»\n⊢ True\n---\ncase «1».«0»\n⊢ True\n---\ncase «1».«1»\n⊢ True\n## Tactic State B:\ncase «0».«0»\n⊢ True\n---\ncase «0».«1»\n⊢ True\n---\ncase «1».«0»\n⊢ True\n---\ncase «1».«1»\n⊢ True\n## Action:\n  trace_state"
"## Tactic State A:\ncase «0».«0»\n⊢ True\n---\ncase «0».«1»\n⊢ True\n---\ncase «1».«0»\n⊢ True\n---\ncase «1».«1»\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  all_goals trivial"
"## Tactic State A:\nx2 : Fin 2\nx3 : Fin 3\nn : ℕ\ny : Fin n\n⊢ ↑x2 * ↑x3 = ↑x3 * ↑x2\n## Tactic State B:\ncase «0».«0»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨0, ⋯⟩) * ↑((fun i => i) ⟨0, ⋯⟩) = ↑((fun i => i) ⟨0, ⋯⟩) * ↑((fun i => i) ⟨0, ⋯⟩)\n---\ncase «0».«1»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨0, ⋯⟩) * ↑((fun i => i) ⟨1, ⋯⟩) = ↑((fun i => i) ⟨1, ⋯⟩) * ↑((fun i => i) ⟨0, ⋯⟩)\n---\ncase «0».«2»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨0, ⋯⟩) * ↑((fun i => i) ⟨2, ⋯⟩) = ↑((fun i => i) ⟨2, ⋯⟩) * ↑((fun i => i) ⟨0, ⋯⟩)\n---\ncase «1».«0»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨1, ⋯⟩) * ↑((fun i => i) ⟨0, ⋯⟩) = ↑((fun i => i) ⟨0, ⋯⟩) * ↑((fun i => i) ⟨1, ⋯⟩)\n---\ncase «1».«1»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨1, ⋯⟩) * ↑((fun i => i) ⟨1, ⋯⟩) = ↑((fun i => i) ⟨1, ⋯⟩) * ↑((fun i => i) ⟨1, ⋯⟩)\n---\ncase «1».«2»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨1, ⋯⟩) * ↑((fun i => i) ⟨2, ⋯⟩) = ↑((fun i => i) ⟨2, ⋯⟩) * ↑((fun i => i) ⟨1, ⋯⟩)\n## Action:\n  fin_cases x2 <;> fin_cases x3"
"## Tactic State A:\ncase «0».«0»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨0, ⋯⟩) * ↑((fun i => i) ⟨0, ⋯⟩) = ↑((fun i => i) ⟨0, ⋯⟩) * ↑((fun i => i) ⟨0, ⋯⟩)\n---\ncase «0».«1»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨0, ⋯⟩) * ↑((fun i => i) ⟨1, ⋯⟩) = ↑((fun i => i) ⟨1, ⋯⟩) * ↑((fun i => i) ⟨0, ⋯⟩)\n---\ncase «0».«2»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨0, ⋯⟩) * ↑((fun i => i) ⟨2, ⋯⟩) = ↑((fun i => i) ⟨2, ⋯⟩) * ↑((fun i => i) ⟨0, ⋯⟩)\n---\ncase «1».«0»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨1, ⋯⟩) * ↑((fun i => i) ⟨0, ⋯⟩) = ↑((fun i => i) ⟨0, ⋯⟩) * ↑((fun i => i) ⟨1, ⋯⟩)\n---\ncase «1».«1»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨1, ⋯⟩) * ↑((fun i => i) ⟨1, ⋯⟩) = ↑((fun i => i) ⟨1, ⋯⟩) * ↑((fun i => i) ⟨1, ⋯⟩)\n---\ncase «1».«2»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨1, ⋯⟩) * ↑((fun i => i) ⟨2, ⋯⟩) = ↑((fun i => i) ⟨2, ⋯⟩) * ↑((fun i => i) ⟨1, ⋯⟩)\n## Tactic State B:\ncase «0».«0»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨0, ⋯⟩) * ↑((fun i => i) ⟨0, ⋯⟩) = ↑((fun i => i) ⟨0, ⋯⟩) * ↑((fun i => i) ⟨0, ⋯⟩)\n---\ncase «0».«1»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨0, ⋯⟩) * ↑((fun i => i) ⟨1, ⋯⟩) = ↑((fun i => i) ⟨1, ⋯⟩) * ↑((fun i => i) ⟨0, ⋯⟩)\n---\ncase «0».«2»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨0, ⋯⟩) * ↑((fun i => i) ⟨2, ⋯⟩) = ↑((fun i => i) ⟨2, ⋯⟩) * ↑((fun i => i) ⟨0, ⋯⟩)\n---\ncase «1».«0»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨1, ⋯⟩) * ↑((fun i => i) ⟨0, ⋯⟩) = ↑((fun i => i) ⟨0, ⋯⟩) * ↑((fun i => i) ⟨1, ⋯⟩)\n---\ncase «1».«1»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨1, ⋯⟩) * ↑((fun i => i) ⟨1, ⋯⟩) = ↑((fun i => i) ⟨1, ⋯⟩) * ↑((fun i => i) ⟨1, ⋯⟩)\n---\ncase «1».«2»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨1, ⋯⟩) * ↑((fun i => i) ⟨2, ⋯⟩) = ↑((fun i => i) ⟨2, ⋯⟩) * ↑((fun i => i) ⟨1, ⋯⟩)\n## Action:\n  fail_if_success"
"## Tactic State A:\ncase «0».«0»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨0, ⋯⟩) * ↑((fun i => i) ⟨0, ⋯⟩) = ↑((fun i => i) ⟨0, ⋯⟩) * ↑((fun i => i) ⟨0, ⋯⟩)\n---\ncase «0».«1»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨0, ⋯⟩) * ↑((fun i => i) ⟨1, ⋯⟩) = ↑((fun i => i) ⟨1, ⋯⟩) * ↑((fun i => i) ⟨0, ⋯⟩)\n---\ncase «0».«2»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨0, ⋯⟩) * ↑((fun i => i) ⟨2, ⋯⟩) = ↑((fun i => i) ⟨2, ⋯⟩) * ↑((fun i => i) ⟨0, ⋯⟩)\n---\ncase «1».«0»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨1, ⋯⟩) * ↑((fun i => i) ⟨0, ⋯⟩) = ↑((fun i => i) ⟨0, ⋯⟩) * ↑((fun i => i) ⟨1, ⋯⟩)\n---\ncase «1».«1»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨1, ⋯⟩) * ↑((fun i => i) ⟨1, ⋯⟩) = ↑((fun i => i) ⟨1, ⋯⟩) * ↑((fun i => i) ⟨1, ⋯⟩)\n---\ncase «1».«2»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨1, ⋯⟩) * ↑((fun i => i) ⟨2, ⋯⟩) = ↑((fun i => i) ⟨2, ⋯⟩) * ↑((fun i => i) ⟨1, ⋯⟩)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    fin_cases y"
"## Tactic State A:\n⊢ sorry = 2\n## Tactic State B:\n⊢ sorry = 2\n## Action:\n  generalize_proofs h"
"## Tactic State A:\n⊢ sorry = 2\n## Tactic State B:\n⊢ sorry = 2\n## Action:\n  guard_hyp h :ₛ 1 < List.length [1, 2]"
"## Tactic State A:\nx : ℕ\nh : x < 2\n⊢ Classical.choose ⋯ < 2\n## Tactic State B:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\n⊢ Classical.choose a < 2\n## Action:\n  generalize_proofs a"
"## Tactic State A:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\n⊢ Classical.choose a < 2\n## Tactic State B:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\n⊢ Classical.choose a < 2\n## Action:\n  guard_hyp a :ₛ ∃ x, x < 2"
"## Tactic State A:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\n⊢ Classical.choose a < 2\n## Tactic State B:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\n⊢ Classical.choose a < 2\n## Action:\n  guard_target =ₛ Classical.choose a < 2"
"## Tactic State A:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\n⊢ Classical.choose a < 2\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact Classical.choose_spec a"
"## Tactic State A:\nx : ℕ\nh : x < 2\n⊢ Classical.choose ⋯ = Classical.choose ⋯\n## Tactic State B:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\n⊢ Classical.choose a = Classical.choose a\n## Action:\n  generalize_proofs a"
"## Tactic State A:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\n⊢ Classical.choose a = Classical.choose a\n## Tactic State B:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\n⊢ Classical.choose a = Classical.choose a\n## Action:\n  guard_hyp a :ₛ ∃ x, x < 2"
"## Tactic State A:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\n⊢ Classical.choose a = Classical.choose a\n## Tactic State B:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\n⊢ Classical.choose a = Classical.choose a\n## Action:\n  guard_target =ₛ Classical.choose a = Classical.choose a"
"## Tactic State A:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\n⊢ Classical.choose a = Classical.choose a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rfl"
"## Tactic State A:\nx : ℕ\nh : x < 2\nh' : x < 1\n⊢ x < 2\n## Tactic State B:\nx : ℕ\nh' : x < 1\n⊢ x < 2\n## Action:\n  generalize_proofs a"
"## Tactic State A:\nx : ℕ\nh' : x < 1\n⊢ x < 2\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  guard_hyp a :ₛ ∃ x, x < 2"
"## Tactic State A:\n\n## Tactic State B:\nx : ℕ\nh : x < 2\nh' : x < 1\na : ∃ x, x < 2\n⊢ Classical.choose a = Classical.choose a\n## Action:\n  guard_target =ₛ Classical.choose a = Classical.choose a"
"## Tactic State A:\nx : ℕ\nh : x < 2\nh' : x < 1\na : ∃ x, x < 2\n⊢ Classical.choose a = Classical.choose a\n## Tactic State B:\nx : ℕ\nh : x < 2\nh' : x < 1\na : ∃ x, x < 2\n⊢ Classical.choose a = Classical.choose a\n## Action:\n  rfl"
"## Tactic State A:\nx : ℕ\nh h' : x < 2\n⊢ Classical.choose ⋯ = Classical.choose ⋯\n## Tactic State B:\nx : ℕ\nh h' : x < 2\n⊢ Classical.choose ⋯ = Classical.choose ⋯\n## Action:\n  change _ at h'"
"## Tactic State A:\nx : ℕ\nh h' : x < 2\n⊢ Classical.choose ⋯ = Classical.choose ⋯\n## Tactic State B:\nx : ℕ\nh h' : x < 2\n⊢ Classical.choose ⋯ = Classical.choose ⋯\n## Action:\n  fail_if_success guard_target =ₛ"
"## Tactic State A:\nx : ℕ\nh h' : x < 2\n⊢ Classical.choose ⋯ = Classical.choose ⋯\n## Tactic State B:\nx : ℕ\nh : x < 2\n⊢ Classical.choose ⋯ = Classical.choose ⋯\n## Action:\n    Classical.choose (⟨x, h⟩ : ∃ x, x < 2) = Classical.choose (⟨x, h⟩ : ∃ x, x < 2)"
"## Tactic State A:\nx : ℕ\nh : x < 2\n⊢ Classical.choose ⋯ = Classical.choose ⋯\n## Tactic State B:\nx : ℕ\nh : x < 2\n⊢ Classical.choose ⋯ = Classical.choose ⋯\n## Action:\n  generalize_proofs at h'"
"## Tactic State A:\nx : ℕ\nh : x < 2\n⊢ Classical.choose ⋯ = Classical.choose ⋯\n## Tactic State B:\nx : ℕ\nh : x < 2\n⊢ Classical.choose ⋯ = Classical.choose ⋯\n## Action:\n  fail_if_success change _ at h'"
"## Tactic State A:\nx : ℕ\nh : x < 2\n⊢ Classical.choose ⋯ = Classical.choose ⋯\n## Tactic State B:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\n⊢ Classical.choose a = Classical.choose a\n## Action:\n  guard_target =ₛ Classical.choose (⟨x, h⟩ : ∃ x, x < 2) = Classical.choose (⟨x, h⟩ : ∃ x, x < 2)"
"## Tactic State A:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\n⊢ Classical.choose a = Classical.choose a\n## Tactic State B:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\n⊢ Classical.choose a = Classical.choose a\n## Action:\n  generalize_proofs a"
"## Tactic State A:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\n⊢ Classical.choose a = Classical.choose a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  guard_target =ₛ Classical.choose a = Classical.choose a"
"## Tactic State A:\nx : ℕ\nh : x < 2\n⊢ Classical.choose ⋯ = Classical.choose ⋯\n## Tactic State B:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\na' : ∃ x, x < 3\n⊢ Classical.choose a = Classical.choose a'\n## Action:\n  generalize_proofs a a'"
"## Tactic State A:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\na' : ∃ x, x < 3\n⊢ Classical.choose a = Classical.choose a'\n## Tactic State B:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\na' : ∃ x, x < 3\n⊢ Classical.choose a = Classical.choose a'\n## Action:\n  guard_hyp a :ₛ ∃ x, x < 2"
"## Tactic State A:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\na' : ∃ x, x < 3\n⊢ Classical.choose a = Classical.choose a'\n## Tactic State B:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\na' : ∃ x, x < 3\n⊢ Classical.choose a = Classical.choose a'\n## Action:\n  guard_hyp a' :ₛ ∃ x, x < 3"
"## Tactic State A:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\na' : ∃ x, x < 3\n⊢ Classical.choose a = Classical.choose a'\n## Tactic State B:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\na' : ∃ x, x < 3\n⊢ Classical.choose a = Classical.choose a'\n## Action:\n  guard_target =ₛ Classical.choose a = Classical.choose a'"
"## Tactic State A:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\na' : ∃ x, x < 3\n⊢ Classical.choose a = Classical.choose a'\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact test_sorry"
"## Tactic State A:\nx : ℕ\nh : x < 2\n⊢ Classical.choose ⋯ = Classical.choose ⋯\n## Tactic State B:\nx : ℕ\nh : x < 2\npf✝¹ : ∃ x, x < 2\npf✝ : ∃ x, x < 3\n⊢ Classical.choose pf✝¹ = Classical.choose pf✝\n## Action:\n  generalize_proofs"
"## Tactic State A:\nx : ℕ\nh : x < 2\npf✝¹ : ∃ x, x < 2\npf✝ : ∃ x, x < 3\n⊢ Classical.choose pf✝¹ = Classical.choose pf✝\n## Tactic State B:\nx : ℕ\nh : x < 2\npf✝¹ : ∃ x, x < 2\npf✝ : ∃ x, x < 3\n⊢ Classical.choose pf✝¹ = Classical.choose pf✝\n## Action:\n  guard_target = Classical.choose _ = Classical.choose _"
"## Tactic State A:\nx : ℕ\nh : x < 2\npf✝¹ : ∃ x, x < 2\npf✝ : ∃ x, x < 3\n⊢ Classical.choose pf✝¹ = Classical.choose pf✝\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact test_sorry"
"## Tactic State A:\nx : ℕ\nh : x < 2\n⊢ Classical.choose ⋯ = Classical.choose ⋯\n## Tactic State B:\nx : ℕ\nh : x < 2\npf✝ : ∃ x, x < 2\na : ∃ x, x < 3\n⊢ Classical.choose pf✝ = Classical.choose a\n## Action:\n  generalize_proofs _ a"
"## Tactic State A:\nx : ℕ\nh : x < 2\npf✝ : ∃ x, x < 2\na : ∃ x, x < 3\n⊢ Classical.choose pf✝ = Classical.choose a\n## Tactic State B:\nx : ℕ\nh : x < 2\npf✝ : ∃ x, x < 2\na : ∃ x, x < 3\n⊢ Classical.choose pf✝ = Classical.choose a\n## Action:\n  guard_hyp a : ∃ x, x < 3"
"## Tactic State A:\nx : ℕ\nh : x < 2\npf✝ : ∃ x, x < 2\na : ∃ x, x < 3\n⊢ Classical.choose pf✝ = Classical.choose a\n## Tactic State B:\nx : ℕ\nh : x < 2\npf✝ : ∃ x, x < 2\na : ∃ x, x < 3\n⊢ Classical.choose pf✝ = Classical.choose a\n## Action:\n  guard_target = Classical.choose _ = Classical.choose a"
"## Tactic State A:\nx : ℕ\nh : x < 2\npf✝ : ∃ x, x < 2\na : ∃ x, x < 3\n⊢ Classical.choose pf✝ = Classical.choose a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact test_sorry"
"## Tactic State A:\na : ∃ x, x < 2\n⊢ Classical.choose a < 2\n## Tactic State B:\na : ∃ x, x < 2\n⊢ Classical.choose a < 2\n## Action:\n  generalize_proofs"
"## Tactic State A:\na : ∃ x, x < 2\n⊢ Classical.choose a < 2\n## Tactic State B:\na : ∃ x, x < 2\n⊢ Classical.choose a < 2\n## Action:\n  guard_target =ₛ Classical.choose a < 2"
"## Tactic State A:\na : ∃ x, x < 2\n⊢ Classical.choose a < 2\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact Classical.choose_spec a"
"## Tactic State A:\na : ∃ x, x < 2\n⊢ Classical.choose a < 2\n## Tactic State B:\na : ∃ x, x < 2\n⊢ Classical.choose a < 2\n## Action:\n  generalize_proofs t"
"## Tactic State A:\na : ∃ x, x < 2\n⊢ Classical.choose a < 2\n## Tactic State B:\na : ∃ x, x < 2\n⊢ Classical.choose a < 2\n## Action:\n  guard_target =ₛ Classical.choose a < 2"
"## Tactic State A:\na : ∃ x, x < 2\n⊢ Classical.choose a < 2\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact Classical.choose_spec a"
"## Tactic State A:\nx : ℕ\nh : x < 2\nH : Classical.choose ⋯ < 2\n⊢ Classical.choose ⋯ < 2\n## Tactic State B:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\nH : Classical.choose a < 2\n⊢ Classical.choose a < 2\n## Action:\n  generalize_proofs a at H ⊢"
"## Tactic State A:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\nH : Classical.choose a < 2\n⊢ Classical.choose a < 2\n## Tactic State B:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\nH : Classical.choose a < 2\n⊢ Classical.choose a < 2\n## Action:\n  guard_hyp a :ₛ ∃ x, x < 2"
"## Tactic State A:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\nH : Classical.choose a < 2\n⊢ Classical.choose a < 2\n## Tactic State B:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\nH : Classical.choose a < 2\n⊢ Classical.choose a < 2\n## Action:\n  guard_hyp H :ₛ Classical.choose a < 2"
"## Tactic State A:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\nH : Classical.choose a < 2\n⊢ Classical.choose a < 2\n## Tactic State B:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\nH : Classical.choose a < 2\n⊢ Classical.choose a < 2\n## Action:\n  guard_target =ₛ Classical.choose a < 2"
"## Tactic State A:\nx : ℕ\nh : x < 2\na : ∃ x, x < 2\nH : Classical.choose a < 2\n⊢ Classical.choose a < 2\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact H"
"## Tactic State A:\nH : ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n⊢ ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n## Tactic State B:\nH : ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n⊢ ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n## Action:\n  generalize_proofs (config := { abstract := false })"
"## Tactic State A:\nH : ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n⊢ ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n## Tactic State B:\nH : ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n⊢ ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n## Action:\n  guard_target =ₛ ∀ y, ∃ (x : ℕ) (h : x < y), Classical.choose (⟨x, h⟩ : ∃ x, x < y) < y"
"## Tactic State A:\nH : ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n⊢ ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n## Tactic State B:\na : ∀ (y x : ℕ), x < y → ∃ x, x < y\nH : ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n⊢ ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n## Action:\n  generalize_proofs a at H ⊢"
"## Tactic State A:\na : ∀ (y x : ℕ), x < y → ∃ x, x < y\nH : ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n⊢ ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n## Tactic State B:\na : ∀ (y x : ℕ), x < y → ∃ x, x < y\nH : ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n⊢ ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n## Action:\n  guard_hyp a :ₛ ∀ (y w : ℕ), w < y → ∃ x, x < y"
"## Tactic State A:\na : ∀ (y x : ℕ), x < y → ∃ x, x < y\nH : ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n⊢ ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n## Tactic State B:\na : ∀ (y x : ℕ), x < y → ∃ x, x < y\nH : ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n⊢ ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n## Action:\n  guard_hyp H :ₛ ∀ (y : ℕ), ∃ x h, Classical.choose (a y x h) < y"
"## Tactic State A:\na : ∀ (y x : ℕ), x < y → ∃ x, x < y\nH : ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n⊢ ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n## Tactic State B:\na : ∀ (y x : ℕ), x < y → ∃ x, x < y\nH : ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n⊢ ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n## Action:\n  guard_target =ₛ ∀ (y : ℕ), ∃ x h, Classical.choose (a y x h) < y"
"## Tactic State A:\na : ∀ (y x : ℕ), x < y → ∃ x, x < y\nH : ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n⊢ ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact H"
"## Tactic State A:\nH : ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n⊢ ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n## Tactic State B:\na : ∀ (y x : ℕ), x < y → ∃ x, x < y\nH : ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n⊢ ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n## Action:\n  generalize_proofs a at *"
"## Tactic State A:\na : ∀ (y x : ℕ), x < y → ∃ x, x < y\nH : ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n⊢ ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n## Tactic State B:\na : ∀ (y x : ℕ), x < y → ∃ x, x < y\nH : ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n⊢ ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n## Action:\n  guard_hyp a :ₛ ∀ (y w : ℕ), w < y → ∃ x, x < y"
"## Tactic State A:\na : ∀ (y x : ℕ), x < y → ∃ x, x < y\nH : ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n⊢ ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n## Tactic State B:\na : ∀ (y x : ℕ), x < y → ∃ x, x < y\nH : ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n⊢ ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n## Action:\n  guard_hyp H :ₛ ∀ (y : ℕ), ∃ x h, Classical.choose (a y x h) < y"
"## Tactic State A:\na : ∀ (y x : ℕ), x < y → ∃ x, x < y\nH : ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n⊢ ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n## Tactic State B:\na : ∀ (y x : ℕ), x < y → ∃ x, x < y\nH : ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n⊢ ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n## Action:\n  guard_target =ₛ ∀ (y : ℕ), ∃ x h, Classical.choose (a y x h) < y"
"## Tactic State A:\na : ∀ (y x : ℕ), x < y → ∃ x, x < y\nH : ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n⊢ ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact H"
"## Tactic State A:\nM : Type u\ninst✝¹ : Monoid M\nS✝ S' : Submonoid M\nR : Type u_1\nx y z : R\ninst✝ : Ring R\nS : Subring R\nhx : x ∈ S\nhy : y ∈ S\nhz : z ∈ S\nn m : ℕ\n⊢ n • x ^ 3 - 2 • y + z ^ m ∈ S\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  aesop"
"## Tactic State A:\nM : Type u\ninst✝¹ : Monoid M\nS✝ S' : Submonoid M\nR : Type u_1\nx y z : R\ninst✝ : Ring R\nS : Set R\nhx : x ∈ S\nhy : y ∈ S\nhz : z ∈ S\nn m : ℕ\n⊢ n • x ^ 3 - y + z ^ m ∈ Subring.closure S\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  aesop"
"## Tactic State A:\nM : Type u\ninst✝⁶ : Monoid M\nS S' : Submonoid M\nR : Type u_1\nA : Type u_2\ninst✝⁵ : CommRing R\ninst✝⁴ : Ring A\ninst✝³ : Algebra R A\ninst✝² : StarRing R\ninst✝¹ : StarRing A\ninst✝ : StarModule R A\nr : R\na b c : A\nn : ℕ\n⊢ -b + star ((algebraMap R A) r) + a ^ n * c ∈ StarAlgebra.adjoin R {a, b, c}\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  aesop"
"## Tactic State A:\nM : Type u\ninst✝¹ : Monoid M\nS S' : Submonoid M\ninst✝ : Monoid M\nx : M\nn : ℕ\n⊢ x ^ n ∈ Submonoid.closure {x}\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  aesop"
"## Tactic State A:\nM : Type u\ninst✝¹ : Monoid M\nS S' : Submonoid M\ninst✝ : Monoid M\nx y z w : M\nn : ℕ\n⊢ (x * y) ^ n * w ∈ Submonoid.closure {x, y, z, w}\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  aesop"
"## Tactic State A:\nM : Type u\ninst✝¹ : Monoid M\nS S' : Submonoid M\ninst✝ : Group M\nx : M\nn : ℤ\n⊢ x ^ n ∈ Subgroup.closure {x}\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  aesop"
"## Tactic State A:\nM : Type u\ninst✝¹ : Monoid M\nS S' : Submonoid M\ninst✝ : Monoid M\nx y z : M\nS₁ S₂ : Submonoid M\nh : S₁ ≤ S₂\nhx : x ∈ S₁\nhy : y ∈ S₁\nhz : z ∈ S₂\n⊢ x * y * z ∈ S₂\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  aesop"
"## Tactic State A:\nM : Type u\ninst✝¹ : Monoid M\nS S' : Submonoid M\ninst✝ : Monoid M\nx y z : M\nS₁ S₂ : Submonoid M\nh : S₁ ≤ S₂\nhx : x ∈ S₁\nhy : y ∈ S₁\nhz : z ∈ S₂\n⊢ x * y * z ∈ S₁ ⊔ S₂\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  aesop"
"## Tactic State A:\nM : Type u\ninst✝¹ : Monoid M\nS✝ S' : Submonoid M\ninst✝ : Monoid M\nx y z : M\nS : Submonoid M\nhxy : x * y ∈ S\nhz : z ∈ S\n⊢ z * (x * y) ∈ S\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  aesop"
"## Tactic State A:\nM : Type u\ninst✝¹ : Monoid M\nS✝ S' : Submonoid M\nF : Type u_1\ninst✝ : Field F\nS : Subfield F\nq : ℚ\n⊢ ↑q ∈ S\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  aesop"
"## Tactic State A:\nM : Type u\ninst✝¹ : Monoid M\nS✝ S' : Submonoid M\nF : Type u_1\ninst✝ : Field F\nS : Subfield F\n⊢ 1.2 ∈ S\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  aesop"
"## Tactic State A:\nM : Type u\ninst✝¹ : Monoid M\nS✝ S' : Submonoid M\nF : Type u_1\ninst✝ : Field F\nS : Subfield F\nx : F\nhx : x ∈ S\n⊢ 12e-100 • x⁻¹ ∈ S\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  aesop"
"## Tactic State A:\nα : Type u_1\ninst✝¹ : TopologicalSpace α\ninst : MeasurableSpace α\ninst✝ : BorelSpace α\n⊢ MeasurableSet ∅\n## Tactic State B:\nα : Type u_1\ninst✝¹ : TopologicalSpace α\ninst : MeasurableSpace α\ninst✝ : BorelSpace α\n⊢ MeasurableSet ∅\n## Action:\n  guard_target = @MeasurableSet α inst ∅"
"## Tactic State A:\nα : Type u_1\ninst✝¹ : TopologicalSpace α\ninst : MeasurableSpace α\ninst✝ : BorelSpace α\n⊢ MeasurableSet ∅\n## Tactic State B:\nα : Type u_1\ninst✝¹ : TopologicalSpace α\ninst✝ : BorelSpace α\nthis✝ : MeasurableSpace α := borel α\n⊢ MeasurableSet ∅\n## Action:\n  borelize α"
"## Tactic State A:\nα : Type u_1\ninst✝¹ : TopologicalSpace α\ninst✝ : BorelSpace α\nthis✝ : MeasurableSpace α := borel α\n⊢ MeasurableSet ∅\n## Tactic State B:\nα : Type u_1\ninst✝¹ : TopologicalSpace α\ninst✝ : BorelSpace α\nthis✝ : MeasurableSpace α := borel α\n⊢ MeasurableSet ∅\n## Action:\n  guard_target = @MeasurableSet α (borel α) ∅"
"## Tactic State A:\nα : Type u_1\ninst✝¹ : TopologicalSpace α\ninst✝ : BorelSpace α\nthis✝ : MeasurableSpace α := borel α\n⊢ MeasurableSet ∅\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  apply MeasurableSet.empty"
"## Tactic State A:\nα : Type u_1\ninst✝ : TopologicalSpace α\n⊢ True\n## Tactic State B:\nα : Type u_1\ninst✝ : TopologicalSpace α\nthis✝¹ : MeasurableSpace α := borel α\nthis✝ : BorelSpace α\n⊢ True\n## Action:\n  borelize α"
"## Tactic State A:\nα : Type u_1\ninst✝ : TopologicalSpace α\nthis✝¹ : MeasurableSpace α := borel α\nthis✝ : BorelSpace α\n⊢ True\n## Tactic State B:\nα : Type u_1\ninst✝ : TopologicalSpace α\nthis✝¹ : MeasurableSpace α := borel α\nthis✝ : BorelSpace α\nh : MeasurableSet ∅\n⊢ True\n## Action:\n  have h : MeasurableSet (∅ : Set α) := MeasurableSet.empty"
"## Tactic State A:\nα : Type u_1\ninst✝ : TopologicalSpace α\nthis✝¹ : MeasurableSpace α := borel α\nthis✝ : BorelSpace α\nh : MeasurableSet ∅\n⊢ True\n## Tactic State B:\nα : Type u_1\ninst✝ : TopologicalSpace α\nthis✝¹ : MeasurableSpace α := borel α\nthis✝ : BorelSpace α\nh : MeasurableSet ∅\n⊢ True\n## Action:\n  guard_hyp h : @MeasurableSet α (borel α) ∅"
"## Tactic State A:\nα : Type u_1\ninst✝ : TopologicalSpace α\nthis✝¹ : MeasurableSpace α := borel α\nthis✝ : BorelSpace α\nh : MeasurableSet ∅\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial"
"## Tactic State A:\n⊢ True\n## Tactic State B:\ncase intro.intro\nα : Type\nhα : TopologicalSpace α\n⊢ True\n## Action:\n  obtain ⟨α, ⟨hα⟩⟩ : ∃ α : Type, Nonempty (TopologicalSpace α) := ⟨ℕ, ⟨inferInstance⟩⟩"
"## Tactic State A:\ncase intro.intro\nα : Type\nhα : TopologicalSpace α\n⊢ True\n## Tactic State B:\ncase intro.intro\nα : Type\nhα : TopologicalSpace α\nthis✝¹ : MeasurableSpace α := borel α\nthis✝ : BorelSpace α\n⊢ True\n## Action:\n  borelize α"
"## Tactic State A:\ncase intro.intro\nα : Type\nhα : TopologicalSpace α\nthis✝¹ : MeasurableSpace α := borel α\nthis✝ : BorelSpace α\n⊢ True\n## Tactic State B:\ncase intro.intro\nα : Type\nhα : TopologicalSpace α\nthis✝¹ : MeasurableSpace α := borel α\nthis✝ : BorelSpace α\nh : MeasurableSet ∅\n⊢ True\n## Action:\n  have h : MeasurableSet (∅ : Set α) := MeasurableSet.empty"
"## Tactic State A:\ncase intro.intro\nα : Type\nhα : TopologicalSpace α\nthis✝¹ : MeasurableSpace α := borel α\nthis✝ : BorelSpace α\nh : MeasurableSet ∅\n⊢ True\n## Tactic State B:\ncase intro.intro\nα : Type\nhα : TopologicalSpace α\nthis✝¹ : MeasurableSpace α := borel α\nthis✝ : BorelSpace α\nh : MeasurableSet ∅\n⊢ True\n## Action:\n  guard_hyp h : @MeasurableSet α (borel α) ∅"
"## Tactic State A:\ncase intro.intro\nα : Type\nhα : TopologicalSpace α\nthis✝¹ : MeasurableSpace α := borel α\nthis✝ : BorelSpace α\nh : MeasurableSet ∅\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial"
"## Tactic State A:\n⊢ True\n## Tactic State B:\nα : Type := ℕ\n⊢ True\n## Action:\n  set α := ℕ"
"## Tactic State A:\nα : Type := ℕ\n⊢ True\n## Tactic State B:\nα : Type := ℕ\nthis✝¹ : MeasurableSpace α := borel α\nthis✝ : BorelSpace α\n⊢ True\n## Action:\n  borelize α"
"## Tactic State A:\nα : Type := ℕ\nthis✝¹ : MeasurableSpace α := borel α\nthis✝ : BorelSpace α\n⊢ True\n## Tactic State B:\nα : Type := ℕ\nthis✝¹ : MeasurableSpace α := borel α\nthis✝ : BorelSpace α\nh : MeasurableSet ∅\n⊢ True\n## Action:\n  have h : MeasurableSet (∅ : Set α) := MeasurableSet.empty"
"## Tactic State A:\nα : Type := ℕ\nthis✝¹ : MeasurableSpace α := borel α\nthis✝ : BorelSpace α\nh : MeasurableSet ∅\n⊢ True\n## Tactic State B:\nα : Type := ℕ\nthis✝¹ : MeasurableSpace α := borel α\nthis✝ : BorelSpace α\nh : MeasurableSet ∅\n⊢ True\n## Action:\n  guard_hyp h : @MeasurableSet α (borel α) ∅"
"## Tactic State A:\nα : Type := ℕ\nthis✝¹ : MeasurableSpace α := borel α\nthis✝ : BorelSpace α\nh : MeasurableSet ∅\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial"
"## Tactic State A:\n⊢ True\n## Tactic State B:\nh1 : MeasurableSet ∅\n⊢ True\n## Action:\n  have h1 : MeasurableSet (∅ : Set ℕ) := MeasurableSet.empty"
"## Tactic State A:\nh1 : MeasurableSet ∅\n⊢ True\n## Tactic State B:\nh1 : MeasurableSet ∅\n⊢ True\n## Action:\n  guard_hyp h1 : @MeasurableSet ℕ Nat.instMeasurableSpace ∅"
"## Tactic State A:\nh1 : MeasurableSet ∅\n⊢ True\n## Tactic State B:\nh1 : MeasurableSet ∅\nthis✝¹ : MeasurableSpace ℕ := borel ℕ\nthis✝ : BorelSpace ℕ\n⊢ True\n## Action:\n  borelize ℕ"
"## Tactic State A:\nh1 : MeasurableSet ∅\nthis✝¹ : MeasurableSpace ℕ := borel ℕ\nthis✝ : BorelSpace ℕ\n⊢ True\n## Tactic State B:\nh1 : MeasurableSet ∅\nthis✝¹ : MeasurableSpace ℕ := borel ℕ\nthis✝ : BorelSpace ℕ\nh2 : MeasurableSet ∅\n⊢ True\n## Action:\n  have h2 : MeasurableSet (∅ : Set ℕ) := MeasurableSet.empty"
"## Tactic State A:\nh1 : MeasurableSet ∅\nthis✝¹ : MeasurableSpace ℕ := borel ℕ\nthis✝ : BorelSpace ℕ\nh2 : MeasurableSet ∅\n⊢ True\n## Tactic State B:\nh1 : MeasurableSet ∅\nthis✝¹ : MeasurableSpace ℕ := borel ℕ\nthis✝ : BorelSpace ℕ\nh2 : MeasurableSet ∅\n⊢ True\n## Action:\n  guard_hyp h2 : @MeasurableSet ℕ (borel ℕ) ∅"
"## Tactic State A:\nh1 : MeasurableSet ∅\nthis✝¹ : MeasurableSpace ℕ := borel ℕ\nthis✝ : BorelSpace ℕ\nh2 : MeasurableSet ∅\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial"
"## Tactic State A:\n⊢ id (1 = 1)\n## Tactic State B:\n⊢ id (1 = 1)\n## Action:\n  with_reducible whnf"
"## Tactic State A:\n⊢ id (1 = 1)\n## Tactic State B:\n⊢ id (1 = 1)\n## Action:\n  guard_target =ₛ id (1 = 1)"
"## Tactic State A:\n⊢ id (1 = 1)\n## Tactic State B:\n⊢ 1 = 1\n## Action:\n  whnf"
"## Tactic State A:\n⊢ 1 = 1\n## Tactic State B:\n⊢ 1 = 1\n## Action:\n  guard_target =ₛ 1 = 1"
"## Tactic State A:\n⊢ 1 = 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rfl"
"## Tactic State A:\n⊢ (fun x => 1 + x) 1 = 2\n## Tactic State B:\n⊢ 1 + 1 = 2\n## Action:\n  beta_reduce"
"## Tactic State A:\n⊢ 1 + 1 = 2\n## Tactic State B:\n⊢ 1 + 1 = 2\n## Action:\n  guard_target =ₛ 1 + 1 = 2"
"## Tactic State A:\n⊢ 1 + 1 = 2\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rfl"
"## Tactic State A:\n⊢ (fun x => 1 + x) 2 = (fun y => 2 + y) 3\n## Tactic State B:\n⊢ 1 + 2 = (fun y => 2 + y) 3\n## Action:\n  conv =>"
"## Tactic State A:\n⊢ 1 + 2 = (fun y => 2 + y) 3\n## Tactic State B:\n⊢ 1 + 2 = (fun y => 2 + y) 3\n## Action:\n    lhs"
"## Tactic State A:\n⊢ 1 + 2 = (fun y => 2 + y) 3\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    beta_reduce"
"## Tactic State A:\n⊢ 1 + 2 * 3 = 7\n## Tactic State B:\n⊢ 7 = 7\n## Action:\n  reduce"
"## Tactic State A:\n⊢ 7 = 7\n## Tactic State B:\n⊢ 7 = 7\n## Action:\n  guard_target =ₛ nat_lit 7 = nat_lit 7"
"## Tactic State A:\n⊢ 7 = 7\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rfl"
"## Tactic State A:\n⊢ let x := 1;\n  let y := 2 + x;\n  2 + 1 = 3\n## Tactic State B:\nx : ℕ := 1\ny : ℕ := 2 + x\n⊢ 2 + 1 = 3\n## Action:\n  intro x y"
"## Tactic State A:\nx : ℕ := 1\ny : ℕ := 2 + x\n⊢ 2 + 1 = 3\n## Tactic State B:\nx : ℕ := 1\ny : ℕ := 2 + x\n⊢ 2 + x = 3\n## Action:\n  refold_let x"
"## Tactic State A:\nx : ℕ := 1\ny : ℕ := 2 + x\n⊢ 2 + x = 3\n## Tactic State B:\nx : ℕ := 1\ny : ℕ := 2 + x\n⊢ 2 + x = 3\n## Action:\n  guard_target =ₛ 2 + x = 3"
"## Tactic State A:\nx : ℕ := 1\ny : ℕ := 2 + x\n⊢ 2 + x = 3\n## Tactic State B:\nx : ℕ := 1\ny : ℕ := 2 + x\n⊢ y = 3\n## Action:\n  refold_let y"
"## Tactic State A:\nx : ℕ := 1\ny : ℕ := 2 + x\n⊢ y = 3\n## Tactic State B:\nx : ℕ := 1\ny : ℕ := 2 + x\n⊢ y = 3\n## Action:\n  guard_target =ₛ y = 3"
"## Tactic State A:\nx : ℕ := 1\ny : ℕ := 2 + x\n⊢ y = 3\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rfl"
"## Tactic State A:\n⊢ 5 = 5\n## Tactic State B:\nx : ℕ := 5\n⊢ 5 = 5\n## Action:\n  let x := 5"
"## Tactic State A:\nx : ℕ := 5\n⊢ 5 = 5\n## Tactic State B:\nx : ℕ := 5\n⊢ x = x\n## Action:\n  refold_let x"
"## Tactic State A:\nx : ℕ := 5\n⊢ x = x\n## Tactic State B:\nx : ℕ := 5\n⊢ x = x\n## Action:\n  guard_target =ₛ x = x"
"## Tactic State A:\nx : ℕ := 5\n⊢ x = x\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rfl"
"## Tactic State A:\n⊢ 2 + 1 = 3\n## Tactic State B:\na : Fin 1 := 0\n⊢ 2 + 1 = 3\n## Action:\n  let a : Fin 1 := 0"
"## Tactic State A:\na : Fin 1 := 0\n⊢ 2 + 1 = 3\n## Tactic State B:\na : Fin 1 := 0\nx : ℕ := 1\n⊢ 2 + 1 = 3\n## Action:\n  let x := 1"
"## Tactic State A:\na : Fin 1 := 0\nx : ℕ := 1\n⊢ 2 + 1 = 3\n## Tactic State B:\na : Fin 1 := 0\nx : ℕ := 1\nb : Fin 1 := 0\n⊢ 2 + 1 = 3\n## Action:\n  let b : Fin 1 := 0"
"## Tactic State A:\na : Fin 1 := 0\nx : ℕ := 1\nb : Fin 1 := 0\n⊢ 2 + 1 = 3\n## Tactic State B:\na : Fin 1 := 0\nx : ℕ := 1\nb : Fin x := 0\n⊢ 2 + x = 3\n## Action:\n  refold_let x at *"
"## Tactic State A:\na : Fin 1 := 0\nx : ℕ := 1\nb : Fin x := 0\n⊢ 2 + x = 3\n## Tactic State B:\na : Fin 1 := 0\nx : ℕ := 1\nb : Fin x := 0\n⊢ 2 + x = 3\n## Action:\n  guard_hyp a :ₛ Fin 1 := 0"
"## Tactic State A:\na : Fin 1 := 0\nx : ℕ := 1\nb : Fin x := 0\n⊢ 2 + x = 3\n## Tactic State B:\na : Fin 1 := 0\nx : ℕ := 1\nb : Fin x := 0\n⊢ 2 + x = 3\n## Action:\n  guard_hyp b :ₛ Fin x := 0"
"## Tactic State A:\na : Fin 1 := 0\nx : ℕ := 1\nb : Fin x := 0\n⊢ 2 + x = 3\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rfl"
"## Tactic State A:\n⊢ 1 + 2 = 2 + 1\n## Tactic State B:\n⊢ Nat.add 1 2 = Nat.add 2 1\n## Action:\n  unfold_projs"
"## Tactic State A:\n⊢ Nat.add 1 2 = Nat.add 2 1\n## Tactic State B:\n⊢ Nat.add 1 2 = Nat.add 2 1\n## Action:\n  guard_target =ₛ Nat.add (nat_lit 1) (nat_lit 2) = Nat.add (nat_lit 2) (nat_lit 1)"
"## Tactic State A:\n⊢ Nat.add 1 2 = Nat.add 2 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rfl"
"## Tactic State A:\nm n : ℕ\n⊢ (m == n) = true\n## Tactic State B:\nm n : ℕ\n⊢ decide (m = n) = true\n## Action:\n  unfold_projs"
"## Tactic State A:\nm n : ℕ\n⊢ decide (m = n) = true\n## Tactic State B:\nm n : ℕ\n⊢ decide (m = n) = true\n## Action:\n  guard_target =ₛ decide (m = n) = true"
"## Tactic State A:\nm n : ℕ\n⊢ decide (m = n) = true\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact test_sorry"
"## Tactic State A:\nα : Type u\nf : α → α\na : α\n⊢ (fun x => (fun x => f x) x) a = f a\n## Tactic State B:\nα : Type u\nf : α → α\na : α\n⊢ f a = f a\n## Action:\n  eta_reduce"
"## Tactic State A:\nα : Type u\nf : α → α\na : α\n⊢ f a = f a\n## Tactic State B:\nα : Type u\nf : α → α\na : α\n⊢ f a = f a\n## Action:\n  guard_target =ₛ f a = f a"
"## Tactic State A:\nα : Type u\nf : α → α\na : α\n⊢ f a = f a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rfl"
"## Tactic State A:\nf : ℕ → ℕ\n⊢ (fun a => f a) = fun a => f (f a)\n## Tactic State B:\nf : ℕ → ℕ\n⊢ (fun a => f a) = fun a => f (f a)\n## Action:\n  eta_expand"
"## Tactic State A:\nf : ℕ → ℕ\n⊢ (fun a => f a) = fun a => f (f a)\n## Tactic State B:\nf : ℕ → ℕ\n⊢ (fun a => f a) = fun a => f (f a)\n## Action:\n  guard_target =ₛ (fun a => f a) = (fun a => f (f a))"
"## Tactic State A:\nf : ℕ → ℕ\n⊢ (fun a => f a) = fun a => f (f a)\n## Tactic State B:\nf : ℕ → ℕ\n⊢ f = fun a => f (f a)\n## Action:\n  eta_reduce"
"## Tactic State A:\nf : ℕ → ℕ\n⊢ f = fun a => f (f a)\n## Tactic State B:\nf : ℕ → ℕ\n⊢ f = fun a => f (f a)\n## Action:\n  guard_target =ₛ f = fun a => f (f a)"
"## Tactic State A:\nf : ℕ → ℕ\n⊢ f = fun a => f (f a)\n## Tactic State B:\nf : ℕ → ℕ\n⊢ (fun a => f a) = fun a => f (f a)\n## Action:\n  eta_expand"
"## Tactic State A:\nf : ℕ → ℕ\n⊢ (fun a => f a) = fun a => f (f a)\n## Tactic State B:\nf : ℕ → ℕ\n⊢ (fun a => f a) = fun a => f (f a)\n## Action:\n  guard_target =ₛ (fun a => f a) = (fun a => f (f a))"
"## Tactic State A:\nf : ℕ → ℕ\n⊢ (fun a => f a) = fun a => f (f a)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact test_sorry"
"## Tactic State A:\n⊢ (fun a b => a + b) = fun x1 x2 => x1 + x2\n## Tactic State B:\n⊢ HAdd.hAdd = HAdd.hAdd\n## Action:\n  eta_reduce"
"## Tactic State A:\n⊢ HAdd.hAdd = HAdd.hAdd\n## Tactic State B:\n⊢ HAdd.hAdd = HAdd.hAdd\n## Action:\n  guard_target =ₛ (HAdd.hAdd : Nat → Nat → Nat) = HAdd.hAdd"
"## Tactic State A:\n⊢ HAdd.hAdd = HAdd.hAdd\n## Tactic State B:\n⊢ (fun a a_1 => a + a_1) = fun a a_1 => a + a_1\n## Action:\n  eta_expand"
"## Tactic State A:\n⊢ (fun a a_1 => a + a_1) = fun a a_1 => a + a_1\n## Tactic State B:\n⊢ (fun a a_1 => a + a_1) = fun a a_1 => a + a_1\n## Action:\n  guard_target =ₛ (fun (a b : Nat) => a + b) = fun a b => a + b"
"## Tactic State A:\n⊢ (fun a a_1 => a + a_1) = fun a a_1 => a + a_1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rfl"
"## Tactic State A:\n⊢ (fun a => 1 + a) = fun x => 1 + x\n## Tactic State B:\n⊢ HAdd.hAdd 1 = HAdd.hAdd 1\n## Action:\n  eta_reduce"
"## Tactic State A:\n⊢ HAdd.hAdd 1 = HAdd.hAdd 1\n## Tactic State B:\n⊢ HAdd.hAdd 1 = HAdd.hAdd 1\n## Action:\n  guard_target =ₛ (HAdd.hAdd 1) = HAdd.hAdd 1"
"## Tactic State A:\n⊢ HAdd.hAdd 1 = HAdd.hAdd 1\n## Tactic State B:\n⊢ (fun a => 1 + a) = fun a => 1 + a\n## Action:\n  eta_expand"
"## Tactic State A:\n⊢ (fun a => 1 + a) = fun a => 1 + a\n## Tactic State B:\n⊢ (fun a => 1 + a) = fun a => 1 + a\n## Action:\n  guard_target =ₛ (fun a ↦ 1 + a) = fun a ↦ 1 + a"
"## Tactic State A:\n⊢ (fun a => 1 + a) = fun a => 1 + a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rfl"
"## Tactic State A:\nf : ℕ → ℕ → ℕ\n⊢ (fun x => f 1 x) 2 = 3\n## Tactic State B:\nf : ℕ → ℕ → ℕ\n⊢ f 1 2 = 3\n## Action:\n  eta_expand"
"## Tactic State A:\nf : ℕ → ℕ → ℕ\n⊢ f 1 2 = 3\n## Tactic State B:\nf : ℕ → ℕ → ℕ\n⊢ f 1 2 = 3\n## Action:\n  guard_target =ₛ f 1 2 = 3"
"## Tactic State A:\nf : ℕ → ℕ → ℕ\n⊢ f 1 2 = 3\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact test_sorry"
"## Tactic State A:\n⊢ (fun a => 1 + a) 2 = (fun x => 1 + x) 2\n## Tactic State B:\n⊢ 1 + 2 = 1 + 2\n## Action:\n  eta_expand"
"## Tactic State A:\n⊢ 1 + 2 = 1 + 2\n## Tactic State B:\n⊢ 1 + 2 = 1 + 2\n## Action:\n  guard_target =ₛ 1 + 2 = 1 + 2"
"## Tactic State A:\n⊢ 1 + 2 = 1 + 2\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rfl"
"## Tactic State A:\np : ℕ × ℕ\n⊢ (p.1, p.2) = (p.2, p.1)\n## Tactic State B:\np : ℕ × ℕ\n⊢ p = (p.2, p.1)\n## Action:\n  eta_struct"
"## Tactic State A:\np : ℕ × ℕ\n⊢ p = (p.2, p.1)\n## Tactic State B:\np : ℕ × ℕ\n⊢ p = (p.2, p.1)\n## Action:\n  guard_target =ₛ p = (p.2, p.1)"
"## Tactic State A:\np : ℕ × ℕ\n⊢ p = (p.2, p.1)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact test_sorry"
"## Tactic State A:\np : ℕ × ℕ\n⊢ ((p.1, p.2).1, (p.1, p.2).2) = ((p.1, p.2).2, (p.1, p.2).1)\n## Tactic State B:\np : ℕ × ℕ\n⊢ p = (p.2, p.1)\n## Action:\n  eta_struct"
"## Tactic State A:\np : ℕ × ℕ\n⊢ p = (p.2, p.1)\n## Tactic State B:\np : ℕ × ℕ\n⊢ p = (p.2, p.1)\n## Action:\n  guard_target =ₛ p = (p.2, p.1)"
"## Tactic State A:\np : ℕ × ℕ\n⊢ p = (p.2, p.1)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact test_sorry"
"## Tactic State A:\nn : Fin 5\n⊢ n = ⟨↑n, ⋯⟩\n## Tactic State B:\nn : Fin 5\n⊢ n = n\n## Action:\n  eta_struct"
"## Tactic State A:\nn : Fin 5\n⊢ n = n\n## Tactic State B:\nn : Fin 5\n⊢ n = n\n## Action:\n  guard_target =ₛ n = n"
"## Tactic State A:\nn : Fin 5\n⊢ n = n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rfl"
"## Tactic State A:\nn : Fin 5\n⊢ n = ⟨sorry, ⋯⟩\n## Tactic State B:\nn : Fin 5\n⊢ n = ⟨sorry, ⋯⟩\n## Action:\n  eta_struct"
"## Tactic State A:\nn : Fin 5\n⊢ n = ⟨sorry, ⋯⟩\n## Tactic State B:\nn : Fin 5\n⊢ n = ⟨sorry, ⋯⟩\n## Action:\n  guard_target =ₛ n = n"
"## Tactic State A:\n⊢ true = true ∧ true = true\n## Tactic State B:\ncase left\n⊢ true = true\n---\ncase right\n⊢ true = true\n## Action:\n  constructor"
"## Tactic State A:\ncase left\n⊢ true = true\n---\ncase right\n⊢ true = true\n## Tactic State B:\ncase left\n⊢ true = true\n---\ncase right\n⊢ true = true\n## Action:\n  guard_goal_nums 2"
"## Tactic State A:\ncase left\n⊢ true = true\n---\ncase right\n⊢ true = true\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  all_goals {constructor}"
"## Tactic State A:\n⊢ (true = true ∧ true = true) ∧ true = true ∧ true = true\n## Tactic State B:\ncase left.left\n⊢ true = true\n---\ncase left.right\n⊢ true = true\n---\ncase right.left\n⊢ true = true\n---\ncase right.right\n⊢ true = true\n## Action:\n  constructor <;> constructor"
"## Tactic State A:\ncase left.left\n⊢ true = true\n---\ncase left.right\n⊢ true = true\n---\ncase right.left\n⊢ true = true\n---\ncase right.right\n⊢ true = true\n## Tactic State B:\ncase left.left\n⊢ true = true\n---\ncase left.right\n⊢ true = true\n---\ncase right.left\n⊢ true = true\n---\ncase right.right\n⊢ true = true\n## Action:\n  guard_goal_nums 4"
"## Tactic State A:\ncase left.left\n⊢ true = true\n---\ncase left.right\n⊢ true = true\n---\ncase right.left\n⊢ true = true\n---\ncase right.right\n⊢ true = true\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  all_goals {constructor}"
"## Tactic State A:\na b : ℕ\nfoo : False\n⊢ a < b\n## Tactic State B:\na b : ℕ\nfoo : False\nthis : b ≤ a\n⊢ False\n## Action:\n  by_contra!"
"## Tactic State A:\na b : ℕ\nfoo : False\nthis : b ≤ a\n⊢ False\n## Tactic State B:\na b : ℕ\nfoo : False\nthis : b ≤ a\n⊢ False\n## Action:\n  guard_hyp this : b ≤ a"
"## Tactic State A:\na b : ℕ\nfoo : False\nthis : b ≤ a\n⊢ False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact foo"
"## Tactic State A:\na b : ℕ\nh : False\n⊢ a < b\n## Tactic State B:\na b : ℕ\nh : False\nfoo : b ≤ a\n⊢ False\n## Action:\n  by_contra! foo"
"## Tactic State A:\na b : ℕ\nh : False\nfoo : b ≤ a\n⊢ False\n## Tactic State B:\na b : ℕ\nh : False\n⊢ b ≤ a → False\n## Action:\n  revert foo; change b ≤ a → False; intro;"
"## Tactic State A:\na b : ℕ\nh : False\n⊢ b ≤ a → False\n## Tactic State B:\na b : ℕ\nh : False\n⊢ b ≤ a → False\n## Action:\n  exact h"
"## Tactic State A:\na b : ℕ\nh : False\n⊢ a < b\n## Tactic State B:\na b : ℕ\nh : False\nfoo : ¬a < b\n⊢ False\n## Action:\n  by_contra! foo : ¬ a < b -- can avoid push_neg"
"## Tactic State A:\na b : ℕ\nh : False\nfoo : ¬a < b\n⊢ False\n## Tactic State B:\na b : ℕ\nh : False\nfoo : ¬a < b\n⊢ False\n## Action:\n  guard_hyp foo : ¬ a < b"
"## Tactic State A:\na b : ℕ\nh : False\nfoo : ¬a < b\n⊢ False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h"
"## Tactic State A:\n⊢ 1 < 2\n## Tactic State B:\nthis : 2 ≤ 1\n⊢ False\n## Action:\n  by_contra!"
"## Tactic State A:\nthis : 2 ≤ 1\n⊢ False\n## Tactic State B:\nthis : 2 ≤ 1\n⊢ False\n## Action:\n  guard_hyp this : 2 ≤ 1"
"## Tactic State A:\nthis : 2 ≤ 1\n⊢ False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  contradiction"
"## Tactic State A:\nP _p : Prop\nbar : False\n⊢ ¬¬¬¬¬¬P\n## Tactic State B:\nP _p : Prop\nbar : False\nfoo : ¬¬¬P\n⊢ False\n## Action:\n  by_contra! foo : ¬ ¬ ¬ P -- normalises to ¬ P, as does ¬ (goal)."
"## Tactic State A:\nP _p : Prop\nbar : False\nfoo : ¬¬¬P\n⊢ False\n## Tactic State B:\nP _p : Prop\nbar : False\nfoo : ¬¬¬P\n⊢ False\n## Action:\n  guard_hyp foo : ¬ ¬ ¬ P"
"## Tactic State A:\nP _p : Prop\nbar : False\nfoo : ¬¬¬P\n⊢ False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact bar"
"## Tactic State A:\nP _p : Prop\nbar : False\n⊢ ¬¬¬¬¬¬P\n## Tactic State B:\nP _p : Prop\nbar : False\nthis : ¬¬¬P\n⊢ False\n## Action:\n  by_contra! : ¬ ¬ ¬ P"
"## Tactic State A:\nP _p : Prop\nbar : False\nthis : ¬¬¬P\n⊢ False\n## Tactic State B:\nP _p : Prop\nbar : False\nthis : ¬¬¬P\n⊢ False\n## Action:\n  guard_hyp this : ¬ ¬ ¬ P"
"## Tactic State A:\nP _p : Prop\nbar : False\nthis : ¬¬¬P\n⊢ False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact bar"
"## Tactic State A:\nα : Type u_1\ninst✝² : LinearOrder α\ninst✝¹ : One α\ninst✝ : Mul α\nx : α\nf : False\n⊢ x ≤ 1\n## Tactic State B:\nα : Type u_1\ninst✝² : LinearOrder α\ninst✝¹ : One α\ninst✝ : Mul α\nx : α\nf : False\na : α := x * x\n⊢ x ≤ 1\n## Action:\n  set a := x * x"
"## Tactic State A:\nα : Type u_1\ninst✝² : LinearOrder α\ninst✝¹ : One α\ninst✝ : Mul α\nx : α\nf : False\na : α := x * x\n⊢ x ≤ 1\n## Tactic State B:\nα : Type u_1\ninst✝² : LinearOrder α\ninst✝¹ : One α\ninst✝ : Mul α\nx : α\nf : False\na : α := x * x\nh : 1 < x\n⊢ False\n## Action:\n  by_contra! h"
"## Tactic State A:\nα : Type u_1\ninst✝² : LinearOrder α\ninst✝¹ : One α\ninst✝ : Mul α\nx : α\nf : False\na : α := x * x\nh : 1 < x\n⊢ False\n## Tactic State B:\nα : Type u_1\ninst✝² : LinearOrder α\ninst✝¹ : One α\ninst✝ : Mul α\nx : α\nf : False\na : α := x * x\nh : 1 < x\n⊢ False\n## Action:\n  guard_hyp h : 1 < x"
"## Tactic State A:\nα : Type u_1\ninst✝² : LinearOrder α\ninst✝¹ : One α\ninst✝ : Mul α\nx : α\nf : False\na : α := x * x\nh : 1 < x\n⊢ False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  assumption"
"## Tactic State A:\nα : Type u_1\ninst✝² : LinearOrder α\ninst✝¹ : One α\ninst✝ : Mul α\nx : α\nf : False\n⊢ x ≤ 1\n## Tactic State B:\nα : Type u_1\ninst✝² : LinearOrder α\ninst✝¹ : One α\ninst✝ : Mul α\nx : α\nf : False\n_a : α := x * x\n⊢ x ≤ 1\n## Action:\n  let _a := x * x"
"## Tactic State A:\nα : Type u_1\ninst✝² : LinearOrder α\ninst✝¹ : One α\ninst✝ : Mul α\nx : α\nf : False\n_a : α := x * x\n⊢ x ≤ 1\n## Tactic State B:\nα : Type u_1\ninst✝² : LinearOrder α\ninst✝¹ : One α\ninst✝ : Mul α\nx : α\nf : False\n_a : α := x * x\nh : 1 < x\n⊢ False\n## Action:\n  by_contra! h"
"## Tactic State A:\nα : Type u_1\ninst✝² : LinearOrder α\ninst✝¹ : One α\ninst✝ : Mul α\nx : α\nf : False\n_a : α := x * x\nh : 1 < x\n⊢ False\n## Tactic State B:\nα : Type u_1\ninst✝² : LinearOrder α\ninst✝¹ : One α\ninst✝ : Mul α\nx : α\nf : False\n_a : α := x * x\nh : 1 < x\n⊢ False\n## Action:\n  guard_hyp h : 1 < x"
"## Tactic State A:\nα : Type u_1\ninst✝² : LinearOrder α\ninst✝¹ : One α\ninst✝ : Mul α\nx : α\nf : False\n_a : α := x * x\nh : 1 < x\n⊢ False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  assumption"
"## Tactic State A:\nα : Type u_1\ninst✝² : LinearOrder α\ninst✝¹ : One α\ninst✝ : Mul α\nx : α\nf : False\n⊢ x ≤ 1\n## Tactic State B:\nα : Type u_1\ninst✝² : LinearOrder α\ninst✝¹ : One α\ninst✝ : Mul α\nx : α\nf : False\na : α := x * x\n⊢ x ≤ 1\n## Action:\n  set a := x * x"
"## Tactic State A:\nα : Type u_1\ninst✝² : LinearOrder α\ninst✝¹ : One α\ninst✝ : Mul α\nx : α\nf : False\na : α := x * x\n⊢ x ≤ 1\n## Tactic State B:\nα : Type u_1\ninst✝² : LinearOrder α\ninst✝¹ : One α\ninst✝ : Mul α\nx : α\nf : False\na : α := x * x\nthis : a ≤ a\n⊢ x ≤ 1\n## Action:\n  have : a ≤ a := le_rfl"
"## Tactic State A:\nα : Type u_1\ninst✝² : LinearOrder α\ninst✝¹ : One α\ninst✝ : Mul α\nx : α\nf : False\na : α := x * x\nthis : a ≤ a\n⊢ x ≤ 1\n## Tactic State B:\nα : Type u_1\ninst✝² : LinearOrder α\ninst✝¹ : One α\ninst✝ : Mul α\nx : α\nf : False\na : α := x * x\nthis : a ≤ a\nh : 1 < x\n⊢ False\n## Action:\n  by_contra! h"
"## Tactic State A:\nα : Type u_1\ninst✝² : LinearOrder α\ninst✝¹ : One α\ninst✝ : Mul α\nx : α\nf : False\na : α := x * x\nthis : a ≤ a\nh : 1 < x\n⊢ False\n## Tactic State B:\nα : Type u_1\ninst✝² : LinearOrder α\ninst✝¹ : One α\ninst✝ : Mul α\nx : α\nf : False\na : α := x * x\nthis : a ≤ a\nh : 1 < x\n⊢ False\n## Action:\n  guard_hyp h : 1 < x"
"## Tactic State A:\nα : Type u_1\ninst✝² : LinearOrder α\ninst✝¹ : One α\ninst✝ : Mul α\nx : α\nf : False\na : α := x * x\nthis : a ≤ a\nh : 1 < x\n⊢ False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  assumption"
"## Tactic State A:\nx✝ : Sort u_1\nf : x✝\n⊢ sorry = 38\n## Tactic State B:\nx✝ : Sort u_1\nf : x✝\n⊢ sorry = 38\n## Action:\n  erw? [f]"
"## Tactic State A:\na b c : ℕ\nh1 : a ≤ b\nh2 : b ≤ c\n⊢ a ≤ c\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  order"
"## Tactic State A:\na b c d e : ℕ\nh1 : a ≤ b\nh2 : b ≤ c\nh3 : c ≤ d\nh4 : d ≤ e\nh5 : b ≠ d\n⊢ a < e\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  order"
"## Tactic State A:\na b c : ℕ\nh1 : a = b\nh2 : b = c\n⊢ a = c\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  order"
"## Tactic State A:\na b : ℤ\nh1 : ¬a < b\nh2 : ¬b < a\n⊢ a = b\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  order"
"## Tactic State A:\nα : Type\ninst✝ : LinearOrder α\na b : α\nh1 : ¬a < b\nh2 : ¬b < a\n⊢ a = b\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  order"
"## Tactic State A:\nα : Type\ninst✝ : PartialOrder α\na b c d e : α\nh1 : a ≤ b\nh2 : b ≤ c\nh3 : c ≤ d\nh4 : d ≤ e\nh5 : b ≠ d\n⊢ a < e\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  order"
"## Tactic State A:\nα : Type\ninst✝ : PartialOrder α\ns t x y : α\nh1 : s ≤ x\nh2 : x ≤ t\nh3 : s ≤ y\nh4 : y ≤ t\nh5 : x ≠ y\n⊢ s < t\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  order"
"## Tactic State A:\nα : Type\ninst✝ : PartialOrder α\na b c d : α\nh1 : a ≤ b\nh2 : b ≤ c\nh3 : ¬a < c\nh4 : a ≤ d\n⊢ c ≤ d\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  order"
"## Tactic State A:\nα : Type\ninst✝ : PartialOrder α\na : α\n⊢ ¬a < a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  order"
"## Tactic State A:\nα : Type\ninst✝ : Preorder α\na b c d : α\nh1 : a ≤ b\nh2 : b ≤ c\nh3 : ¬a < c\nh4 : a ≤ d\n⊢ c ≤ d\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  order"
"## Tactic State A:\nα : Type\ninst✝ : Preorder α\na b : α\nh1 : a < b\n⊢ b > a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  order"
"## Tactic State A:\nα : Type\ninst✝ : Preorder α\na b : α\nh1 : a > b\n⊢ b < a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  order"
"## Tactic State A:\nn : ℕ\nA B C : Matrix (Fin n) (Fin n) ℚ\n⊢ (A * B * C).rank ≤ min A.rank C.rank\n## Tactic State B:\nn : ℕ\nA B C : Matrix (Fin n) (Fin n) ℚ\nh1 : (A * B).rank ≤ min A.rank B.rank\n⊢ (A * B * C).rank ≤ min A.rank C.rank\n## Action:\n  have h1 := Matrix.rank_mul_le A B"
"## Tactic State A:\nn : ℕ\nA B C : Matrix (Fin n) (Fin n) ℚ\nh1 : (A * B).rank ≤ min A.rank B.rank\n⊢ (A * B * C).rank ≤ min A.rank C.rank\n## Tactic State B:\nn : ℕ\nA B C : Matrix (Fin n) (Fin n) ℚ\nh1 : (A * B).rank ≤ min A.rank B.rank\nh2 : (A * B * C).rank ≤ min (A * B).rank C.rank\n⊢ (A * B * C).rank ≤ min A.rank C.rank\n## Action:\n  have h2 := Matrix.rank_mul_le (A * B) C"
"## Tactic State A:\nn : ℕ\nA B C : Matrix (Fin n) (Fin n) ℚ\nh1 : (A * B).rank ≤ min A.rank B.rank\nh2 : (A * B * C).rank ≤ min (A * B).rank C.rank\n⊢ (A * B * C).rank ≤ min A.rank C.rank\n## Tactic State B:\nn : ℕ\nA B C : Matrix (Fin n) (Fin n) ℚ\nh1 : (A * B).rank ≤ min A.rank B.rank\nh2 : (A * B * C).rank ≤ min (A * B).rank C.rank\nh3 : min A.rank B.rank ≤ A.rank\n⊢ (A * B * C).rank ≤ min A.rank C.rank\n## Action:\n  have h3 : A.rank ⊓ B.rank ≤ A.rank := inf_le_left"
"## Tactic State A:\nn : ℕ\nA B C : Matrix (Fin n) (Fin n) ℚ\nh1 : (A * B).rank ≤ min A.rank B.rank\nh2 : (A * B * C).rank ≤ min (A * B).rank C.rank\nh3 : min A.rank B.rank ≤ A.rank\n⊢ (A * B * C).rank ≤ min A.rank C.rank\n## Tactic State B:\nn : ℕ\nA B C : Matrix (Fin n) (Fin n) ℚ\nh1 : (A * B).rank ≤ min A.rank B.rank\nh2 : (A * B * C).rank ≤ min (A * B).rank C.rank\nh3 : min A.rank B.rank ≤ A.rank\nh4 : min (A * B).rank C.rank ≤ (A * B).rank\n⊢ (A * B * C).rank ≤ min A.rank C.rank\n## Action:\n  have h4 : (A * B).rank ⊓ C.rank ≤ (A * B).rank := inf_le_left"
"## Tactic State A:\nn : ℕ\nA B C : Matrix (Fin n) (Fin n) ℚ\nh1 : (A * B).rank ≤ min A.rank B.rank\nh2 : (A * B * C).rank ≤ min (A * B).rank C.rank\nh3 : min A.rank B.rank ≤ A.rank\nh4 : min (A * B).rank C.rank ≤ (A * B).rank\n⊢ (A * B * C).rank ≤ min A.rank C.rank\n## Tactic State B:\nn : ℕ\nA B C : Matrix (Fin n) (Fin n) ℚ\nh1 : (A * B).rank ≤ min A.rank B.rank\nh2 : (A * B * C).rank ≤ min (A * B).rank C.rank\nh3 : min A.rank B.rank ≤ A.rank\nh4 : min (A * B).rank C.rank ≤ (A * B).rank\nh5 : min (A * B).rank C.rank ≤ C.rank\n⊢ (A * B * C).rank ≤ min A.rank C.rank\n## Action:\n  have h5 : (A * B).rank ⊓ C.rank ≤ C.rank := inf_le_right"
"## Tactic State A:\nn : ℕ\nA B C : Matrix (Fin n) (Fin n) ℚ\nh1 : (A * B).rank ≤ min A.rank B.rank\nh2 : (A * B * C).rank ≤ min (A * B).rank C.rank\nh3 : min A.rank B.rank ≤ A.rank\nh4 : min (A * B).rank C.rank ≤ (A * B).rank\nh5 : min (A * B).rank C.rank ≤ C.rank\n⊢ (A * B * C).rank ≤ min A.rank C.rank\n## Tactic State B:\nn : ℕ\nA B C : Matrix (Fin n) (Fin n) ℚ\nh1 : (A * B).rank ≤ min A.rank B.rank\nh2 : (A * B * C).rank ≤ min (A * B).rank C.rank\nh3 : min A.rank B.rank ≤ A.rank\nh4 : min (A * B).rank C.rank ≤ (A * B).rank\nh5 : min (A * B).rank C.rank ≤ C.rank\n⊢ (A * B * C).rank ≤ A.rank ∧ (A * B * C).rank ≤ C.rank\n## Action:\n  simp"
"## Tactic State A:\nn : ℕ\nA B C : Matrix (Fin n) (Fin n) ℚ\nh1 : (A * B).rank ≤ min A.rank B.rank\nh2 : (A * B * C).rank ≤ min (A * B).rank C.rank\nh3 : min A.rank B.rank ≤ A.rank\nh4 : min (A * B).rank C.rank ≤ (A * B).rank\nh5 : min (A * B).rank C.rank ≤ C.rank\n⊢ (A * B * C).rank ≤ A.rank ∧ (A * B * C).rank ≤ C.rank\n## Tactic State B:\ncase left\nn : ℕ\nA B C : Matrix (Fin n) (Fin n) ℚ\nh1 : (A * B).rank ≤ min A.rank B.rank\nh2 : (A * B * C).rank ≤ min (A * B).rank C.rank\nh3 : min A.rank B.rank ≤ A.rank\nh4 : min (A * B).rank C.rank ≤ (A * B).rank\nh5 : min (A * B).rank C.rank ≤ C.rank\n⊢ (A * B * C).rank ≤ A.rank\n---\ncase right\nn : ℕ\nA B C : Matrix (Fin n) (Fin n) ℚ\nh1 : (A * B).rank ≤ min A.rank B.rank\nh2 : (A * B * C).rank ≤ min (A * B).rank C.rank\nh3 : min A.rank B.rank ≤ A.rank\nh4 : min (A * B).rank C.rank ≤ (A * B).rank\nh5 : min (A * B).rank C.rank ≤ C.rank\n⊢ (A * B * C).rank ≤ C.rank\n## Action:\n  constructor"
"## Tactic State A:\ncase left\nn : ℕ\nA B C : Matrix (Fin n) (Fin n) ℚ\nh1 : (A * B).rank ≤ min A.rank B.rank\nh2 : (A * B * C).rank ≤ min (A * B).rank C.rank\nh3 : min A.rank B.rank ≤ A.rank\nh4 : min (A * B).rank C.rank ≤ (A * B).rank\nh5 : min (A * B).rank C.rank ≤ C.rank\n⊢ (A * B * C).rank ≤ A.rank\n---\ncase right\nn : ℕ\nA B C : Matrix (Fin n) (Fin n) ℚ\nh1 : (A * B).rank ≤ min A.rank B.rank\nh2 : (A * B * C).rank ≤ min (A * B).rank C.rank\nh3 : min A.rank B.rank ≤ A.rank\nh4 : min (A * B).rank C.rank ≤ (A * B).rank\nh5 : min (A * B).rank C.rank ≤ C.rank\n⊢ (A * B * C).rank ≤ C.rank\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · order"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · order"
"## Tactic State A:\nα : Type u\ninst✝ : PartialOrder α\nx1 y1 x2 y2 x3 y3 x4 y4 x5 y5 x6 y6 x7 y7 x8 y8 x9 y9 x10 y10 x11 y11 x12 y12 x13 y13 x14 y14 x15 y15 x16 y16 x17 y17 x18 y18 x19 y19 x20 y20 x21 y21 x22 y22 x23 y23 x24 y24 x25 y25 x26 y26 x27 y27 x28 y28 x29 y29 x30 y30 :\n  α\nh0 : y1 ≤ x1\nh1 : ¬y1 < x1\nh2 : y2 ≤ x1\nh3 : y1 ≤ x2\nh4 : ¬y2 < x2\nh5 : y3 ≤ x2\nh6 : y2 ≤ x3\nh7 : ¬y3 < x3\nh8 : y4 ≤ x3\nh9 : y3 ≤ x4\nh10 : ¬y4 < x4\nh11 : y5 ≤ x4\nh12 : y4 ≤ x5\nh13 : ¬y5 < x5\nh14 : y6 ≤ x5\nh15 : y5 ≤ x6\nh16 : ¬y6 < x6\nh17 : y7 ≤ x6\nh18 : y6 ≤ x7\nh19 : ¬y7 < x7\nh20 : y8 ≤ x7\nh21 : y7 ≤ x8\nh22 : ¬y8 < x8\nh23 : y9 ≤ x8\nh24 : y8 ≤ x9\nh25 : ¬y9 < x9\nh26 : y10 ≤ x9\nh27 : y9 ≤ x10\nh28 : ¬y10 < x10\nh29 : y11 ≤ x10\nh30 : y10 ≤ x11\nh31 : ¬y11 < x11\nh32 : y12 ≤ x11\nh33 : y11 ≤ x12\nh34 : ¬y12 < x12\nh35 : y13 ≤ x12\nh36 : y12 ≤ x13\nh37 : ¬y13 < x13\nh38 : y14 ≤ x13\nh39 : y13 ≤ x14\nh40 : ¬y14 < x14\nh41 : y15 ≤ x14\nh42 : y14 ≤ x15\nh43 : ¬y15 < x15\nh44 : y16 ≤ x15\nh45 : y15 ≤ x16\nh46 : ¬y16 < x16\nh47 : y17 ≤ x16\nh48 : y16 ≤ x17\nh49 : ¬y17 < x17\nh50 : y18 ≤ x17\nh51 : y17 ≤ x18\nh52 : ¬y18 < x18\nh53 : y19 ≤ x18\nh54 : y18 ≤ x19\nh55 : ¬y19 < x19\nh56 : y20 ≤ x19\nh57 : y19 ≤ x20\nh58 : ¬y20 < x20\nh59 : y21 ≤ x20\nh60 : y20 ≤ x21\nh61 : ¬y21 < x21\nh62 : y22 ≤ x21\nh63 : y21 ≤ x22\nh64 : ¬y22 < x22\nh65 : y23 ≤ x22\nh66 : y22 ≤ x23\nh67 : ¬y23 < x23\nh68 : y24 ≤ x23\nh69 : y23 ≤ x24\nh70 : ¬y24 < x24\nh71 : y25 ≤ x24\nh72 : y24 ≤ x25\nh73 : ¬y25 < x25\nh74 : y26 ≤ x25\nh75 : y25 ≤ x26\nh76 : ¬y26 < x26\nh77 : y27 ≤ x26\nh78 : y26 ≤ x27\nh79 : ¬y27 < x27\nh80 : y28 ≤ x27\nh81 : y27 ≤ x28\nh82 : ¬y28 < x28\nh83 : y29 ≤ x28\nh84 : y28 ≤ x29\nh85 : ¬y29 < x29\nh86 : y30 ≤ x29\nh87 : y29 ≤ x30\nh88 : ¬y30 < x30\n⊢ x30 = y30\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  order"
"## Tactic State A:\nG : Type u_1\ninst✝ : AddZeroClass G\na : G\nh : a = a\n⊢ a = a + 0\n## Tactic State B:\nG : Type u_1\ninst✝ : AddZeroClass G\na : G\nh : a = a + 0\n⊢ a = a + 0\n## Action:\n  nth_rewrite 2 [← add_zero a] at h"
"## Tactic State A:\nG : Type u_1\ninst✝ : AddZeroClass G\na : G\nh : a = a + 0\n⊢ a = a + 0\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h"
"## Tactic State A:\nG : Type u_1\ninst✝ : AddZeroClass G\na : G\n⊢ a + a = a + (a + 0)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  nth_rw 2 [← add_zero a]"
"## Tactic State A:\nF : Sort u_1\nf : F\n⊢ sorry = []\n## Tactic State B:\nF : Sort u_1\nf : F\n⊢ sorry = []\n## Action:\n  nth_rw 1 [f.p]"
"## Tactic State A:\nCat : Sort u_1\nC : Cat\nW : sorry\nX : sorry\nY : sorry\nZ : sorry\nf : sorry\ng : sorry\nh : sorry\n_k : sorry\n⊢ sorry = sorry\n## Tactic State B:\nCat : Sort u_1\nC : Cat\nW : sorry\nX : sorry\nY : sorry\nZ : sorry\nf : sorry\ng : sorry\nh : sorry\n_k : sorry\n⊢ sorry = sorry\n## Action:\n  nth_rw 1 [C.a]"
"## Tactic State A:\nCat : Sort u_1\nC : Cat\nX : sorry\nY : sorry\nf : sorry\n⊢ sorry = f\n## Tactic State B:\nCat : Sort u_1\nC : Cat\nX : sorry\nY : sorry\nf : sorry\n⊢ sorry = f\n## Action:\n  nth_rw 1 [C.ri]"
"## Tactic State A:\nx y z : ℕ\nh1 : x = y\nh2 : y = z\n⊢ x + x + x + y = y + y + x + x\n## Tactic State B:\nx y z : ℕ\nh1 : x = y\nh2 : y = z\n⊢ x + x + y + y = z + y + x + x\n## Action:\n  nth_rewrite 3 [h1, h2] -- h2 *is* used, this is different from mathlib3"
"## Tactic State A:\nx y z : ℕ\nh1 : x = y\nh2 : y = z\n⊢ x + x + y + y = z + y + x + x\n## Tactic State B:\nx y z : ℕ\nh1 : x = y\nh2 : y = z\n⊢ x + x + y + y = z + z + x + x\n## Action:\n  nth_rewrite 3 [h2]"
"## Tactic State A:\nx y z : ℕ\nh1 : x = y\nh2 : y = z\n⊢ x + x + y + y = z + z + x + x\n## Tactic State B:\nx y z : ℕ\nh1 : x = y\nh2 : y = z\n⊢ y + y + y + y = z + z + y + y\n## Action:\n  rw [h1]"
"## Tactic State A:\nx y z : ℕ\nh1 : x = y\nh2 : y = z\n⊢ y + y + y + y = z + z + y + y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rw [h2]"
"## Tactic State A:\n⊢ [[1], [1], [1]] = [[1], [2], [1]]\n## Tactic State B:\n⊢ [[1], [1], [1]] = [[1], [2], [1]]\n## Action:\n  nth_rw 2 [foo]"
"## Tactic State A:\n⊢ [[7], [6]] = [[5], [5]]\n## Tactic State B:\n⊢ [[7], [6]] = [[5], [5]]\n## Action:\n  nth_rewrite 1 [foo']"
"## Tactic State A:\na b c : ℕ\n⊢ c + a + b = a + c + b\n## Tactic State B:\na b c : ℕ\n⊢ c + a + b = c + a + b\n## Action:\n  nth_rewrite 4 [add_comm]"
"## Tactic State A:\na b c : ℕ\n⊢ c + a + b = c + a + b\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rfl"
"## Tactic State A:\n⊢ [(3, 3), (5, 9), (5, 9)] = [(4, 5), (3, 6), (1, 1)]\n## Tactic State B:\n⊢ [(3, 3), (5, 9), (5, 9)] = [(4, 5), (3, 6), (1, 1)]\n## Action:\n  nth_rewrite 1 [wowzer]"
"## Tactic State A:\nx y : Prop\nh₁ : x ↔ y\nh₂ : x ↔ x ∧ x\n⊢ x ∧ x ↔ x\n## Tactic State B:\nx y : Prop\nh₁ : x ↔ y\nh₂ : x ↔ x ∧ y\n⊢ x ∧ x ↔ x\n## Action:\n  nth_rewrite 3 [h₁] at h₂"
"## Tactic State A:\nx y : Prop\nh₁ : x ↔ y\nh₂ : x ↔ x ∧ y\n⊢ x ∧ x ↔ x\n## Tactic State B:\nx y : Prop\nh₁ : x ↔ y\nh₂ : x ↔ x ∧ x\n⊢ x ∧ x ↔ x\n## Action:\n  nth_rewrite 1 [← h₁] at h₂"
"## Tactic State A:\nx y : Prop\nh₁ : x ↔ y\nh₂ : x ↔ x ∧ x\n⊢ x ∧ x ↔ x\n## Tactic State B:\nx y : Prop\nh₁ : x ↔ y\nh₂ : x ↔ x ∧ x\n⊢ x ∧ x ↔ x ∧ x\n## Action:\n  nth_rewrite 3 [h₂]"
"## Tactic State A:\nx y : Prop\nh₁ : x ↔ y\nh₂ : x ↔ x ∧ x\n⊢ x ∧ x ↔ x ∧ x\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rfl"
"## Tactic State A:\nx y : ℕ\nh₁ : x = y\nh₂ : x = x + x\n⊢ x + x = x\n## Tactic State B:\nx y : ℕ\nh₁ : x = y\nh₂ : x = x + y\n⊢ x + x = x\n## Action:\n  nth_rewrite 3 [h₁] at h₂"
"## Tactic State A:\nx y : ℕ\nh₁ : x = y\nh₂ : x = x + y\n⊢ x + x = x\n## Tactic State B:\nx y : ℕ\nh₁ : x = y\nh₂ : x = x + x\n⊢ x + x = x\n## Action:\n  nth_rewrite 1 [← h₁] at h₂"
"## Tactic State A:\nx y : ℕ\nh₁ : x = y\nh₂ : x = x + x\n⊢ x + x = x\n## Tactic State B:\nx y : ℕ\nh₁ : x = y\nh₂ : x = x + x\n⊢ x + x = x + x\n## Action:\n  nth_rewrite 3 [h₂]"
"## Tactic State A:\nx y : ℕ\nh₁ : x = y\nh₂ : x = x + x\n⊢ x + x = x + x\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rfl"
"## Tactic State A:\nx y : ℕ\nh : x = y\n⊢ x + x + x = x + y + y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  nth_rw 2 3 [h]"
"## Tactic State A:\nα : Type u_1\nβ : Type u_2\nf : α → β\ns t : Set β\nh : Surjective f\n⊢ f '' (f ⁻¹' s) ⊆ t ↔ f '' (f ⁻¹' s) ⊆ t\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  conv =>"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    congr"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    · simp [h, -image_preimage_eq, -subset_range_of_surjective]"
"## Tactic State A:\nα : Type u_1\nβ : Type u_2\ns : Set α\nhs : s.Nonempty\nt : Set β\na : β\n⊢ (fun x => a) '' s ⊆ t ↔ (fun x => a) '' s ⊆ t\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  conv =>"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    congr"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    · simp [hs, -Nonempty.image_const, -Nonempty.subset_preimage_const]"
"## Tactic State A:\nα : Type u_1\nβ : Type u_2\nuniv : Set α\nf : α → β\ns : Set β\n⊢ f '' univ ⊆ s ↔ f '' univ ⊆ s\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  conv =>"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    congr"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    · simp [-image_univ, -preimage_eq_univ_iff]"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\n⊢ ¬p ∧ ¬q → ¬(p ∨ q)\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : ¬p ∧ ¬q\n⊢ ¬(p ∨ q)\n## Action:\n  intro h"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : ¬p ∧ ¬q\n⊢ ¬(p ∨ q)\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : ¬p ∧ ¬q\n⊢ ¬p ∧ ¬q\n## Action:\n  push_neg"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : ¬p ∧ ¬q\n⊢ ¬p ∧ ¬q\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : ¬p ∧ ¬q\n⊢ ¬p ∧ ¬q\n## Action:\n  guard_target = ¬p ∧ ¬q"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : ¬p ∧ ¬q\n⊢ ¬p ∧ ¬q\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\n⊢ ¬(p ∧ q) → p → ¬q\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : ¬(p ∧ q)\n⊢ p → ¬q\n## Action:\n  intro h"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : ¬(p ∧ q)\n⊢ p → ¬q\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : p → ¬q\n⊢ p → ¬q\n## Action:\n  push_neg at h"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : p → ¬q\n⊢ p → ¬q\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : p → ¬q\n⊢ p → ¬q\n## Action:\n  guard_hyp h : p → ¬q"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : p → ¬q\n⊢ p → ¬q\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\n⊢ (∀ (x : α), ¬p' x) → ¬∃ x, p' x\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : ∀ (x : α), ¬p' x\n⊢ ¬∃ x, p' x\n## Action:\n  intro h"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : ∀ (x : α), ¬p' x\n⊢ ¬∃ x, p' x\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : ∀ (x : α), ¬p' x\n⊢ ∀ (x : α), ¬p' x\n## Action:\n  push_neg"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : ∀ (x : α), ¬p' x\n⊢ ∀ (x : α), ¬p' x\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : ∀ (x : α), ¬p' x\n⊢ ∀ (x : α), ¬p' x\n## Action:\n  guard_target = ∀ (x : α), ¬p' x"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : ∀ (x : α), ¬p' x\n⊢ ∀ (x : α), ¬p' x\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\n⊢ (¬∀ (x : α), p' x) → ∃ x, ¬p' x\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : ¬∀ (x : α), p' x\n⊢ ∃ x, ¬p' x\n## Action:\n  intro h"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : ¬∀ (x : α), p' x\n⊢ ∃ x, ¬p' x\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : ∃ x, ¬p' x\n⊢ ∃ x, ¬p' x\n## Action:\n  push_neg at h"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : ∃ x, ¬p' x\n⊢ ∃ x, ¬p' x\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : ∃ x, ¬p' x\n⊢ ∃ x, ¬p' x\n## Action:\n  guard_hyp h : ∃ (x : α), ¬p' x"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : ∃ x, ¬p' x\n⊢ ∃ x, ¬p' x\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np✝ q : Prop\np' q' : α → Prop\np : Bool\n⊢ (decide ¬¬p = true) = p\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np✝ q : Prop\np' q' : α → Prop\np : Bool\n⊢ decide (p = true) = p\n## Action:\n  push_neg"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np✝ q : Prop\np' q' : α → Prop\np : Bool\n⊢ decide (p = true) = p\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np✝ q : Prop\np' q' : α → Prop\np : Bool\n⊢ decide (p = true) = p\n## Action:\n  guard_target = decide p = p"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np✝ q : Prop\np' q' : α → Prop\np : Bool\n⊢ decide (p = true) = p\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cases p <;> rfl"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\n⊢ (fun x => x + x) 1 = 2\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\n⊢ 1 + 1 = 2\n## Action:\n  push_neg"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\n⊢ 1 + 1 = 2\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\n⊢ 1 + 1 = 2\n## Action:\n  guard_target = 1 + 1 = 2"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\n⊢ 1 + 1 = 2\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  simp"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\n⊢ ¬¬p = p\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\n⊢ p = p\n## Action:\n  push_neg"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\n⊢ p = p\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\n⊢ p = p\n## Action:\n  guard_target = p = p"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\n⊢ p = p\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rfl"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : β\nh : y < x\n⊢ ¬x ≤ y\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : β\nh : y < x\n⊢ y < x\n## Action:\n  push_neg"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : β\nh : y < x\n⊢ y < x\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : β\nh : y < x\n⊢ y < x\n## Action:\n  guard_target = y < x"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : β\nh : y < x\n⊢ y < x\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\na b : β\nh : a ≤ b\n⊢ ¬a > b\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\na b : β\nh : a ≤ b\n⊢ a ≤ b\n## Action:\n  push_neg"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\na b : β\nh : a ≤ b\n⊢ a ≤ b\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\na b : β\nh : a ≤ b\n⊢ a ≤ b\n## Action:\n  guard_target = a ≤ b"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\na b : β\nh : a ≤ b\n⊢ a ≤ b\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : α\nh : x = y\n⊢ ¬x ≠ y\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : α\nh : x = y\n⊢ x = y\n## Action:\n  push_neg"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : α\nh : x = y\n⊢ x = y\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : α\nh : x = y\n⊢ x = y\n## Action:\n  guard_target = x = y"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : α\nh : x = y\n⊢ x = y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\n⊢ ¬∃ y, y ≠ ()\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\n⊢ ∀ (y : Unit), y = ()\n## Action:\n  push_neg"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\n⊢ ∀ (y : Unit), y = ()\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\n⊢ ∀ (y : Unit), y = ()\n## Action:\n  guard_target = ∀ (y : Unit), y = ()"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\n⊢ ∀ (y : Unit), y = ()\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  simp"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : ∃ y, ¬y = 1\n⊢ ¬∀ (y : ℕ), y = 1\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : ∃ y, ¬y = 1\n⊢ ∃ y, y ≠ 1\n## Action:\n  push_neg"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : ∃ y, ¬y = 1\n⊢ ∃ y, y ≠ 1\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : ∃ y, ¬y = 1\n⊢ ∃ y, y ≠ 1\n## Action:\n  guard_target = ∃ (y : Nat), y ≠ 1"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : ∃ y, ¬y = 1\n⊢ ∃ y, y ≠ 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : β\nh : y < x\n⊢ ¬¬¬x ≤ y\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : β\nh : y < x\n⊢ y < x\n## Action:\n  push_neg"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : β\nh : y < x\n⊢ y < x\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : β\nh : y < x\n⊢ y < x\n## Action:\n  guard_target = y < x"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : β\nh : y < x\n⊢ y < x\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : β\nh₁ : ¬¬¬x < y\nh₂ : ¬∃ x y, x = y\n⊢ ¬∀ (x y : ℕ), x = y\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : β\nh₂ : ∀ (x y : ℕ), x ≠ y\nh₁ : y ≤ x\n⊢ ∃ x y, x ≠ y\n## Action:\n  push_neg at *"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : β\nh₂ : ∀ (x y : ℕ), x ≠ y\nh₁ : y ≤ x\n⊢ ∃ x y, x ≠ y\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : β\nh₂ : ∀ (x y : ℕ), x ≠ y\nh₁ : y ≤ x\n⊢ ∃ x y, x ≠ y\n## Action:\n  guard_target = ∃ (x y : Nat), x ≠ y"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : β\nh₂ : ∀ (x y : ℕ), x ≠ y\nh₁ : y ≤ x\n⊢ ∃ x y, x ≠ y\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : β\nh₂ : ∀ (x y : ℕ), x ≠ y\nh₁ : y ≤ x\n⊢ ∃ x y, x ≠ y\n## Action:\n  guard_hyp h₁ : y ≤ x"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : β\nh₂ : ∀ (x y : ℕ), x ≠ y\nh₁ : y ≤ x\n⊢ ∃ x y, x ≠ y\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : β\nh₂ : ∀ (x y : ℕ), x ≠ y\nh₁ : y ≤ x\n⊢ ∃ x y, x ≠ y\n## Action:\n  guard_hyp h₂ : ∀ (x y : Nat), x ≠ y"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : β\nh₂ : ∀ (x y : ℕ), x ≠ y\nh₁ : y ≤ x\n⊢ ∃ x y, x ≠ y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact ⟨0, 1, by simp⟩"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : β\nh₁ : ¬¬¬x < y\nh₂ : ¬∃ x y, x = y\n⊢ ¬∀ (x y : ℕ), x = y\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : β\nh₁ : y ≤ x\nh₂ : ∀ (x y : ℕ), x ≠ y\n⊢ ∃ x y, x ≠ y\n## Action:\n  push_neg at h₁ h₂ ⊢"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : β\nh₁ : y ≤ x\nh₂ : ∀ (x y : ℕ), x ≠ y\n⊢ ∃ x y, x ≠ y\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : β\nh₁ : y ≤ x\nh₂ : ∀ (x y : ℕ), x ≠ y\n⊢ ∃ x y, x ≠ y\n## Action:\n  guard_target = ∃ (x y : Nat), x ≠ y"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : β\nh₁ : y ≤ x\nh₂ : ∀ (x y : ℕ), x ≠ y\n⊢ ∃ x y, x ≠ y\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : β\nh₁ : y ≤ x\nh₂ : ∀ (x y : ℕ), x ≠ y\n⊢ ∃ x y, x ≠ y\n## Action:\n  guard_hyp h₁ : y ≤ x"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : β\nh₁ : y ≤ x\nh₂ : ∀ (x y : ℕ), x ≠ y\n⊢ ∃ x y, x ≠ y\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : β\nh₁ : y ≤ x\nh₂ : ∀ (x y : ℕ), x ≠ y\n⊢ ∃ x y, x ≠ y\n## Action:\n  guard_hyp h₂ : ∀ (x y : Nat), x ≠ y"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : β\nh₁ : y ≤ x\nh₂ : ∀ (x y : ℕ), x ≠ y\n⊢ ∃ x y, x ≠ y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact ⟨0, 1, by simp⟩"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : p → ¬q\n⊢ ¬(p ∧ q)\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : p → ¬q\n⊢ p → ¬q\n## Action:\n  push_neg"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : p → ¬q\n⊢ p → ¬q\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : p → ¬q\n⊢ p → ¬q\n## Action:\n  guard_target = p → ¬q"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : p → ¬q\n⊢ p → ¬q\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\na : β\n⊢ ¬∀ x < a, ∃ y < a, ∀ (z : β), x = z\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\na : β\n⊢ ∃ x < a, ∀ y < a, ∃ z, x ≠ z\n## Action:\n  push_neg"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\na : β\n⊢ ∃ x < a, ∀ y < a, ∃ z, x ≠ z\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\na : β\n⊢ ∃ x < a, ∀ y < a, ∃ z, x ≠ z\n## Action:\n  guard_target = ∃ x, x < a ∧ ∀ (y : β), y < a → ∃ z, x ≠ z"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\na : β\n⊢ ∃ x < a, ∀ y < a, ∃ z, x ≠ z\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact test_sorry"
"## Tactic State A:\nα✝ β : Type\ninst✝¹ : LinearOrder β\np q : Prop\np' q' : α✝ → Prop\nα : Type u_1\ninst✝ : Preorder α\nm n : α\nh : ¬∃ k, m ≤ k\nh₂ : m ≤ n\n⊢ m ≤ n\n## Tactic State B:\nα✝ β : Type\ninst✝¹ : LinearOrder β\np q : Prop\np' q' : α✝ → Prop\nα : Type u_1\ninst✝ : Preorder α\nm n : α\nh₂ : m ≤ n\nh : ∀ (k : α), ¬m ≤ k\n⊢ m ≤ n\n## Action:\n  push_neg at h"
"## Tactic State A:\nα✝ β : Type\ninst✝¹ : LinearOrder β\np q : Prop\np' q' : α✝ → Prop\nα : Type u_1\ninst✝ : Preorder α\nm n : α\nh₂ : m ≤ n\nh : ∀ (k : α), ¬m ≤ k\n⊢ m ≤ n\n## Tactic State B:\nα✝ β : Type\ninst✝¹ : LinearOrder β\np q : Prop\np' q' : α✝ → Prop\nα : Type u_1\ninst✝ : Preorder α\nm n : α\nh₂ : m ≤ n\nh : ∀ (k : α), ¬m ≤ k\n⊢ m ≤ n\n## Action:\n  guard_hyp h : ∀ k, ¬(m ≤ k)"
"## Tactic State A:\nα✝ β : Type\ninst✝¹ : LinearOrder β\np q : Prop\np' q' : α✝ → Prop\nα : Type u_1\ninst✝ : Preorder α\nm n : α\nh₂ : m ≤ n\nh : ∀ (k : α), ¬m ≤ k\n⊢ m ≤ n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h₂"
"## Tactic State A:\nα✝ β : Type\ninst✝¹ : LinearOrder β\np q : Prop\np' q' : α✝ → Prop\nα : Type u_1\ninst✝ : Preorder α\nm n : α\nh : ¬∃ k, m < k\nh₂ : m ≤ n\n⊢ m ≤ n\n## Tactic State B:\nα✝ β : Type\ninst✝¹ : LinearOrder β\np q : Prop\np' q' : α✝ → Prop\nα : Type u_1\ninst✝ : Preorder α\nm n : α\nh₂ : m ≤ n\nh : ∀ (k : α), ¬m < k\n⊢ m ≤ n\n## Action:\n  push_neg at h"
"## Tactic State A:\nα✝ β : Type\ninst✝¹ : LinearOrder β\np q : Prop\np' q' : α✝ → Prop\nα : Type u_1\ninst✝ : Preorder α\nm n : α\nh₂ : m ≤ n\nh : ∀ (k : α), ¬m < k\n⊢ m ≤ n\n## Tactic State B:\nα✝ β : Type\ninst✝¹ : LinearOrder β\np q : Prop\np' q' : α✝ → Prop\nα : Type u_1\ninst✝ : Preorder α\nm n : α\nh₂ : m ≤ n\nh : ∀ (k : α), ¬m < k\n⊢ m ≤ n\n## Action:\n  guard_hyp h : ∀ k, ¬(m < k)"
"## Tactic State A:\nα✝ β : Type\ninst✝¹ : LinearOrder β\np q : Prop\np' q' : α✝ → Prop\nα : Type u_1\ninst✝ : Preorder α\nm n : α\nh₂ : m ≤ n\nh : ∀ (k : α), ¬m < k\n⊢ m ≤ n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h₂"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nr : LinearOrder α\ns : Preorder α\na b : α\n⊢ ¬(a < b → a < b)\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nr : LinearOrder α\ns : Preorder α\na b : α\n⊢ a < b ∧ b ≤ a\n## Action:\n  push_neg"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nr : LinearOrder α\ns : Preorder α\na b : α\n⊢ a < b ∧ b ≤ a\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nr : LinearOrder α\ns : Preorder α\na b : α\n⊢ a < b ∧ b ≤ a\n## Action:\n  guard_target = s.lt a b ∧ r.le b a"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nr : LinearOrder α\ns : Preorder α\na b : α\n⊢ a < b ∧ b ≤ a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact test_sorry"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nr : LinearOrder α\ns : Preorder α\na b : α\n⊢ ¬(a < b → a < b)\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nr : LinearOrder α\ns : Preorder α\na b : α\n⊢ a < b ∧ ¬a < b\n## Action:\n  push_neg"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nr : LinearOrder α\ns : Preorder α\na b : α\n⊢ a < b ∧ ¬a < b\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nr : LinearOrder α\ns : Preorder α\na b : α\n⊢ a < b ∧ ¬a < b\n## Action:\n  guard_target = r.lt a b ∧ ¬ s.lt a b"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nr : LinearOrder α\ns : Preorder α\na b : α\n⊢ a < b ∧ ¬a < b\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact test_sorry"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : p ∧ q\n⊢ ¬¬(p ∧ q)\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : p ∧ q\nr : Prop := p ∧ q\n⊢ ¬¬(p ∧ q)\n## Action:\n  let r := p ∧ q"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : p ∧ q\nr : Prop := p ∧ q\n⊢ ¬¬(p ∧ q)\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : p ∧ q\nr : Prop := p ∧ q\n⊢ ¬¬r\n## Action:\n  change ¬¬r"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : p ∧ q\nr : Prop := p ∧ q\n⊢ ¬¬r\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : p ∧ q\nr : Prop := p ∧ q\n⊢ r\n## Action:\n  push_neg"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : p ∧ q\nr : Prop := p ∧ q\n⊢ r\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : p ∧ q\nr : Prop := p ∧ q\n⊢ r\n## Action:\n  guard_target =ₛ r"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : p ∧ q\nr : Prop := p ∧ q\n⊢ r\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : ¬p ∨ ¬q\n⊢ ¬(p ∧ q)\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : ¬p ∨ ¬q\n⊢ p → ¬q\n## Action:\n  push_neg"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : ¬p ∨ ¬q\n⊢ p → ¬q\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : ¬p ∨ ¬q\n⊢ p → ¬q\n## Action:\n  guard_target = ¬p ∨ ¬q"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\n⊢ p → ¬¬¬¬¬¬p\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\n⊢ p → p\n## Action:\n  push_neg"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\n⊢ p → p\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\n⊢ p → p\n## Action:\n  guard_target = p → p"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\n⊢ p → p\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact id"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : ℕ\nh : x = 0 ∧ y ≠ 0\n⊢ ¬(x = 0 → y = 0)\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : ℕ\nh : x = 0 ∧ y ≠ 0\n⊢ x = 0 ∧ y ≠ 0\n## Action:\n  push_neg"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : ℕ\nh : x = 0 ∧ y ≠ 0\n⊢ x = 0 ∧ y ≠ 0\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : ℕ\nh : x = 0 ∧ y ≠ 0\n⊢ x = 0 ∧ y ≠ 0\n## Action:\n  guard_target = x = 0 ∧ y ≠ 0"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : ℕ\nh : x = 0 ∧ y ≠ 0\n⊢ x = 0 ∧ y ≠ 0\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\na : α\no : Option α\nh : ¬∀ (hs : o.isSome = true), o.get hs ≠ a\n⊢ ∃ (hs : o.isSome = true), o.get hs = a\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\na : α\no : Option α\nh : ∃ (h : o.isSome = true), o.get ⋯ = a\n⊢ ∃ (hs : o.isSome = true), o.get hs = a\n## Action:\n  push_neg at h"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\na : α\no : Option α\nh : ∃ (h : o.isSome = true), o.get ⋯ = a\n⊢ ∃ (hs : o.isSome = true), o.get hs = a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\ns : Set α\nh : ¬s.Nonempty\n⊢ s = ∅\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\ns : Set α\nh : s = ∅\n⊢ s = ∅\n## Action:\n  push_neg at h"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\ns : Set α\nh : s = ∅\n⊢ s = ∅\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\ns : Set α\nh : ¬s = ∅\n⊢ s.Nonempty\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\ns : Set α\nh : s.Nonempty\n⊢ s.Nonempty\n## Action:\n  push_neg at h"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\ns : Set α\nh : s.Nonempty\n⊢ s.Nonempty\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\ns : Set α\nh : s ≠ ∅\n⊢ s.Nonempty\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\ns : Set α\nh : s.Nonempty\n⊢ s.Nonempty\n## Action:\n  push_neg at h"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\ns : Set α\nh : s.Nonempty\n⊢ s.Nonempty\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\ns : Set α\nh : ∅ ≠ s\n⊢ s.Nonempty\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\ns : Set α\nh : s.Nonempty\n⊢ s.Nonempty\n## Action:\n  push_neg at h"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\ns : Set α\nh : s.Nonempty\n⊢ s.Nonempty\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h"
"## Tactic State A:\nα β : Type\ninst✝ : LinearOrder β\np✝ q✝ : Prop\np' q' : α → Prop\np q : ℕ\n⊢ ¬sorry\n## Tactic State B:\nα β : Type\ninst✝ : LinearOrder β\np✝ q✝ : Prop\np' q' : α → Prop\np q : ℕ\n⊢ ¬sorry\n## Action:\n  rw [g]"
"## Tactic State A:\n⊢ True\n## Tactic State B:\n⊢ True\n## Action:\n  success_if_fail_with_msg \"no goals to be solved\" trivial; trivial"
"## Tactic State A:\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial"
"## Tactic State A:\n⊢ ℕ → ℕ → True\n## Tactic State B:\n⊢ ℕ → ℕ → True\n## Action:\n  success_if_fail_with_msg \"no goals to be solved\""
"## Tactic State A:\n⊢ ℕ → ℕ → True\n## Tactic State B:\na✝¹ a✝ : ℕ\n⊢ True\n## Action:\n    intro"
"## Tactic State A:\na✝¹ a✝ : ℕ\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    intro"
"## Tactic State A:\n⊢ ℕ → ℕ → True\n## Tactic State B:\n⊢ ℕ → ℕ → True\n## Action:\n  success_if_fail_with_msg \"no goals\""
"## Tactic State A:\nn : ℕ\n⊢ True\n## Tactic State B:\nn : ℕ\n⊢ True\n## Action:\n  success_if_fail_with_msg (err true) rw [Nat.le_succ n]"
"## Tactic State A:\n⊢ True\n## Tactic State B:\n⊢ True\n## Action:\n  success_if_fail_with_msg (err false) fail \"not that message\""
"## Tactic State A:\n⊢ True\n## Tactic State B:\n⊢ True\n## Action:\n  success_if_fail_with_msg \"tactic 'trivial' succeeded, but was expected to fail\""
"## Tactic State A:\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    success_if_fail_with_msg \"message\" trivial"
"## Tactic State A:\n⊢ True\n## Tactic State B:\n⊢ True\n## Action:\n  success_if_fail_with_msg err₂"
"## Tactic State A:\na b : ℕ+\nh : a < b\n⊢ 1 < b\n## Tactic State B:\na b : ℕ+\na✝¹ : 0 < ↑a\na✝ : 0 < ↑b\nh : ↑a < ↑b\n⊢ 1 < ↑b\n## Action:\n  pnat_to_nat"
"## Tactic State A:\na b : ℕ+\na✝¹ : 0 < ↑a\na✝ : 0 < ↑b\nh : ↑a < ↑b\n⊢ 1 < ↑b\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  omega"
"## Tactic State A:\na b : ℕ+\nh : a = b\n⊢ b = a\n## Tactic State B:\na✝ b : ℕ+\nh : a✝ = b\na : ℤ := 42\n⊢ b = a✝\n## Action:\n  -- to test if the tactic works with inaccessible names"
"## Tactic State A:\na✝ b : ℕ+\nh : a✝ = b\na : ℤ := 42\n⊢ b = a✝\n## Tactic State B:\na✝² b : ℕ+\na : ℤ := 42\na✝¹ : 0 < ↑a✝²\na✝ : 0 < ↑b\nh : ↑a✝² = ↑b\n⊢ ↑b = ↑a✝²\n## Action:\n  let a : ℤ := 42"
"## Tactic State A:\na✝² b : ℕ+\na : ℤ := 42\na✝¹ : 0 < ↑a✝²\na✝ : 0 < ↑b\nh : ↑a✝² = ↑b\n⊢ ↑b = ↑a✝²\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  pnat_to_nat"
"## Tactic State A:\na b : ℕ+\nh : a < b\n⊢ 1 < b\n## Tactic State B:\na b : ℕ+\nh : a < b\nthis : 0 < ↑a\n⊢ 1 < b\n## Action:\n  have := a.pos"
"## Tactic State A:\na b : ℕ+\nh : a < b\nthis : 0 < ↑a\n⊢ 1 < b\n## Tactic State B:\na b : ℕ+\nthis : 0 < ↑a\na✝ : 0 < ↑b\nh : ↑a < ↑b\n⊢ 1 < ↑b\n## Action:\n  pnat_to_nat"
"## Tactic State A:\na b : ℕ+\nthis : 0 < ↑a\na✝ : 0 < ↑b\nh : ↑a < ↑b\n⊢ 1 < ↑b\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  omega"
"## Tactic State A:\nR : Type u_1\ninst✝ : Ring R\na b c : R\n⊢ a + -b = -b + a\n## Tactic State B:\nR : Type u_1\ninst✝ : Ring R\na b c : R\n⊢ a + -b = -b + a\n## Action:\n  -- This should print \"`noncomm_ring` simp lemmas don't apply; try `abel` instead\""
"## Tactic State A:\nR : Type u_1\ninst✝ : Ring R\na b c : R\n⊢ a + -b = -b + a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  -- but I don't know how to test for this:"
"## Tactic State A:\nR : Type u_1\ninst✝ : Ring R\na b c : R\nh : ∀ (a : R), 2 • a = 0\n⊢ (a + 1) ^ 2 = a ^ 2 + 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  noncomm_ring [h]"
"## Tactic State A:\nR : Type u_1\ninst✝ : Ring R\na b c : R\nh : a = b\nh2 : a = c\n⊢ a = c\n## Tactic State B:\nR : Type u_1\ninst✝ : Ring R\na b c : R\nh : a = b\nh2 : a = c\n⊢ a = c\n## Action:\n  fail_if_success noncomm_ring [h]"
"## Tactic State A:\nR : Type u_1\ninst✝ : Ring R\na b c : R\nh : a = b\nh2 : a = c\n⊢ a = c\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  noncomm_ring [h2]"
"## Tactic State A:\ndelete_this : ℕ\n_delete_this_dep : delete_this = delete_this\n⊢ ℕ\n## Tactic State B:\n⊢ ℕ\n## Action:\n  clear! delete_this"
"## Tactic State A:\n⊢ ℕ\n## Tactic State B:\n⊢ ℕ\n## Action:\n  fail_if_success assumption"
"## Tactic State A:\n⊢ ℕ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact 0"
"## Tactic State A:\ndelete_this : Inhabited ℕ\n⊢ Inhabited ℕ\n## Tactic State B:\n⊢ Inhabited ℕ\n## Action:\n  clear! delete_this"
"## Tactic State A:\n⊢ Inhabited ℕ\n## Tactic State B:\n⊢ Inhabited ℕ\n## Action:\n  fail_if_success assumption"
"## Tactic State A:\n⊢ Inhabited ℕ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  infer_instance"
"## Tactic State A:\ndelete_this delete_this2 : ℕ\n_delete_this_dep : delete_this = delete_this2\n⊢ ℕ\n## Tactic State B:\n⊢ ℕ\n## Action:\n  clear! delete_this delete_this2"
"## Tactic State A:\n⊢ ℕ\n## Tactic State B:\n⊢ ℕ\n## Action:\n  fail_if_success assumption"
"## Tactic State A:\n⊢ ℕ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact 0"
"## Tactic State A:\ndelete_this : ℕ\ndont_delete_this : ℤ\n⊢ ℕ\n## Tactic State B:\ndont_delete_this : ℤ\n⊢ ℕ\n## Action:\n  clear! delete_this"
"## Tactic State A:\ndont_delete_this : ℤ\n⊢ ℕ\n## Tactic State B:\ndont_delete_this : ℤ\n⊢ ℕ\n## Action:\n  fail_if_success assumption"
"## Tactic State A:\ndont_delete_this : ℤ\n⊢ ℕ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact dont_delete_this.toNat"
"## Tactic State A:\ndont_delete_this : ℕ\ndelete_this : dont_delete_this = dont_delete_this\n⊢ ℕ\n## Tactic State B:\ndont_delete_this : ℕ\n⊢ ℕ\n## Action:\n  clear! delete_this"
"## Tactic State A:\ndont_delete_this : ℕ\n⊢ ℕ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  assumption"
"## Tactic State A:\n⊢ True\n## Tactic State B:\n⊢ True\n## Action:\n  type_check Nat -- Type"
"## Tactic State A:\n⊢ True\n## Tactic State B:\n⊢ True\n## Action:\n  type_check Bool.true -- Bool"
"## Tactic State A:\n⊢ True\n## Tactic State B:\n⊢ True\n## Action:\n  type_check nat_lit 1 -- Nat"
"## Tactic State A:\n⊢ True\n## Tactic State B:\n⊢ True\n## Action:\n  type_check (1 : Nat) -- Nat"
"## Tactic State A:\n⊢ True\n## Tactic State B:\n⊢ True\n## Action:\n  type_check (True :) -- Prop"
"## Tactic State A:\n⊢ True\n## Tactic State B:\n⊢ True\n## Action:\n  type_check ∀ x y : Nat, x = y -- Prop"
"## Tactic State A:\n⊢ True\n## Tactic State B:\n⊢ True\n## Action:\n  type_check fun x : Nat => 2 * x + 1 -- Nat -> Nat"
"## Tactic State A:\n⊢ True\n## Tactic State B:\n⊢ True\n## Action:\n  type_check [1]"
"## Tactic State A:\n⊢ True\n## Tactic State B:\n⊢ True\n## Action:\n  fail_if_success type_check wrong"
"## Tactic State A:\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial"
"## Tactic State A:\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  run_tac"
"## Tactic State A:\n⊢ (fun x => x) 0 = 1\n## Tactic State B:\n⊢ (fun x => x) 0 = 1\n## Action:\n  change? 0 = _  -- change 0 = 1"
"## Tactic State A:\n⊢ (fun x => x) 0 = 1\n## Tactic State B:\n⊢ (fun x => x) 0 = 1\n## Action:\n  change?        -- change (fun x ↦ x) 0 = 1"
"## Tactic State A:\n⊢ (fun x => x) 0 = 1\n## Tactic State B:\n⊢ (fun x => x) 0 = 1\n## Action:\n  change? _      -- change (fun x ↦ x) 0 = 1"
"## Tactic State A:\n⊢ (fun x => x) 0 = 1\n## Tactic State B:\n⊢ (fun x => x) 0 = 1\n## Action:\n  change? 1 = 0"
"## Tactic State A:\nα : Sort ?u.19\nf : (x : ℕ) → x = x → α\n⊢ α\n## Tactic State B:\ncase a\nα : Sort ?u.19\nf : (x : ℕ) → x = x → α\n⊢ ?x = ?x\n---\ncase x\nα : Sort ?u.19\nf : (x : ℕ) → x = x → α\n⊢ ℕ\n## Action:\n  apply (config := {}) f"
"## Tactic State A:\ncase a\nα : Sort ?u.19\nf : (x : ℕ) → x = x → α\n⊢ ?x = ?x\n---\ncase x\nα : Sort ?u.19\nf : (x : ℕ) → x = x → α\n⊢ ℕ\n## Tactic State B:\ncase x\nα : Sort ?u.19\nf : (x : ℕ) → x = x → α\n⊢ ℕ\n## Action:\n  apply rfl"
"## Tactic State A:\ncase x\nα : Sort ?u.19\nf : (x : ℕ) → x = x → α\n⊢ ℕ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  apply 1"
"## Tactic State A:\nα : Sort ?u.19\nf : (x : ℕ) → x = x → α\n⊢ α\n## Tactic State B:\ncase a\nα : Sort ?u.19\nf : (x : ℕ) → x = x → α\n⊢ ?x = ?x\n## Action:\n  apply (config := { newGoals := .nonDependentOnly }) f"
"## Tactic State A:\ncase a\nα : Sort ?u.19\nf : (x : ℕ) → x = x → α\n⊢ ?x = ?x\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  apply @rfl _ 1"
"## Tactic State A:\nα : Sort ?u.19\nf : (x : ℕ) → x = x → α\n⊢ α\n## Tactic State B:\ncase x\nα : Sort ?u.19\nf : (x : ℕ) → x = x → α\n⊢ ℕ\n---\ncase a\nα : Sort ?u.19\nf : (x : ℕ) → x = x → α\n⊢ ?x = ?x\n## Action:\n  apply (config := { newGoals := .all }) f"
"## Tactic State A:\ncase x\nα : Sort ?u.19\nf : (x : ℕ) → x = x → α\n⊢ ℕ\n---\ncase a\nα : Sort ?u.19\nf : (x : ℕ) → x = x → α\n⊢ ?x = ?x\n## Tactic State B:\ncase a\nα : Sort ?u.19\nf : (x : ℕ) → x = x → α\n⊢ 1 = 1\n## Action:\n  apply 1"
"## Tactic State A:\ncase a\nα : Sort ?u.19\nf : (x : ℕ) → x = x → α\n⊢ 1 = 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  apply rfl"
"## Tactic State A:\nα : Type\nA B C D E : Set α\nhAB : A ⊆ B\nhBC : B ⊆ C\nhCD : C ⊆ D\nhDE : D = E\nhEA : E ⊆ A\n⊢ (Aᶜ ∩ B ∪ (C ∩ Bᶜ)ᶜ ∩ (Eᶜ ∪ A))ᶜ ∩ (B ∪ Eᶜᶜ)ᶜ = (Dᶜ ∩ C ∪ (B ∩ Aᶜ)ᶜ ∩ (Eᶜ ∪ E))ᶜ ∩ (D ∪ Cᶜᶜ)ᶜ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n"
"## Tactic State A:\nα : Type\nA B C D E : Set α\nhAC : Disjoint A C\nhBC : Disjoint B C\n⊢ A ∪ C ⊆ B ∪ C ↔ A ⊆ B\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  constructor <;> (intro; tauto_set)"
"## Tactic State A:\n⊢ (fun₀ | 1 => 3) 1 = 3\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  simp"
"## Tactic State A:\nan bn cn dn : ℕ\naz bz cz dz : ℤ\naq bq cq dq : ℚ\nar br cr dr : ℝ\nac bc cc dc : ℂ\nh : ↑(an + bn) = ↑an + ↑bn\n⊢ True\n## Tactic State B:\nan bn cn dn : ℕ\naz bz cz dz : ℤ\naq bq cq dq : ℚ\nar br cr dr : ℝ\nac bc cc dc : ℂ\nh : ↑an + ↑bn = ↑an + ↑bn\n⊢ True\n## Action:\n  push_cast at h"
"## Tactic State A:\nan bn cn dn : ℕ\naz bz cz dz : ℤ\naq bq cq dq : ℚ\nar br cr dr : ℝ\nac bc cc dc : ℂ\nh : ↑an + ↑bn = ↑an + ↑bn\n⊢ True\n## Tactic State B:\nan bn cn dn : ℕ\naz bz cz dz : ℤ\naq bq cq dq : ℚ\nar br cr dr : ℝ\nac bc cc dc : ℂ\nh : ↑an + ↑bn = ↑an + ↑bn\n⊢ True\n## Action:\n  guard_hyp h : (an : ℤ) + (bn : ℤ) = (an : ℤ) + (bn : ℤ)"
"## Tactic State A:\nan bn cn dn : ℕ\naz bz cz dz : ℤ\naq bq cq dq : ℚ\nar br cr dr : ℝ\nac bc cc dc : ℂ\nh : ↑an + ↑bn = ↑an + ↑bn\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial"
"## Tactic State A:\nan bn cn dn : ℕ\naz bz cz dz : ℤ\naq bq cq dq : ℚ\nar br cr dr : ℝ\nac bc cc dc : ℂ\nh : ↑(an * bn) = ↑an * ↑bn\n⊢ True\n## Tactic State B:\nan bn cn dn : ℕ\naz bz cz dz : ℤ\naq bq cq dq : ℚ\nar br cr dr : ℝ\nac bc cc dc : ℂ\nh : ↑an * ↑bn = ↑an * ↑bn\n⊢ True\n## Action:\n  push_cast at h"
"## Tactic State A:\nan bn cn dn : ℕ\naz bz cz dz : ℤ\naq bq cq dq : ℚ\nar br cr dr : ℝ\nac bc cc dc : ℂ\nh : ↑an * ↑bn = ↑an * ↑bn\n⊢ True\n## Tactic State B:\nan bn cn dn : ℕ\naz bz cz dz : ℤ\naq bq cq dq : ℚ\nar br cr dr : ℝ\nac bc cc dc : ℂ\nh : ↑an * ↑bn = ↑an * ↑bn\n⊢ True\n## Action:\n  guard_hyp h : (an : ℤ) * (bn : ℤ) = (an : ℤ) * (bn : ℤ)"
"## Tactic State A:\nan bn cn dn : ℕ\naz bz cz dz : ℤ\naq bq cq dq : ℚ\nar br cr dr : ℝ\nac bc cc dc : ℂ\nh : ↑an * ↑bn = ↑an * ↑bn\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial"
"## Tactic State A:\nan bn cn dn : ℕ\naz bz cz dz : ℤ\naq bq cq dq : ℚ\nar br cr dr : ℝ\nac bc cc dc : ℂ\n⊢ ↑↑↑an * ↑bq + ↑↑cq ^ dn = ↑an * ↑↑bq + ↑cq ^ dn\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  norm_cast"
"## Tactic State A:\nan bn cn dn : ℕ\naz bz cz dz : ℤ\naq bq cq dq : ℚ\nar br cr dr : ℝ\nac bc cc dc : ℂ\n⊢ ↑↑an < ↑bq ∧ ↑cr ^ 2 = ↑dz ↔ ↑an < bq ∧ ↑cr ^ 2 = ↑dz\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  norm_cast"
"## Tactic State A:\nan bn cn dn : ℕ\naz bz cz dz : ℤ\naq bq cq dq : ℚ\nar br cr dr : ℝ\nac bc cc dc : ℂ\nx✝ : Sort ?u.122\np : x✝\n⊢ sorry\n## Tactic State B:\nan bn cn dn : ℕ\naz bz cz dz : ℤ\naq bq cq dq : ℚ\nar br cr dr : ℝ\nac bc cc dc : ℂ\nx✝ : Sort ?u.122\np : x✝\n⊢ sorry\n## Action:\n  norm_cast"
"## Tactic State A:\nan bn cn dn : ℕ\naz bz cz dz : ℤ\naq bq cq dq : ℚ\nar br cr dr : ℝ\nac bc cc dc : ℂ\nx✝ : Sort ?u.122\np : x✝\n⊢ sorry\n## Tactic State B:\nan bn cn dn : ℕ\naz bz cz dz : ℤ\naq bq cq dq : ℚ\nar br cr dr : ℝ\nac bc cc dc : ℂ\nx✝ : Sort ?u.122\np : x✝\n⊢ sorry\n## Action:\n  guard_target = p 42"
"## Tactic State A:\nan bn cn dn : ℕ\naz bz cz dz : ℤ\naq bq cq dq : ℚ\nar br cr dr : ℝ\nac bc cc dc : ℂ\nx✝ : Sort ?u.122\np : x✝\n⊢ sorry\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact ⟨⟩"
"## Tactic State A:\nan bn cn dn : ℕ\naz bz cz dz : ℤ\naq bq cq dq : ℚ\nar br cr dr : ℝ\nac bc cc dc : ℂ\nk x y : ℕ\n⊢ ↑x * ↑x + ↑y * ↑y - ↑((x * y + 1) * k) = ↑y * ↑y - ↑k * ↑x * ↑y + (↑x * ↑x - ↑k)\n## Tactic State B:\nan bn cn dn : ℕ\naz bz cz dz : ℤ\naq bq cq dq : ℚ\nar br cr dr : ℝ\nac bc cc dc : ℂ\nk x y : ℕ\n⊢ ↑x * ↑x + ↑y * ↑y - (↑x * ↑y + 1) * ↑k = ↑y * ↑y - ↑k * ↑x * ↑y + (↑x * ↑x - ↑k)\n## Action:\n  push_cast"
"## Tactic State A:\nan bn cn dn : ℕ\naz bz cz dz : ℤ\naq bq cq dq : ℚ\nar br cr dr : ℝ\nac bc cc dc : ℂ\nk x y : ℕ\n⊢ ↑x * ↑x + ↑y * ↑y - (↑x * ↑y + 1) * ↑k = ↑y * ↑y - ↑k * ↑x * ↑y + (↑x * ↑x - ↑k)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  ring"
"## Tactic State A:\nan bn cn dn : ℕ\naz bz cz dz : ℤ\naq bq cq dq : ℚ\nar br cr dr : ℝ\nac bc cc dc : ℂ\nk x y : ℕ\nh : ↑(x + y + k) = 0\n⊢ x + y + k = 0\n## Tactic State B:\nan bn cn dn : ℕ\naz bz cz dz : ℤ\naq bq cq dq : ℚ\nar br cr dr : ℝ\nac bc cc dc : ℂ\nk x y : ℕ\nh : ↑x + ↑y + ↑k = 0\n⊢ x + y + k = 0\n## Action:\n  push_cast at h"
"## Tactic State A:\nan bn cn dn : ℕ\naz bz cz dz : ℤ\naq bq cq dq : ℚ\nar br cr dr : ℝ\nac bc cc dc : ℂ\nk x y : ℕ\nh : ↑x + ↑y + ↑k = 0\n⊢ x + y + k = 0\n## Tactic State B:\nan bn cn dn : ℕ\naz bz cz dz : ℤ\naq bq cq dq : ℚ\nar br cr dr : ℝ\nac bc cc dc : ℂ\nk x y : ℕ\nh : ↑x + ↑y + ↑k = 0\n⊢ x + y + k = 0\n## Action:\n  guard_hyp h : (x : ℤ) + y + k = 0"
"## Tactic State A:\nan bn cn dn : ℕ\naz bz cz dz : ℤ\naq bq cq dq : ℚ\nar br cr dr : ℝ\nac bc cc dc : ℂ\nk x y : ℕ\nh : ↑x + ↑y + ↑k = 0\n⊢ x + y + k = 0\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  assumption_mod_cast"
"## Tactic State A:\nan bn cn dn : ℕ\naz bz cz dz : ℤ\naq bq cq dq : ℚ\nar br cr dr : ℝ\nac bc cc dc : ℂ\na b : ℕ\nh2 : ↑(a + b + 0) = 10\n⊢ ↑(a + b) = 10\n## Tactic State B:\nan bn cn dn : ℕ\naz bz cz dz : ℤ\naq bq cq dq : ℚ\nar br cr dr : ℝ\nac bc cc dc : ℂ\na b : ℕ\nh2 : ↑(a + b + 0) = 10\n⊢ ↑a + ↑b = 10\n## Action:\n  push_cast"
"## Tactic State A:\nan bn cn dn : ℕ\naz bz cz dz : ℤ\naq bq cq dq : ℚ\nar br cr dr : ℝ\nac bc cc dc : ℂ\na b : ℕ\nh2 : ↑(a + b + 0) = 10\n⊢ ↑a + ↑b = 10\n## Tactic State B:\nan bn cn dn : ℕ\naz bz cz dz : ℤ\naq bq cq dq : ℚ\nar br cr dr : ℝ\nac bc cc dc : ℂ\na b : ℕ\nh2 : ↑a + ↑b = 10\n⊢ ↑a + ↑b = 10\n## Action:\n  push_cast [Int.add_zero] at h2"
"## Tactic State A:\nan bn cn dn : ℕ\naz bz cz dz : ℤ\naq bq cq dq : ℚ\nar br cr dr : ℝ\nac bc cc dc : ℂ\na b : ℕ\nh2 : ↑a + ↑b = 10\n⊢ ↑a + ↑b = 10\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h2"
"## Tactic State A:\n_h g : true = true\n⊢ true = true ∧ true = true\n## Tactic State B:\ncase left\n_h g : true = true\n⊢ true = true\n---\ncase right\n_h g : true = true\n⊢ true = true\n## Action:\n  constructor"
"## Tactic State A:\ncase left\n_h g : true = true\n⊢ true = true\n---\ncase right\n_h g : true = true\n⊢ true = true\n## Tactic State B:\ncase right\n_h g : true = true\n⊢ true = true\n## Action:\n  assumption_mod_cast"
"## Tactic State A:\ncase right\n_h g : true = true\n⊢ true = true\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  assumption_mod_cast"
"## Tactic State A:\n⊢ ∀ (x : ℕ), 2 ∣ x → x < 100\n## Tactic State B:\n⊢ ∀ (x : ℕ), 2 ∣ x → x < 100\n## Action:\n  plausible (config := { randomSeed := some 257, maxSize := 200 })"
"## Tactic State A:\nx : ℕ\n_h : 2 ∣ x\n⊢ true = true\n## Tactic State B:\nx : ℕ\n_h : 2 ∣ x\nthis : x < 100\n⊢ true = true\n## Action:\n  have : x < 100 := by"
"## Tactic State A:\nf : ℤ → ℤ\n_h✝ : Injective f\ng : ℤ → ℤ\n_h : Injective g\ni : ℤ\n⊢ f i = g i\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  plausible (config := { randomSeed := some 257 })"
"## Tactic State A:\nf : ℤ → ℤ\n_h : Injective f\n⊢ Monotone f\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  plausible (config := { randomSeed := some 257 })"
"## Tactic State A:\nf : ℤ → ℤ\n⊢ Injective f\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  plausible (config := { randomSeed := some 257 })"
"## Tactic State A:\nf : ℤ → ℤ\n⊢ Monotone f\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  plausible (config := { randomSeed := some 257 })"
"## Tactic State A:\nf : ℕ →₀ ℕ\n⊢ true = true\n## Tactic State B:\nf : ℕ →₀ ℕ\nthis : f = 0\n⊢ true = true\n## Action:\n  have : f = 0 := by"
"## Tactic State A:\nf : Π₀ (_n : ℕ), ℕ\n⊢ true = true\n## Tactic State B:\nf : Π₀ (_n : ℕ), ℕ\nthis : f.update 0 0 = 0\n⊢ true = true\n## Action:\n  have : f.update 0 0 = 0 := by"
"## Tactic State A:\nn : ℕ\n⊢ true = true\n## Tactic State B:\nn : ℕ\nthis : ∑ f, f () = 0\n⊢ true = true\n## Action:\n  have : ∑ f : Unit → Fin (n + 1), f () = 0 := by"
"## Tactic State A:\nq : ℕ\n⊢ q = 0 ∨ q ≥ 2 ∨ 8 = ∑ k ∈ Finset.range 2, 5 ^ k * (2 * q + 1).choose (2 * k + 1)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  plausible"
"## Tactic State A:\na : ℕ\ninst✝ : Fact (Nat.Prime a)\n⊢ Nat.Prime (a + 1) ∨ Nat.Prime (a + 2)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  plausible (config := { randomSeed := some 257 })"
"## Tactic State A:\nx : ℕ+\n⊢ x ^ 3 < 2 * x ^ 2 + 10\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  plausible (config := { randomSeed := some 257 })"
"## Tactic State A:\na b c d : ℕ\nf : ℕ → ℕ → ℕ\n⊢ a = b → b = c → (d + if b > 0 then a else b) = 0 → f (b + b) b ≠ f (a + c) c → False\n## Tactic State B:\na b c d : ℕ\nf : ℕ → ℕ → ℕ\na✝² : a = b\na✝¹ : b = c\na✝ : (d + if b > 0 then a else b) = 0\nh : f (b + b) b ≠ f (a + c) c\n⊢ False\n## Action:\n  intro _ _ _ h"
"## Tactic State A:\na b c d : ℕ\nf : ℕ → ℕ → ℕ\na✝² : a = b\na✝¹ : b = c\na✝ : (d + if b > 0 then a else b) = 0\nh : f (b + b) b ≠ f (a + c) c\n⊢ False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  run_tac withMainContext do"
"## Tactic State A:\na b : ℕ\nf : ℕ → ℕ\n⊢ a = b → f a = f b\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\na b : ℕ\nf : ℕ → ℕ\n⊢ a = b → f a ≠ f b → False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\na b : ℕ\nf : ℕ → ℕ\n⊢ a = b → f (f a) ≠ f (f b) → False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\na b c : ℕ\nf : ℕ → ℕ\n⊢ a = b → c = b → f (f a) ≠ f (f c) → False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\na b c : ℕ\nf : ℕ → ℕ → ℕ\n⊢ a = b → c = b → f (f a b) a ≠ f (f c c) c → False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\na b c : ℕ\nf : ℕ → ℕ → ℕ\n⊢ a = b → c = b → f (f a b) a = f (f c c) c\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\na b c d : ℕ\n⊢ HEq a b → b = c → HEq c d → HEq a d\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\na b c d : ℕ\n⊢ a = b → b = c → HEq c d → HEq a d\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\na b c d : ℕ\n⊢ a = b → HEq b c → HEq c d → HEq a d\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\na b c d : ℕ\n⊢ HEq a b → HEq b c → c = d → HEq a d\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\na b c d : ℕ\n⊢ HEq a b → b = c → c = d → HEq a d\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\na b c d : ℕ\n⊢ a = b → b = c → c = d → HEq a d\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\na b c d : ℕ\n⊢ a = b → HEq b c → c = d → HEq a d\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\nx✝ : Sort u_1\ng₁ : x✝\na b c : ℕ\n⊢ a = b → HEq sorry sorry\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\nx✝ : Sort u_1\nf₁ : x✝\na b c : ℕ\n⊢ a = b → c = b → sorry = sorry\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\na b c d e x y : ℕ\n⊢ a = b → a = x → b = y → c = d → c = e → c = b → a = e\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\nf : ℕ → ℕ\nx : ℕ\nH1 : f (f (f x)) = x\nH2 : f (f (f (f (f x)))) = x\n⊢ f x = x\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\nx✝ : Sort u_1\ng₂ : x✝\na₁ a₂ b₁ b₂ c d : ℕ\nH₁ : a₁ > b₁\nH₂ : a₂ > b₂\n⊢ a₁ = c → a₂ = c → b₁ = d → d = b₂ → sorry = sorry\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\na₁ a₂ b₁ b₂ c d : ℕ\n⊢ a₁ = c → a₂ = c → b₁ = d → d = b₂ → a₁ + b₁ + a₁ = a₂ + b₂ + c\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\na b c : Prop\n⊢ (a ↔ b) → (a ∧ (c ∨ b) ↔ b ∧ (c ∨ a))\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\na b c d : Prop\nd₁ : Decidable a\nd₂ : Decidable b\nd₃ : Decidable c\nd₄ : Decidable d\n⊢ (a ↔ b) → (c ↔ d) → ((if a ∧ c then True else False) ↔ if b ∧ d then True else False)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\na b c d : Prop\nx y z : ℕ\nd₁ : Decidable a\nd₂ : Decidable b\nd₃ : Decidable c\nd₄ : Decidable d\n⊢ (a ↔ b) → (c ↔ d) → x = y → (if a ∧ c ∧ a then x else y) = if b ∧ d ∧ b then y else x\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\na b : ℕ\n⊢ a = b ↔ a = b\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\na b : ℕ\n⊢ (a = b) = (b = a)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\na b : ℕ\n⊢ HEq (a = b) (b = a)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\np : ℕ → ℕ → Prop\nf : ℕ → ℕ\na b c d : ℕ\n⊢ p (f a) (f b) → a = c → b = d → b = c → p (f c) (f c)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\np : ℕ → ℕ → Prop\na b c d : ℕ\n⊢ p a b → a = c → b = d → p c d\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\np : ℕ → ℕ → Prop\nf : ℕ → ℕ\na b c d : ℕ\n⊢ p (f (f (f (f (f (f a)))))) (f (f (f (f (f (f b)))))) →\n    a = c → b = d → b = c → p (f (f (f (f (f (f c)))))) (f (f (f (f (f (f c))))))\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\nx✝ : Sort ?u.13\nR : x✝\na b c : ℕ\n⊢ a = b → sorry → sorry\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\na b c : Prop\n⊢ a = b → b = c → (a ↔ c)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\na b c : Prop\n⊢ a = b → HEq b c → (a ↔ c)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\na b c : ℕ\n⊢ HEq a b → b = c → HEq a c\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\na b c : ℕ\n⊢ HEq a b → b = c → a = c\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\na b c d : ℕ\n⊢ HEq a b → HEq b c → HEq c d → a = d\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\na b c d : ℕ\n⊢ HEq a b → b = c → HEq c d → a = d\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\na b c : Prop\n⊢ a = b → b = c → (a ↔ c)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\na b c : Prop\n⊢ HEq a b → b = c → (a ↔ c)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\na b c d : Prop\n⊢ HEq a b → HEq b c → HEq c d → (a ↔ d)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\na b c : ℕ\nf : ℕ → ℕ\n⊢ HEq a b → b = c → HEq (f a) (f c)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\na b c : ℕ\nf : ℕ → ℕ\n⊢ HEq a b → b = c → f a = f c\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\na b c d : ℕ\nf : ℕ → ℕ\n⊢ HEq a b → b = c → HEq c (f d) → f a = f (f d)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\nx✝ : Sort u_1\napp : x✝\nn1 n2 n3 : ℕ\nv1 w1 : List.Vector ℕ n1\nw1' : List.Vector ℕ n3\nv2 w2 : List.Vector ℕ n2\n⊢ n1 = n3 → v1 = w1 → HEq w1 w1' → v2 = w2 → HEq sorry sorry\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\nx✝ : Sort u_1\napp : x✝\nn1 n2 n3 : ℕ\nv1 w1 : List.Vector ℕ n1\nw1' : List.Vector ℕ n3\nv2 w2 : List.Vector ℕ n2\n⊢ HEq n1 n3 → v1 = w1 → HEq w1 w1' → HEq v2 w2 → HEq sorry sorry\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\nx✝ : Sort u_1\napp : x✝\nn1 n2 n3 : ℕ\nv1 w1 v : List.Vector ℕ n1\nw1' : List.Vector ℕ n3\nv2 w2 w : List.Vector ℕ n2\n⊢ HEq n1 n3 → v1 = w1 → HEq w1 w1' → HEq v2 w2 → HEq sorry sorry → sorry = sorry\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\nA : Sort u_1\nx✝ : Sort u_2\nmk_B1 : x✝\n⊢ ∀ (a a' : A), HEq a a' → HEq ?m.35 ?m.37\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\nA : Sort u_1\nx✝ : Sort u_2\nmk_B2 : x✝\n⊢ ∀ (a a' : A), HEq a a' → HEq ?m.35 ?m.37\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\nA : Sort u_1\nx✝ : Sort u_2\nB : x✝\n⊢ ∀ (a a' : A) (h : a = a') (b : sorry), HEq ?m.34 b\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\nα✝ : Sort u_1\na1 : α✝\nx✝¹ : Sort u_2\ny : x✝¹\nx✝ : Sort u_3\nmk_B1 : x✝\n⊢ HEq a1 sorry → HEq sorry sorry\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\nα✝¹ : Sort u_1\na1 : α✝¹\nx✝² : Sort u_2\nx : x✝²\nα✝ : Sort u_3\na2 : α✝\nx✝¹ : Sort u_4\ny : x✝¹\nx✝ : Sort u_5\nmk_B1 : x✝\n⊢ HEq a1 sorry → HEq a2 sorry → HEq sorry sorry\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\nα✝ : Sort u_1\na1 : α✝\nx✝³ : Sort u_2\ny : x✝³\nx✝² : Sort u_3\nmk_B1 : x✝²\nx✝¹ : Sort u_4\nmk_B2 : x✝¹\nx✝ : Sort u_5\nf : x✝\n⊢ HEq a1 sorry → HEq sorry sorry → HEq sorry sorry\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\nα✝ : Sort u_1\na1 : α✝\nx✝³ : Sort u_2\ny : x✝³\nx✝² : Sort u_3\ntr_B : x✝²\nx✝¹ : Sort u_4\nmk_B2 : x✝¹\nx✝ : Sort u_5\nf : x✝\n⊢ HEq a1 sorry → HEq sorry sorry → HEq sorry sorry\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\nα✝ : Sort u_1\na1 : α✝\nx✝³ : Sort u_2\ny : x✝³\nx✝² : Sort u_3\nmk_B1 : x✝²\nx✝¹ : Sort u_4\nmk_B2 : x✝¹\nx✝ : Sort u_5\ng : x✝\n⊢ HEq a1 sorry → HEq sorry sorry → HEq sorry sorry\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\nα✝ : Sort u_1\na1 : α✝\nx✝³ : Sort u_2\ny : x✝³\nx✝² : Sort u_3\ntr_B : x✝²\nx✝¹ : Sort u_4\nmk_B2 : x✝¹\nx✝ : Sort u_5\ng : x✝\n⊢ HEq a1 sorry → HEq sorry sorry → HEq sorry sorry\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\nα✝² : Sort u_1\na1 : α✝²\nx✝⁷ : Sort u_2\ny : x✝⁷\nα✝¹ : Sort u_3\na2 : α✝¹\nx✝⁶ : Sort u_4\nz : x✝⁶\nα✝ : Sort u_5\na3 : α✝\nx✝⁵ : Sort u_6\nx : x✝⁵\nx✝⁴ : Sort u_7\nmk_B1 : x✝⁴\nx✝³ : Sort u_8\nmk_B2 : x✝³\nx✝² : Sort u_9\nf : x✝²\nx✝¹ : Sort u_10\nf' : x✝¹\nx✝ : Sort u_11\ng : x✝\n⊢ HEq a1 sorry → HEq a2 sorry → HEq a3 sorry → HEq sorry sorry → HEq sorry sorry → HEq sorry sorry\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\nα✝² : Sort u_1\na1 : α✝²\nx✝⁷ : Sort u_2\ny : x✝⁷\nα✝¹ : Sort u_3\na2 : α✝¹\nx✝⁶ : Sort u_4\nz : x✝⁶\nα✝ : Sort u_5\na3 : α✝\nx✝⁵ : Sort u_6\nx : x✝⁵\nx✝⁴ : Sort u_7\nmk_B1 : x✝⁴\nx✝³ : Sort u_8\nmk_B2 : x✝³\nx✝² : Sort u_9\nf : x✝²\nx✝¹ : Sort u_10\nf' : x✝¹\nx✝ : Sort u_11\ng : x✝\n⊢ HEq a1 sorry → HEq a2 sorry → HEq a3 sorry → HEq sorry sorry → HEq sorry sorry → HEq sorry sorry → HEq sorry sorry\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\nα✝² : Sort u_1\na1 : α✝²\nx✝⁷ : Sort u_2\ny : x✝⁷\nα✝¹ : Sort u_3\na2 : α✝¹\nx✝⁶ : Sort u_4\nz : x✝⁶\nα✝ : Sort u_5\na3 : α✝\nx✝⁵ : Sort u_6\nx : x✝⁵\nx✝⁴ : Sort u_7\ntr_B : x✝⁴\nx✝³ : Sort u_8\nmk_B2 : x✝³\nx✝² : Sort u_9\nf : x✝²\nx✝¹ : Sort u_10\nf' : x✝¹\nx✝ : Sort u_11\ng : x✝\n⊢ HEq a1 sorry → HEq a2 sorry → HEq a3 sorry → HEq sorry sorry → HEq sorry sorry → HEq sorry sorry → HEq sorry sorry\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\na b c a' b' c' : ℕ\n⊢ a = a' → b = b' → c = c' → a + b + c + a = a' + b' + c' + a'\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\na b : Unit\n⊢ a = b\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\na b : ℕ\nh₁ : a = 0\nh₂ : b = 0\n⊢ a = b → HEq h₁ h₂\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\nx✝ : Sort u_1\ninv' : x✝\na b : ℕ\nh₁ : a ≠ 0\nh₂ : b ≠ 0\n⊢ a = b → sorry = sorry\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\nC : ℕ → Type\nf : (n : ℕ) → C n → C n\nn m : ℕ\nc : C n\nd : C m\n⊢ HEq (f n) (f m) → HEq c d → HEq n m → HEq (f n c) (f m d)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\nf g : {α : Type} → α → α → α\nh : ℕ → ℕ\na b : ℕ\n⊢ h = f a → h b = f a b\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\nf g : {α : Type} → α → (b : α) → { x // x ≠ b }\nh : (b : ℕ) → { x // x ≠ b }\na b₁ b₂ : ℕ\n⊢ h = f a → b₁ = b₂ → HEq (h b₁) (f a b₂)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\nf : ℕ → ℕ → ℕ\na b c d : ℕ\n⊢ c = d → f a = f b → f a c = f b d\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\nf : ℕ → ℕ → ℕ\na b c d : ℕ\n⊢ HEq c d → HEq (f a) (f b) → HEq (f a c) (f b d)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\na b c : ℕ\nf : ℕ → ℕ\n⊢ f (a + b + c) = f (c + b + a)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\na b c : ℕ\nf : ℕ → ℕ\n⊢ a + b = c → f (c + c) = f (a + b + c)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\na b c d : ℕ\nf : ℕ → ℕ → ℕ\n⊢ b + a = d → f (a + b + c) a = f (c + d) a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\na b c d e : ℕ\nf : ℕ → ℕ → ℕ\n⊢ b + a = d → b + c = e → f (a + b + c) (a + b + c) = f (c + d) (a + e)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\na b c d e : ℕ\nf : ℕ → ℕ → ℕ\n⊢ b + a = d + d → b + c = e + e → f (a + b + c) (a + b + c) = f (c + d + d) (e + a + e)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\nα : Type u\nop : α → α → α\ninst✝¹ : Std.Associative op\ninst✝ : Std.Commutative op\na b c d e : α\nf : α → α → α\n⊢ op b a = op d d → op b c = op e e → f (op a (op b c)) (op (op a b) c) = f (op (op c d) d) (op e (op a e))\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\nα✝ : Type u\nop : α✝ → α✝ → α✝\ninst✝¹ : Std.Associative op\ninst✝ : Std.Commutative op\nα : Type u\na b c d₁ d₂ e₁ e₂ : Set α\nf : Set α → Set α → Set α\n⊢ b ∪ a = d₁ ∪ d₂ → b ∪ c = e₂ ∪ e₁ → f (a ∪ b ∪ c) (a ∪ b ∪ c) = f (c ∪ d₂ ∪ d₁) (e₂ ∪ a ∪ e₁)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\nx1 x2 x3 x4 x5 x6 : α\n⊢ x1 * x4 = x1 → x3 * x6 = x5 * x5 → x5 = x4 → x6 = x2 → x1 = x1 * (x6 * x3)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\ny1 y2 x2 x3 x4 x5 x6 : α\n⊢ (y1 + y2) * x4 = y2 + y1 → x3 * x6 = x5 * x5 → x5 = x4 → x6 = x2 → y2 + y1 = (y1 + y2) * (x6 * x3)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\ny1 y2 y3 x2 x3 x4 x5 x6 : α\n⊢ (y1 + y2) * x4 = y3 + y1 → x3 * x6 = x5 * x5 → x5 = x4 → x6 = x2 → y2 = y3 → y2 + y1 = (y1 + y3) * (x6 * x3)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na b : ℕ\ns t : List ℕ\n⊢ a :: s = b :: t → a ≠ b → False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na b : ℕ\ns t : List ℕ\n⊢ a :: s = b :: t → t ≠ s → False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na c b : ℕ\ns t : List ℕ\n⊢ a :: s = b :: t → a ≠ c → c = b → False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na c b : ℕ\ns t : List ℕ\n⊢ a :: a :: s = a :: b :: t → a ≠ c → c = b → False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na b : ℕ\ns t r : List ℕ\n⊢ a :: s = r → r = b :: t → a ≠ b → False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na b : ℕ\ns t r : List ℕ\n⊢ a :: s = r → r = b :: t → a = b\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na b : ℕ\ns t r : List ℕ\n⊢ List.cons a = List.cons b → a = b\n## Tactic State B:\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na b : ℕ\ns t r : List ℕ\nh1 : List.cons a = List.cons b\n⊢ a = b\n## Action:\n  intro h1"
"## Tactic State A:\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na b : ℕ\ns t r : List ℕ\nh1 : List.cons a = List.cons b\n⊢ a = b\n## Tactic State B:\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na b : ℕ\ns t r : List ℕ\nh1 : List.cons a = List.cons b\n⊢ a = b\n## Action:\n  /- In the current implementation, `cc` does not \"complete\" partially applied"
"## Tactic State A:\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na b : ℕ\ns t r : List ℕ\nh1 : List.cons a = List.cons b\n⊢ a = b\n## Tactic State B:\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na b : ℕ\ns t r : List ℕ\nh1 : List.cons a = List.cons b\nh : [a] = [b]\n⊢ a = b\n## Action:\n     constructor applications. So, the following one should fail. -/"
"## Tactic State A:\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na b : ℕ\ns t r : List ℕ\nh1 : List.cons a = List.cons b\nh : [a] = [b]\n⊢ a = b\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  try cc"
"## Tactic State A:\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na b : ℕ\n⊢ sorry = sorry → False\n## Tactic State B:\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na b : ℕ\nh1 : sorry = sorry\n⊢ False\n## Action:\n  intro h1"
"## Tactic State A:\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na b : ℕ\nh1 : sorry = sorry\n⊢ False\n## Tactic State B:\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na b : ℕ\nh1 : sorry = sorry\n⊢ False\n## Action:\n  /- In the current implementation, `cc` does not \"complete\" partially applied"
"## Tactic State A:\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na b : ℕ\nh1 : sorry = sorry\n⊢ False\n## Tactic State B:\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na b : ℕ\nh1 : sorry = sorry\n⊢ False\n## Action:\n     constructor applications. So, the following one should fail. -/"
"## Tactic State A:\nα✝² : Type u\nop : α✝² → α✝² → α✝²\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝¹ α✝ : Type u\ninst✝ : CommRing α✝\nx✝ : Sort u_1\nVec : x✝\nα : Type u\na b c d : α\nn : ℕ\ns : sorry\nt : sorry\n⊢ sorry = sorry → a ≠ b → False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\nα✝² : Type u\nop : α✝² → α✝² → α✝²\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝¹ α✝ : Type u\ninst✝ : CommRing α✝\nx✝ : Sort u_1\nVec : x✝\nα : Type u\na b c d : α\nn : ℕ\ns : sorry\nt : sorry\n⊢ sorry = sorry → t ≠ s → False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\nα✝² : Type u\nop : α✝² → α✝² → α✝²\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝¹ α✝ : Type u\ninst✝ : CommRing α✝\nx✝ : Sort u_1\nVec : x✝\nα : Type u\na b c d : α\nn : ℕ\ns : sorry\nt : sorry\n⊢ sorry = sorry → b ≠ c → c = a → False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na b c d : ℕ\nf : ℕ → ℕ × ℕ\n⊢ (f d).1 ≠ a → f d = (b, c) → b = a → False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na b c : ℕ\nf : ℕ → ℕ\n⊢ (f b, c).1 ≠ f a → f b = f c → a = c → False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na b : ℕ\n⊢ a = 1 → b = 2 → a = b → False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na b c : ℤ\n⊢ a = 1 → c = -2 → a = b → c = b → False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na b : Char\n⊢ a = 'h' → b = 'w' → a = b → False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na b : String\n⊢ a = \"hello\" → b = \"world\" → a = b → False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na b c : String\n⊢ a = c → a = \"hello\" → c = \"world\" → c = b → False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cc"
"## Tactic State A:\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\nx✝ : Sort u_1\ninstOfNatNat' : x✝\n⊢ 0 = 0\n## Tactic State B:\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\nx✝ : Sort u_1\ninstOfNatNat' : x✝\n⊢ 0 = 0\n## Action:\n  cc"
"## Tactic State A:\nx✝ : Sort u_1\ntranspose : x✝\nm : ?m.459\nn : ?m.460\nc : ℕ\n⊢ sorry = fun _j _i => c\n## Tactic State B:\nx✝ : Sort u_1\ntranspose : x✝\nm : ?m.459\nn : ?m.460\nc : ℕ\n⊢ sorry = fun _j _i => c\n## Action:\n  fail_if_success {rw [transpose]}"
"## Tactic State A:\nx✝ : Sort u_1\ntranspose : x✝\nm : ?m.459\nn : ?m.460\nc : ℕ\n⊢ sorry = fun _j _i => c\n## Tactic State B:\nx✝ : Sort u_1\ntranspose : x✝\nm : ?m.459\nn : ?m.460\nc : ℕ\n⊢ sorry = fun _j _i => c\n## Action:\n  fail_if_success {simp [transpose]}"
"## Tactic State A:\nx✝ : Sort u_1\ntranspose : x✝\nm : ?m.459\nn : ?m.460\nc : ℕ\n⊢ sorry = fun _j _i => c\n## Tactic State B:\ncase h.h\nx✝ : Sort u_1\ntranspose : x✝\nm : ?m.459\nn : ?m.460\nc : ℕ\ni : ?m.461 c\nj : ?m.462 c i\n⊢ sorry i j = c\n## Action:\n  funext i j -- the rw below does not work without this line"
"## Tactic State A:\ncase h.h\nx✝ : Sort u_1\ntranspose : x✝\nm : ?m.459\nn : ?m.460\nc : ℕ\ni : ?m.461 c\nj : ?m.462 c i\n⊢ sorry i j = c\n## Tactic State B:\ncase h.h\nx✝ : Sort u_1\ntranspose : x✝\nm : ?m.459\nn : ?m.460\nc : ℕ\ni : ?m.461 c\nj : ?m.462 c i\n⊢ sorry i j = c\n## Action:\n  rw [transpose]"
"## Tactic State A:\nt n : ℕ\n⊢ t = n\n## Tactic State B:\nt n : ℕ\n⊢ t = n\n## Action:\n  rw [t]"
"## Tactic State A:\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nx : α × β × γ\n⊢ True\n## Tactic State B:\ncase mk\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\na : α\nb : β × γ\n⊢ True\n## Action:\n  cases' x with a b; cases' b with b c"
"## Tactic State A:\ncase mk\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\na : α\nb : β × γ\n⊢ True\n## Tactic State B:\ncase mk.mk\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\na : α\nb : β\nc : γ\n⊢ True\n## Action:\n  guard_hyp a : α"
"## Tactic State A:\ncase mk.mk\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\na : α\nb : β\nc : γ\n⊢ True\n## Tactic State B:\ncase mk.mk\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\na : α\nb : β\nc : γ\n⊢ True\n## Action:\n  guard_hyp b : β"
"## Tactic State A:\ncase mk.mk\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\na : α\nb : β\nc : γ\n⊢ True\n## Tactic State B:\ncase mk.mk\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\na : α\nb : β\nc : γ\n⊢ True\n## Action:\n  guard_hyp c : γ"
"## Tactic State A:\ncase mk.mk\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\na : α\nb : β\nc : γ\n⊢ True\n## Tactic State B:\ncase mk.mk\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\na : α\nb : β\nc : γ\n⊢ True\n## Action:\n  trivial"
"## Tactic State A:\nα β γ : Type u\nx : α × β × γ\n⊢ True\n## Tactic State B:\ncase mk\nα β γ : Type u\nx : α × β × γ\na : α\nb : β × γ\nh : x = (a, b)\n⊢ True\n## Action:\n  cases' h: x with a b"
"## Tactic State A:\ncase mk\nα β γ : Type u\nx : α × β × γ\na : α\nb : β × γ\nh : x = (a, b)\n⊢ True\n## Tactic State B:\ncase mk\nα β γ : Type u\nx : α × β × γ\na : α\nb : β × γ\nh : x = (a, b)\n⊢ True\n## Action:\n  guard_hyp a : α"
"## Tactic State A:\ncase mk\nα β γ : Type u\nx : α × β × γ\na : α\nb : β × γ\nh : x = (a, b)\n⊢ True\n## Tactic State B:\ncase mk\nα β γ : Type u\nx : α × β × γ\na : α\nb : β × γ\nh : x = (a, b)\n⊢ True\n## Action:\n  guard_hyp b : β × γ"
"## Tactic State A:\ncase mk\nα β γ : Type u\nx : α × β × γ\na : α\nb : β × γ\nh : x = (a, b)\n⊢ True\n## Tactic State B:\ncase mk\nα β γ : Type u\nx : α × β × γ\na : α\nb : β × γ\nh : x = (a, b)\n⊢ True\n## Action:\n  guard_hyp x : α × β × γ"
"## Tactic State A:\ncase mk\nα β γ : Type u\nx : α × β × γ\na : α\nb : β × γ\nh : x = (a, b)\n⊢ True\n## Tactic State B:\ncase mk\nα β γ : Type u\nx : α × β × γ\na : α\nb : β × γ\nh : x = (a, b)\n⊢ True\n## Action:\n  guard_hyp h : x = (a, b)"
"## Tactic State A:\ncase mk\nα β γ : Type u\nx : α × β × γ\na : α\nb : β × γ\nh : x = (a, b)\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial"
"## Tactic State A:\nx : ℕ\n⊢ True\n## Tactic State B:\nx x✝ : ℕ\nh : x = x✝\n⊢ True\n## Action:\n  cases' h: x using my_rec with y"
"## Tactic State A:\nx✝ : Sort u_1\nFoo : x✝\nx : sorry\n⊢ True\n## Tactic State B:\nx✝ : Sort u_1\nFoo : x✝\nx : sorry\n⊢ True\n## Action:\n  cases' x with a₀ a₁ _ a₂ b₂ c₂"
"## Tactic State A:\nx✝ : Sort u_1\nBar : x✝\nx : sorry\n⊢ True\n## Tactic State B:\nx✝ : Sort u_1\nBar : x✝\nx : sorry\n⊢ True\n## Action:\n  cases' x with a b c d h"
"## Tactic State A:\nn : ℕ\n⊢ n = n\n## Tactic State B:\ncase zero\n⊢ 0 = 0\n---\ncase succ\nn : ℕ\nih : n = n\n⊢ n + 1 = n + 1\n## Action:\n  induction' n with n ih"
"## Tactic State A:\ncase zero\n⊢ 0 = 0\n---\ncase succ\nn : ℕ\nih : n = n\n⊢ n + 1 = n + 1\n## Tactic State B:\ncase zero\n⊢ 0 = 0\n## Action:\n  · guard_target =ₛ 0 = 0; rfl"
"## Tactic State A:\ncase zero\n⊢ 0 = 0\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · guard_hyp n : Nat; guard_hyp ih : n = n"
"## Tactic State A:\n\n## Tactic State B:\ncase succ\nn : ℕ\nih : n = n\n⊢ n + 1 = n + 1\n## Action:\n    guard_target =ₛ n + 1 = n + 1; exact congr_arg (· + 1) ih"
"## Tactic State A:\nn : ℕ\nh : n < 5\n⊢ n = n\n## Tactic State B:\ncase zero\nh : 0 < 5\n⊢ 0 = 0\n---\ncase succ\nn : ℕ\nih : n < 5 → n = n\nh : n + 1 < 5\n⊢ n + 1 = n + 1\n## Action:\n  induction' n with n ih"
"## Tactic State A:\ncase zero\nh : 0 < 5\n⊢ 0 = 0\n---\ncase succ\nn : ℕ\nih : n < 5 → n = n\nh : n + 1 < 5\n⊢ n + 1 = n + 1\n## Tactic State B:\ncase zero\nh : 0 < 5\n⊢ 0 = 0\n## Action:\n  · guard_target =ₛ 0 = 0; rfl"
"## Tactic State A:\ncase zero\nh : 0 < 5\n⊢ 0 = 0\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · guard_hyp n : Nat; guard_hyp ih : n < 5 → n = n; guard_hyp h :ₛ n + 1 < 5"
"## Tactic State A:\n\n## Tactic State B:\ncase succ\nn : ℕ\nih : n < 5 → n = n\nh : n + 1 < 5\n⊢ n + 1 = n + 1\n## Action:\n    guard_target =ₛ n + 1 = n + 1; rfl"
"## Tactic State A:\nn m : ℕ\nh : m < 5\n⊢ n = n\n## Tactic State B:\ncase zero\nm : ℕ\nh : m < 5\n⊢ 0 = 0\n---\ncase succ\nm : ℕ\nh : m < 5\nn : ℕ\nih : n = n\n⊢ n + 1 = n + 1\n## Action:\n  induction' n with n ih"
"## Tactic State A:\ncase zero\nm : ℕ\nh : m < 5\n⊢ 0 = 0\n---\ncase succ\nm : ℕ\nh : m < 5\nn : ℕ\nih : n = n\n⊢ n + 1 = n + 1\n## Tactic State B:\ncase zero\nm : ℕ\nh : m < 5\n⊢ 0 = 0\n## Action:\n  · guard_target = Nat.zero = Nat.zero; rfl"
"## Tactic State A:\ncase zero\nm : ℕ\nh : m < 5\n⊢ 0 = 0\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · guard_hyp n : Nat; guard_hyp ih : n = n; guard_hyp h : m < 5"
"## Tactic State A:\n\n## Tactic State B:\ncase succ\nm : ℕ\nh : m < 5\nn : ℕ\nih : n = n\n⊢ n + 1 = n + 1\n## Action:\n    guard_target = Nat.succ n = Nat.succ n; rfl"
"## Tactic State A:\nn m : ℕ\nh : m < 5\n⊢ n = n\n## Tactic State B:\ncase zero\nm : ℕ\nh : m < 5\n⊢ 0 = 0\n---\ncase succ\nn : ℕ\nih : ∀ {m : ℕ}, m < 5 → n = n\nm : ℕ\nh : m < 5\n⊢ n + 1 = n + 1\n## Action:\n  induction' n with n ih generalizing m"
"## Tactic State A:\ncase zero\nm : ℕ\nh : m < 5\n⊢ 0 = 0\n---\ncase succ\nn : ℕ\nih : ∀ {m : ℕ}, m < 5 → n = n\nm : ℕ\nh : m < 5\n⊢ n + 1 = n + 1\n## Tactic State B:\ncase zero\nm : ℕ\nh : m < 5\n⊢ 0 = 0\n## Action:\n  · guard_target = Nat.zero = Nat.zero; rfl"
"## Tactic State A:\ncase zero\nm : ℕ\nh : m < 5\n⊢ 0 = 0\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · guard_hyp n : Nat; guard_hyp ih : ∀ {m}, m < 5 → n = n; guard_hyp h : m < 5"
"## Tactic State A:\n\n## Tactic State B:\ncase succ\nn : ℕ\nih : ∀ {m : ℕ}, m < 5 → n = n\nm : ℕ\nh : m < 5\n⊢ n + 1 = n + 1\n## Action:\n    guard_target = Nat.succ n = Nat.succ n; rfl"
"## Tactic State A:\nn : ℕ\n⊢ n = n\n## Tactic State B:\ncase zero\nn : ℕ\ne : n = 0\n⊢ 0 = 0\n---\ncase succ\nn m : ℕ\nih : n = m → m = m\ne : n = m + 1\n⊢ m + 1 = m + 1\n## Action:\n  induction' e : n with m ih"
"## Tactic State A:\ncase zero\nn : ℕ\ne : n = 0\n⊢ 0 = 0\n---\ncase succ\nn m : ℕ\nih : n = m → m = m\ne : n = m + 1\n⊢ m + 1 = m + 1\n## Tactic State B:\ncase zero\nn : ℕ\ne : n = 0\n⊢ 0 = 0\n## Action:\n  · guard_hyp e : n = Nat.zero; guard_target = Nat.zero = Nat.zero; rfl"
"## Tactic State A:\ncase zero\nn : ℕ\ne : n = 0\n⊢ 0 = 0\n## Tactic State B:\ncase zero\nn : ℕ\ne : n = 0\n⊢ 0 = 0\n## Action:\n  · guard_hyp m : Nat; guard_hyp ih : n = m → m = m"
"## Tactic State A:\ncase zero\nn : ℕ\ne : n = 0\n⊢ 0 = 0\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    guard_hyp e : n = Nat.succ m; guard_target = Nat.succ m = Nat.succ m; rfl"
"## Tactic State A:\nn : ℕ\n⊢ n = n\n## Tactic State B:\nn x✝ : ℕ\ne : n = x✝\n⊢ x✝ = x✝\n## Action:\n  induction' e : n using my_rec with m ih"
"## Tactic State A:\nx✝ : Sort u_1\nFoo : x✝\nx : sorry\n⊢ True\n## Tactic State B:\nx✝ : Sort u_1\nFoo : x✝\nx : sorry\n⊢ True\n## Action:\n  induction' x with a a' b' a'' b'' c'' ih"
"## Tactic State A:\nx✝ : Sort u_1\nBar : x✝\nx : sorry\n⊢ x = x\n## Tactic State B:\nx✝ : Sort u_1\nBar : x✝\nx : sorry\n⊢ x = x\n## Action:\n  induction' x with a b c d h ih"
"## Tactic State A:\np q : Prop\n⊢ (p → ¬q) → ¬(p ∧ q)\n## Tactic State B:\np q : Prop\nhpnq : p → ¬q\nhpq : p ∧ q\n⊢ False\n## Action:\n  intro hpnq hpq"
"## Tactic State A:\np q : Prop\nhpnq : p → ¬q\nhpq : p ∧ q\n⊢ False\n## Tactic State B:\ncase a\np q : Prop\nhpnq : p → ¬q\nhpq : p ∧ q\n⊢ p\n---\ncase a\np q : Prop\nhpnq : p → ¬q\nhpq : p ∧ q\n⊢ q\n## Action:\n  apply hpnq"
"## Tactic State A:\ncase a\np q : Prop\nhpnq : p → ¬q\nhpq : p ∧ q\n⊢ p\n---\ncase a\np q : Prop\nhpnq : p → ¬q\nhpq : p ∧ q\n⊢ q\n## Tactic State B:\ncase a.intro\np q : Prop\nhpnq : p → ¬q\nhp : p\nhq : q\n⊢ p\n---\ncase a\np q : Prop\nhpnq : p → ¬q\nhpq : p ∧ q\n⊢ q\n## Action:\n  cases' hpq with hp hq"
"## Tactic State A:\ncase a.intro\np q : Prop\nhpnq : p → ¬q\nhp : p\nhq : q\n⊢ p\n---\ncase a\np q : Prop\nhpnq : p → ¬q\nhpq : p ∧ q\n⊢ q\n## Tactic State B:\ncase a\np q : Prop\nhpnq : p → ¬q\nhpq : p ∧ q\n⊢ q\n## Action:\n  assumption"
"## Tactic State A:\ncase a\np q : Prop\nhpnq : p → ¬q\nhpq : p ∧ q\n⊢ q\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact hpq.2"
"## Tactic State A:\na b : ℕ\nh : a + b = a\n⊢ b = 0\n## Tactic State B:\ncase zero\nb : ℕ\nh : 0 + b = 0\n⊢ b = 0\n---\ncase succ\nb d : ℕ\nhd : d + b = d → b = 0\nh : d + 1 + b = d + 1\n⊢ b = 0\n## Action:\n  induction' a with d hd"
"## Tactic State A:\ncase zero\nb : ℕ\nh : 0 + b = 0\n⊢ b = 0\n---\ncase succ\nb d : ℕ\nhd : d + b = d → b = 0\nh : d + 1 + b = d + 1\n⊢ b = 0\n## Tactic State B:\ncase zero\nb : ℕ\n⊢ 0 + b = 0 → b = 0\n## Action:\n  · -- Test the generalized vars have been removed"
"## Tactic State A:\ncase zero\nb : ℕ\n⊢ 0 + b = 0 → b = 0\n## Tactic State B:\ncase zero\nb : ℕ\n⊢ 0 + b = 0 → b = 0\n## Action:\n    revert h"
"## Tactic State A:\ncase zero\nb : ℕ\n⊢ 0 + b = 0 → b = 0\n## Tactic State B:\ncase zero\nb : ℕ\n⊢ 0 + b = 0 → b = 0\n## Action:\n    fail_if_success (guard_hyp a : Nat)"
"## Tactic State A:\ncase zero\nb : ℕ\n⊢ 0 + b = 0 → b = 0\n## Tactic State B:\ncase zero\nb : ℕ\nh : 0 + b = 0\n⊢ b = 0\n## Action:\n    fail_if_success (guard_hyp h : a + b = a)"
"## Tactic State A:\ncase zero\nb : ℕ\nh : 0 + b = 0\n⊢ b = 0\n## Tactic State B:\ncase zero\nb : ℕ\nh : b = 0\n⊢ b = 0\n## Action:\n    intro h"
"## Tactic State A:\ncase zero\nb : ℕ\nh : b = 0\n⊢ b = 0\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    -- Sample proof"
"## Tactic State A:\n\n## Tactic State B:\ncase succ\nb d : ℕ\nhd : d + b = d → b = 0\n⊢ d + 1 + b = d + 1 → b = 0\n## Action:\n    rw [Nat.zero_add] at h"
"## Tactic State A:\ncase succ\nb d : ℕ\nhd : d + b = d → b = 0\n⊢ d + 1 + b = d + 1 → b = 0\n## Tactic State B:\ncase succ\nb d : ℕ\nhd : d + b = d → b = 0\n⊢ d + 1 + b = d + 1 → b = 0\n## Action:\n    assumption"
"## Tactic State A:\ncase succ\nb d : ℕ\nhd : d + b = d → b = 0\n⊢ d + 1 + b = d + 1 → b = 0\n## Tactic State B:\ncase succ\nb d : ℕ\nhd : d + b = d → b = 0\n⊢ d + 1 + b = d + 1 → b = 0\n## Action:\n  · -- Test the generalized vars have been removed"
"## Tactic State A:\ncase succ\nb d : ℕ\nhd : d + b = d → b = 0\n⊢ d + 1 + b = d + 1 → b = 0\n## Tactic State B:\ncase succ\nb d : ℕ\nhd : d + b = d → b = 0\nh : d + 1 + b = d + 1\n⊢ b = 0\n## Action:\n    revert h"
"## Tactic State A:\ncase succ\nb d : ℕ\nhd : d + b = d → b = 0\nh : d + 1 + b = d + 1\n⊢ b = 0\n## Tactic State B:\ncase succ\nb d : ℕ\nhd : d + b = d → b = 0\nh : d + b = d\n⊢ b = 0\n## Action:\n    fail_if_success (guard_hyp a : Nat)"
"## Tactic State A:\ncase succ\nb d : ℕ\nhd : d + b = d → b = 0\nh : d + b = d\n⊢ b = 0\n## Tactic State B:\ncase succ\nb d : ℕ\nhd : d + b = d → b = 0\nh : d + b = d\n⊢ d + b = d\n## Action:\n    fail_if_success (guard_hyp h : a + b = a)"
"## Tactic State A:\ncase succ\nb d : ℕ\nhd : d + b = d → b = 0\nh : d + b = d\n⊢ d + b = d\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    intro h"
"## Tactic State A:\nn : ℕ\na : Fin n\n⊢ True\n## Tactic State B:\nn : ℕ\na : Fin n\n⊢ True\n## Action:\n  induction' n generalizing a"
"## Tactic State A:\nm : ℕ\n⊢ True\n## Tactic State B:\nm : ℕ\n⊢ True\n## Action:\n  induction' m generalizing m"
"## Tactic State A:\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  aesop (add safe (by simp))"
"## Tactic State A:\nx y : ℕ\n⊢ True\n## Tactic State B:\ncase inr\nx y : ℕ\nthis : ∀ {x y : ℕ}, x ≤ y → True\nh : ¬x ≤ y\n⊢ True\n---\nx y : ℕ\nh : x ≤ y\n⊢ True\n## Action:\n  wlog h : x ≤ y"
"## Tactic State A:\ncase inr\nx y : ℕ\nthis : ∀ {x y : ℕ}, x ≤ y → True\nh : ¬x ≤ y\n⊢ True\n---\nx y : ℕ\nh : x ≤ y\n⊢ True\n## Tactic State B:\ncase inr\nx y : ℕ\nthis : ∀ {x y : ℕ}, x ≤ y → True\nh : ¬x ≤ y\n⊢ True\n## Action:\n  · guard_hyp h : ¬x ≤ y"
"## Tactic State A:\ncase inr\nx y : ℕ\nthis : ∀ {x y : ℕ}, x ≤ y → True\nh : ¬x ≤ y\n⊢ True\n## Tactic State B:\ncase inr\nx y : ℕ\nthis : ∀ {x y : ℕ}, x ≤ y → True\nh : ¬x ≤ y\n⊢ True\n## Action:\n    guard_hyp this : ∀ {x y : ℕ}, x ≤ y → True -- `wlog` generalizes by default"
"## Tactic State A:\ncase inr\nx y : ℕ\nthis : ∀ {x y : ℕ}, x ≤ y → True\nh : ¬x ≤ y\n⊢ True\n## Tactic State B:\ncase inr\nx y : ℕ\nthis : ∀ {x y : ℕ}, x ≤ y → True\nh : ¬x ≤ y\n⊢ True\n## Action:\n    guard_target =ₛ True"
"## Tactic State A:\ncase inr\nx y : ℕ\nthis : ∀ {x y : ℕ}, x ≤ y → True\nh : ¬x ≤ y\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    trivial"
"## Tactic State A:\n\n## Tactic State B:\nx y : ℕ\nh : x ≤ y\n⊢ True\n## Action:\n  · guard_hyp h : x ≤ y"
"## Tactic State A:\nx y : ℕ\nh : x ≤ y\n⊢ True\n## Tactic State B:\nx y : ℕ\nh : x ≤ y\n⊢ True\n## Action:\n    guard_target =ₛ True"
"## Tactic State A:\nx y : ℕ\nh : x ≤ y\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    trivial"
"## Tactic State A:\nx y : ℕ\n⊢ True\n## Tactic State B:\ncase inr\nx y : ℕ\nH : ∀ {x : ℕ}, x ≤ y → True\nh : ¬x ≤ y\n⊢ True\n---\ny x : ℕ\nh : x ≤ y\n⊢ True\n## Action:\n  wlog h : x ≤ y generalizing x with H"
"## Tactic State A:\ncase inr\nx y : ℕ\nH : ∀ {x : ℕ}, x ≤ y → True\nh : ¬x ≤ y\n⊢ True\n---\ny x : ℕ\nh : x ≤ y\n⊢ True\n## Tactic State B:\ncase inr\nx y : ℕ\nH : ∀ {x : ℕ}, x ≤ y → True\nh : ¬x ≤ y\n⊢ True\n## Action:\n  · guard_hyp h : ¬x ≤ y"
"## Tactic State A:\ncase inr\nx y : ℕ\nH : ∀ {x : ℕ}, x ≤ y → True\nh : ¬x ≤ y\n⊢ True\n## Tactic State B:\ncase inr\nx y : ℕ\nH : ∀ {x : ℕ}, x ≤ y → True\nh : ¬x ≤ y\n⊢ True\n## Action:\n    guard_hyp H : ∀ {x : ℕ}, x ≤ y → True -- only `x` was generalized"
"## Tactic State A:\ncase inr\nx y : ℕ\nH : ∀ {x : ℕ}, x ≤ y → True\nh : ¬x ≤ y\n⊢ True\n## Tactic State B:\ncase inr\nx y : ℕ\nH : ∀ {x : ℕ}, x ≤ y → True\nh : ¬x ≤ y\n⊢ True\n## Action:\n    guard_target =ₛ True"
"## Tactic State A:\ncase inr\nx y : ℕ\nH : ∀ {x : ℕ}, x ≤ y → True\nh : ¬x ≤ y\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    trivial"
"## Tactic State A:\n\n## Tactic State B:\ny x : ℕ\nh : x ≤ y\n⊢ True\n## Action:\n  · guard_hyp h : x ≤ y"
"## Tactic State A:\ny x : ℕ\nh : x ≤ y\n⊢ True\n## Tactic State B:\ny x : ℕ\nh : x ≤ y\n⊢ True\n## Action:\n    guard_target =ₛ True"
"## Tactic State A:\ny x : ℕ\nh : x ≤ y\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    trivial"
"## Tactic State A:\nx y z : ℕ\n⊢ True\n## Tactic State B:\ncase inr\nx y z : ℕ\nH : ∀ {x y z : ℕ}, x ≤ y + z → True\nh : ¬x ≤ y + z\n⊢ True\n---\nx y z : ℕ\nh : x ≤ y + z\n⊢ True\n## Action:\n  wlog h : x ≤ y + z with H"
"## Tactic State A:\ncase inr\nx y z : ℕ\nH : ∀ {x y z : ℕ}, x ≤ y + z → True\nh : ¬x ≤ y + z\n⊢ True\n---\nx y z : ℕ\nh : x ≤ y + z\n⊢ True\n## Tactic State B:\ncase inr\nx y z : ℕ\nH : ∀ {x y z : ℕ}, x ≤ y + z → True\nh : ¬x ≤ y + z\n⊢ True\n## Action:\n  · guard_hyp h : ¬ x ≤ y + z"
"## Tactic State A:\ncase inr\nx y z : ℕ\nH : ∀ {x y z : ℕ}, x ≤ y + z → True\nh : ¬x ≤ y + z\n⊢ True\n## Tactic State B:\ncase inr\nx y z : ℕ\nH : ∀ {x y z : ℕ}, x ≤ y + z → True\nh : ¬x ≤ y + z\n⊢ True\n## Action:\n    guard_hyp H : ∀ {x y z : ℕ}, x ≤ y + z → True -- wlog-claim is named `H` instead of `this`"
"## Tactic State A:\ncase inr\nx y z : ℕ\nH : ∀ {x y z : ℕ}, x ≤ y + z → True\nh : ¬x ≤ y + z\n⊢ True\n## Tactic State B:\ncase inr\nx y z : ℕ\nH : ∀ {x y z : ℕ}, x ≤ y + z → True\nh : ¬x ≤ y + z\n⊢ True\n## Action:\n    guard_target =ₛ True"
"## Tactic State A:\ncase inr\nx y z : ℕ\nH : ∀ {x y z : ℕ}, x ≤ y + z → True\nh : ¬x ≤ y + z\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    trivial"
"## Tactic State A:\n\n## Tactic State B:\nx y z : ℕ\nh : x ≤ y + z\n⊢ True\n## Action:\n  · guard_hyp h : x ≤ y + z"
"## Tactic State A:\nx y z : ℕ\nh : x ≤ y + z\n⊢ True\n## Tactic State B:\nx y z : ℕ\nh : x ≤ y + z\n⊢ True\n## Action:\n    guard_target =ₛ True"
"## Tactic State A:\nx y z : ℕ\nh : x ≤ y + z\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    trivial"
"## Tactic State A:\n⊢ ℕ → ℕ → True\n## Tactic State B:\nx y : ℕ\n⊢ True\n## Action:\n  intro x y"
"## Tactic State A:\nx y : ℕ\n⊢ True\n## Tactic State B:\ncase inr\nx y : ℕ\nthis : ∀ (x y : ℕ), x ≤ y → True\nh : ¬x ≤ y\n⊢ True\n---\nx y : ℕ\nh : x ≤ y\n⊢ True\n## Action:\n  wlog h : x ≤ y -- `wlog` finds new variables"
"## Tactic State A:\ncase inr\nx y : ℕ\nthis : ∀ (x y : ℕ), x ≤ y → True\nh : ¬x ≤ y\n⊢ True\n---\nx y : ℕ\nh : x ≤ y\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · trivial"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · trivial"
"## Tactic State A:\nx y : ℕ\n⊢ True\n## Tactic State B:\ncase inr\nx y : ℕ\nH : ∀ {x y : ℕ}, x ≤ y → True\nh : ¬x ≤ y\n⊢ True\n---\nx y : ℕ\nh : x ≤ y\n⊢ True\n## Action:\n  wlog h : x ≤ y generalizing y x with H"
"## Tactic State A:\ncase inr\nx y : ℕ\nH : ∀ {x y : ℕ}, x ≤ y → True\nh : ¬x ≤ y\n⊢ True\n---\nx y : ℕ\nh : x ≤ y\n⊢ True\n## Tactic State B:\ncase inr\nx y : ℕ\nH : ∀ {x y : ℕ}, x ≤ y → True\nh : ¬x ≤ y\n⊢ True\n## Action:\n  · guard_hyp h : ¬ x ≤ y"
"## Tactic State A:\ncase inr\nx y : ℕ\nH : ∀ {x y : ℕ}, x ≤ y → True\nh : ¬x ≤ y\n⊢ True\n## Tactic State B:\ncase inr\nx y : ℕ\nH : ∀ {x y : ℕ}, x ≤ y → True\nh : ¬x ≤ y\n⊢ True\n## Action:\n    guard_hyp H : ∀ {x y : ℕ}, x ≤ y → True -- order of ids in `generalizing` is ignored"
"## Tactic State A:\ncase inr\nx y : ℕ\nH : ∀ {x y : ℕ}, x ≤ y → True\nh : ¬x ≤ y\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    trivial"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · trivial"
"## Tactic State A:\nα : optParam Type ℕ\nx : optParam (Option α) none\ny : autoParam (Option α) _auto✝\n⊢ True\n## Tactic State B:\ncase inr\nα : optParam Type ℕ\nx : optParam (Option α) none\ny : autoParam (Option α) _auto✝\nH : ∀ (α : optParam Type ℕ) (x : optParam (Option α) none) (y : autoParam (Option α) _auto✝), x = y → True\nh : ¬x = y\n⊢ True\n---\nα : optParam Type ℕ\nx : optParam (Option α) none\ny : autoParam (Option α) _auto✝\nh : x = y\n⊢ True\n## Action:\n  wlog h : x = y with H"
"## Tactic State A:\ncase inr\nα : optParam Type ℕ\nx : optParam (Option α) none\ny : autoParam (Option α) _auto✝\nH : ∀ (α : optParam Type ℕ) (x : optParam (Option α) none) (y : autoParam (Option α) _auto✝), x = y → True\nh : ¬x = y\n⊢ True\n---\nα : optParam Type ℕ\nx : optParam (Option α) none\ny : autoParam (Option α) _auto✝\nh : x = y\n⊢ True\n## Tactic State B:\ncase inr\nα : optParam Type ℕ\nx : optParam (Option α) none\ny : autoParam (Option α) _auto✝\nH : ∀ (α : optParam Type ℕ) (x : optParam (Option α) none) (y : autoParam (Option α) _auto✝), x = y → True\nh : ¬x = y\n⊢ True\n## Action:\n  · guard_hyp h : ¬ x = y"
"## Tactic State A:\ncase inr\nα : optParam Type ℕ\nx : optParam (Option α) none\ny : autoParam (Option α) _auto✝\nH : ∀ (α : optParam Type ℕ) (x : optParam (Option α) none) (y : autoParam (Option α) _auto✝), x = y → True\nh : ¬x = y\n⊢ True\n## Tactic State B:\ncase inr\nα : optParam Type ℕ\nx : optParam (Option α) none\ny : autoParam (Option α) _auto✝\nH : ∀ (α : optParam Type ℕ) (x : optParam (Option α) none) (y : autoParam (Option α) _auto✝), x = y → True\nh : ¬x = y\n⊢ True\n## Action:\n    guard_hyp H : ∀ α, ∀ {x y : Option α}, x = y → True"
"## Tactic State A:\ncase inr\nα : optParam Type ℕ\nx : optParam (Option α) none\ny : autoParam (Option α) _auto✝\nH : ∀ (α : optParam Type ℕ) (x : optParam (Option α) none) (y : autoParam (Option α) _auto✝), x = y → True\nh : ¬x = y\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    trivial"
"## Tactic State A:\n\n## Tactic State B:\nα : optParam Type ℕ\nx : optParam (Option α) none\ny : autoParam (Option α) _auto✝\nh : x = y\n⊢ True\n## Action:\n  · guard_hyp h : x = y"
"## Tactic State A:\nα : optParam Type ℕ\nx : optParam (Option α) none\ny : autoParam (Option α) _auto✝\nh : x = y\n⊢ True\n## Tactic State B:\nα : optParam Type ℕ\nx : optParam (Option α) none\ny : autoParam (Option α) _auto✝\nh : x = y\n⊢ True\n## Action:\n    guard_target =ₛ True"
"## Tactic State A:\nα : optParam Type ℕ\nx : optParam (Option α) none\ny : autoParam (Option α) _auto✝\nh : x = y\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    trivial"
"## Tactic State A:\nx y : ℕ\n⊢ True\n## Tactic State B:\ncase inr\nx y : ℕ\nthis : ∀ {x y : ℕ}, x ≤ y → True\nh✝ : ¬x ≤ y\n⊢ True\n---\nx y : ℕ\nh✝ : x ≤ y\n⊢ True\n## Action:\n  wlog _ : x ≤ y"
"## Tactic State A:\ncase inr\nx y : ℕ\nthis : ∀ {x y : ℕ}, x ≤ y → True\nh✝ : ¬x ≤ y\n⊢ True\n---\nx y : ℕ\nh✝ : x ≤ y\n⊢ True\n## Tactic State B:\nx y : ℕ\nh✝ : x ≤ y\n⊢ True\n## Action:\n  case _ h => -- if these hypotheses weren't inaccessible, they wouldn't be renamed by `case`"
"## Tactic State A:\nx y : ℕ\nh✝ : x ≤ y\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    guard_hyp h : ¬x ≤ y"
"## Tactic State A:\nx y : ℕ\n⊢ True\n## Tactic State B:\nx y : ℕ\nz : ℕ := 0\n⊢ True\n## Action:\n  let z := 0"
"## Tactic State A:\nx y : ℕ\nz : ℕ := 0\n⊢ True\n## Tactic State B:\ncase inr\nx y : ℕ\nz : ℕ := 0\nH :\n  ℕ →\n    ∀ (y : ℕ),\n      let z := 0;\n      z ≤ y → True\nhxy' : ¬z ≤ y\n⊢ True\n---\nx y : ℕ\nz : ℕ := 0\nhxy' : z ≤ y\n⊢ True\n## Action:\n  wlog hxy' : z ≤ y with H"
"## Tactic State A:\ncase inr\nx y : ℕ\nz : ℕ := 0\nH :\n  ℕ →\n    ∀ (y : ℕ),\n      let z := 0;\n      z ≤ y → True\nhxy' : ¬z ≤ y\n⊢ True\n---\nx y : ℕ\nz : ℕ := 0\nhxy' : z ≤ y\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · trivial"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · trivial"
"## Tactic State A:\n_h₁ : (List.map (fun x => 0) (List.range 128)).sum = 0\n⊢ 0 ∣ 1\n## Tactic State B:\n_h₁ : (List.map (fun x => 0) (List.range 128)).sum = 0\n⊢ 1 * 0 ∣ 1 * 1\n## Action:\n  apply Nat.dvd_of_mul_dvd_mul_left Nat.zero_lt_one"
"## Tactic State A:\n_h₁ : (List.map (fun x => 0) (List.range 128)).sum = 0\n⊢ 1 * 0 ∣ 1 * 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  convert Nat.dvd_mul_left 0 1"
"## Tactic State A:\nα : Type u_1\nx✝ : MeasurableSpace α\nμ : Measure α\ninst✝ : IsFiniteMeasure μ\ns : Set α\n⊢ μ s ≠ ⊤\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  finiteness"
"## Tactic State A:\nx✝ : Sort u_1\nfrobnicate : x✝\nα✝ : Sort u_2\na : α✝\n⊢ sorry = a\n## Tactic State B:\nx✝ : Sort u_1\nfrobnicate : x✝\nα✝ : Sort u_2\na : α✝\n⊢ sorry () = a\n## Action:\n  simp [frobnicate]"
"## Tactic State A:\n⊢ True\n## Tactic State B:\n⊢ True\n## Action:\n  trace 2 + 2 + 3"
"## Tactic State A:\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial"
"## Tactic State A:\n⊢ True\n## Tactic State B:\n⊢ True\n## Action:\n  trace \"hello\" ++ \" world\""
"## Tactic State A:\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial"
"## Tactic State A:\n⊢ ℕ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  (show_term exact 37) says"
"## Tactic State A:\n⊢ ℕ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  (show_term exact 37) says exact 37"
"## Tactic State A:\nα : Type u_1\nx y : List α\n⊢ (x ++ y).length = x.length + y.length\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  simp? says"
"## Tactic State A:\nα : Type u_1\nx y : List α\n⊢ (x ++ y).length = x.length + y.length\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  simp? says simp only [List.length_append]"
"## Tactic State A:\n⊢ true = true\n## Tactic State B:\nthis : ℕ\n⊢ true = true\n## Action:\n  have := 0 says"
"## Tactic State A:\n⊢ true = true\n## Tactic State B:\n⊢ true = true\n## Action:\n  (run_tac do Lean.logInfo \"hi!\") says"
"## Tactic State A:\nα : Type u_1\nx y : List α\n⊢ (x ++ y).length = x.length + y.length\n## Tactic State B:\nα : Type u_1\nx y : List α\n⊢ (x ++ y).length = x.length + y.length\n## Action:\n  simp? says skip"
"## Tactic State A:\nα : Type u_1\nx y : List α\n⊢ (x ++ y).length = x.length + y.length\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  simp"
"## Tactic State A:\nα : Type u_1\nx y : List α\n⊢ (x ++ y).length = x.length + y.length\n## Tactic State B:\nα : Type u_1\nx y : List α\n⊢ (x ++ y).length = x.length + y.length\n## Action:\n  simp? says simp only []"
"## Tactic State A:\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  simp says"
"## Tactic State A:\nα : Type u_1\nx y : List α\n⊢ (x ++ y).length = x.length + y.length\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  simp? says simp only [List.length_append]"
"## Tactic State A:\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  simp says"
"## Tactic State A:\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  simp says"
"## Tactic State A:\n⊢ True\n## Tactic State B:\n⊢ True\n## Action:\n  fail_if_success"
"## Tactic State A:\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    run_tac do guard (← IO.getEnv \"CI\").isSome"
"## Tactic State A:\nP : Sort ?u.5\n⊢ P\n## Tactic State B:\nP : Sort ?u.5\n⊢ P\n## Action:\n  aesop? says"
"## Tactic State A:\nh :\n  let x := 1;\n  x = x\n⊢ True\n## Tactic State B:\ny : ℕ := 1\nh : y = y\n⊢ True\n## Action:\n  extract_lets y at h"
"## Tactic State A:\ny : ℕ := 1\nh : y = y\n⊢ True\n## Tactic State B:\ny : ℕ := 1\nh : y = y\n⊢ True\n## Action:\n  fail_if_success extract_lets a at h"
"## Tactic State A:\ny : ℕ := 1\nh : y = y\n⊢ True\n## Tactic State B:\ny : ℕ := 1\nh : y = y\n⊢ True\n## Action:\n  extract_lets at h"
"## Tactic State A:\ny : ℕ := 1\nh : y = y\n⊢ True\n## Tactic State B:\ny : ℕ := 1\nh : y = y\n⊢ True\n## Action:\n  guard_hyp y : Nat := 1"
"## Tactic State A:\ny : ℕ := 1\nh : y = y\n⊢ True\n## Tactic State B:\ny : ℕ := 1\nh : y = y\n⊢ True\n## Action:\n  guard_hyp h :ₛ y = y"
"## Tactic State A:\ny : ℕ := 1\nh : y = y\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial"
"## Tactic State A:\n⊢ True\n## Tactic State B:\nh : let x := 1;\nx = x :=\n  rfl\n⊢ True\n## Action:\n  let h : (let x := 1; x = x) := rfl"
"## Tactic State A:\nh : let x := 1;\nx = x :=\n  rfl\n⊢ True\n## Tactic State B:\ny : ℕ := 1\nh : y = y := rfl\n⊢ True\n## Action:\n  extract_lets y at h"
"## Tactic State A:\ny : ℕ := 1\nh : y = y := rfl\n⊢ True\n## Tactic State B:\ny : ℕ := 1\nh : y = y := rfl\n⊢ True\n## Action:\n  guard_hyp y : Nat := 1"
"## Tactic State A:\ny : ℕ := 1\nh : y = y := rfl\n⊢ True\n## Tactic State B:\ny : ℕ := 1\nh : y = y := rfl\n⊢ True\n## Action:\n  guard_hyp h :ₛ y = y := rfl"
"## Tactic State A:\ny : ℕ := 1\nh : y = y := rfl\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial"
"## Tactic State A:\nh :\n  let x := 1;\n  let y := 2;\n  x + 1 = y\n⊢ True\n## Tactic State B:\nx : ℕ := 1\ny : ℕ := 2\nh : x + 1 = y\n⊢ True\n## Action:\n  extract_lets x y at h"
"## Tactic State A:\nx : ℕ := 1\ny : ℕ := 2\nh : x + 1 = y\n⊢ True\n## Tactic State B:\nx : ℕ := 1\ny : ℕ := 2\nh : x + 1 = y\n⊢ True\n## Action:\n  guard_hyp x : Nat := 1"
"## Tactic State A:\nx : ℕ := 1\ny : ℕ := 2\nh : x + 1 = y\n⊢ True\n## Tactic State B:\nx : ℕ := 1\ny : ℕ := 2\nh : x + 1 = y\n⊢ True\n## Action:\n  guard_hyp y : Nat := 2"
"## Tactic State A:\nx : ℕ := 1\ny : ℕ := 2\nh : x + 1 = y\n⊢ True\n## Tactic State B:\nx : ℕ := 1\ny : ℕ := 2\nh : x + 1 = y\n⊢ True\n## Action:\n  guard_hyp h :ₛ x + 1 = y"
"## Tactic State A:\nx : ℕ := 1\ny : ℕ := 2\nh : x + 1 = y\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial"
"## Tactic State A:\nh :\n  let x := 1;\n  let y := 2;\n  x + 1 = y\n⊢ True\n## Tactic State B:\nx✝ : ℕ := 1\ny✝ : ℕ := 2\nh : x✝ + 1 = y✝\n⊢ True\n## Action:\n  extract_lets at h"
"## Tactic State A:\nx✝ : ℕ := 1\ny✝ : ℕ := 2\nh : x✝ + 1 = y✝\n⊢ True\n## Tactic State B:\na : ℕ := 1\nb : ℕ := 2\nh : a + 1 = b\n⊢ True\n## Action:\n  rename_i a b"
"## Tactic State A:\na : ℕ := 1\nb : ℕ := 2\nh : a + 1 = b\n⊢ True\n## Tactic State B:\na : ℕ := 1\nb : ℕ := 2\nh : a + 1 = b\n⊢ True\n## Action:\n  guard_hyp a : Nat := 1"
"## Tactic State A:\na : ℕ := 1\nb : ℕ := 2\nh : a + 1 = b\n⊢ True\n## Tactic State B:\na : ℕ := 1\nb : ℕ := 2\nh : a + 1 = b\n⊢ True\n## Action:\n  guard_hyp b : Nat := 2"
"## Tactic State A:\na : ℕ := 1\nb : ℕ := 2\nh : a + 1 = b\n⊢ True\n## Tactic State B:\na : ℕ := 1\nb : ℕ := 2\nh : a + 1 = b\n⊢ True\n## Action:\n  guard_hyp h :ₛ a + 1 = b"
"## Tactic State A:\na : ℕ := 1\nb : ℕ := 2\nh : a + 1 = b\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial"
"## Tactic State A:\nh :\n  let x := 1;\n  let y := 2;\n  x + 1 = y\n⊢ True\n## Tactic State B:\nx : ℕ := 1\nh :\n  let y := 2;\n  x + 1 = y\n⊢ True\n## Action:\n  extract_lets x at h"
"## Tactic State A:\nx : ℕ := 1\nh :\n  let y := 2;\n  x + 1 = y\n⊢ True\n## Tactic State B:\nx : ℕ := 1\nh :\n  let y := 2;\n  x + 1 = y\n⊢ True\n## Action:\n  guard_hyp x : Nat := 1"
"## Tactic State A:\nx : ℕ := 1\nh :\n  let y := 2;\n  x + 1 = y\n⊢ True\n## Tactic State B:\nx : ℕ := 1\nh :\n  let y := 2;\n  x + 1 = y\n⊢ True\n## Action:\n  guard_hyp h :ₛ let y := 2; x + 1 = y"
"## Tactic State A:\nx : ℕ := 1\nh :\n  let y := 2;\n  x + 1 = y\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial"
"## Tactic State A:\nh :\n  let x := 1;\n  let y := 2;\n  x + 1 = y\n⊢ let _z := 3;\n  ℕ → True\n## Tactic State B:\n_z✝ : ℕ := 3\nx✝ : ℕ := 1\ny✝ : ℕ := 2\nh : x✝ + 1 = y✝\n⊢ ℕ → True\n## Action:\n  extract_lets at *"
"## Tactic State A:\n_z✝ : ℕ := 3\nx✝ : ℕ := 1\ny✝ : ℕ := 2\nh : x✝ + 1 = y✝\n⊢ ℕ → True\n## Tactic State B:\n_z✝ : ℕ := 3\nx✝ : ℕ := 1\ny✝ : ℕ := 2\nh : x✝ + 1 = y✝\n⊢ ℕ → True\n## Action:\n  guard_hyp h : _ + 1 = _"
"## Tactic State A:\n_z✝ : ℕ := 3\nx✝ : ℕ := 1\ny✝ : ℕ := 2\nh : x✝ + 1 = y✝\n⊢ ℕ → True\n## Tactic State B:\n_z✝ : ℕ := 3\nx✝ : ℕ := 1\ny✝ : ℕ := 2\nh : x✝ + 1 = y✝\n⊢ ℕ → True\n## Action:\n  fail_if_success extract_lets x at h"
"## Tactic State A:\n_z✝ : ℕ := 3\nx✝ : ℕ := 1\ny✝ : ℕ := 2\nh : x✝ + 1 = y✝\n⊢ ℕ → True\n## Tactic State B:\n_z✝ : ℕ := 3\nx✝ : ℕ := 1\ny✝ : ℕ := 2\nh : x✝ + 1 = y✝\n⊢ ℕ → True\n## Action:\n  guard_target =ₛ ∀ (_ : Nat), True"
"## Tactic State A:\n_z✝ : ℕ := 3\nx✝ : ℕ := 1\ny✝ : ℕ := 2\nh : x✝ + 1 = y✝\n⊢ ℕ → True\n## Tactic State B:\n_z✝ : ℕ := 3\nx✝¹ : ℕ := 1\ny✝ : ℕ := 2\nh : x✝¹ + 1 = y✝\nx✝ : ℕ\n⊢ True\n## Action:\n  intro"
"## Tactic State A:\n_z✝ : ℕ := 3\nx✝¹ : ℕ := 1\ny✝ : ℕ := 2\nh : x✝¹ + 1 = y✝\nx✝ : ℕ\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial"
"## Tactic State A:\nh :\n  let x := 1;\n  let y := 2;\n  x + 1 = y\n⊢ let _z := 3;\n  let _z₂ := 5;\n  ℕ → True\n## Tactic State B:\nx✝ : ℕ := 1\ny✝ : ℕ := 2\nh : x✝ + 1 = y✝\n_z✝ : ℕ := 3\n_z₂✝ : ℕ := 5\n⊢ ℕ → True\n## Action:\n  extract_lets at h ⊢"
"## Tactic State A:\nx✝ : ℕ := 1\ny✝ : ℕ := 2\nh : x✝ + 1 = y✝\n_z✝ : ℕ := 3\n_z₂✝ : ℕ := 5\n⊢ ℕ → True\n## Tactic State B:\nx✝ : ℕ := 1\ny✝ : ℕ := 2\nh : x✝ + 1 = y✝\n_z✝ : ℕ := 3\n_z₂✝ : ℕ := 5\n⊢ ℕ → True\n## Action:\n  guard_hyp h : _ + 1 = _"
"## Tactic State A:\nx✝ : ℕ := 1\ny✝ : ℕ := 2\nh : x✝ + 1 = y✝\n_z✝ : ℕ := 3\n_z₂✝ : ℕ := 5\n⊢ ℕ → True\n## Tactic State B:\nx✝ : ℕ := 1\ny✝ : ℕ := 2\nh : x✝ + 1 = y✝\n_z✝ : ℕ := 3\n_z₂✝ : ℕ := 5\n⊢ ℕ → True\n## Action:\n  fail_if_success extract_lets x at h"
"## Tactic State A:\nx✝ : ℕ := 1\ny✝ : ℕ := 2\nh : x✝ + 1 = y✝\n_z✝ : ℕ := 3\n_z₂✝ : ℕ := 5\n⊢ ℕ → True\n## Tactic State B:\nx✝ : ℕ := 1\ny✝ : ℕ := 2\nh : x✝ + 1 = y✝\n_z✝ : ℕ := 3\n_z₂✝ : ℕ := 5\n⊢ ℕ → True\n## Action:\n  guard_target =ₛ ∀ (_ : Nat), True"
"## Tactic State A:\nx✝ : ℕ := 1\ny✝ : ℕ := 2\nh : x✝ + 1 = y✝\n_z✝ : ℕ := 3\n_z₂✝ : ℕ := 5\n⊢ ℕ → True\n## Tactic State B:\nx✝¹ : ℕ := 1\ny✝ : ℕ := 2\nh : x✝¹ + 1 = y✝\n_z✝ : ℕ := 3\n_z₂✝ : ℕ := 5\nx✝ : ℕ\n⊢ True\n## Action:\n  intro"
"## Tactic State A:\nx✝¹ : ℕ := 1\ny✝ : ℕ := 2\nh : x✝¹ + 1 = y✝\n_z✝ : ℕ := 3\n_z₂✝ : ℕ := 5\nx✝ : ℕ\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial"
"## Tactic State A:\nh :\n  let x := 1;\n  let y := 2;\n  x + 1 = y\n⊢ let _z := 3;\n  let _z₂ := 5;\n  ℕ → True\n## Tactic State B:\nh :\n  let x := 1;\n  let y := 2;\n  x + 1 = y\n_z✝ : ℕ := 3\n_z₂✝ : ℕ := 5\n⊢ ℕ → True\n## Action:\n  extract_lets"
"## Tactic State A:\nh :\n  let x := 1;\n  let y := 2;\n  x + 1 = y\n_z✝ : ℕ := 3\n_z₂✝ : ℕ := 5\n⊢ ℕ → True\n## Tactic State B:\nh :\n  let x := 1;\n  let y := 2;\n  x + 1 = y\n_z✝ : ℕ := 3\n_z₂✝ : ℕ := 5\n⊢ ℕ → True\n## Action:\n  fail_if_success extract_lets x"
"## Tactic State A:\nh :\n  let x := 1;\n  let y := 2;\n  x + 1 = y\n_z✝ : ℕ := 3\n_z₂✝ : ℕ := 5\n⊢ ℕ → True\n## Tactic State B:\nh :\n  let x := 1;\n  let y := 2;\n  x + 1 = y\n_z✝ : ℕ := 3\n_z₂✝ : ℕ := 5\n⊢ ℕ → True\n## Action:\n  guard_hyp h : let x := 1; let y := 2; x + 1 = y"
"## Tactic State A:\nh :\n  let x := 1;\n  let y := 2;\n  x + 1 = y\n_z✝ : ℕ := 3\n_z₂✝ : ℕ := 5\n⊢ ℕ → True\n## Tactic State B:\nh :\n  let x := 1;\n  let y := 2;\n  x + 1 = y\n_z✝ : ℕ := 3\n_z₂✝ : ℕ := 5\n⊢ ℕ → True\n## Action:\n  guard_target =ₛ ∀ (_ : Nat), True"
"## Tactic State A:\nh :\n  let x := 1;\n  let y := 2;\n  x + 1 = y\n_z✝ : ℕ := 3\n_z₂✝ : ℕ := 5\n⊢ ℕ → True\n## Tactic State B:\nh :\n  let x := 1;\n  let y := 2;\n  x + 1 = y\n_z✝ : ℕ := 3\n_z₂✝ : ℕ := 5\nx✝ : ℕ\n⊢ True\n## Action:\n  intro"
"## Tactic State A:\nh :\n  let x := 1;\n  let y := 2;\n  x + 1 = y\n_z✝ : ℕ := 3\n_z₂✝ : ℕ := 5\nx✝ : ℕ\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial"
"## Tactic State A:\nh :\n  let x := 1;\n  let y := 2;\n  x + 1 = y\n⊢ let _z := 3;\n  ℕ → True\n## Tactic State B:\nh :\n  let x := 1;\n  let y := 2;\n  x + 1 = y\nu : ℕ := 3\n⊢ ℕ → True\n## Action:\n  extract_lets u"
"## Tactic State A:\nh :\n  let x := 1;\n  let y := 2;\n  x + 1 = y\nu : ℕ := 3\n⊢ ℕ → True\n## Tactic State B:\nh :\n  let x := 1;\n  let y := 2;\n  x + 1 = y\nu : ℕ := 3\n⊢ ℕ → True\n## Action:\n  guard_hyp u : Nat := 3"
"## Tactic State A:\nh :\n  let x := 1;\n  let y := 2;\n  x + 1 = y\nu : ℕ := 3\n⊢ ℕ → True\n## Tactic State B:\nh :\n  let x := 1;\n  let y := 2;\n  x + 1 = y\nu : ℕ := 3\n⊢ ℕ → True\n## Action:\n  fail_if_success extract_lets x"
"## Tactic State A:\nh :\n  let x := 1;\n  let y := 2;\n  x + 1 = y\nu : ℕ := 3\n⊢ ℕ → True\n## Tactic State B:\nh :\n  let x := 1;\n  let y := 2;\n  x + 1 = y\nu : ℕ := 3\n⊢ ℕ → True\n## Action:\n  guard_target =ₛ ∀ (_ : Nat), True"
"## Tactic State A:\nh :\n  let x := 1;\n  let y := 2;\n  x + 1 = y\nu : ℕ := 3\n⊢ ℕ → True\n## Tactic State B:\nh :\n  let x := 1;\n  let y := 2;\n  x + 1 = y\nu : ℕ := 3\n⊢ ℕ → True\n## Action:\n  guard_hyp h : let x := 1; let y := 2; x + 1 = y"
"## Tactic State A:\nh :\n  let x := 1;\n  let y := 2;\n  x + 1 = y\nu : ℕ := 3\n⊢ ℕ → True\n## Tactic State B:\nh :\n  let x := 1;\n  let y := 2;\n  x + 1 = y\nu : ℕ := 3\nx✝ : ℕ\n⊢ True\n## Action:\n  intro"
"## Tactic State A:\nh :\n  let x := 1;\n  let y := 2;\n  x + 1 = y\nu : ℕ := 3\nx✝ : ℕ\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial"
"## Tactic State A:\nn : ℕ\n⊢ True\n## Tactic State B:\nn : ℕ\n⊢ True\n## Action:\n  fail_if_success interval_cases n"
"## Tactic State A:\nn : ℕ\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial"
"## Tactic State A:\nn : ℕ\nx✝ : 2 ≤ n\n⊢ True\n## Tactic State B:\nn : ℕ\nx✝ : 2 ≤ n\n⊢ True\n## Action:\n  fail_if_success interval_cases n"
"## Tactic State A:\nn : ℕ\nx✝ : 2 ≤ n\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial"
"## Tactic State A:\nn m : ℕ\nx✝ : n ≤ m\n⊢ True\n## Tactic State B:\nn m : ℕ\nx✝ : n ≤ m\n⊢ True\n## Action:\n  fail_if_success interval_cases n"
"## Tactic State A:\nn m : ℕ\nx✝ : n ≤ m\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial"
"## Tactic State A:\nn : ℕ\nw₂ : n < 1\n⊢ n = 0\n## Tactic State B:\ncase «0»\nn : ℕ\nw₂ : 0 < 1\n⊢ 0 = 0\n## Action:\n  interval_cases n"
"## Tactic State A:\ncase «0»\nn : ℕ\nw₂ : 0 < 1\n⊢ 0 = 0\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rfl -- done for free in the mathlib3 version"
"## Tactic State A:\nn : ℕ\nw₂ : n < 2\n⊢ n = 0 ∨ n = 1\n## Tactic State B:\ncase «0»\nn : ℕ\nw₂ : 0 < 2\n⊢ 0 = 0 ∨ 0 = 1\n---\ncase «1»\nn : ℕ\nw₂ : 1 < 2\n⊢ 1 = 0 ∨ 1 = 1\n## Action:\n  interval_cases n"
"## Tactic State A:\ncase «0»\nn : ℕ\nw₂ : 0 < 2\n⊢ 0 = 0 ∨ 0 = 1\n---\ncase «1»\nn : ℕ\nw₂ : 1 < 2\n⊢ 1 = 0 ∨ 1 = 1\n## Tactic State B:\ncase «0».h\nn : ℕ\nw₂ : 0 < 2\n⊢ 0 = 0\n## Action:\n  · left; rfl"
"## Tactic State A:\ncase «0».h\nn : ℕ\nw₂ : 0 < 2\n⊢ 0 = 0\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · right; rfl"
"## Tactic State A:\nn : ℕ\nw₁ : 1 ≤ n\nw₂ : n < 3\n⊢ n = 1 ∨ n = 2\n## Tactic State B:\ncase «1»\nn : ℕ\nw₁ : 1 ≤ 1\nw₂ : 1 < 3\n⊢ 1 = 1 ∨ 1 = 2\n---\ncase «2»\nn : ℕ\nw₁ : 1 ≤ 2\nw₂ : 2 < 3\n⊢ 2 = 1 ∨ 2 = 2\n## Action:\n  interval_cases n"
"## Tactic State A:\ncase «1»\nn : ℕ\nw₁ : 1 ≤ 1\nw₂ : 1 < 3\n⊢ 1 = 1 ∨ 1 = 2\n---\ncase «2»\nn : ℕ\nw₁ : 1 ≤ 2\nw₂ : 2 < 3\n⊢ 2 = 1 ∨ 2 = 2\n## Tactic State B:\ncase «1».h\nn : ℕ\nw₁ : 1 ≤ 1\nw₂ : 1 < 3\n⊢ 1 = 1\n## Action:\n  · left; rfl"
"## Tactic State A:\ncase «1».h\nn : ℕ\nw₁ : 1 ≤ 1\nw₂ : 1 < 3\n⊢ 1 = 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · right; rfl"
"## Tactic State A:\nn : ℕ\nw₁ : 1 ≤ n\nw₂ : n < 3\n⊢ n = 1 ∨ n = 2\n## Tactic State B:\ncase «1»\nn : ℕ\nw₁ : 1 ≤ 1\nw₂ : 1 < 3\n⊢ 1 = 1 ∨ 1 = 2\n---\ncase «2»\nn : ℕ\nw₁ : 1 ≤ 2\nw₂ : 2 < 3\n⊢ 2 = 1 ∨ 2 = 2\n## Action:\n  interval_cases using w₁, w₂"
"## Tactic State A:\ncase «1»\nn : ℕ\nw₁ : 1 ≤ 1\nw₂ : 1 < 3\n⊢ 1 = 1 ∨ 1 = 2\n---\ncase «2»\nn : ℕ\nw₁ : 1 ≤ 2\nw₂ : 2 < 3\n⊢ 2 = 1 ∨ 2 = 2\n## Tactic State B:\ncase «1».h\nn : ℕ\nw₁ : 1 ≤ 1\nw₂ : 1 < 3\n⊢ 1 = 1\n## Action:\n  · left; rfl"
"## Tactic State A:\ncase «1».h\nn : ℕ\nw₁ : 1 ≤ 1\nw₂ : 1 < 3\n⊢ 1 = 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · right; rfl"
"## Tactic State A:\nn m : ℕ\nw₁ : 1 ≤ n\nw₂ : n < 3\nx✝ : m < 2\n⊢ n = 1 ∨ n = 2\n## Tactic State B:\ncase «1»\nn m : ℕ\nx✝ : m < 2\nw₁ : 1 ≤ 1\nw₂ : 1 < 3\n⊢ 1 = 1 ∨ 1 = 2\n---\ncase «2»\nn m : ℕ\nx✝ : m < 2\nw₁ : 1 ≤ 2\nw₂ : 2 < 3\n⊢ 2 = 1 ∨ 2 = 2\n## Action:\n  interval_cases n"
"## Tactic State A:\ncase «1»\nn m : ℕ\nx✝ : m < 2\nw₁ : 1 ≤ 1\nw₂ : 1 < 3\n⊢ 1 = 1 ∨ 1 = 2\n---\ncase «2»\nn m : ℕ\nx✝ : m < 2\nw₁ : 1 ≤ 2\nw₂ : 2 < 3\n⊢ 2 = 1 ∨ 2 = 2\n## Tactic State B:\ncase «1».h\nn m : ℕ\nx✝ : m < 2\nw₁ : 1 ≤ 1\nw₂ : 1 < 3\n⊢ 1 = 1\n## Action:\n  · left; rfl"
"## Tactic State A:\ncase «1».h\nn m : ℕ\nx✝ : m < 2\nw₁ : 1 ≤ 1\nw₂ : 1 < 3\n⊢ 1 = 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · right; rfl"
"## Tactic State A:\nn : ℕ\nw₁ : 1 < n\nw₂ : n < 4\n⊢ n = 2 ∨ n = 3\n## Tactic State B:\ncase «2»\nn : ℕ\nw₁ : 1 < 2\nw₂ : 2 < 4\n⊢ 2 = 2 ∨ 2 = 3\n---\ncase «3»\nn : ℕ\nw₁ : 1 < 3\nw₂ : 3 < 4\n⊢ 3 = 2 ∨ 3 = 3\n## Action:\n  interval_cases n"
"## Tactic State A:\ncase «2»\nn : ℕ\nw₁ : 1 < 2\nw₂ : 2 < 4\n⊢ 2 = 2 ∨ 2 = 3\n---\ncase «3»\nn : ℕ\nw₁ : 1 < 3\nw₂ : 3 < 4\n⊢ 3 = 2 ∨ 3 = 3\n## Tactic State B:\ncase «2».h\nn : ℕ\nw₁ : 1 < 2\nw₂ : 2 < 4\n⊢ 2 = 2\n## Action:\n  · left; rfl"
"## Tactic State A:\ncase «2».h\nn : ℕ\nw₁ : 1 < 2\nw₂ : 2 < 4\n⊢ 2 = 2\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · right; rfl"
"## Tactic State A:\nn : ℕ\nw₁ : n ≥ 3\nw₂ : n < 5\n⊢ n = 3 ∨ n = 4\n## Tactic State B:\ncase «3»\nn : ℕ\nw₁ : 3 ≥ 3\nw₂ : 3 < 5\n⊢ 3 = 3 ∨ 3 = 4\n---\ncase «4»\nn : ℕ\nw₁ : 4 ≥ 3\nw₂ : 4 < 5\n⊢ 4 = 3 ∨ 4 = 4\n## Action:\n  interval_cases n"
"## Tactic State A:\ncase «3»\nn : ℕ\nw₁ : 3 ≥ 3\nw₂ : 3 < 5\n⊢ 3 = 3 ∨ 3 = 4\n---\ncase «4»\nn : ℕ\nw₁ : 4 ≥ 3\nw₂ : 4 < 5\n⊢ 4 = 3 ∨ 4 = 4\n## Tactic State B:\ncase «3».h\nn : ℕ\nw₁ : 3 ≥ 3\nw₂ : 3 < 5\n⊢ 3 = 3\n## Action:\n  · left; rfl"
"## Tactic State A:\ncase «3».h\nn : ℕ\nw₁ : 3 ≥ 3\nw₂ : 3 < 5\n⊢ 3 = 3\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · right; rfl"
"## Tactic State A:\nn : ℕ\nw₀ : n ≥ 2\nw₁ : n ≥ 3\nw₂ : n < 5\n⊢ n = 3 ∨ n = 4\n## Tactic State B:\ncase «3»\nn : ℕ\nw₀ : 3 ≥ 2\nw₁ : 3 ≥ 3\nw₂ : 3 < 5\n⊢ 3 = 3 ∨ 3 = 4\n---\ncase «4»\nn : ℕ\nw₀ : 4 ≥ 2\nw₁ : 4 ≥ 3\nw₂ : 4 < 5\n⊢ 4 = 3 ∨ 4 = 4\n## Action:\n  interval_cases n"
"## Tactic State A:\ncase «3»\nn : ℕ\nw₀ : 3 ≥ 2\nw₁ : 3 ≥ 3\nw₂ : 3 < 5\n⊢ 3 = 3 ∨ 3 = 4\n---\ncase «4»\nn : ℕ\nw₀ : 4 ≥ 2\nw₁ : 4 ≥ 3\nw₂ : 4 < 5\n⊢ 4 = 3 ∨ 4 = 4\n## Tactic State B:\ncase «3».h\nn : ℕ\nw₀ : 3 ≥ 2\nw₁ : 3 ≥ 3\nw₂ : 3 < 5\n⊢ 3 = 3\n## Action:\n  · left; rfl"
"## Tactic State A:\ncase «3».h\nn : ℕ\nw₀ : 3 ≥ 2\nw₁ : 3 ≥ 3\nw₂ : 3 < 5\n⊢ 3 = 3\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · right; rfl"
"## Tactic State A:\nn : ℕ\nw₁ : n > 2\nw₂ : n < 5\n⊢ n = 3 ∨ n = 4\n## Tactic State B:\ncase «3»\nn : ℕ\nw₁ : 3 > 2\nw₂ : 3 < 5\n⊢ 3 = 3 ∨ 3 = 4\n---\ncase «4»\nn : ℕ\nw₁ : 4 > 2\nw₂ : 4 < 5\n⊢ 4 = 3 ∨ 4 = 4\n## Action:\n  interval_cases n"
"## Tactic State A:\ncase «3»\nn : ℕ\nw₁ : 3 > 2\nw₂ : 3 < 5\n⊢ 3 = 3 ∨ 3 = 4\n---\ncase «4»\nn : ℕ\nw₁ : 4 > 2\nw₂ : 4 < 5\n⊢ 4 = 3 ∨ 4 = 4\n## Tactic State B:\ncase «3».h\nn : ℕ\nw₁ : 3 > 2\nw₂ : 3 < 5\n⊢ 3 = 3\n## Action:\n  · left; rfl"
"## Tactic State A:\ncase «3».h\nn : ℕ\nw₁ : 3 > 2\nw₂ : 3 < 5\n⊢ 3 = 3\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · right; rfl"
"## Tactic State A:\nn : ℕ\nw₁ : n > 2\nw₂ : n ≤ 4\n⊢ n = 3 ∨ n = 4\n## Tactic State B:\ncase «3»\nn : ℕ\nw₁ : 3 > 2\nw₂ : 3 ≤ 4\n⊢ 3 = 3 ∨ 3 = 4\n---\ncase «4»\nn : ℕ\nw₁ : 4 > 2\nw₂ : 4 ≤ 4\n⊢ 4 = 3 ∨ 4 = 4\n## Action:\n  interval_cases n"
"## Tactic State A:\ncase «3»\nn : ℕ\nw₁ : 3 > 2\nw₂ : 3 ≤ 4\n⊢ 3 = 3 ∨ 3 = 4\n---\ncase «4»\nn : ℕ\nw₁ : 4 > 2\nw₂ : 4 ≤ 4\n⊢ 4 = 3 ∨ 4 = 4\n## Tactic State B:\ncase «3».h\nn : ℕ\nw₁ : 3 > 2\nw₂ : 3 ≤ 4\n⊢ 3 = 3\n## Action:\n  · left; rfl"
"## Tactic State A:\ncase «3».h\nn : ℕ\nw₁ : 3 > 2\nw₂ : 3 ≤ 4\n⊢ 3 = 3\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · right; rfl"
"## Tactic State A:\nn : ℕ\nw₁ : 2 < n\nw₂ : 4 ≥ n\n⊢ n = 3 ∨ n = 4\n## Tactic State B:\ncase «3»\nn : ℕ\nw₁ : 2 < 3\nw₂ : 4 ≥ 3\n⊢ 3 = 3 ∨ 3 = 4\n---\ncase «4»\nn : ℕ\nw₁ : 2 < 4\nw₂ : 4 ≥ 4\n⊢ 4 = 3 ∨ 4 = 4\n## Action:\n  interval_cases n"
"## Tactic State A:\ncase «3»\nn : ℕ\nw₁ : 2 < 3\nw₂ : 4 ≥ 3\n⊢ 3 = 3 ∨ 3 = 4\n---\ncase «4»\nn : ℕ\nw₁ : 2 < 4\nw₂ : 4 ≥ 4\n⊢ 4 = 3 ∨ 4 = 4\n## Tactic State B:\ncase «3».h\nn : ℕ\nw₁ : 2 < 3\nw₂ : 4 ≥ 3\n⊢ 3 = 3\n## Action:\n  · left; rfl"
"## Tactic State A:\ncase «3».h\nn : ℕ\nw₁ : 2 < 3\nw₂ : 4 ≥ 3\n⊢ 3 = 3\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · right; rfl"
"## Tactic State A:\nn : ℕ\nh1 : 4 < n\nh2 : n ≤ 6\n⊢ n < 20\n## Tactic State B:\ncase «5»\nn : ℕ\nh1 : 4 < 5\nh2 : 5 ≤ 6\n⊢ 5 < 20\n---\ncase «6»\nn : ℕ\nh1 : 4 < 6\nh2 : 6 ≤ 6\n⊢ 6 < 20\n## Action:\n  interval_cases n"
"## Tactic State A:\ncase «5»\nn : ℕ\nh1 : 4 < 5\nh2 : 5 ≤ 6\n⊢ 5 < 20\n---\ncase «6»\nn : ℕ\nh1 : 4 < 6\nh2 : 6 ≤ 6\n⊢ 6 < 20\n## Tactic State B:\ncase «5»\nn : ℕ\nh1 : 4 < 5\nh2 : 5 ≤ 6\n⊢ 5 < 20\n## Action:\n  · guard_target =ₛ 5 < 20; norm_num"
"## Tactic State A:\ncase «5»\nn : ℕ\nh1 : 4 < 5\nh2 : 5 ≤ 6\n⊢ 5 < 20\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · guard_target =ₛ 6 < 20; norm_num"
"## Tactic State A:\nn : ℕ\nw₁ : n % 3 < 1\n⊢ n % 3 = 0\n## Tactic State B:\ncase «0»\nn : ℕ\nh : n % 3 = 0\nw₁ : 0 < 1\n⊢ 0 = 0\n## Action:\n  interval_cases h : n % 3"
"## Tactic State A:\ncase «0»\nn : ℕ\nh : n % 3 = 0\nw₁ : 0 < 1\n⊢ 0 = 0\n## Tactic State B:\ncase «0»\nn : ℕ\nh : n % 3 = 0\nw₁ : 0 < 1\n⊢ 0 = 0\n## Action:\n  · guard_hyp h : n % 3 = 0"
"## Tactic State A:\ncase «0»\nn : ℕ\nh : n % 3 = 0\nw₁ : 0 < 1\n⊢ 0 = 0\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    rfl"
"## Tactic State A:\nn : ℕ\nw₁ : n % 3 < 1\n⊢ n % 3 = 0\n## Tactic State B:\ncase «0»\nn : ℕ\nw₁ : 0 < 1\n⊢ 0 = 0\n## Action:\n  interval_cases n % 3"
"## Tactic State A:\ncase «0»\nn : ℕ\nw₁ : 0 < 1\n⊢ 0 = 0\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rfl"
"## Tactic State A:\nn : ℕ\nh1 : 4 ≤ n\nh2 : n < 10\n⊢ n < 20\n## Tactic State B:\ncase «4»\nn : ℕ\nh1 : 4 ≤ 4\nh2 : 4 < 10\n⊢ 4 < 20\n---\ncase «5»\nn : ℕ\nh1 : 4 ≤ 5\nh2 : 5 < 10\n⊢ 5 < 20\n---\ncase «6»\nn : ℕ\nh1 : 4 ≤ 6\nh2 : 6 < 10\n⊢ 6 < 20\n---\ncase «7»\nn : ℕ\nh1 : 4 ≤ 7\nh2 : 7 < 10\n⊢ 7 < 20\n---\ncase «8»\nn : ℕ\nh1 : 4 ≤ 8\nh2 : 8 < 10\n⊢ 8 < 20\n---\ncase «9»\nn : ℕ\nh1 : 4 ≤ 9\nh2 : 9 < 10\n⊢ 9 < 20\n## Action:\n  interval_cases using h1, h2"
"## Tactic State A:\ncase «4»\nn : ℕ\nh1 : 4 ≤ 4\nh2 : 4 < 10\n⊢ 4 < 20\n---\ncase «5»\nn : ℕ\nh1 : 4 ≤ 5\nh2 : 5 < 10\n⊢ 5 < 20\n---\ncase «6»\nn : ℕ\nh1 : 4 ≤ 6\nh2 : 6 < 10\n⊢ 6 < 20\n---\ncase «7»\nn : ℕ\nh1 : 4 ≤ 7\nh2 : 7 < 10\n⊢ 7 < 20\n---\ncase «8»\nn : ℕ\nh1 : 4 ≤ 8\nh2 : 8 < 10\n⊢ 8 < 20\n---\ncase «9»\nn : ℕ\nh1 : 4 ≤ 9\nh2 : 9 < 10\n⊢ 9 < 20\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  all_goals { norm_num }"
"## Tactic State A:\nz : ℤ\nh1 : z ≥ -3\nh2 : z < 2\n⊢ z < 20\n## Tactic State B:\ncase «-3»\nz : ℤ\nh1 : -3 ≥ -3\nh2 : -3 < 2\n⊢ -3 < 20\n---\ncase «-2»\nz : ℤ\nh1 : -2 ≥ -3\nh2 : -2 < 2\n⊢ -2 < 20\n---\ncase «-1»\nz : ℤ\nh1 : -1 ≥ -3\nh2 : -1 < 2\n⊢ -1 < 20\n---\ncase «0»\nz : ℤ\nh1 : 0 ≥ -3\nh2 : 0 < 2\n⊢ 0 < 20\n---\ncase «1»\nz : ℤ\nh1 : 1 ≥ -3\nh2 : 1 < 2\n⊢ 1 < 20\n## Action:\n  interval_cases using h1, h2"
"## Tactic State A:\ncase «-3»\nz : ℤ\nh1 : -3 ≥ -3\nh2 : -3 < 2\n⊢ -3 < 20\n---\ncase «-2»\nz : ℤ\nh1 : -2 ≥ -3\nh2 : -2 < 2\n⊢ -2 < 20\n---\ncase «-1»\nz : ℤ\nh1 : -1 ≥ -3\nh2 : -1 < 2\n⊢ -1 < 20\n---\ncase «0»\nz : ℤ\nh1 : 0 ≥ -3\nh2 : 0 < 2\n⊢ 0 < 20\n---\ncase «1»\nz : ℤ\nh1 : 1 ≥ -3\nh2 : 1 < 2\n⊢ 1 < 20\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  all_goals { norm_num }"
"## Tactic State A:\nz : ℤ\nh1 : z ≥ -3\nh2 : z < 2\n⊢ z < 20\n## Tactic State B:\ncase «-3»\nz : ℤ\nh1 : -3 ≥ -3\nh2 : -3 < 2\n⊢ -3 < 20\n---\ncase «-2»\nz : ℤ\nh1 : -2 ≥ -3\nh2 : -2 < 2\n⊢ -2 < 20\n---\ncase «-1»\nz : ℤ\nh1 : -1 ≥ -3\nh2 : -1 < 2\n⊢ -1 < 20\n---\ncase «0»\nz : ℤ\nh1 : 0 ≥ -3\nh2 : 0 < 2\n⊢ 0 < 20\n---\ncase «1»\nz : ℤ\nh1 : 1 ≥ -3\nh2 : 1 < 2\n⊢ 1 < 20\n## Action:\n  interval_cases z"
"## Tactic State A:\ncase «-3»\nz : ℤ\nh1 : -3 ≥ -3\nh2 : -3 < 2\n⊢ -3 < 20\n---\ncase «-2»\nz : ℤ\nh1 : -2 ≥ -3\nh2 : -2 < 2\n⊢ -2 < 20\n---\ncase «-1»\nz : ℤ\nh1 : -1 ≥ -3\nh2 : -1 < 2\n⊢ -1 < 20\n---\ncase «0»\nz : ℤ\nh1 : 0 ≥ -3\nh2 : 0 < 2\n⊢ 0 < 20\n---\ncase «1»\nz : ℤ\nh1 : 1 ≥ -3\nh2 : 1 < 2\n⊢ 1 < 20\n## Tactic State B:\ncase «-3»\nz : ℤ\nh1 : -3 ≥ -3\nh2 : -3 < 2\n⊢ -3 < 20\n## Action:\n  · guard_target =ₛ (-3 : ℤ) < 20"
"## Tactic State A:\ncase «-3»\nz : ℤ\nh1 : -3 ≥ -3\nh2 : -3 < 2\n⊢ -3 < 20\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    norm_num"
"## Tactic State A:\n\n## Tactic State B:\ncase «-2»\nz : ℤ\nh1 : -2 ≥ -3\nh2 : -2 < 2\n⊢ -2 < 20\n## Action:\n  · guard_target =ₛ (-2 : ℤ) < 20"
"## Tactic State A:\ncase «-2»\nz : ℤ\nh1 : -2 ≥ -3\nh2 : -2 < 2\n⊢ -2 < 20\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    norm_num"
"## Tactic State A:\n\n## Tactic State B:\ncase «-1»\nz : ℤ\nh1 : -1 ≥ -3\nh2 : -1 < 2\n⊢ -1 < 20\n## Action:\n  · guard_target =ₛ (-1 : ℤ) < 20"
"## Tactic State A:\ncase «-1»\nz : ℤ\nh1 : -1 ≥ -3\nh2 : -1 < 2\n⊢ -1 < 20\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    norm_num"
"## Tactic State A:\n\n## Tactic State B:\ncase «0»\nz : ℤ\nh1 : 0 ≥ -3\nh2 : 0 < 2\n⊢ 0 < 20\n## Action:\n  · guard_target =ₛ (0 : ℤ) < 20"
"## Tactic State A:\ncase «0»\nz : ℤ\nh1 : 0 ≥ -3\nh2 : 0 < 2\n⊢ 0 < 20\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    norm_num"
"## Tactic State A:\n\n## Tactic State B:\ncase «1»\nz : ℤ\nh1 : 1 ≥ -3\nh2 : 1 < 2\n⊢ 1 < 20\n## Action:\n  · guard_target =ₛ (1 : ℤ) < 20"
"## Tactic State A:\ncase «1»\nz : ℤ\nh1 : 1 ≥ -3\nh2 : 1 < 2\n⊢ 1 < 20\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    norm_num"
"## Tactic State A:\nn : ℕ\n⊢ n % 2 = 0 ∨ n % 2 = 1\n## Tactic State B:\nn : ℕ\nr : ℕ := n % 2\nhr : r = n % 2\n⊢ r = 0 ∨ r = 1\n## Action:\n  set r := n % 2 with hr"
"## Tactic State A:\nn : ℕ\nr : ℕ := n % 2\nhr : r = n % 2\n⊢ r = 0 ∨ r = 1\n## Tactic State B:\nn : ℕ\nr : ℕ := n % 2\nhr : r = n % 2\nh2 : r < 2\n⊢ r = 0 ∨ r = 1\n## Action:\n  have h2 : r < 2 := by"
"## Tactic State A:\nn : ℕ\nr : ℕ := n % 2\nhr : r = n % 2\nh2 : r < 2\n⊢ r = 0 ∨ r = 1\n## Tactic State B:\ncase «0»\nn : ℕ\nr : ℕ := n % 2\nhrv : r = 0\nhr : 0 = n % 2\nh2 : 0 < 2\n⊢ 0 = 0 ∨ 0 = 1\n---\ncase «1»\nn : ℕ\nr : ℕ := n % 2\nhrv : r = 1\nhr : 1 = n % 2\nh2 : 1 < 2\n⊢ 1 = 0 ∨ 1 = 1\n## Action:\n    exact Nat.mod_lt _ (by decide)"
"## Tactic State A:\ncase «0»\nn : ℕ\nr : ℕ := n % 2\nhrv : r = 0\nhr : 0 = n % 2\nh2 : 0 < 2\n⊢ 0 = 0 ∨ 0 = 1\n---\ncase «1»\nn : ℕ\nr : ℕ := n % 2\nhrv : r = 1\nhr : 1 = n % 2\nh2 : 1 < 2\n⊢ 1 = 0 ∨ 1 = 1\n## Tactic State B:\ncase «0».h\nn : ℕ\nr : ℕ := n % 2\nhrv : r = 0\nhr : 0 = n % 2\nh2 : 0 < 2\n⊢ 0 = 0\n## Action:\n  interval_cases hrv : r"
"## Tactic State A:\ncase «0».h\nn : ℕ\nr : ℕ := n % 2\nhrv : r = 0\nhr : 0 = n % 2\nh2 : 0 < 2\n⊢ 0 = 0\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · left; exact hrv.symm.trans hrv"
"## Tactic State A:\n\n## Tactic State B:\ncase «1».h\nn : ℕ\nr : ℕ := n % 2\nhrv : r = 1\nhr : 1 = n % 2\nh2 : 1 < 2\n⊢ 1 = 1\n## Action:\n               --^ hover says `hrv : r = 0` and jumps to `hrv :` above"
"## Tactic State A:\ncase «1».h\nn : ℕ\nr : ℕ := n % 2\nhrv : r = 1\nhr : 1 = n % 2\nh2 : 1 < 2\n⊢ 1 = 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · right; exact hrv.symm.trans hrv"
"## Tactic State A:\nx : ℕ\nhx2 : x < 2\nh : False\n⊢ False\n## Tactic State B:\nx : ℕ\nhx2 : x < 2\nh : False\n_this : x ≤ 1\n⊢ False\n## Action:\n  have _this : x ≤ 1 := by"
"## Tactic State A:\nx : ℕ\nhx2 : x < 2\nh : False\n_this : x ≤ 1\n⊢ False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    -- `interval_cases` deliberately not focussed,"
"## Tactic State A:\nn : ℕ\nw₁✝ : n > 1000000\nw₁ : n < 1000002\n⊢ n < 2000000\n## Tactic State B:\ncase «1000001»\nn : ℕ\nw₁✝ : 1000001 > 1000000\nw₁ : 1000001 < 1000002\n⊢ 1000001 < 2000000\n## Action:\n  interval_cases n"
"## Tactic State A:\ncase «1000001»\nn : ℕ\nw₁✝ : 1000001 > 1000000\nw₁ : 1000001 < 1000002\n⊢ 1000001 < 2000000\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  norm_num"
"## Tactic State A:\nd : ℕ\nh : d ≤ 0\n⊢ d = 0\n## Tactic State B:\ncase «0»\nd : ℕ\nh : 0 ≤ 0\n⊢ 0 = 0\n## Action:\n  interval_cases d"
"## Tactic State A:\ncase «0»\nd : ℕ\nh : 0 ≤ 0\n⊢ 0 = 0\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rfl"
"## Tactic State A:\n⊢ True\n## Tactic State B:\n⊢ True\n## Action:\n  run_tac do"
"## Tactic State A:\n_delete_this : ℕ\n⊢ ℕ\n## Tactic State B:\n⊢ ℕ\n## Action:\n  clear_"
"## Tactic State A:\n⊢ ℕ\n## Tactic State B:\n⊢ ℕ\n## Action:\n  fail_if_success assumption"
"## Tactic State A:\n⊢ ℕ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact 0"
"## Tactic State A:\n_dont_delete_this : Inhabited ℕ\n⊢ Inhabited ℕ\n## Tactic State B:\n_dont_delete_this : Inhabited ℕ\n⊢ Inhabited ℕ\n## Action:\n  clear_"
"## Tactic State A:\n_dont_delete_this : Inhabited ℕ\n⊢ Inhabited ℕ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  assumption"
"## Tactic State A:\n_delete_this : ℕ\ndont_delete_this : ℤ\n⊢ ℕ\n## Tactic State B:\ndont_delete_this : ℤ\n⊢ ℕ\n## Action:\n  clear_"
"## Tactic State A:\ndont_delete_this : ℤ\n⊢ ℕ\n## Tactic State B:\ndont_delete_this : ℤ\n⊢ ℕ\n## Action:\n  fail_if_success assumption"
"## Tactic State A:\ndont_delete_this : ℤ\n⊢ ℕ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact dont_delete_this.toNat"
"## Tactic State A:\n_delete_this : Type\n_delete_this_dep : _delete_this\n_delete_this_rw : _delete_this = ℕ\n_delete_this_dep_dep : _delete_this_dep = _delete_this_dep\n⊢ ℕ\n## Tactic State B:\n⊢ ℕ\n## Action:\n  clear_"
"## Tactic State A:\n⊢ ℕ\n## Tactic State B:\n⊢ ℕ\n## Action:\n  fail_if_success"
"## Tactic State A:\n⊢ ℕ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    rw [← _delete_this_rw]"
"## Tactic State A:\n_dont_delete_this : Type\ndep : _dont_delete_this\n⊢ _dont_delete_this\n## Tactic State B:\n_dont_delete_this : Type\ndep : _dont_delete_this\n⊢ _dont_delete_this\n## Action:\n  clear_"
"## Tactic State A:\n_dont_delete_this : Type\ndep : _dont_delete_this\n⊢ _dont_delete_this\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  assumption"
"## Tactic State A:\n_dont_delete_this : Type\n⊢ _dont_delete_this = _dont_delete_this\n## Tactic State B:\n_dont_delete_this : Type\n⊢ _dont_delete_this = _dont_delete_this\n## Action:\n  clear_"
"## Tactic State A:\n_dont_delete_this : Type\n⊢ _dont_delete_this = _dont_delete_this\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rfl"
"## Tactic State A:\n_dont_delete_this : Type\n_delete_this : _dont_delete_this = _dont_delete_this\n⊢ _dont_delete_this = _dont_delete_this\n## Tactic State B:\n_dont_delete_this : Type\n⊢ _dont_delete_this = _dont_delete_this\n## Action:\n  clear_"
"## Tactic State A:\n_dont_delete_this : Type\n⊢ _dont_delete_this = _dont_delete_this\n## Tactic State B:\n_dont_delete_this : Type\n⊢ _dont_delete_this = _dont_delete_this\n## Action:\n  fail_if_success assumption"
"## Tactic State A:\n_dont_delete_this : Type\n⊢ _dont_delete_this = _dont_delete_this\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rfl"
"## Tactic State A:\na b c x y z : ℕ\nh : ¬x * y * z < 0\n⊢ c < a + 3 * b\n## Tactic State B:\na b c x y z : ℕ\nh : ¬x * y * z < 0\n⊢ ↑c < ↑a + 3 * ↑b\n## Action:\n  zify"
"## Tactic State A:\na b c x y z : ℕ\nh : ¬x * y * z < 0\n⊢ ↑c < ↑a + 3 * ↑b\n## Tactic State B:\na b c x y z : ℕ\nh : ¬x * y * z < 0\n⊢ ↑c < ↑a + 3 * ↑b\n## Action:\n  guard_target =~ (c : ℤ) < (a : ℤ) + 3 * (b : ℤ)"
"## Tactic State A:\na b c x y z : ℕ\nh : ¬x * y * z < 0\n⊢ ↑c < ↑a + 3 * ↑b\n## Tactic State B:\na b c x y z : ℕ\nh : ¬↑x * ↑y * ↑z < 0\n⊢ ↑c < ↑a + 3 * ↑b\n## Action:\n  zify at h"
"## Tactic State A:\na b c x y z : ℕ\nh : ¬↑x * ↑y * ↑z < 0\n⊢ ↑c < ↑a + 3 * ↑b\n## Tactic State B:\na b c x y z : ℕ\nh : ¬↑x * ↑y * ↑z < 0\n⊢ ↑c < ↑a + 3 * ↑b\n## Action:\n  guard_hyp h :~ ¬(x : ℤ) * (y : ℤ) * (z : ℤ) < (0 : ℤ)"
"## Tactic State A:\na b c x y z : ℕ\nh : ¬↑x * ↑y * ↑z < 0\n⊢ ↑c < ↑a + 3 * ↑b\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact test_sorry"
"## Tactic State A:\na b c x y z : ℕ\nh : ¬x * y * z < 0\nh2 : ↑c < ↑a + 3 * ↑b\n⊢ a + 3 * b > c\n## Tactic State B:\na b c x y z : ℕ\nh2 : ↑c < ↑a + 3 * ↑b\nh : ¬↑x * ↑y * ↑z < 0\n⊢ ↑c < ↑a + 3 * ↑b\n## Action:\n  zify at h ⊢"
"## Tactic State A:\na b c x y z : ℕ\nh2 : ↑c < ↑a + 3 * ↑b\nh : ¬↑x * ↑y * ↑z < 0\n⊢ ↑c < ↑a + 3 * ↑b\n## Tactic State B:\na b c x y z : ℕ\nh2 : ↑c < ↑a + 3 * ↑b\nh : ¬↑x * ↑y * ↑z < 0\n⊢ ↑c < ↑a + 3 * ↑b\n## Action:\n  guard_hyp h :~ ¬↑x * ↑y * ↑z < (0 : ℤ) -- TODO: canonize instances?"
"## Tactic State A:\na b c x y z : ℕ\nh2 : ↑c < ↑a + 3 * ↑b\nh : ¬↑x * ↑y * ↑z < 0\n⊢ ↑c < ↑a + 3 * ↑b\n## Tactic State B:\na b c x y z : ℕ\nh2 : ↑c < ↑a + 3 * ↑b\nh : ¬↑x * ↑y * ↑z < 0\n⊢ ↑c < ↑a + 3 * ↑b\n## Action:\n  guard_target =~ ↑c < (↑a : ℤ) + 3 * ↑b"
"## Tactic State A:\na b c x y z : ℕ\nh2 : ↑c < ↑a + 3 * ↑b\nh : ¬↑x * ↑y * ↑z < 0\n⊢ ↑c < ↑a + 3 * ↑b\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h2"
"## Tactic State A:\na b : ℕ\nh : ↑a ≤ ↑b\n⊢ a ≤ b\n## Tactic State B:\na b : ℕ\nh : ↑a ≤ ↑b\n⊢ ↑a ≤ ↑b\n## Action:\n  zify"
"## Tactic State A:\na b : ℕ\nh : ↑a ≤ ↑b\n⊢ ↑a ≤ ↑b\n## Tactic State B:\na b : ℕ\nh : ↑a ≤ ↑b\n⊢ ↑a ≤ ↑b\n## Action:\n  guard_target = (a : ℤ) ≤ b"
"## Tactic State A:\na b : ℕ\nh : ↑a ≤ ↑b\n⊢ ↑a ≤ ↑b\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h"
"## Tactic State A:\na b c : ℕ\nh : a - b < c\nhab : b ≤ a\n⊢ True\n## Tactic State B:\na b c : ℕ\nhab : b ≤ a\nh : ↑a - ↑b < ↑c\n⊢ True\n## Action:\n  zify [hab] at h"
"## Tactic State A:\na b c : ℕ\nhab : b ≤ a\nh : ↑a - ↑b < ↑c\n⊢ True\n## Tactic State B:\na b c : ℕ\nhab : b ≤ a\nh : ↑a - ↑b < ↑c\n⊢ True\n## Action:\n  guard_hyp h : (a : ℤ) - b < c"
"## Tactic State A:\na b c : ℕ\nhab : b ≤ a\nh : ↑a - ↑b < ↑c\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial"
"## Tactic State A:\na b c : ℕ\nh : a + b ≠ c\n⊢ True\n## Tactic State B:\na b c : ℕ\nh : ↑a + ↑b ≠ ↑c\n⊢ True\n## Action:\n  zify at h"
"## Tactic State A:\na b c : ℕ\nh : ↑a + ↑b ≠ ↑c\n⊢ True\n## Tactic State B:\na b c : ℕ\nh : ↑a + ↑b ≠ ↑c\n⊢ True\n## Action:\n  guard_hyp h : (a + b : ℤ) ≠ c"
"## Tactic State A:\na b c : ℕ\nh : ↑a + ↑b ≠ ↑c\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial"
"## Tactic State A:\na b c : ℕ\nh : a - b ∣ c\nh2 : b ≤ a\n⊢ True\n## Tactic State B:\na b c : ℕ\nh2 : b ≤ a\nh : ↑a - ↑b ∣ ↑c\n⊢ True\n## Action:\n  zify [h2] at h"
"## Tactic State A:\na b c : ℕ\nh2 : b ≤ a\nh : ↑a - ↑b ∣ ↑c\n⊢ True\n## Tactic State B:\na b c : ℕ\nh2 : b ≤ a\nh : ↑a - ↑b ∣ ↑c\n⊢ True\n## Action:\n  guard_hyp h : (a : ℤ) - b ∣ c"
"## Tactic State A:\na b c : ℕ\nh2 : b ≤ a\nh : ↑a - ↑b ∣ ↑c\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial"
"## Tactic State A:\n_delete_this : ℕ\ndont_delete_this : ℤ\n⊢ ℕ\n## Tactic State B:\ndont_delete_this : ℤ\n⊢ ℕ\n## Action:\n  clear * - dont_delete_this"
"## Tactic State A:\ndont_delete_this : ℤ\n⊢ ℕ\n## Tactic State B:\ndont_delete_this : ℤ\n⊢ ℕ\n## Action:\n  fail_if_success assumption"
"## Tactic State A:\ndont_delete_this : ℤ\n⊢ ℕ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact dont_delete_this.toNat"
"## Tactic State A:\ndont_delete_this : Inhabited ℕ\ndont_delete_this2 : Prop\n⊢ Inhabited ℕ\n## Tactic State B:\ndont_delete_this : Inhabited ℕ\ndont_delete_this2 : Prop\n⊢ Inhabited ℕ\n## Action:\n  clear * - dont_delete_this2"
"## Tactic State A:\ndont_delete_this : Inhabited ℕ\ndont_delete_this2 : Prop\n⊢ Inhabited ℕ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  assumption"
"## Tactic State A:\ndelete_this : ℕ\n_delete_this2 : delete_this = delete_this\ndont_delete_this : ℤ\n⊢ ℕ\n## Tactic State B:\ndont_delete_this : ℤ\n⊢ ℕ\n## Action:\n  clear * - dont_delete_this"
"## Tactic State A:\ndont_delete_this : ℤ\n⊢ ℕ\n## Tactic State B:\ndont_delete_this : ℤ\n⊢ ℕ\n## Action:\n  fail_if_success assumption"
"## Tactic State A:\ndont_delete_this : ℤ\n⊢ ℕ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact dont_delete_this.toNat"
"## Tactic State A:\ndont_delete_this : ℕ\ndont_delete_this2 : dont_delete_this = dont_delete_this\n⊢ ℕ\n## Tactic State B:\ndont_delete_this : ℕ\ndont_delete_this2 : dont_delete_this = dont_delete_this\n⊢ ℕ\n## Action:\n  clear * - dont_delete_this2"
"## Tactic State A:\ndont_delete_this : ℕ\ndont_delete_this2 : dont_delete_this = dont_delete_this\n⊢ ℕ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact dont_delete_this"
"## Tactic State A:\n_delete_this : ℕ\ndont_delete_this dont_delete_this2 : ℤ\n⊢ ℕ\n## Tactic State B:\ndont_delete_this dont_delete_this2 : ℤ\n⊢ ℕ\n## Action:\n  clear * - dont_delete_this dont_delete_this2"
"## Tactic State A:\ndont_delete_this dont_delete_this2 : ℤ\n⊢ ℕ\n## Tactic State B:\ndont_delete_this dont_delete_this2 : ℤ\n⊢ ℕ\n## Action:\n  fail_if_success assumption"
"## Tactic State A:\ndont_delete_this dont_delete_this2 : ℤ\n⊢ ℕ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact dont_delete_this.toNat + dont_delete_this2.toNat"
"## Tactic State A:\n⊢ True\n## Tactic State B:\ncase pos\nh✝ : 0 = 0\n⊢ True\n---\ncase neg\nh✝ : ¬0 = 0\n⊢ True\n## Action:\n  by_cases 0 = 0"
"## Tactic State A:\ncase pos\nh✝ : 0 = 0\n⊢ True\n---\ncase neg\nh✝ : ¬0 = 0\n⊢ True\n## Tactic State B:\ncase neg\nh✝ : ¬0 = 0\n⊢ True\n## Action:\n  exact .intro"
"## Tactic State A:\ncase neg\nh✝ : ¬0 = 0\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact .intro"
"## Tactic State A:\n⊢ True\n## Tactic State B:\ncase pos\nh✝ : 0 = 0\n⊢ True\n---\ncase neg\nh✝ : ¬0 = 0\n⊢ True\n## Action:\n  by_cases 0 = 0"
"## Tactic State A:\ncase pos\nh✝ : 0 = 0\n⊢ True\n---\ncase neg\nh✝ : ¬0 = 0\n⊢ True\n## Tactic State B:\ncase neg\nh✝ : ¬0 = 0\n⊢ True\n## Action:\n  exact .intro"
"## Tactic State A:\ncase neg\nh✝ : ¬0 = 0\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact .intro"
"## Tactic State A:\nn : ℕ\nhn : n = 0\n⊢ n + 0 = 0\n## Tactic State B:\nn : ℕ\nhn : n = 0\n⊢ n + (0 + 0) = 0\n## Action:\n  conv =>"
"## Tactic State A:\nn : ℕ\nhn : n = 0\n⊢ n + (0 + 0) = 0\n## Tactic State B:\nn : ℕ\nhn : n = 0\n⊢ n + 0 + (0 + 0) = 0\n## Action:\n    congr"
"## Tactic State A:\nn : ℕ\nhn : n = 0\n⊢ n + 0 + (0 + 0) = 0\n## Tactic State B:\nn : ℕ\nhn : n = 0\n⊢ n + 0 + (0 + 0) = 0 + 0\n## Action:\n    rw [← Nat.add_zero 0]"
"## Tactic State A:\nn : ℕ\nhn : n = 0\n⊢ n + 0 + (0 + 0) = 0 + 0\n## Tactic State B:\ncase pos\nn : ℕ\nhn : n = 0\nh✝ : 0 = 0\n⊢ n + 0 + (0 + 0) = 0 + 0\n---\ncase neg\nn : ℕ\nhn : n = 0\nh✝ : ¬0 = 0\n⊢ n + 0 + (0 + 0) = 0 + 0\n## Action:\n  conv_lhs =>"
"## Tactic State A:\ncase pos\nn : ℕ\nhn : n = 0\nh✝ : 0 = 0\n⊢ n + 0 + (0 + 0) = 0 + 0\n---\ncase neg\nn : ℕ\nhn : n = 0\nh✝ : ¬0 = 0\n⊢ n + 0 + (0 + 0) = 0 + 0\n## Tactic State B:\ncase neg\nn : ℕ\nhn : n = 0\nh✝ : ¬0 = 0\n⊢ n + 0 + (0 + 0) = 0 + 0\n## Action:\n    congr"
"## Tactic State A:\ncase neg\nn : ℕ\nhn : n = 0\nh✝ : ¬0 = 0\n⊢ n + 0 + (0 + 0) = 0 + 0\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    rw [← Nat.add_zero n]"
"## Tactic State A:\np : Prop\nhp : p\n⊢ 0 = 0 ∧ p ∨ 0 = 0\n## Tactic State B:\np : Prop\nhp : p\n⊢ 0 = 0 ∧ p ∨ 0 = 0\n## Action:\n  iterate left; decide"
"## Tactic State A:\np : Prop\nhp : p\n⊢ 0 = 0 ∧ p ∨ 0 = 0\n## Tactic State B:\np : Prop\nhp : p\n⊢ 0 = 0 ∧ p ∨ 0 = 0\n## Action:\n  repeat' left; decide"
"## Tactic State A:\np : Prop\nhp : p\n⊢ 0 = 0 ∧ p ∨ 0 = 0\n## Tactic State B:\ncase refine_1\np : Prop\nhp : p\n⊢ 0 = 0\n---\ncase refine_2\np : Prop\nhp : p\n⊢ p\n## Action:\n  refine Or.inl ⟨?_, ?_⟩"
"## Tactic State A:\ncase refine_1\np : Prop\nhp : p\n⊢ 0 = 0\n---\ncase refine_2\np : Prop\nhp : p\n⊢ p\n## Tactic State B:\ncase refine_2\np : Prop\nhp : p\n⊢ p\n## Action:\n  rfl"
"## Tactic State A:\ncase refine_2\np : Prop\nhp : p\n⊢ p\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  assumption"
"## Tactic State A:\n⊢ 0 = 0 ∧ 0 = 0 ∧ 0 = 0\n## Tactic State B:\ncase refine_1\n⊢ 0 = 0\n---\ncase refine_2\n⊢ 0 = 0\n---\ncase refine_3\n⊢ 0 = 0\n## Action:\n  refine ⟨?_, ?_, ?_⟩"
"## Tactic State A:\ncase refine_1\n⊢ 0 = 0\n---\ncase refine_2\n⊢ 0 = 0\n---\ncase refine_3\n⊢ 0 = 0\n## Tactic State B:\ncase refine_2\n⊢ 0 = 0\n---\ncase refine_3\n⊢ 0 = 0\n## Action:\n  rfl"
"## Tactic State A:\ncase refine_2\n⊢ 0 = 0\n---\ncase refine_3\n⊢ 0 = 0\n## Tactic State B:\ncase refine_3\n⊢ 0 = 0\n## Action:\n  trivial"
"## Tactic State A:\ncase refine_3\n⊢ 0 = 0\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rfl"
"## Tactic State A:\np : Bool\n⊢ 0 = 0\n## Tactic State B:\ncase false\n⊢ 0 = 0\n---\ncase true\n⊢ 0 = 0\n## Action:\n  cases p"
"## Tactic State A:\ncase false\n⊢ 0 = 0\n---\ncase true\n⊢ 0 = 0\n## Tactic State B:\ncase true\n⊢ 0 = 0\n## Action:\n  case' false => rfl"
"## Tactic State A:\ncase true\n⊢ 0 = 0\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  case' true => rfl"
"## Tactic State A:\np : Bool\nf : False\nh : 0 = 0\n⊢ 0 = 0 ∧ 0 = 1\n## Tactic State B:\ncase false.left\nf : False\nh : 0 = 0\n⊢ 0 = 0\n---\ncase false.right\nf : False\nh : 0 = 0\n⊢ 0 = 1\n---\ncase true.left\nf : False\nh : 0 = 0\n⊢ 0 = 0\n---\ncase true.right\nf : False\nh : 0 = 0\n⊢ 0 = 1\n## Action:\n  cases p <;>"
"## Tactic State A:\ncase false.left\nf : False\nh : 0 = 0\n⊢ 0 = 0\n---\ncase false.right\nf : False\nh : 0 = 0\n⊢ 0 = 1\n---\ncase true.left\nf : False\nh : 0 = 0\n⊢ 0 = 0\n---\ncase true.right\nf : False\nh : 0 = 0\n⊢ 0 = 1\n## Tactic State B:\ncase false.right\nf : False\nh : 0 = 0\n⊢ 0 = 1\n---\ncase true.right\nf : False\nh : 0 = 0\n⊢ 0 = 1\n## Action:\n  constructor"
"## Tactic State A:\ncase false.right\nf : False\nh : 0 = 0\n⊢ 0 = 1\n---\ncase true.right\nf : False\nh : 0 = 0\n⊢ 0 = 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  assumption'"
"## Tactic State A:\n⊢ True ∧ True\n## Tactic State B:\ncase left\n⊢ True\n---\ncase right\n⊢ True\n## Action:\n  constructor"
"## Tactic State A:\ncase left\n⊢ True\n---\ncase right\n⊢ True\n## Tactic State B:\ncase right\n⊢ True\n## Action:\n  focus"
"## Tactic State A:\ncase right\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    exact .intro"
"## Tactic State A:\n⊢ 1 = 1\n## Tactic State B:\n⊢ 1 = 1\n## Action:\n  sleep_heartbeats 1000"
"## Tactic State A:\n⊢ 1 = 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rfl"
"## Tactic State A:\n⊢ True ∧ True\n## Tactic State B:\ncase left\n⊢ True\n---\ncase right\n⊢ True\n## Action:\n  constructor"
"## Tactic State A:\ncase left\n⊢ True\n---\ncase right\n⊢ True\n## Tactic State B:\ncase left\n⊢ True\n---\ncase right\n⊢ True\n## Action:\n  bi_trivial"
"## Tactic State A:\n⊢ True\n## Tactic State B:\n⊢ True\n## Action:\n  fail_if_success done"
"## Tactic State A:\n⊢ True\n## Tactic State B:\n⊢ True\n## Action:\n  success_if_fail_with_msg \"internal exception #5\" done"
"## Tactic State A:\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact .intro"
"## Tactic State A:\n⊢ 0 ≤ 2 + 2\n## Tactic State B:\n⊢ 0 ≤ 2 + 2\n## Action:\n  fail_if_success infer_param"
"## Tactic State A:\n⊢ 0 ≤ 2 + 2\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  decide"
"## Tactic State A:\n⊢ 0 ≤ 2 + 2\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  apply zero_le_add"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  infer_param"
"## Tactic State A:\n⊢ 0 ≤ 2 + 2\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  apply zero_le_add'"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  infer_param"
"## Tactic State A:\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  hint"
"## Tactic State A:\nn : ℕ\nk : ℤ\nhn : 8 ≤ n\nhk : 2 * k ≤ ↑n + 2\n⊢ 0 < ↑n - ↑k - 1\n## Tactic State B:\nn : ℕ\nk : ℤ\nhn : 8 ≤ ↑n\nhk : 2 * ↑k ≤ ↑n + 2\n⊢ 0 < ↑n - ↑k - 1\n## Action:\n  rify at hn hk"
"## Tactic State A:\nn : ℕ\nk : ℤ\nhn : 8 ≤ ↑n\nhk : 2 * ↑k ≤ ↑n + 2\n⊢ 0 < ↑n - ↑k - 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith"
"## Tactic State A:\nn : ℕ\nk : ℤ\nhn : 8 ≤ n\nhk : 2 * ↑k ≤ ↑n + 2\n⊢ 0 < ↑n - ↑k - 1\n## Tactic State B:\nn : ℕ\nk : ℤ\nhn : 8 ≤ ↑n\nhk : 2 * ↑k ≤ ↑n + 2\n⊢ 0 < ↑n - ↑k - 1\n## Action:\n  rify at hn hk"
"## Tactic State A:\nn : ℕ\nk : ℤ\nhn : 8 ≤ ↑n\nhk : 2 * ↑k ≤ ↑n + 2\n⊢ 0 < ↑n - ↑k - 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith"
"## Tactic State A:\na b c : ℕ\nh : a - b < c\nhab : b ≤ a\n⊢ a < b + c\n## Tactic State B:\na b c : ℕ\nhab : b ≤ a\nh : ↑a - ↑b < ↑c\n⊢ ↑a < ↑b + ↑c\n## Action:\n  rify [hab] at h ⊢"
"## Tactic State A:\na b c : ℕ\nhab : b ≤ a\nh : ↑a - ↑b < ↑c\n⊢ ↑a < ↑b + ↑c\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith"
"## Tactic State A:\nn : ℕ\nh : 8 ≤ n\n⊢ 0 < ↑n - 1\n## Tactic State B:\nn : ℕ\nh : 8 ≤ ↑n\n⊢ 0 < ↑n - 1\n## Action:\n  rify at h"
"## Tactic State A:\nn : ℕ\nh : 8 ≤ ↑n\n⊢ 0 < ↑n - 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith"
"## Tactic State A:\nn k : ℕ\nh : 2 * k ≤ n + 2\nh' : 8 ≤ n\n⊢ 0 ≤ 3 * ↑n - 4 - 4 * ↑k\n## Tactic State B:\nn k : ℕ\nh : 2 * ↑k ≤ ↑n + 2\nh' : 8 ≤ ↑n\n⊢ 0 ≤ 3 * ↑n - 4 - 4 * ↑k\n## Action:\n  rify at *"
"## Tactic State A:\nn k : ℕ\nh : 2 * ↑k ≤ ↑n + 2\nh' : 8 ≤ ↑n\n⊢ 0 ≤ 3 * ↑n - 4 - 4 * ↑k\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith"
"## Tactic State A:\nn k : ℕ\nh₁ : 8 ≤ n\nh₂ : 2 * k > n\nh₃ : k + 1 < n\n⊢ n - (k + 1) + 3 ≤ n\n## Tactic State B:\nn k : ℕ\nh₁ : 8 ≤ ↑n\nh₂ : ↑n < 2 * ↑k\nh₃ : True\n⊢ ↑n - (↑k + 1) + 3 ≤ ↑n\n## Action:\n  rify [h₃] at *"
"## Tactic State A:\nn k : ℕ\nh₁ : 8 ≤ ↑n\nh₂ : ↑n < 2 * ↑k\nh₃ : True\n⊢ ↑n - (↑k + 1) + 3 ≤ ↑n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith"
"## Tactic State A:\nn k : ℕ\nh₁ : 8 ≤ n\nh₂ : 2 * k > n\nh₃ : k + 1 < n\n⊢ n - (n - (k + 1)) = k + 1\n## Tactic State B:\nn k : ℕ\nh₁ : 8 ≤ n\nh₂ : 2 * k > n\nh₃ : k + 1 < n\nf₁ : k + 1 ≤ n\n⊢ n - (n - (k + 1)) = k + 1\n## Action:\n  have f₁ : k + 1 ≤ n := by linarith"
"## Tactic State A:\nn k : ℕ\nh₁ : 8 ≤ n\nh₂ : 2 * k > n\nh₃ : k + 1 < n\nf₁ : k + 1 ≤ n\n⊢ n - (n - (k + 1)) = k + 1\n## Tactic State B:\nn k : ℕ\nh₁ : 8 ≤ n\nh₂ : 2 * k > n\nh₃ : k + 1 < n\nf₁ : k + 1 ≤ n\nf₂ : n - (k + 1) ≤ n\n⊢ n - (n - (k + 1)) = k + 1\n## Action:\n  have f₂ : n - (k + 1) ≤ n := by rify [f₁]; linarith"
"## Tactic State A:\nn k : ℕ\nh₁ : 8 ≤ n\nh₂ : 2 * k > n\nh₃ : k + 1 < n\nf₁ : k + 1 ≤ n\nf₂ : n - (k + 1) ≤ n\n⊢ n - (n - (k + 1)) = k + 1\n## Tactic State B:\nn k : ℕ\nh₁ : 8 ≤ ↑n\nh₂ : ↑n < 2 * ↑k\nh₃ : ↑k + 1 < ↑n\nf₁ f₂ : True\n⊢ ↑n - (↑n - (↑k + 1)) = ↑k + 1\n## Action:\n  rify [f₁, f₂] at *"
"## Tactic State A:\nn k : ℕ\nh₁ : 8 ≤ ↑n\nh₂ : ↑n < 2 * ↑k\nh₃ : ↑k + 1 < ↑n\nf₁ f₂ : True\n⊢ ↑n - (↑n - (↑k + 1)) = ↑k + 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith"
"## Tactic State A:\na b c : ℕ\n⊢ a + b + c = c + a + b\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  conv =>"
"## Tactic State A:\na b : ℕ\n⊢ a + b + (a + b) = b + a + (b + a)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  conv =>"
"## Tactic State A:\ni j k : ℕ\nh₀ : i ≤ j\nh₁ : j ≤ k\n⊢ i ≤ k\n## Tactic State B:\ni j k : ℕ\nh₀ : i ≤ j\nh₁ : j ≤ k\n⊢ i ≤ k\n## Action:\n  extract_goal"
"## Tactic State A:\ni j k : ℕ\nh₀ : i ≤ j\nh₁ : j ≤ k\n⊢ i ≤ k\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h₀.trans h₁"
"## Tactic State A:\ni j k : ℕ\nh₀ : i ≤ j\nh₁ : j ≤ k\n⊢ i ≤ k\n## Tactic State B:\ni j k : ℕ\nh₀ : i ≤ j\nh₁ : j ≤ k\n⊢ i ≤ k\n## Action:\n  extract_goal h₁"
"## Tactic State A:\ni j k : ℕ\nh₀ : i ≤ j\nh₁ : j ≤ k\n⊢ i ≤ k\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h₀.trans h₁"
"## Tactic State A:\nα : Type u\nβ : Type v\ninst✝ : Add α\nh : Sub β\nf : α → β\n_g : ℤ\na : α\nb : β\n⊢ f a - b = f a - b\n## Tactic State B:\nα : Type u\nβ : Type v\ninst✝ : Add α\nh : Sub β\nf : α → β\n_g : ℤ\na : α\nb : β\n⊢ f a - b = f a - b\n## Action:\n  extract_goal"
"## Tactic State A:\nα : Type u\nβ : Type v\ninst✝ : Add α\nh : Sub β\nf : α → β\n_g : ℤ\na : α\nb : β\n⊢ f a - b = f a - b\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rfl"
"## Tactic State A:\nn : ℕ\n⊢ n = n\n## Tactic State B:\ncase zero\n⊢ 0 = 0\n---\ncase succ\nn✝ : ℕ\n⊢ n✝ + 1 = n✝ + 1\n## Action:\n  cases n"
"## Tactic State A:\ncase zero\n⊢ 0 = 0\n---\ncase succ\nn✝ : ℕ\n⊢ n✝ + 1 = n✝ + 1\n## Tactic State B:\ncase succ\nn✝ : ℕ\n⊢ n✝ + 1 = n✝ + 1\n## Action:\n  rfl"
"## Tactic State A:\ncase succ\nn✝ : ℕ\n⊢ n✝ + 1 = n✝ + 1\n## Tactic State B:\ncase succ\nn✝ : ℕ\n⊢ n✝ + 1 = n✝ + 1\n## Action:\n  extract_goal"
"## Tactic State A:\ncase succ\nn✝ : ℕ\n⊢ n✝ + 1 = n✝ + 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rfl"
"## Tactic State A:\nα✝ : Sort u_1\nn : α✝\n⊢ n = n\n## Tactic State B:\nα✝ : Sort u_1\nn : α✝\n⊢ n = n\n## Action:\n  extract_goal"
"## Tactic State A:\nα✝ : Sort u_1\nn : α✝\n⊢ n = n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rfl"
"## Tactic State A:\nz : ℤ\n⊢ ∃ n, ↑n = z\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  set_option pp.all true in"
"## Tactic State A:\nn : ℕ\n⊢ True\n## Tactic State B:\nn : ℕ\n⊢ True\n## Action:\n  extract_goal using foo"
"## Tactic State A:\nn : ℕ\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  sorry"
"## Tactic State A:\nn : ℕ\n⊢ True\n## Tactic State B:\nn : ℕ\n⊢ True\n## Action:\n  extract_goal n using foo"
"## Tactic State A:\nn : ℕ\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  sorry"
"## Tactic State A:\nn : ℕ\n⊢ True\n## Tactic State B:\nn : ℕ\n⊢ True\n## Action:\n  extract_goal k"
"## Tactic State A:\nn : ℕ\n⊢ True\n## Tactic State B:\nn : ℕ\n⊢ True\n## Action:\n  extract_goal *"
"## Tactic State A:\nn : ℕ\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  sorry"
"## Tactic State A:\nn : ℕ\ni : Fin n\n⊢ True\n## Tactic State B:\nn : ℕ\ni : Fin n\n⊢ True\n## Action:\n  extract_goal n"
"## Tactic State A:\nn : ℕ\ni : Fin n\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  sorry"
"## Tactic State A:\nn : ℕ\ni : Fin n\n⊢ True\n## Tactic State B:\nn : ℕ\ni : Fin n\n⊢ True\n## Action:\n  extract_goal i"
"## Tactic State A:\nn : ℕ\ni : Fin n\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  sorry"
"## Tactic State A:\nh : 1 = 2\n⊢ False\n## Tactic State B:\nh : 1 = 2\n⊢ False\n## Action:\n  extract_goal"
"## Tactic State A:\nh : 1 = 2\n⊢ False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  sorry"
"## Tactic State A:\n⊢ False\n## Tactic State B:\nh : 1 = 2\n⊢ False\n## Action:\n  have h : 1 = 2 := sorry"
"## Tactic State A:\nh : 1 = 2\n⊢ False\n## Tactic State B:\nh : 1 = 2\n⊢ False\n## Action:\n  extract_goal"
"## Tactic State A:\nh : 1 = 2\n⊢ False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  sorry"
"## Tactic State A:\n⊢ 1 = 2 → False\n## Tactic State B:\nh : 1 = 2\n⊢ False\n## Action:\n  intro h"
"## Tactic State A:\nh : 1 = 2\n⊢ False\n## Tactic State B:\nh : 1 = 2\n⊢ False\n## Action:\n  extract_goal h"
"## Tactic State A:\nh : 1 = 2\n⊢ False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  sorry"
"## Tactic State A:\n⊢ ∀ (n : ℕ), n < n + 1\n## Tactic State B:\nm : ℕ\n⊢ m < m + 1\n## Action:\n  intro m"
"## Tactic State A:\nm : ℕ\n⊢ m < m + 1\n## Tactic State B:\nm : ℕ\n⊢ m < m + 1\n## Action:\n  extract_goal"
"## Tactic State A:\nm : ℕ\n⊢ m < m + 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  sorry"
"## Tactic State A:\n⊢ ∀ (n : ℕ), n < n + 1\n## Tactic State B:\nm : ℕ\n⊢ m < m + 1\n## Action:\n  intro m"
"## Tactic State A:\nm : ℕ\n⊢ m < m + 1\n## Tactic State B:\nm : ℕ\n⊢ m < m + 1\n## Action:\n  show _"
"## Tactic State A:\nm : ℕ\n⊢ m < m + 1\n## Tactic State B:\nm : ℕ\nthis : m < m.succ.succ\n⊢ m < m + 1\n## Action:\n  have : m < _ := Nat.lt.step (Nat.lt.base m)"
"## Tactic State A:\nm : ℕ\nthis : m < m.succ.succ\n⊢ m < m + 1\n## Tactic State B:\nm : ℕ\nthis : m < m.succ.succ\n⊢ m < m + 1\n## Action:\n  extract_goal"
"## Tactic State A:\nm : ℕ\nthis : m < m.succ.succ\n⊢ m < m + 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  sorry"
"## Tactic State A:\nR : CommMonCat\nx : ↑R\n⊢ ↑R\n## Tactic State B:\nR : CommMonCat\nx : ↑R\n⊢ ↑R\n## Action:\n  { toFun := fun x => by"
"## Tactic State A:\nR : CommMonCat\nx : ↑R\n⊢ ↑R\n## Tactic State B:\nR : CommMonCat\nx : ↑R\n⊢ ↑R\n## Action:\n      match_target (R : Type u)"
"## Tactic State A:\nR : CommMonCat\nx : ↑R\n⊢ ↑R\n## Tactic State B:\nGoals Accomplished!\n## Action:\n      guard_hyp x : (R : Type u)"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n      exact x * x"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    map_one' := by simp"
"## Tactic State A:\np q : Prop\nh : ¬q → ¬p\n⊢ p → q\n## Tactic State B:\np q : Prop\nh : ¬q → ¬p\n⊢ ¬q → ¬p\n## Action:\n  contrapose"
"## Tactic State A:\np q : Prop\nh : ¬q → ¬p\n⊢ ¬q → ¬p\n## Tactic State B:\np q : Prop\nh : ¬q → ¬p\n⊢ ¬q → ¬p\n## Action:\n  guard_target = ¬q → ¬p"
"## Tactic State A:\np q : Prop\nh : ¬q → ¬p\n⊢ ¬q → ¬p\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h"
"## Tactic State A:\np q : Prop\nh : p\nhpq : ¬q → ¬p\n⊢ q\n## Tactic State B:\np q : Prop\nhpq : ¬q → ¬p\nh : ¬q\n⊢ ¬p\n## Action:\n  contrapose h"
"## Tactic State A:\np q : Prop\nhpq : ¬q → ¬p\nh : ¬q\n⊢ ¬p\n## Tactic State B:\np q : Prop\nhpq : ¬q → ¬p\nh : ¬q\n⊢ ¬p\n## Action:\n  guard_target = ¬p"
"## Tactic State A:\np q : Prop\nhpq : ¬q → ¬p\nh : ¬q\n⊢ ¬p\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact hpq h"
"## Tactic State A:\np q : Prop\nh : p\nhpq : ¬q → ¬p\n⊢ q\n## Tactic State B:\np q : Prop\nhpq : ¬q → ¬p\nh' : ¬q\n⊢ ¬p\n## Action:\n  contrapose h with h'"
"## Tactic State A:\np q : Prop\nhpq : ¬q → ¬p\nh' : ¬q\n⊢ ¬p\n## Tactic State B:\np q : Prop\nhpq : ¬q → ¬p\nh' : ¬q\n⊢ ¬p\n## Action:\n  guard_target = ¬p"
"## Tactic State A:\np q : Prop\nhpq : ¬q → ¬p\nh' : ¬q\n⊢ ¬p\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact hpq h'"
"## Tactic State A:\np q : Prop\nh : q → p\n⊢ ¬p → ¬q\n## Tactic State B:\np q : Prop\nh : q → p\n⊢ q → p\n## Action:\n  contrapose!"
"## Tactic State A:\np q : Prop\nh : q → p\n⊢ q → p\n## Tactic State B:\np q : Prop\nh : q → p\n⊢ q → p\n## Action:\n  guard_target = q → p"
"## Tactic State A:\np q : Prop\nh : q → p\n⊢ q → p\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h"
"## Tactic State A:\np q : Prop\nh : ¬p\nhpq : q → p\n⊢ ¬q\n## Tactic State B:\np q : Prop\nhpq : q → p\nh : q\n⊢ p\n## Action:\n  contrapose! h"
"## Tactic State A:\np q : Prop\nhpq : q → p\nh : q\n⊢ p\n## Tactic State B:\np q : Prop\nhpq : q → p\nh : q\n⊢ p\n## Action:\n  guard_target = p"
"## Tactic State A:\np q : Prop\nhpq : q → p\nh : q\n⊢ p\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact hpq h"
"## Tactic State A:\np q : Prop\nh : ¬p\nhpq : q → p\n⊢ ¬q\n## Tactic State B:\np q : Prop\nhpq : q → p\nh' : q\n⊢ p\n## Action:\n  contrapose! h with h'"
"## Tactic State A:\np q : Prop\nhpq : q → p\nh' : q\n⊢ p\n## Tactic State B:\np q : Prop\nhpq : q → p\nh' : q\n⊢ p\n## Action:\n  guard_target = p"
"## Tactic State A:\np q : Prop\nhpq : q → p\nh' : q\n⊢ p\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact hpq h'"
"## Tactic State A:\np : Prop\nh : p\n⊢ p\n## Tactic State B:\np : Prop\nh : p\n⊢ p\n## Action:\n  fail_if_success { contrapose }"
"## Tactic State A:\np : Prop\nh : p\n⊢ p\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h"
"## Tactic State A:\np q : Type\nh : p → q\n⊢ p → q\n## Tactic State B:\np q : Type\nh : p → q\n⊢ p → q\n## Action:\n  fail_if_success { contrapose }"
"## Tactic State A:\np q : Type\nh : p → q\n⊢ p → q\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h"
"## Tactic State A:\nx y z k : ℕ\nh : 3 ≤ 4\nh' : z ≤ y\n⊢ k + 3 + x - y ≤ k + 4 + x - z\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  mono"
"## Tactic State A:\nx y z k : ℤ\nh : 3 ≤ 4\nh' : z ≤ y\n⊢ k + 3 + x - y ≤ k + 4 + x - z\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  mono"
"## Tactic State A:\nx y z a b : ℕ\nh : a ≤ b\nh' : z ≤ y\n⊢ 1 + a + x - y ≤ 1 + b + x - z\n## Tactic State B:\nx y z a b : ℕ\nh : a ≤ b\nh' : z ≤ y\n⊢ 1 + a + x - y ≤ 1 + a + x - z\n---\nx y z a b : ℕ\nh : a ≤ b\nh' : z ≤ y\n⊢ 1 + a + x - z ≤ 1 + b + x - z\n## Action:\n  transitivity (1 + a + x - z)"
"## Tactic State A:\nx y z a b : ℕ\nh : a ≤ b\nh' : z ≤ y\n⊢ 1 + a + x - y ≤ 1 + a + x - z\n---\nx y z a b : ℕ\nh : a ≤ b\nh' : z ≤ y\n⊢ 1 + a + x - z ≤ 1 + b + x - z\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · mono"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · mono"
"## Tactic State A:\nx y z a b : ℤ\nh : a ≤ b\nh' : z ≤ y\n⊢ 1 + a + x - y ≤ 1 + b + x - z\n## Tactic State B:\ncase a\nx y z a b : ℤ\nh : a ≤ b\nh' : z ≤ y\n⊢ 1 + a + x - y ≤ 1 + a + x - z\n---\ncase a\nx y z a b : ℤ\nh : a ≤ b\nh' : z ≤ y\n⊢ 1 + a + x - z ≤ 1 + b + x - z\n## Action:\n  apply @le_trans ℤ _ _ (1 + a + x - z)"
"## Tactic State A:\ncase a\nx y z a b : ℤ\nh : a ≤ b\nh' : z ≤ y\n⊢ 1 + a + x - y ≤ 1 + a + x - z\n---\ncase a\nx y z a b : ℤ\nh : a ≤ b\nh' : z ≤ y\n⊢ 1 + a + x - z ≤ 1 + b + x - z\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  -- transitivity (1 + a + x - z)"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · mono"
"## Tactic State A:\nx y z : ℤ\nh' : z ≤ y\n⊢ 1 + 3 + x - y ≤ 1 + 4 + x - z\n## Tactic State B:\ncase a\nx y z : ℤ\nh' : z ≤ y\n⊢ 1 + 3 + x - y ≤ 1 + 3 + x - z\n---\ncase a\nx y z : ℤ\nh' : z ≤ y\n⊢ 1 + 3 + x - z ≤ 1 + 4 + x - z\n## Action:\n  apply @le_trans ℤ _ _ (1 + 3 + x - z)"
"## Tactic State A:\ncase a\nx y z : ℤ\nh' : z ≤ y\n⊢ 1 + 3 + x - y ≤ 1 + 3 + x - z\n---\ncase a\nx y z : ℤ\nh' : z ≤ y\n⊢ 1 + 3 + x - z ≤ 1 + 4 + x - z\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  -- transitivity (1 + 3 + x - z)"
"## Tactic State A:\n\n## Tactic State B:\ncase a.hab.h₁.h₂\nx y z : ℤ\nh' : z ≤ y\n⊢ 3 ≤ 4\n## Action:\n  · mono"
"## Tactic State A:\ncase a.hab.h₁.h₂\nx y z : ℤ\nh' : z ≤ y\n⊢ 3 ≤ 4\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · mono"
"## Tactic State A:\nx y z : ℕ\n⊢ true = true\n## Tactic State B:\nx y z : ℕ\nthis : y + x ≤ y + z\n⊢ true = true\n## Action:\n  have : y + x ≤ y + z := by"
"## Tactic State A:\nx y z : ℕ\nthis : y + x ≤ y + z\n⊢ true = true\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    mono"
"## Tactic State A:\nx y z : ℕ\n⊢ true = true\n## Tactic State B:\nx y z : ℕ\n⊢ x + y ≤ z + y\n## Action:\n  suffices _this : x + y ≤ z + y by trivial"
"## Tactic State A:\nx y z : ℕ\n⊢ x + y ≤ z + y\n## Tactic State B:\ncase h₁\nx y z : ℕ\n⊢ x ≤ z\n## Action:\n  mono"
"## Tactic State A:\ncase h₁\nx y z : ℕ\n⊢ x ≤ z\n## Tactic State B:\ncase h₁\nx y z : ℕ\n⊢ x ≤ z\n## Action:\n  guard_target = x ≤ z"
"## Tactic State A:\ncase h₁\nx y z : ℕ\n⊢ x ≤ z\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact test_sorry"
"## Tactic State A:\nx y z w : ℕ\n⊢ true = true\n## Tactic State B:\nx y z w : ℕ\nthis : x + y ≤ z + w\n⊢ true = true\n## Action:\n  have : x + y ≤ z + w := by"
"## Tactic State A:\nx y z w : ℕ\nthis : x + y ≤ z + w\n⊢ true = true\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    mono"
"## Tactic State A:\n⊢ ∀ (a b : ℕ), a = b → b = a\n## Tactic State B:\na b : ℕ\nh : a = b\n⊢ b = a\n## Action:\n  introv h"
"## Tactic State A:\na b : ℕ\nh : a = b\n⊢ b = a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h.symm"
"## Tactic State A:\nn : ℕ\n⊢ n = n\n## Tactic State B:\ncase zero\n⊢ 0 = 0\n---\ncase succ\nn✝ : ℕ\na✝ : n✝ = n✝\n⊢ n✝ + 1 = n✝ + 1\n## Action:\n  induction n"
"## Tactic State A:\ncase zero\n⊢ 0 = 0\n---\ncase succ\nn✝ : ℕ\na✝ : n✝ = n✝\n⊢ n✝ + 1 = n✝ + 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exacts [rfl, rfl]"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exacts []"
"## Tactic State A:\nn : ℕ\n⊢ ℕ\n## Tactic State B:\nn : ℕ\n⊢ ℕ\n## Action:\n  guard_hyp n : Nat"
"## Tactic State A:\nn : ℕ\n⊢ ℕ\n## Tactic State B:\nn : ℕ\nm : ℕ := 1\n⊢ ℕ\n## Action:\n  let m : Nat := 1"
"## Tactic State A:\nn : ℕ\nm : ℕ := 1\n⊢ ℕ\n## Tactic State B:\nn : ℕ\nm : ℕ := 1\n⊢ ℕ\n## Action:\n  guard_hyp m := 1"
"## Tactic State A:\nn : ℕ\nm : ℕ := 1\n⊢ ℕ\n## Tactic State B:\nn : ℕ\nm : ℕ := 1\n⊢ ℕ\n## Action:\n  guard_hyp m : Nat := 1"
"## Tactic State A:\nn : ℕ\nm : ℕ := 1\n⊢ ℕ\n## Tactic State B:\nn : ℕ\nm : ℕ := 1\n⊢ ℕ\n## Action:\n  guard_target = Nat"
"## Tactic State A:\nn : ℕ\nm : ℕ := 1\n⊢ ℕ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact 0"
"## Tactic State A:\na b : ℕ\n⊢ a ≠ b → ¬a = b\n## Tactic State B:\na b : ℕ\na✝ : a ≠ b\n⊢ ¬a = b\n## Action:\n  intros"
"## Tactic State A:\na b : ℕ\na✝ : a ≠ b\n⊢ ¬a = b\n## Tactic State B:\na b : ℕ\na✝ : a ≠ b\nH : a = b\n⊢ False\n## Action:\n  by_contra H"
"## Tactic State A:\na b : ℕ\na✝ : a ≠ b\nH : a = b\n⊢ False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  contradiction"
"## Tactic State A:\na b : ℕ\n⊢ ¬¬a = b → a = b\n## Tactic State B:\na b : ℕ\na✝ : ¬¬a = b\n⊢ a = b\n## Action:\n  intros"
"## Tactic State A:\na b : ℕ\na✝ : ¬¬a = b\n⊢ a = b\n## Tactic State B:\na b : ℕ\na✝ : ¬¬a = b\nH : ¬a = b\n⊢ False\n## Action:\n  by_contra H"
"## Tactic State A:\na b : ℕ\na✝ : ¬¬a = b\nH : ¬a = b\n⊢ False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  contradiction"
"## Tactic State A:\np _q : Prop\n⊢ ¬¬p → p\n## Tactic State B:\np _q : Prop\na✝ : ¬¬p\n⊢ p\n## Action:\n  intros"
"## Tactic State A:\np _q : Prop\na✝ : ¬¬p\n⊢ p\n## Tactic State B:\np _q : Prop\na✝ : ¬¬p\nH : ¬p\n⊢ False\n## Action:\n  by_contra H"
"## Tactic State A:\np _q : Prop\na✝ : ¬¬p\nH : ¬p\n⊢ False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  contradiction"
"## Tactic State A:\nn m : ℕ\n⊢ Unit\n## Tactic State B:\ncase zero\nm : ℕ\n⊢ Unit\n---\ncase succ\nm n✝ : ℕ\n⊢ Unit\n## Action:\n  cases n"
"## Tactic State A:\ncase zero\nm : ℕ\n⊢ Unit\n---\ncase succ\nm n✝ : ℕ\n⊢ Unit\n## Tactic State B:\ncase zero.zero\n⊢ Unit\n---\ncase zero.succ\nn✝ : ℕ\n⊢ Unit\n---\ncase succ\nm n✝ : ℕ\n⊢ Unit\n## Action:\n  cases m"
"## Tactic State A:\ncase zero.zero\n⊢ Unit\n---\ncase zero.succ\nn✝ : ℕ\n⊢ Unit\n---\ncase succ\nm n✝ : ℕ\n⊢ Unit\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  iterate 3 exact ()"
"## Tactic State A:\nn m : ℕ\n⊢ Unit\n## Tactic State B:\ncase zero\nm : ℕ\n⊢ Unit\n---\ncase succ\nm n✝ : ℕ\n⊢ Unit\n## Action:\n  cases n"
"## Tactic State A:\ncase zero\nm : ℕ\n⊢ Unit\n---\ncase succ\nm n✝ : ℕ\n⊢ Unit\n## Tactic State B:\ncase zero.zero\n⊢ Unit\n---\ncase zero.succ\nn✝ : ℕ\n⊢ Unit\n---\ncase succ\nm n✝ : ℕ\n⊢ Unit\n## Action:\n  cases m"
"## Tactic State A:\ncase zero.zero\n⊢ Unit\n---\ncase zero.succ\nn✝ : ℕ\n⊢ Unit\n---\ncase succ\nm n✝ : ℕ\n⊢ Unit\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  iterate exact ()"
"## Tactic State A:\nn : ℕ\n⊢ ℕ\n## Tactic State B:\nn : ℕ\n⊢ ℕ\n## Action:\n  iterate exact () -- silently succeeds, after iterating 0 times"
"## Tactic State A:\nn : ℕ\n⊢ ℕ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  iterate exact n"
"## Tactic State A:\np q r s : Prop\n⊢ p → q → r → s → (p ∧ q) ∧ (r ∧ s ∧ p) ∧ p ∧ r ∧ q\n## Tactic State B:\np q r s : Prop\na✝³ : p\na✝² : q\na✝¹ : r\na✝ : s\n⊢ (p ∧ q) ∧ (r ∧ s ∧ p) ∧ p ∧ r ∧ q\n## Action:\n  intros"
"## Tactic State A:\np q r s : Prop\na✝³ : p\na✝² : q\na✝¹ : r\na✝ : s\n⊢ (p ∧ q) ∧ (r ∧ s ∧ p) ∧ p ∧ r ∧ q\n## Tactic State B:\ncase left.left\np q r s : Prop\na✝³ : p\na✝² : q\na✝¹ : r\na✝ : s\n⊢ p\n---\ncase left.right\np q r s : Prop\na✝³ : p\na✝² : q\na✝¹ : r\na✝ : s\n⊢ q\n---\ncase right.left.left\np q r s : Prop\na✝³ : p\na✝² : q\na✝¹ : r\na✝ : s\n⊢ r\n---\ncase right.left.right.left\np q r s : Prop\na✝³ : p\na✝² : q\na✝¹ : r\na✝ : s\n⊢ s\n---\ncase right.left.right.right\np q r s : Prop\na✝³ : p\na✝² : q\na✝¹ : r\na✝ : s\n⊢ p\n---\ncase right.right.left\np q r s : Prop\na✝³ : p\na✝² : q\na✝¹ : r\na✝ : s\n⊢ p\n---\ncase right.right.right.left\np q r s : Prop\na✝³ : p\na✝² : q\na✝¹ : r\na✝ : s\n⊢ r\n---\ncase right.right.right.right\np q r s : Prop\na✝³ : p\na✝² : q\na✝¹ : r\na✝ : s\n⊢ q\n## Action:\n  repeat' constructor"
"## Tactic State A:\ncase left.left\np q r s : Prop\na✝³ : p\na✝² : q\na✝¹ : r\na✝ : s\n⊢ p\n---\ncase left.right\np q r s : Prop\na✝³ : p\na✝² : q\na✝¹ : r\na✝ : s\n⊢ q\n---\ncase right.left.left\np q r s : Prop\na✝³ : p\na✝² : q\na✝¹ : r\na✝ : s\n⊢ r\n---\ncase right.left.right.left\np q r s : Prop\na✝³ : p\na✝² : q\na✝¹ : r\na✝ : s\n⊢ s\n---\ncase right.left.right.right\np q r s : Prop\na✝³ : p\na✝² : q\na✝¹ : r\na✝ : s\n⊢ p\n---\ncase right.right.left\np q r s : Prop\na✝³ : p\na✝² : q\na✝¹ : r\na✝ : s\n⊢ p\n---\ncase right.right.right.left\np q r s : Prop\na✝³ : p\na✝² : q\na✝¹ : r\na✝ : s\n⊢ r\n---\ncase right.right.right.right\np q r s : Prop\na✝³ : p\na✝² : q\na✝¹ : r\na✝ : s\n⊢ q\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  repeat' assumption"
"## Tactic State A:\np q : Prop\n⊢ p → q → (p ∧ q) ∧ p ∧ q ∧ p\n## Tactic State B:\np q : Prop\na✝¹ : p\na✝ : q\n⊢ (p ∧ q) ∧ p ∧ q ∧ p\n## Action:\n  intros"
"## Tactic State A:\np q : Prop\na✝¹ : p\na✝ : q\n⊢ (p ∧ q) ∧ p ∧ q ∧ p\n## Tactic State B:\ncase left\np q : Prop\na✝¹ : p\na✝ : q\n⊢ p ∧ q\n---\ncase right\np q : Prop\na✝¹ : p\na✝ : q\n⊢ p ∧ q ∧ p\n## Action:\n  constructor"
"## Tactic State A:\ncase left\np q : Prop\na✝¹ : p\na✝ : q\n⊢ p ∧ q\n---\ncase right\np q : Prop\na✝¹ : p\na✝ : q\n⊢ p ∧ q ∧ p\n## Tactic State B:\ncase left\np q : Prop\na✝¹ : p\na✝ : q\n⊢ p ∧ q\n---\ncase right\np q : Prop\na✝¹ : p\na✝ : q\n⊢ p ∧ q ∧ p\n## Action:\n  fail_if_success any_goals assumption"
"## Tactic State A:\ncase left\np q : Prop\na✝¹ : p\na✝ : q\n⊢ p ∧ q\n---\ncase right\np q : Prop\na✝¹ : p\na✝ : q\n⊢ p ∧ q ∧ p\n## Tactic State B:\ncase left.left\np q : Prop\na✝¹ : p\na✝ : q\n⊢ p\n---\ncase left.right\np q : Prop\na✝¹ : p\na✝ : q\n⊢ q\n---\ncase right.left\np q : Prop\na✝¹ : p\na✝ : q\n⊢ p\n---\ncase right.right\np q : Prop\na✝¹ : p\na✝ : q\n⊢ q ∧ p\n## Action:\n  all_goals constructor"
"## Tactic State A:\ncase left.left\np q : Prop\na✝¹ : p\na✝ : q\n⊢ p\n---\ncase left.right\np q : Prop\na✝¹ : p\na✝ : q\n⊢ q\n---\ncase right.left\np q : Prop\na✝¹ : p\na✝ : q\n⊢ p\n---\ncase right.right\np q : Prop\na✝¹ : p\na✝ : q\n⊢ q ∧ p\n## Tactic State B:\ncase right.right\np q : Prop\na✝¹ : p\na✝ : q\n⊢ q ∧ p\n## Action:\n  any_goals assumption"
"## Tactic State A:\ncase right.right\np q : Prop\na✝¹ : p\na✝ : q\n⊢ q ∧ p\n## Tactic State B:\ncase right.right.left\np q : Prop\na✝¹ : p\na✝ : q\n⊢ q\n---\ncase right.right.right\np q : Prop\na✝¹ : p\na✝ : q\n⊢ p\n## Action:\n  constructor"
"## Tactic State A:\ncase right.right.left\np q : Prop\na✝¹ : p\na✝ : q\n⊢ q\n---\ncase right.right.right\np q : Prop\na✝¹ : p\na✝ : q\n⊢ p\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  any_goals assumption"
"## Tactic State A:\nP Q : Prop\nq : P\np : Q\n⊢ P ∧ Q\n## Tactic State B:\nP Q : Prop\np : P\nq : Q\n⊢ P ∧ Q\n## Action:\n  swap_var p ↔ q"
"## Tactic State A:\nP Q : Prop\np : P\nq : Q\n⊢ P ∧ Q\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact ⟨p, q⟩"
"## Tactic State A:\na b : ℕ\nh : a = b\n⊢ a = b ∧ a = a\n## Tactic State B:\nb a : ℕ\nh : b = a\n⊢ b = a ∧ b = b\n## Action:\n  swap_var a ↔ b"
"## Tactic State A:\nb a : ℕ\nh : b = a\n⊢ b = a ∧ b = b\n## Tactic State B:\nb a : ℕ\nh : b = a\n⊢ b = a ∧ b = b\n## Action:\n  guard_hyp h : b = a"
"## Tactic State A:\nb a : ℕ\nh : b = a\n⊢ b = a ∧ b = b\n## Tactic State B:\nb a : ℕ\nh : b = a\n⊢ b = a ∧ b = b\n## Action:\n  guard_target = b = a ∧ b = b"
"## Tactic State A:\nb a : ℕ\nh : b = a\n⊢ b = a ∧ b = b\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact ⟨h, Eq.refl b⟩"
"## Tactic State A:\na b c d : ℕ\nh : a = b ∧ c = d\n⊢ a = b ∧ c = d\n## Tactic State B:\nc a b d : ℕ\nh : c = a ∧ b = d\n⊢ c = a ∧ b = d\n## Action:\n  swap_var a ↔ b, b c"
"## Tactic State A:\nc a b d : ℕ\nh : c = a ∧ b = d\n⊢ c = a ∧ b = d\n## Tactic State B:\nc a b d : ℕ\nh : c = a ∧ b = d\n⊢ c = a ∧ b = d\n## Action:\n  guard_target = c = a ∧ b = d"
"## Tactic State A:\nc a b d : ℕ\nh : c = a ∧ b = d\n⊢ c = a ∧ b = d\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h"
"## Tactic State A:\nα : Type u\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : a / 5 + b / 4 < c\n⊢ 4 * a + 5 * b < 20 * c\n## Tactic State B:\nα : Type u\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : 4 * a + 5 * b < 20 * c\n⊢ 4 * a + 5 * b < 20 * c\n## Action:\n  cancel_denoms at h"
"## Tactic State A:\nα : Type u\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : 4 * a + 5 * b < 20 * c\n⊢ 4 * a + 5 * b < 20 * c\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h"
"## Tactic State A:\nα : Type u\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : a > 0\n⊢ a / 5 > 0\n## Tactic State B:\nα : Type u\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : a > 0\n⊢ 0 < a\n## Action:\n  cancel_denoms"
"## Tactic State A:\nα : Type u\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : a > 0\n⊢ 0 < a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h"
"## Tactic State A:\nα : Type u\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : a + b = c\n⊢ a / 5 + d * (b / 4) = c - 4 * a / 5 + b * 2 * d / 8 - b\n## Tactic State B:\nα : Type u\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : a + b = c\n⊢ 2 * (4 * a + d * 5 * b) = 40 * c - 32 * a + b * 2 * 5 * d - 40 * b\n## Action:\n  cancel_denoms"
"## Tactic State A:\nα : Type u\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : a + b = c\n⊢ 2 * (4 * a + d * 5 * b) = 40 * c - 32 * a + b * 2 * 5 * d - 40 * b\n## Tactic State B:\nα : Type u\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : a + b = c\n⊢ 2 * (4 * a + d * 5 * b) = 40 * (a + b) - 32 * a + b * 2 * 5 * d - 40 * b\n## Action:\n  rw [← h]"
"## Tactic State A:\nα : Type u\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : a + b = c\n⊢ 2 * (4 * a + d * 5 * b) = 40 * (a + b) - 32 * a + b * 2 * 5 * d - 40 * b\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  ring"
"## Tactic State A:\nα : Type u\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : 0 < a\n⊢ a / (3 / 2) > 0\n## Tactic State B:\nα : Type u\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : 0 < a\n⊢ 0 < a\n## Action:\n  cancel_denoms"
"## Tactic State A:\nα : Type u\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : 0 < a\n⊢ 0 < a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h"
"## Tactic State A:\nα : Type u\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : 0 < a\n⊢ 0 < a / 1\n## Tactic State B:\nα : Type u\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : 0 < a\n⊢ 0 < a\n## Action:\n  cancel_denoms"
"## Tactic State A:\nα : Type u\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : 0 < a\n⊢ 0 < a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h"
"## Tactic State A:\nα : Type u\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : a < 0\n⊢ 0 < a / -1\n## Tactic State B:\nα : Type u\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : a < 0\n⊢ a < 0\n## Action:\n  cancel_denoms"
"## Tactic State A:\nα : Type u\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : a < 0\n⊢ a < 0\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h"
"## Tactic State A:\nα : Type u\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : -a < 2 * b\n⊢ a / -2 < b\n## Tactic State B:\nα : Type u\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : -a < 2 * b\n⊢ -a < 2 * b\n## Action:\n  cancel_denoms"
"## Tactic State A:\nα : Type u\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : -a < 2 * b\n⊢ -a < 2 * b\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h"
"## Tactic State A:\nα : Type u\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : a < 6 * a\n⊢ a / 2 / 3 < a\n## Tactic State B:\nα : Type u\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : a < 6 * a\n⊢ a < 6 * a\n## Action:\n  cancel_denoms"
"## Tactic State A:\nα : Type u\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : a < 6 * a\n⊢ a < 6 * a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h"
"## Tactic State A:\nα : Type u\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : a < 9 * a\n⊢ a / 3 / 3 < a\n## Tactic State B:\nα : Type u\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : a < 9 * a\n⊢ a < 9 * a\n## Action:\n  cancel_denoms"
"## Tactic State A:\nα : Type u\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : a < 9 * a\n⊢ a < 9 * a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h"
"## Tactic State A:\nα✝ : Type u\ninst✝⁵ : Field α✝\ninst✝⁴ : LinearOrder α✝\ninst✝³ : IsStrictOrderedRing α✝\na✝ b✝ c✝ d✝ : α✝\nα : Type\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : a / 5 + b / 4 < c\n⊢ 4 * a + 5 * b < 20 * c\n## Tactic State B:\nα✝ : Type u\ninst✝⁵ : Field α✝\ninst✝⁴ : LinearOrder α✝\ninst✝³ : IsStrictOrderedRing α✝\na✝ b✝ c✝ d✝ : α✝\nα : Type\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : 4 * a + 5 * b < 20 * c\n⊢ 4 * a + 5 * b < 20 * c\n## Action:\n  cancel_denoms at h"
"## Tactic State A:\nα✝ : Type u\ninst✝⁵ : Field α✝\ninst✝⁴ : LinearOrder α✝\ninst✝³ : IsStrictOrderedRing α✝\na✝ b✝ c✝ d✝ : α✝\nα : Type\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : 4 * a + 5 * b < 20 * c\n⊢ 4 * a + 5 * b < 20 * c\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h"
"## Tactic State A:\nα✝ : Type u\ninst✝⁵ : Field α✝\ninst✝⁴ : LinearOrder α✝\ninst✝³ : IsStrictOrderedRing α✝\na✝ b✝ c✝ d✝ : α✝\nα : Type\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : a > 0\n⊢ a / 5 > 0\n## Tactic State B:\nα✝ : Type u\ninst✝⁵ : Field α✝\ninst✝⁴ : LinearOrder α✝\ninst✝³ : IsStrictOrderedRing α✝\na✝ b✝ c✝ d✝ : α✝\nα : Type\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : a > 0\n⊢ 0 < a\n## Action:\n  cancel_denoms"
"## Tactic State A:\nα✝ : Type u\ninst✝⁵ : Field α✝\ninst✝⁴ : LinearOrder α✝\ninst✝³ : IsStrictOrderedRing α✝\na✝ b✝ c✝ d✝ : α✝\nα : Type\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : a > 0\n⊢ 0 < a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h"
"## Tactic State A:\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝¹ b✝¹ c✝¹ d✝¹ : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝ b✝ c✝ d✝ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na b c d : α\nh : a + b = c\n⊢ a / 5 + d * (b / 4) = c - 4 * a / 5 + b * 2 * d / 8 - b\n## Tactic State B:\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝¹ b✝¹ c✝¹ d✝¹ : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝ b✝ c✝ d✝ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na b c d : α\nh : a + b = c\n⊢ 2 * (4 * a + d * 5 * b) = 40 * c - 32 * a + b * 2 * 5 * d - 40 * b\n## Action:\n  cancel_denoms"
"## Tactic State A:\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝¹ b✝¹ c✝¹ d✝¹ : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝ b✝ c✝ d✝ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na b c d : α\nh : a + b = c\n⊢ 2 * (4 * a + d * 5 * b) = 40 * c - 32 * a + b * 2 * 5 * d - 40 * b\n## Tactic State B:\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝¹ b✝¹ c✝¹ d✝¹ : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝ b✝ c✝ d✝ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na b c d : α\nh : a + b = c\n⊢ 2 * (4 * a + d * 5 * b) = 40 * (a + b) - 32 * a + b * 2 * 5 * d - 40 * b\n## Action:\n  rw [← h]"
"## Tactic State A:\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝¹ b✝¹ c✝¹ d✝¹ : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝ b✝ c✝ d✝ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na b c d : α\nh : a + b = c\n⊢ 2 * (4 * a + d * 5 * b) = 40 * (a + b) - 32 * a + b * 2 * 5 * d - 40 * b\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  ring"
"## Tactic State A:\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\n⊢ 1 > 0\n## Tactic State B:\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nthis : ℕ\n⊢ 1 > 0\n## Action:\n  have := 0"
"## Tactic State A:\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nthis : ℕ\n⊢ 1 > 0\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cancel_denoms"
"## Tactic State A:\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : a / 5 + b / 4 < c\n⊢ 4 * a + 5 * b < 20 * c\n## Tactic State B:\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : 4 * a + 5 * b < 20 * c\n⊢ 4 * a + 5 * b < 20 * c\n## Action:\n  cancel_denoms at h"
"## Tactic State A:\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : 4 * a + 5 * b < 20 * c\n⊢ 4 * a + 5 * b < 20 * c\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h"
"## Tactic State A:\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : a > 0\n⊢ a / 5 > 0\n## Tactic State B:\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : a > 0\n⊢ 0 < a\n## Action:\n  cancel_denoms"
"## Tactic State A:\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : a > 0\n⊢ 0 < a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h"
"## Tactic State A:\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : a + b = c\n⊢ a / 5 + d * (b / 4) = c - 4 * a / 5 + b * 2 * d / 8 - b\n## Tactic State B:\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : a + b = c\n⊢ 2 * (4 * a + d * 5 * b) = 40 * c - 32 * a + b * 2 * 5 * d - 40 * b\n## Action:\n  cancel_denoms"
"## Tactic State A:\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : a + b = c\n⊢ 2 * (4 * a + d * 5 * b) = 40 * c - 32 * a + b * 2 * 5 * d - 40 * b\n## Tactic State B:\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : a + b = c\n⊢ 2 * (4 * a + d * 5 * b) = 40 * (a + b) - 32 * a + b * 2 * 5 * d - 40 * b\n## Action:\n  rw [← h]"
"## Tactic State A:\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : a + b = c\n⊢ 2 * (4 * a + d * 5 * b) = 40 * (a + b) - 32 * a + b * 2 * 5 * d - 40 * b\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  ring"
"## Tactic State A:\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : 2 * (4 * a + d * 5 * b) ≠ 40 * c - 32 * a + b * 2 * 5 * d - 40 * b\n⊢ a / 5 + d * (b / 4) ≠ c - 4 * a / 5 + b * 2 * d / 8 - b\n## Tactic State B:\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : 2 * (4 * a + d * 5 * b) ≠ 40 * c - 32 * a + b * 2 * 5 * d - 40 * b\n⊢ ¬2 * (4 * a + d * 5 * b) = 40 * c - 32 * a + b * 2 * 5 * d - 40 * b\n## Action:\n  cancel_denoms"
"## Tactic State A:\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : 2 * (4 * a + d * 5 * b) ≠ 40 * c - 32 * a + b * 2 * 5 * d - 40 * b\n⊢ ¬2 * (4 * a + d * 5 * b) = 40 * c - 32 * a + b * 2 * 5 * d - 40 * b\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  assumption"
"## Tactic State A:\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : 27 ≤ (a + 3) ^ 3\n⊢ 1 ≤ (a / 3 + 1) ^ 3\n## Tactic State B:\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : 27 ≤ (a + 3) ^ 3\n⊢ 27 ≤ (a + 3) ^ 3\n## Action:\n  cancel_denoms"
"## Tactic State A:\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : 27 ≤ (a + 3) ^ 3\n⊢ 27 ≤ (a + 3) ^ 3\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  assumption"
"## Tactic State A:\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : a > 2\n⊢ 1 < 2⁻¹ * a\n## Tactic State B:\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : a > 2\n⊢ 2 < a\n## Action:\n  cancel_denoms"
"## Tactic State A:\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : a > 2\n⊢ 2 < a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  assumption"
"## Tactic State A:\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : 6 * b = a⁻¹ * 3 + c * 2\n⊢ b = a⁻¹ * 2⁻¹ + c * 3⁻¹\n## Tactic State B:\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : 6 * b = a⁻¹ * 3 + c * 2\n⊢ 6 * b = a⁻¹ * 3 + c * 2\n## Action:\n  cancel_denoms"
"## Tactic State A:\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : 6 * b = a⁻¹ * 3 + c * 2\n⊢ 6 * b = a⁻¹ * 3 + c * 2\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  assumption"
"## Tactic State A:\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : a * 5 + b * 6 = 30 * c\n⊢ a * 2⁻¹ * 3⁻¹ + b * 5⁻¹ = c\n## Tactic State B:\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : a * 5 + b * 6 = 30 * c\n⊢ a * 5 + b * 6 = 30 * c\n## Action:\n  cancel_denoms"
"## Tactic State A:\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : a * 5 + b * 6 = 30 * c\n⊢ a * 5 + b * 6 = 30 * c\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  assumption"
"## Tactic State A:\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : 5 * a ^ 2 + 4 * b ^ 3 = 0\n⊢ a ^ 2 / 4 + b ^ 3 / 5 = 0\n## Tactic State B:\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : 5 * a ^ 2 + 4 * b ^ 3 = 0\n⊢ 5 * a ^ 2 + 4 * b ^ 3 = 0\n## Action:\n  cancel_denoms"
"## Tactic State A:\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : 5 * a ^ 2 + 4 * b ^ 3 = 0\n⊢ 5 * a ^ 2 + 4 * b ^ 3 = 0\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  assumption"
"## Tactic State A:\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : 5 * a ^ 3 * b ^ 2 = 72 * c\n⊢ (a / 2) ^ 3 * (b / 3) ^ 2 = c / 5\n## Tactic State B:\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : 5 * a ^ 3 * b ^ 2 = 72 * c\n⊢ 5 * a ^ 3 * b ^ 2 = 72 * c\n## Action:\n  cancel_denoms"
"## Tactic State A:\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : 5 * a ^ 3 * b ^ 2 = 72 * c\n⊢ 5 * a ^ 3 * b ^ 2 = 72 * c\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  assumption"
"## Tactic State A:\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : (5 * a ^ 3 + 8) ^ 2 = 1600 * c\n⊢ ((a / 2) ^ 3 + 1 / 5) ^ 2 = c\n## Tactic State B:\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : (5 * a ^ 3 + 8) ^ 2 = 1600 * c\n⊢ (5 * a ^ 3 + 8) ^ 2 = 1600 * c\n## Action:\n  cancel_denoms"
"## Tactic State A:\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : (5 * a ^ 3 + 8) ^ 2 = 1600 * c\n⊢ (5 * a ^ 3 + 8) ^ 2 = 1600 * c\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  assumption"
"## Tactic State A:\nC : Type u_5\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝³ b✝³ c✝³ d✝³ : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝² b✝² c✝² d✝² : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝¹ b✝¹ c✝¹ d✝¹ : α\na✝ b✝ c✝ d✝ : ℚ\na b c d : C\nh : sorry\n⊢ a / 5 + d * (b / 4) = c - 4 * a / 5 + b * 2 * d / 8 - b\n## Tactic State B:\nC : Type u_5\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝³ b✝³ c✝³ d✝³ : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝² b✝² c✝² d✝² : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝¹ b✝¹ c✝¹ d✝¹ : α\na✝ b✝ c✝ d✝ : ℚ\na b c d : C\nh : sorry\n⊢ a / 5 + d * (b / 4) = c - 4 * a / 5 + b * 2 * d / 8 - b\n## Action:\n  cancel_denoms"
"## Tactic State A:\nα : Type u_1\nβ : Type u_2\nf : α → β\na : α\n⊢ β\n## Tactic State B:\nα : Type u_1\nβ : Type u_2\nf : α → β\na : β\n⊢ β\n## Action:\n  apply f at a"
"## Tactic State A:\nα : Type u_1\nβ : Type u_2\nf : α → β\na : β\n⊢ β\n## Tactic State B:\nα : Type u_1\nβ : Type u_2\nf : α → β\na : β\n⊢ β\n## Action:\n  guard_hyp a :ₛ β"
"## Tactic State A:\nα : Type u_1\nβ : Type u_2\nf : α → β\na : β\n⊢ β\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact a"
"## Tactic State A:\nα : Type\nγ : α → Type\na : α\nf : α → γ a\n⊢ γ a\n## Tactic State B:\nα : Type\nγ : α → Type\na✝ : α\nf : α → γ a✝\na : γ a✝\n⊢ γ a✝\n## Action:\n  apply f at a"
"## Tactic State A:\nα : Type\nγ : α → Type\na✝ : α\nf : α → γ a✝\na : γ a✝\n⊢ γ a✝\n## Tactic State B:\nα : Type\nγ : α → Type\na₂ : α\nf : α → γ a₂\na : γ a₂\n⊢ γ a₂\n## Action:\n  rename_i a₂"
"## Tactic State A:\nα : Type\nγ : α → Type\na₂ : α\nf : α → γ a₂\na : γ a₂\n⊢ γ a₂\n## Tactic State B:\nα : Type\nγ : α → Type\na₂ : α\nf : α → γ a₂\na : γ a₂\n⊢ γ a₂\n## Action:\n  guard_hyp a :ₛ γ a₂"
"## Tactic State A:\nα : Type\nγ : α → Type\na₂ : α\nf : α → γ a₂\na : γ a₂\n⊢ γ a₂\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact a"
"## Tactic State A:\nα : Type u_1\nβ : Type u_2\nf : α → β\na b : α\nh : a = b\n⊢ f a = f b\n## Tactic State B:\nα : Type u_1\nβ : Type u_2\nf : α → β\na b : α\nh : f a = f b\n⊢ f a = f b\n## Action:\n  apply congr_arg f at h"
"## Tactic State A:\nα : Type u_1\nβ : Type u_2\nf : α → β\na b : α\nh : f a = f b\n⊢ f a = f b\n## Tactic State B:\nα : Type u_1\nβ : Type u_2\nf : α → β\na b : α\nh : f a = f b\n⊢ f a = f b\n## Action:\n  guard_hyp h :ₛ f a = f b"
"## Tactic State A:\nα : Type u_1\nβ : Type u_2\nf : α → β\na b : α\nh : f a = f b\n⊢ f a = f b\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h"
"## Tactic State A:\na b : ℕ\nh : a + 1 = b + 1\n⊢ a = b\n## Tactic State B:\na b : ℕ\nh : a = b\n⊢ a = b\n## Action:\n  apply Nat.succ.inj at h"
"## Tactic State A:\na b : ℕ\nh : a = b\n⊢ a = b\n## Tactic State B:\na b : ℕ\nh : a = b\n⊢ a = b\n## Action:\n  guard_hyp h :ₛ a = b"
"## Tactic State A:\na b : ℕ\nh : a = b\n⊢ a = b\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h"
"## Tactic State A:\nG : Type u_1\ninst✝ : Group G\na b c : G\nh : a * c = b * c\n⊢ a = b\n## Tactic State B:\nG : Type u_1\ninst✝ : Group G\na b c : G\nh : a = b\n⊢ a = b\n## Action:\n  apply mul_right_cancel at h"
"## Tactic State A:\nG : Type u_1\ninst✝ : Group G\na b c : G\nh : a = b\n⊢ a = b\n## Tactic State B:\nG : Type u_1\ninst✝ : Group G\na b c : G\nh : a = b\n⊢ a = b\n## Action:\n  guard_hyp h :ₛ a = b"
"## Tactic State A:\nG : Type u_1\ninst✝ : Group G\na b c : G\nh : a = b\n⊢ a = b\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h"
"## Tactic State A:\nG : Type u_1\ninst✝ : Monoid G\na b c : G\nh : a * c = b * c\nhh : ∀ (x y z : G), x * z = y * z → x = y\n⊢ a = b\n## Tactic State B:\nG : Type u_1\ninst✝ : Monoid G\na b c : G\nhh : ∀ (x y z : G), x * z = y * z → x = y\nh : a = b\n⊢ a = b\n---\ncase inst\nG : Type u_1\ninst✝ : Monoid G\na b c : G\nh : a * c = b * c\nhh : ∀ (x y z : G), x * z = y * z → x = y\n⊢ IsRightCancelMul G\n## Action:\n  apply mul_right_cancel at h"
"## Tactic State A:\nG : Type u_1\ninst✝ : Monoid G\na b c : G\nhh : ∀ (x y z : G), x * z = y * z → x = y\nh : a = b\n⊢ a = b\n---\ncase inst\nG : Type u_1\ninst✝ : Monoid G\na b c : G\nh : a * c = b * c\nhh : ∀ (x y z : G), x * z = y * z → x = y\n⊢ IsRightCancelMul G\n## Tactic State B:\nG : Type u_1\ninst✝ : Monoid G\na b c : G\nhh : ∀ (x y z : G), x * z = y * z → x = y\nh : a = b\n⊢ a = b\n---\ncase inst\nG : Type u_1\ninst✝ : Monoid G\na b c : G\nh : a * c = b * c\nhh : ∀ (x y z : G), x * z = y * z → x = y\n⊢ IsRightCancelMul G\n## Action:\n  guard_hyp h :ₛ a = b"
"## Tactic State A:\nG : Type u_1\ninst✝ : Monoid G\na b c : G\nhh : ∀ (x y z : G), x * z = y * z → x = y\nh : a = b\n⊢ a = b\n---\ncase inst\nG : Type u_1\ninst✝ : Monoid G\na b c : G\nh : a * c = b * c\nhh : ∀ (x y z : G), x * z = y * z → x = y\n⊢ IsRightCancelMul G\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · exact h"
"## Tactic State A:\n\n## Tactic State B:\ncase inst\nG : Type u_1\ninst✝ : Monoid G\na b c : G\nh : a * c = b * c\nhh : ∀ (x y z : G), x * z = y * z → x = y\n⊢ IsRightCancelMul G\n## Action:\n  · guard_target = IsRightCancelMul G"
"## Tactic State A:\ncase inst\nG : Type u_1\ninst✝ : Monoid G\na b c : G\nh : a * c = b * c\nhh : ∀ (x y z : G), x * z = y * z → x = y\n⊢ IsRightCancelMul G\n## Tactic State B:\ncase inst.mul_right_cancel\nG : Type u_1\ninst✝ : Monoid G\na b c : G\nh : a * c = b * c\nhh : ∀ (x y z : G), x * z = y * z → x = y\n⊢ ∀ (a b c : G), a * b = c * b → a = c\n## Action:\n    constructor"
"## Tactic State A:\ncase inst.mul_right_cancel\nG : Type u_1\ninst✝ : Monoid G\na b c : G\nh : a * c = b * c\nhh : ∀ (x y z : G), x * z = y * z → x = y\n⊢ ∀ (a b c : G), a * b = c * b → a = c\n## Tactic State B:\ncase inst.mul_right_cancel\nG : Type u_1\ninst✝ : Monoid G\na✝ b✝ c✝ : G\nh : a✝ * c✝ = b✝ * c✝\nhh : ∀ (x y z : G), x * z = y * z → x = y\na b c : G\n⊢ a * b = c * b → a = c\n## Action:\n    intros a b c"
"## Tactic State A:\ncase inst.mul_right_cancel\nG : Type u_1\ninst✝ : Monoid G\na✝ b✝ c✝ : G\nh : a✝ * c✝ = b✝ * c✝\nhh : ∀ (x y z : G), x * z = y * z → x = y\na b c : G\n⊢ a * b = c * b → a = c\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    apply hh"
"## Tactic State A:\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : α → β → γ → δ\na : α\nb : β\ng : γ\n⊢ δ\n## Tactic State B:\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : α → β → γ → δ\na : α\nb : β\ng : δ\n⊢ δ\n---\ncase a\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : α → β → γ → δ\na : α\nb : β\ng : γ\n⊢ α\n---\ncase a\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : α → β → γ → δ\na : α\nb : β\ng : γ\n⊢ β\n## Action:\n  apply f at g"
"## Tactic State A:\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : α → β → γ → δ\na : α\nb : β\ng : δ\n⊢ δ\n---\ncase a\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : α → β → γ → δ\na : α\nb : β\ng : γ\n⊢ α\n---\ncase a\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : α → β → γ → δ\na : α\nb : β\ng : γ\n⊢ β\n## Tactic State B:\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : α → β → γ → δ\na : α\nb : β\ng : δ\n⊢ δ\n---\ncase a\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : α → β → γ → δ\na : α\nb : β\ng : γ\n⊢ α\n---\ncase a\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : α → β → γ → δ\na : α\nb : β\ng : γ\n⊢ β\n## Action:\n  guard_hyp g :ₛ δ"
"## Tactic State A:\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : α → β → γ → δ\na : α\nb : β\ng : δ\n⊢ δ\n---\ncase a\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : α → β → γ → δ\na : α\nb : β\ng : γ\n⊢ α\n---\ncase a\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : α → β → γ → δ\na : α\nb : β\ng : γ\n⊢ β\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  assumption'"
"## Tactic State A:\nα : Type u_1\nγ : Type u_2\nβ : α → Type u_3\na : α\nf : {a : α} → β a → γ\nb : β a\n⊢ γ\n## Tactic State B:\nα : Type u_1\nγ : Type u_2\nβ : α → Type u_3\na : α\nf : {a : α} → β a → γ\nb : γ\n⊢ γ\n## Action:\n  apply f at b"
"## Tactic State A:\nα : Type u_1\nγ : Type u_2\nβ : α → Type u_3\na : α\nf : {a : α} → β a → γ\nb : γ\n⊢ γ\n## Tactic State B:\nα : Type u_1\nγ : Type u_2\nβ : α → Type u_3\na : α\nf : {a : α} → β a → γ\nb : γ\n⊢ γ\n## Action:\n  guard_hyp b :ₛ γ"
"## Tactic State A:\nα : Type u_1\nγ : Type u_2\nβ : α → Type u_3\na : α\nf : {a : α} → β a → γ\nb : γ\n⊢ γ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact b"
"## Tactic State A:\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : {x : α} → β → {x : γ} → δ\ng : γ\na : α\nb : β\n⊢ δ\n## Tactic State B:\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : {x : α} → β → {x : γ} → δ\na : α\nb : β\ng : δ\n⊢ δ\n---\ncase x\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : {x : α} → β → {x : γ} → δ\ng : γ\na : α\nb : β\n⊢ α\n---\ncase a\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : {x : α} → β → {x : γ} → δ\ng : γ\na : α\nb : β\n⊢ β\n## Action:\n  apply f at g"
"## Tactic State A:\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : {x : α} → β → {x : γ} → δ\na : α\nb : β\ng : δ\n⊢ δ\n---\ncase x\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : {x : α} → β → {x : γ} → δ\ng : γ\na : α\nb : β\n⊢ α\n---\ncase a\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : {x : α} → β → {x : γ} → δ\ng : γ\na : α\nb : β\n⊢ β\n## Tactic State B:\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : {x : α} → β → {x : γ} → δ\na : α\nb : β\ng : δ\n⊢ δ\n---\ncase x\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : {x : α} → β → {x : γ} → δ\ng : γ\na : α\nb : β\n⊢ α\n---\ncase a\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : {x : α} → β → {x : γ} → δ\ng : γ\na : α\nb : β\n⊢ β\n## Action:\n  guard_hyp g :ₛ δ"
"## Tactic State A:\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : {x : α} → β → {x : γ} → δ\na : α\nb : β\ng : δ\n⊢ δ\n---\ncase x\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : {x : α} → β → {x : γ} → δ\ng : γ\na : α\nb : β\n⊢ α\n---\ncase a\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : {x : α} → β → {x : γ} → δ\ng : γ\na : α\nb : β\n⊢ β\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  assumption'"
"## Tactic State A:\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : {x : α} → {x : β} → γ → δ\ng : γ\na : α\nb : β\n⊢ δ\n## Tactic State B:\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : {x : α} → {x : β} → γ → δ\na : α\nb : β\ng : δ\n⊢ δ\n---\ncase x\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : {x : α} → {x : β} → γ → δ\ng : γ\na : α\nb : β\n⊢ α\n---\ncase x\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : {x : α} → {x : β} → γ → δ\ng : γ\na : α\nb : β\n⊢ β\n## Action:\n  apply f at g"
"## Tactic State A:\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : {x : α} → {x : β} → γ → δ\na : α\nb : β\ng : δ\n⊢ δ\n---\ncase x\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : {x : α} → {x : β} → γ → δ\ng : γ\na : α\nb : β\n⊢ α\n---\ncase x\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : {x : α} → {x : β} → γ → δ\ng : γ\na : α\nb : β\n⊢ β\n## Tactic State B:\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : {x : α} → {x : β} → γ → δ\na : α\nb : β\ng : δ\n⊢ δ\n---\ncase x\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : {x : α} → {x : β} → γ → δ\ng : γ\na : α\nb : β\n⊢ α\n---\ncase x\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : {x : α} → {x : β} → γ → δ\ng : γ\na : α\nb : β\n⊢ β\n## Action:\n  guard_hyp g :ₛ δ"
"## Tactic State A:\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : {x : α} → {x : β} → γ → δ\na : α\nb : β\ng : δ\n⊢ δ\n---\ncase x\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : {x : α} → {x : β} → γ → δ\ng : γ\na : α\nb : β\n⊢ α\n---\ncase x\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : {x : α} → {x : β} → γ → δ\ng : γ\na : α\nb : β\n⊢ β\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  assumption'"
"## Tactic State A:\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nf : α → β\n_g : γ\n⊢ β × γ\n## Tactic State B:\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nf : α → β\n_g : γ\n⊢ β × γ\n## Action:\n  apply f at _g"
"## Tactic State A:\nα : Type u_1\nβ : Type u_2\na : α\n_b : β\n⊢ α × β\n## Tactic State B:\nα : Type u_1\nβ : Type u_2\na : α\n_b : β\n⊢ α × β\n## Action:\n  apply a at _b"
"## Tactic State A:\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nf : α → β\ng : γ\na : α\n⊢ β × γ\n## Tactic State B:\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nf : α → β\ng : γ\na : α\n⊢ β × γ\n## Action:\n  fail_if_success apply f at g"
"## Tactic State A:\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nf : α → β\ng : γ\na : α\n⊢ β × γ\n## Tactic State B:\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nf : α → β\ng : γ\na : β\n⊢ β × γ\n## Action:\n  apply f at a"
"## Tactic State A:\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nf : α → β\ng : γ\na : β\n⊢ β × γ\n## Tactic State B:\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nf : α → β\ng : γ\na : β\n⊢ β × γ\n## Action:\n  guard_hyp a :ₛ β"
"## Tactic State A:\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nf : α → β\ng : γ\na : β\n⊢ β × γ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact (a, g)"
"## Tactic State A:\nα : Type u_1\nβ : Type u_2\na : α\nb : β\n⊢ α × β\n## Tactic State B:\nα : Type u_1\nβ : Type u_2\na : α\nb : β\n⊢ α × β\n## Action:\n  fail_if_success apply a at b"
"## Tactic State A:\nα : Type u_1\nβ : Type u_2\na : α\nb : β\n⊢ α × β\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact (a, b)"
"## Tactic State A:\nα : Type u_1\nβ : Type u_2\na : α\nb : β\n⊢ α × β\n## Tactic State B:\nα : Type u_1\nβ : Type u_2\na : α\nb : β\n⊢ α × β\n## Action:\n  fail_if_success apply a at b"
"## Tactic State A:\nα : Type u_1\nβ : Type u_2\na : α\nb : β\n⊢ α × β\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact (a, b)"
"## Tactic State A:\nA B : Prop\nh : A ↔ B\n⊢ A → B\n## Tactic State B:\nA B : Prop\nh : A ↔ B\nhA : A\n⊢ B\n## Action:\n  intro hA"
"## Tactic State A:\nA B : Prop\nh : A ↔ B\nhA : A\n⊢ B\n## Tactic State B:\nA B : Prop\nh : A ↔ B\nhA : B\n⊢ B\n## Action:\n  apply h.mp at hA"
"## Tactic State A:\nA B : Prop\nh : A ↔ B\nhA : B\n⊢ B\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  assumption"
"## Tactic State A:\na : ℝ\nh3 : a + 1 = 0\n⊢ a = -1\n## Tactic State B:\na : ℝ\nh3✝ : a + 1 = 0\nh3 : a + 1 - 1 = 0 - 1\n⊢ a = -1\n## Action:\n  apply (congrArg (fun x => x - 1)) at h3"
"## Tactic State A:\na : ℝ\nh3✝ : a + 1 = 0\nh3 : a + 1 - 1 = 0 - 1\n⊢ a = -1\n## Tactic State B:\na : ℝ\nh3✝ : a + 1 = 0\nh3 : a = -1\n⊢ a = -1\n## Action:\n  simp at h3"
"## Tactic State A:\na : ℝ\nh3✝ : a + 1 = 0\nh3 : a = -1\n⊢ a = -1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  assumption"
"## Tactic State A:\na b : ℝ\nh : -a * b = 0\n⊢ a = 0 ∨ b = 0\n## Tactic State B:\na b : ℝ\nh✝ : -a * b = 0\nh : -a * b / 1 = 0 / 1\n⊢ a = 0 ∨ b = 0\n## Action:\n  apply (congrArg (fun x => x / 1)) at h"
"## Tactic State A:\na b : ℝ\nh✝ : -a * b = 0\nh : -a * b / 1 = 0 / 1\n⊢ a = 0 ∨ b = 0\n## Tactic State B:\na b : ℝ\nh✝ : -a * b = 0\nh : a = 0 ∨ b = 0\n⊢ a = 0 ∨ b = 0\n## Action:\n  simp at h"
"## Tactic State A:\na b : ℝ\nh✝ : -a * b = 0\nh : a = 0 ∨ b = 0\n⊢ a = 0 ∨ b = 0\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  assumption"
"## Tactic State A:\nh : True\n⊢ True\n## Tactic State B:\nh : True\nH : ∀ (h : True), h = h\n⊢ True\n## Action:\n  have H (h : True) : h = h := rfl"
"## Tactic State A:\nh : True\nH : ∀ (h : True), h = h\n⊢ True\n## Tactic State B:\nh✝ : True\nH : ∀ (h : True), h = h\nh : h✝ = h✝\n⊢ True\n## Action:\n  apply H at h"
"## Tactic State A:\nh✝ : True\nH : ∀ (h : True), h = h\nh : h✝ = h✝\n⊢ True\n## Tactic State B:\nh✝ : True\nH : ∀ (h : True), h = h\nh : True\n⊢ True\n## Action:\n  simp at h"
"## Tactic State A:\nh✝ : True\nH : ∀ (h : True), h = h\nh : True\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h"
"## Tactic State A:\na : List ℕ\nk : ℕ\nhk : k < a.length\n⊢ True\n## Tactic State B:\na : List ℕ\nk : ℕ\nhk : k < a.length\nH : ∀ (k : ℕ) {xs ys : List ℕ} (hk : k < xs.length) (h : xs = ys), xs[k] = ys[k]\n⊢ True\n## Action:\n  have H (k : Nat) {xs ys : List Nat} (hk: k < xs.length)"
"## Tactic State A:\na : List ℕ\nk : ℕ\nhk : k < a.length\nH : ∀ (k : ℕ) {xs ys : List ℕ} (hk : k < xs.length) (h : xs = ys), xs[k] = ys[k]\n⊢ True\n## Tactic State B:\na : List ℕ\nk : ℕ\nhk : k < a.length\nH : ∀ (k : ℕ) {xs ys : List ℕ} (hk : k < xs.length) (h : xs = ys), xs[k] = ys[k]\nh : a = List.map id a\n⊢ True\n## Action:\n    (h : xs = ys) : xs[k] = ys[k]'(h ▸ hk) := h ▸ rfl"
"## Tactic State A:\na : List ℕ\nk : ℕ\nhk : k < a.length\nH : ∀ (k : ℕ) {xs ys : List ℕ} (hk : k < xs.length) (h : xs = ys), xs[k] = ys[k]\nh : a = List.map id a\n⊢ True\n## Tactic State B:\na : List ℕ\nk : ℕ\nhk : k < a.length\nH : ∀ (k : ℕ) {xs ys : List ℕ} (hk : k < xs.length) (h : xs = ys), xs[k] = ys[k]\nh✝ : a = List.map id a\nh : a[k] = (List.map id a)[k]\n⊢ True\n## Action:\n  have h : a = a.map id := by simp"
"## Tactic State A:\na : List ℕ\nk : ℕ\nhk : k < a.length\nH : ∀ (k : ℕ) {xs ys : List ℕ} (hk : k < xs.length) (h : xs = ys), xs[k] = ys[k]\nh✝ : a = List.map id a\nh : a[k] = (List.map id a)[k]\n⊢ True\n## Tactic State B:\na : List ℕ\nk : ℕ\nhk : k < a.length\nH : ∀ (k : ℕ) {xs ys : List ℕ} (hk : k < xs.length) (h : xs = ys), xs[k] = ys[k]\nh✝ : a = List.map id a\nh : True\n⊢ True\n## Action:\n  apply H k hk at h"
"## Tactic State A:\na : List ℕ\nk : ℕ\nhk : k < a.length\nH : ∀ (k : ℕ) {xs ys : List ℕ} (hk : k < xs.length) (h : xs = ys), xs[k] = ys[k]\nh✝ : a = List.map id a\nh : True\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  simp at h"
"## Tactic State A:\nFoo : Sort ?u.5\n⊢ Foo\n## Tactic State B:\nFoo : Sort ?u.5\n⊢ Foo\n## Action:\n  fconstructor"
"## Tactic State A:\nFoo : Sort ?u.5\n⊢ Foo\n## Tactic State B:\nFoo : Sort ?u.5\n⊢ Foo\n## Action:\n  econstructor"
"## Tactic State A:\n⊢ (let x := 1;\n    x) =\n    1\n## Tactic State B:\n⊢ let x := 1;\n  x = 1\n## Action:\n  lift_lets"
"## Tactic State A:\n⊢ let x := 1;\n  x = 1\n## Tactic State B:\n⊢ let x := 1;\n  x = 1\n## Action:\n  guard_target =ₛ let x := 1; x = 1"
"## Tactic State A:\n⊢ let x := 1;\n  x = 1\n## Tactic State B:\n_x : ℕ := 1\n⊢ _x = 1\n## Action:\n  intro _x"
"## Tactic State A:\n_x : ℕ := 1\n⊢ _x = 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rfl"
"## Tactic State A:\n⊢ (let x := 1;\n    x) =\n    let y := 1;\n    y\n## Tactic State B:\n⊢ let x := 1;\n  x = x\n## Action:\n  lift_lets"
"## Tactic State A:\n⊢ let x := 1;\n  x = x\n## Tactic State B:\n⊢ let x := 1;\n  x = x\n## Action:\n  guard_target =ₛ let x := 1; x = x"
"## Tactic State A:\n⊢ let x := 1;\n  x = x\n## Tactic State B:\n_x : ℕ := 1\n⊢ _x = _x\n## Action:\n  intro _x"
"## Tactic State A:\n_x : ℕ := 1\n⊢ _x = _x\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rfl"
"## Tactic State A:\n⊢ (let x := 1;\n    x) =\n    let y := 1;\n    y\n## Tactic State B:\n⊢ let x := 1;\n  let y := 1;\n  x = y\n## Action:\n  lift_lets (config := {merge := false})"
"## Tactic State A:\n⊢ let x := 1;\n  let y := 1;\n  x = y\n## Tactic State B:\n⊢ let x := 1;\n  let y := 1;\n  x = y\n## Action:\n  guard_target =ₛ let x := 1; let y := 1; x = y"
"## Tactic State A:\n⊢ let x := 1;\n  let y := 1;\n  x = y\n## Tactic State B:\n_x : ℕ := 1\n_y : ℕ := 1\n⊢ _x = _y\n## Action:\n  intros _x _y"
"## Tactic State A:\n_x : ℕ := 1\n_y : ℕ := 1\n⊢ _x = _y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rfl"
"## Tactic State A:\n⊢ (let x :=\n      let y := 1;\n      y + 1;\n    x + 1) =\n    3\n## Tactic State B:\n⊢ let y := 1;\n  let x := y + 1;\n  x + 1 = 3\n## Action:\n  lift_lets"
"## Tactic State A:\n⊢ let y := 1;\n  let x := y + 1;\n  x + 1 = 3\n## Tactic State B:\n⊢ let y := 1;\n  let x := y + 1;\n  x + 1 = 3\n## Action:\n  guard_target =ₛ let y := 1; let x := y + 1; x + 1 = 3"
"## Tactic State A:\n⊢ let y := 1;\n  let x := y + 1;\n  x + 1 = 3\n## Tactic State B:\n_y : ℕ := 1\n_x : ℕ := _y + 1\n⊢ _x + 1 = 3\n## Action:\n  intros _y _x"
"## Tactic State A:\n_y : ℕ := 1\n_x : ℕ := _y + 1\n⊢ _x + 1 = 3\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rfl"
"## Tactic State A:\n⊢ (fun x =>\n        let a := x;\n        let y := 1;\n        a + y)\n      2 =\n    2 + 1\n## Tactic State B:\n⊢ let y := 1;\n  (fun x =>\n        let a := x;\n        a + y)\n      2 =\n    2 + 1\n## Action:\n  lift_lets"
"## Tactic State A:\n⊢ let y := 1;\n  (fun x =>\n        let a := x;\n        a + y)\n      2 =\n    2 + 1\n## Tactic State B:\n⊢ let y := 1;\n  (fun x =>\n        let a := x;\n        a + y)\n      2 =\n    2 + 1\n## Action:\n  guard_target =ₛ let y := 1; (fun x ↦ let a := x; a + y) 2 = 2 + 1"
"## Tactic State A:\n⊢ let y := 1;\n  (fun x =>\n        let a := x;\n        a + y)\n      2 =\n    2 + 1\n## Tactic State B:\n_y : ℕ := 1\n⊢ (fun x =>\n        let a := x;\n        a + _y)\n      2 =\n    2 + 1\n## Action:\n  intro _y"
"## Tactic State A:\n_y : ℕ := 1\n⊢ (fun x =>\n        let a := x;\n        a + _y)\n      2 =\n    2 + 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rfl"
"## Tactic State A:\n⊢ (fun x => ℕ) 2\n## Tactic State B:\n⊢ let ty := ℕ;\n  (fun x => ℕ) 2\n## Action:\n  lift_lets"
"## Tactic State A:\n⊢ let ty := ℕ;\n  (fun x => ℕ) 2\n## Tactic State B:\n⊢ let ty := ℕ;\n  (fun x => ℕ) 2\n## Action:\n  guard_target =ₛ let ty := Nat; (fun (_ : ty) ↦ Nat) (2 : Nat)"
"## Tactic State A:\n⊢ let ty := ℕ;\n  (fun x => ℕ) 2\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact 0"
"## Tactic State A:\n⊢ (fun x => Fin x) 2\n## Tactic State B:\n⊢ let ty := ℕ;\n  (fun x => Fin x) 2\n## Action:\n  lift_lets"
"## Tactic State A:\n⊢ let ty := ℕ;\n  (fun x => Fin x) 2\n## Tactic State B:\n⊢ let ty := ℕ;\n  (fun x => Fin x) 2\n## Action:\n  guard_target =ₛ let ty := Nat; (fun (x : ty) ↦ Fin x) (2 : Nat)"
"## Tactic State A:\n⊢ let ty := ℕ;\n  (fun x => Fin x) 2\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact 0"
"## Tactic State A:\n⊢ id = fun x => x\n## Tactic State B:\n⊢ let ty := ℕ;\n  id = fun x => x\n## Action:\n  lift_lets"
"## Tactic State A:\n⊢ let ty := ℕ;\n  id = fun x => x\n## Tactic State B:\n⊢ let ty := ℕ;\n  id = fun x => x\n## Action:\n  guard_target =ₛ let ty := Nat; (id: Nat → Nat) = fun (x : ty) ↦ x"
"## Tactic State A:\n⊢ let ty := ℕ;\n  id = fun x => x\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rfl"
"## Tactic State A:\n⊢ (x :\n      let ty := ℕ;\n      ty) →\n    let y := 1;\n    Fin (y + Nat.succ x)\n## Tactic State B:\n⊢ let ty := ℕ;\n  let y := 1;\n  (x : ty) → Fin (y + Nat.succ x)\n## Action:\n  lift_lets"
"## Tactic State A:\n⊢ let ty := ℕ;\n  let y := 1;\n  (x : ty) → Fin (y + Nat.succ x)\n## Tactic State B:\n⊢ let ty := ℕ;\n  let y := 1;\n  (x : ty) → Fin (y + Nat.succ x)\n## Action:\n  guard_target =ₛ let ty := Nat; let y := 1; (x : ty) → Fin (y + Nat.succ x)"
"## Tactic State A:\n⊢ let ty := ℕ;\n  let y := 1;\n  (x : ty) → Fin (y + Nat.succ x)\n## Tactic State B:\nty : Type := ℕ\ny : ℕ := 1\nx : ty\n⊢ Fin (y + Nat.succ x)\n## Action:\n  intro ty y x"
"## Tactic State A:\nty : Type := ℕ\ny : ℕ := 1\nx : ty\n⊢ Fin (y + Nat.succ x)\n## Tactic State B:\nty : Type := ℕ\ny : ℕ := 1\nx : ty\n⊢ Fin (y + x + 1)\n## Action:\n  rw [Nat.add_succ, Nat.succ_eq_add_one]"
"## Tactic State A:\nty : Type := ℕ\ny : ℕ := 1\nx : ty\n⊢ Fin (y + x + 1)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact 0"
"## Tactic State A:\n⊢ (x : ℕ) →\n    ℕ →\n      let z := x + 1;\n      let w := 3;\n      Fin (z + w)\n## Tactic State B:\n⊢ let w := 3;\n  (x : ℕ) →\n    let z := x + 1;\n    ℕ → Fin (z + w)\n## Action:\n  lift_lets"
"## Tactic State A:\n⊢ let w := 3;\n  (x : ℕ) →\n    let z := x + 1;\n    ℕ → Fin (z + w)\n## Tactic State B:\n⊢ let w := 3;\n  (x : ℕ) →\n    let z := x + 1;\n    ℕ → Fin (z + w)\n## Action:\n  guard_target =ₛ let w := 3; (x : Nat) → let z := x + 1; Nat → Fin (z + w)"
"## Tactic State A:\n⊢ let w := 3;\n  (x : ℕ) →\n    let z := x + 1;\n    ℕ → Fin (z + w)\n## Tactic State B:\nw : ℕ := 3\nx : ℕ\nz : ℕ := x + 1\n_y : ℕ\n⊢ Fin (z + w)\n## Action:\n  intro w x z _y"
"## Tactic State A:\nw : ℕ := 3\nx : ℕ\nz : ℕ := x + 1\n_y : ℕ\n⊢ Fin (z + w)\n## Tactic State B:\nw : ℕ := 3\nx : ℕ\nz : ℕ := x + 1\n_y : ℕ\n⊢ Fin (x + 1 + 3)\n## Action:\n  simp [w, z]"
"## Tactic State A:\nw : ℕ := 3\nx : ℕ\nz : ℕ := x + 1\n_y : ℕ\n⊢ Fin (x + 1 + 3)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact 0"
"## Tactic State A:\n⊢ (x : ℕ) →\n    let z := x + 1;\n    ℕ →\n      let w := 3;\n      Fin (z + w)\n## Tactic State B:\n⊢ let w := 3;\n  (x : ℕ) →\n    let z := x + 1;\n    ℕ → Fin (z + w)\n## Action:\n  lift_lets"
"## Tactic State A:\n⊢ let w := 3;\n  (x : ℕ) →\n    let z := x + 1;\n    ℕ → Fin (z + w)\n## Tactic State B:\n⊢ let w := 3;\n  (x : ℕ) →\n    let z := x + 1;\n    ℕ → Fin (z + w)\n## Action:\n  guard_target =ₛ let w := 3; (x : Nat) → let z := x + 1; Nat → Fin (z + w)"
"## Tactic State A:\n⊢ let w := 3;\n  (x : ℕ) →\n    let z := x + 1;\n    ℕ → Fin (z + w)\n## Tactic State B:\nw : ℕ := 3\nx : ℕ\nz : ℕ := x + 1\n_y : ℕ\n⊢ Fin (z + w)\n## Action:\n  intro w x z _y"
"## Tactic State A:\nw : ℕ := 3\nx : ℕ\nz : ℕ := x + 1\n_y : ℕ\n⊢ Fin (z + w)\n## Tactic State B:\nw : ℕ := 3\nx : ℕ\nz : ℕ := x + 1\n_y : ℕ\n⊢ Fin (x + 1 + 3)\n## Action:\n  simp [w, z]"
"## Tactic State A:\nw : ℕ := 3\nx : ℕ\nz : ℕ := x + 1\n_y : ℕ\n⊢ Fin (x + 1 + 3)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact 0"
"## Tactic State A:\n⊢ (let x := 1;\n    x) =\n    let x := 1;\n    x\n## Tactic State B:\n⊢ let x := 1;\n  x = x\n## Action:\n  lift_lets"
"## Tactic State A:\n⊢ let x := 1;\n  x = x\n## Tactic State B:\n⊢ let x := 1;\n  x = x\n## Action:\n  guard_target =ₛ let x := 1; x = x"
"## Tactic State A:\n⊢ let x := 1;\n  x = x\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rfl"
"## Tactic State A:\n⊢ (let x := 2;\n    x) =\n    let y := 1;\n    y + 1\n## Tactic State B:\n⊢ let x := 2;\n  let y := 1;\n  x = y + 1\n## Action:\n  lift_lets"
"## Tactic State A:\n⊢ let x := 2;\n  let y := 1;\n  x = y + 1\n## Tactic State B:\n⊢ let x := 2;\n  let y := 1;\n  x = y + 1\n## Action:\n  guard_target =ₛ let x := 2; let y := 1; x = y + 1"
"## Tactic State A:\n⊢ let x := 2;\n  let y := 1;\n  x = y + 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rfl"
"## Tactic State A:\ny : ℕ\nh :\n  (let x := 1;\n    x) =\n    y\n⊢ True\n## Tactic State B:\ny : ℕ\nh :\n  let x := 1;\n  x = y\n⊢ True\n## Action:\n  lift_lets at h"
"## Tactic State A:\ny : ℕ\nh :\n  let x := 1;\n  x = y\n⊢ True\n## Tactic State B:\ny : ℕ\nh :\n  let x := 1;\n  x = y\n⊢ True\n## Action:\n  guard_hyp h :ₛ let x := 1; x = y"
"## Tactic State A:\ny : ℕ\nh :\n  let x := 1;\n  x = y\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial"
"## Tactic State A:\ny : ℕ\nh :\n  (let x := 1;\n    x) =\n    y\n⊢ True\n## Tactic State B:\ny : ℕ\n⊢ (let x := 1;\n      x) =\n      y →\n    True\n## Action:\n  revert h"
"## Tactic State A:\ny : ℕ\n⊢ (let x := 1;\n      x) =\n      y →\n    True\n## Tactic State B:\ny : ℕ\n⊢ let x := 1;\n  x = y → True\n## Action:\n  lift_lets"
"## Tactic State A:\ny : ℕ\n⊢ let x := 1;\n  x = y → True\n## Tactic State B:\ny : ℕ\nx : ℕ := 1\nh : x = y\n⊢ True\n## Action:\n  intro x h"
"## Tactic State A:\ny : ℕ\nx : ℕ := 1\nh : x = y\n⊢ True\n## Tactic State B:\ny : ℕ\nx : ℕ := 1\nh : x = y\n⊢ True\n## Action:\n  guard_hyp x : Nat := 1"
"## Tactic State A:\ny : ℕ\nx : ℕ := 1\nh : x = y\n⊢ True\n## Tactic State B:\ny : ℕ\nx : ℕ := 1\nh : x = y\n⊢ True\n## Action:\n  guard_hyp h :ₛ x = y"
"## Tactic State A:\ny : ℕ\nx : ℕ := 1\nh : x = y\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial"
"## Tactic State A:\n⊢ let x := 1;\n  ∀ (n : ℕ),\n    let y := 1;\n    x + n = y + n\n## Tactic State B:\n⊢ let x := 1;\n  ∀ (n : ℕ), x + n = x + n\n## Action:\n  lift_lets"
"## Tactic State A:\n⊢ let x := 1;\n  ∀ (n : ℕ), x + n = x + n\n## Tactic State B:\n⊢ let x := 1;\n  ∀ (n : ℕ), x + n = x + n\n## Action:\n  guard_target =ₛ let x := 1; ∀ n, x + n = x + n"
"## Tactic State A:\n⊢ let x := 1;\n  ∀ (n : ℕ), x + n = x + n\n## Tactic State B:\nx : ℕ := 1\nn : ℕ\n⊢ x + n = x + n\n## Action:\n  intros x n"
"## Tactic State A:\nx : ℕ := 1\nn : ℕ\n⊢ x + n = x + n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rfl"
"## Tactic State A:\nm : ℕ\nh : ∃ n, n + 1 = m\nx : Fin m\ny : Fin (h.choose + 1)\n⊢ cast ⋯ x = y\n## Tactic State B:\nm : ℕ\nh : ∃ n, n + 1 = m\nx : Fin m\ny : Fin (h.choose + 1)\n⊢ let h' := ⋯;\n  cast ⋯ x = y\n## Action:\n  lift_lets (config := {proofs := true})"
"## Tactic State A:\nm : ℕ\nh : ∃ n, n + 1 = m\nx : Fin m\ny : Fin (h.choose + 1)\n⊢ let h' := ⋯;\n  cast ⋯ x = y\n## Tactic State B:\nm : ℕ\nh : ∃ n, n + 1 = m\nx : Fin m\ny : Fin (h.choose + 1)\nh' : m = h.choose + 1 := Eq.symm (Exists.choose_spec h)\n⊢ cast ⋯ x = y\n## Action:\n  intro h'"
"## Tactic State A:\nm : ℕ\nh : ∃ n, n + 1 = m\nx : Fin m\ny : Fin (h.choose + 1)\nh' : m = h.choose + 1 := Eq.symm (Exists.choose_spec h)\n⊢ cast ⋯ x = y\n## Tactic State B:\nm : ℕ\nh : ∃ n, n + 1 = m\nx : Fin m\ny : Fin (h.choose + 1)\nh' : m = h.choose + 1\n⊢ cast ⋯ x = y\n## Action:\n  clear_value h'"
"## Tactic State A:\nm : ℕ\nh : ∃ n, n + 1 = m\nx : Fin m\ny : Fin (h.choose + 1)\nh' : m = h.choose + 1\n⊢ cast ⋯ x = y\n## Tactic State B:\nm : ℕ\nh : ∃ n, n + 1 = m\nx : Fin m\ny : Fin (h.choose + 1)\nh' : m = h.choose + 1\n⊢ cast ⋯ x = y\n## Action:\n  guard_hyp h' : m = Exists.choose h + 1"
"## Tactic State A:\nm : ℕ\nh : ∃ n, n + 1 = m\nx : Fin m\ny : Fin (h.choose + 1)\nh' : m = h.choose + 1\n⊢ cast ⋯ x = y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact test_sorry"
"## Tactic State A:\n⊢ -1 ≠ 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  orderOf_eq_prime (Int.units_sq _) (by decide)"
"## Tactic State A:\ny z x : ℕ\nh : y = z\n⊢ x + 0 = y → x = z\n## Tactic State B:\ny z x : ℕ\nh : y = z\n⊢ x = y → x = z\n## Action:\n  simp_intro"
"## Tactic State A:\ny z x : ℕ\nh : y = z\n⊢ x = y → x = z\n## Tactic State B:\ny z x : ℕ\nh : y = z\n⊢ x = y → x = z\n## Action:\n  guard_target = x = y → x = z"
"## Tactic State A:\ny z x : ℕ\nh : y = z\n⊢ x = y → x = z\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  simp_intro .. [h]"
"## Tactic State A:\nh : 1 = 1\n⊢ True\n## Tactic State B:\nh : True\n⊢ True\n## Action:\n  fail_if_no_progress simp at h"
"## Tactic State A:\nh : True\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial"
"## Tactic State A:\n⊢ let x := 1;\n  x = x\n## Tactic State B:\nx : ℕ := 1\n⊢ x = x\n## Action:\n  intro x"
"## Tactic State A:\nx : ℕ := 1\n⊢ x = x\n## Tactic State B:\nx : ℕ\n⊢ x = x\n## Action:\n  fail_if_no_progress clear_value x"
"## Tactic State A:\nx : ℕ\n⊢ x = x\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rfl"
"## Tactic State A:\n⊢ let x := 1;\n  x = x\n## Tactic State B:\nx : ℕ := 1\n⊢ x = x\n## Action:\n  intro x"
"## Tactic State A:\nx : ℕ := 1\n⊢ x = x\n## Tactic State B:\nx : ℕ := 1\n⊢ x = x\n## Action:\n  fail_if_no_progress"
"## Tactic State A:\nx : ℕ := 1\n⊢ x = x\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    revert x"
"## Tactic State A:\n⊢ let x := id 0;\n  x = x\n## Tactic State B:\nx : ℕ := id 0\n⊢ x = x\n## Action:\n  intro x"
"## Tactic State A:\nx : ℕ := id 0\n⊢ x = x\n## Tactic State B:\nx : ℕ := Nat.zero\n⊢ x = x\n## Action:\n  fail_if_no_progress"
"## Tactic State A:\nx : ℕ := Nat.zero\n⊢ x = x\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    -- Reduce the value of `x` to `Nat.zero`"
"## Tactic State A:\nx : Bool\nh : x = true\n⊢ x = true\n## Tactic State B:\nx : Bool\nh : x = true\n⊢ x = true\n## Action:\n  fail_if_no_progress skip"
"## Tactic State A:\nx : Bool\nh : x = true\n⊢ x = true\n## Tactic State B:\nx : Bool\nh : x = true\n⊢ x = true\n## Action:\n  fail_if_no_progress simp (config := {failIfUnchanged := false})"
"## Tactic State A:\nx : Bool\nh : x = true\n⊢ True\n## Tactic State B:\nx : Bool\nh : x = true\n⊢ True\n## Action:\n  fail_if_no_progress simp (config := {failIfUnchanged := false}) at h"
"## Tactic State A:\n⊢ let x := (fun x => x) Nat.zero;\n  x = x\n## Tactic State B:\nx : ℕ := (fun x => x) Nat.zero\n⊢ x = x\n## Action:\n  intro x"
"## Tactic State A:\nx : ℕ := (fun x => x) Nat.zero\n⊢ x = x\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  fail_if_no_progress"
"## Tactic State A:\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\n⊢ (α × β) × γ × δ ≃ α × (β × γ) × δ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact (prod_assoc% : (α × β) × (γ × δ) ≃ α × (β × γ) × δ)"
"## Tactic State A:\nR : Type u_1\nn : ℕ\nz : ℤ\nf : ℤ[X]\nhn : f.natDegree ≤ 5\nhd : f.degree ≤ 5\n⊢ (-C z * X ^ 5 + (monomial 2) 5 ^ 2 - 0 + 1 + IntCast.intCast 1 + ↑1 + ↑z + ↑n + f).natDegree ≤ 5\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  compute_degree!"
"## Tactic State A:\nR : Type u_1\nn : ℕ\nz : ℤ\nf : ℤ[X]\nhn : f.natDegree ≤ 5\nhd : f.degree ≤ 5\ninst✝ : Semiring R\n⊢ natDegree (OfNat.ofNat (OfNat.ofNat 0)) ≤ 0\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  compute_degree"
"## Tactic State A:\nR : Type u_1\nn : ℕ\nz : ℤ\nf : ℤ[X]\nhn : f.natDegree ≤ 5\nhd : f.degree ≤ 5\n⊢ (-C z * X ^ 5 + (C 0 + (monomial 2) 5) ^ 2 - 0 + 1 + IntCast.intCast 1 + ↑1 + ↑z + ↑n + f).degree ≤ 5\n## Tactic State B:\nR : Type u_1\nn : ℕ\nz : ℤ\nf : ℤ[X]\nk : ℤ[X] := f\nhn : k.natDegree ≤ 5\nhd : k.degree ≤ 5\n_h₀ : k = f\n⊢ (-C z * X ^ 5 + (C 0 + (monomial 2) 5) ^ 2 - 0 + 1 + IntCast.intCast 1 + ↑1 + ↑z + ↑n + k).degree ≤ 5\n## Action:\n  set k := f with _h₀"
"## Tactic State A:\nR : Type u_1\nn : ℕ\nz : ℤ\nf : ℤ[X]\nk : ℤ[X] := f\nhn : k.natDegree ≤ 5\nhd : k.degree ≤ 5\n_h₀ : k = f\n⊢ (-C z * X ^ 5 + (C 0 + (monomial 2) 5) ^ 2 - 0 + 1 + IntCast.intCast 1 + ↑1 + ↑z + ↑n + k).degree ≤ 5\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  compute_degree!"
"## Tactic State A:\nR : Type u_1\nn : ℕ\nz : ℤ\nf : ℤ[X]\nhn : f.natDegree ≤ 5\nhd : f.degree ≤ 5\n⊢ (-C 1 * X ^ 5 + (C 0 + (monomial 2) 5) ^ 2 - 0 + 1 + IntCast.intCast 1 + ↑1 + ↑z + ↑n).natDegree = 5\n## Tactic State B:\nR : Type u_1\nn : ℕ\nz : ℤ\nf : ℤ[X]\nk : ℤ[X] := f\nhn : k.natDegree ≤ 5\nhd : k.degree ≤ 5\n_h₀ : k = f\n⊢ (-C 1 * X ^ 5 + (C 0 + (monomial 2) 5) ^ 2 - 0 + 1 + IntCast.intCast 1 + ↑1 + ↑z + ↑n).natDegree = 5\n## Action:\n  set k := f with _h₀"
"## Tactic State A:\nR : Type u_1\nn : ℕ\nz : ℤ\nf : ℤ[X]\nk : ℤ[X] := f\nhn : k.natDegree ≤ 5\nhd : k.degree ≤ 5\n_h₀ : k = f\n⊢ (-C 1 * X ^ 5 + (C 0 + (monomial 2) 5) ^ 2 - 0 + 1 + IntCast.intCast 1 + ↑1 + ↑z + ↑n).natDegree = 5\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  compute_degree!"
"## Tactic State A:\nR : Type u_1\nn : ℕ\nz : ℤ\nf : ℤ[X]\nhn : f.natDegree ≤ 5\nhd : f.degree ≤ 5\n⊢ (-C 1 * X ^ 5 + (C 0 + (monomial 2) 5) ^ 2 - 0 + 1 + IntCast.intCast 1 + ↑1 + ↑z + ↑n).degree = 5\n## Tactic State B:\nR : Type u_1\nn : ℕ\nz : ℤ\nf : ℤ[X]\nk : ℤ[X] := f\nhn : k.natDegree ≤ 5\nhd : k.degree ≤ 5\n_h₀ : k = f\n⊢ (-C 1 * X ^ 5 + (C 0 + (monomial 2) 5) ^ 2 - 0 + 1 + IntCast.intCast 1 + ↑1 + ↑z + ↑n).degree = 5\n## Action:\n  set k := f with _h₀"
"## Tactic State A:\nR : Type u_1\nn : ℕ\nz : ℤ\nf : ℤ[X]\nk : ℤ[X] := f\nhn : k.natDegree ≤ 5\nhd : k.degree ≤ 5\n_h₀ : k = f\n⊢ (-C 1 * X ^ 5 + (C 0 + (monomial 2) 5) ^ 2 - 0 + 1 + IntCast.intCast 1 + ↑1 + ↑z + ↑n).degree = 5\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  compute_degree!"
"## Tactic State A:\nR : Type u_1\nn : ℕ\nz : ℤ\nf : ℤ[X]\nhn : f.natDegree ≤ 5\nhd : f.degree ≤ 5\n⊢ ((C 1 * X ^ 2 + C 2 * X + C 3) * (C 0 * X ^ 0 + C 2 * X ^ 1 + C 1 * X ^ 5) ^ 4).degree = 22\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  compute_degree!"
"## Tactic State A:\nR : Type u_1\nn : ℕ\nz : ℤ\nf : ℤ[X]\nhn : f.natDegree ≤ 5\nhd : f.degree ≤ 5\ninst✝¹ : Nontrivial R\ninst✝ : Ring R\n⊢ (1 + X + X ^ 2 - X ^ 5 - X ^ 6 - 2 * X ^ 7 - X ^ 8 - X ^ 9 + X ^ 12 + X ^ 13 + X ^ 14 + X ^ 15 + X ^ 16 + X ^ 17 -\n                                            X ^ 20 -\n                                          X ^ 22 -\n                                        X ^ 24 -\n                                      X ^ 26 -\n                                    X ^ 28 +\n                                  X ^ 31 +\n                                X ^ 32 +\n                              X ^ 33 +\n                            X ^ 34 +\n                          X ^ 35 +\n                        X ^ 36 -\n                      X ^ 39 -\n                    X ^ 40 -\n                  2 * X ^ 41 -\n                X ^ 42 -\n              X ^ 43 +\n            X ^ 46 +\n          X ^ 47 +\n        X ^ 48).degree =\n    48\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  compute_degree!"
"## Tactic State A:\nR : Type u_1\nn : ℕ\nz : ℤ\nf : ℤ[X]\nhn : f.natDegree ≤ 5\nhd : f.degree ≤ 5\ninst✝ : Ring R\ng : R[X]\nhg : g.degree ≤ 5\n⊢ (-C ↑z * X ^ 5 + (monomial 2) 5 ^ 2 - 0 + 1 + IntCast.intCast 1 + ↑1 + ↑z + ↑n + g).degree ≤ 5\n## Tactic State B:\nR : Type u_1\nn : ℕ\nz : ℤ\nf : ℤ[X]\nhn : f.natDegree ≤ 5\nhd : f.degree ≤ 5\ninst✝ : Ring R\ng : R[X]\nk : R[X] := g\nhg : k.degree ≤ 5\n_h₀ : k = g\n⊢ (-C ↑z * X ^ 5 + (monomial 2) 5 ^ 2 - 0 + 1 + IntCast.intCast 1 + ↑1 + ↑z + ↑n + k).degree ≤ 5\n## Action:\n  set k := g with _h₀"
"## Tactic State A:\nR : Type u_1\nn : ℕ\nz : ℤ\nf : ℤ[X]\nhn : f.natDegree ≤ 5\nhd : f.degree ≤ 5\ninst✝ : Ring R\ng : R[X]\nk : R[X] := g\nhg : k.degree ≤ 5\n_h₀ : k = g\n⊢ (-C ↑z * X ^ 5 + (monomial 2) 5 ^ 2 - 0 + 1 + IntCast.intCast 1 + ↑1 + ↑z + ↑n + k).degree ≤ 5\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  compute_degree!"
"## Tactic State A:\nx : ℕ\np : Prop\ninst✝ : Decidable p\n⊢ x = if p then x else x\n## Tactic State B:\ncase pos\nx : ℕ\np : Prop\ninst✝ : Decidable p\nh1 : p\n⊢ x = x\n---\ncase neg\nx : ℕ\np : Prop\ninst✝ : Decidable p\nh1 : ¬p\n⊢ x = x\n## Action:\n  split_ifs with h1"
"## Tactic State A:\ncase pos\nx : ℕ\np : Prop\ninst✝ : Decidable p\nh1 : p\n⊢ x = x\n---\ncase neg\nx : ℕ\np : Prop\ninst✝ : Decidable p\nh1 : ¬p\n⊢ x = x\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · rfl"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · rfl"
"## Tactic State A:\nx y : ℕ\np : Prop\ninst✝ : Decidable p\nh : if p then x = y else y = x\n⊢ x = y\n## Tactic State B:\ncase pos\nx y : ℕ\np : Prop\ninst✝ : Decidable p\nh✝ : p\nh : x = y\n⊢ x = y\n---\ncase neg\nx y : ℕ\np : Prop\ninst✝ : Decidable p\nh✝ : ¬p\nh : y = x\n⊢ x = y\n## Action:\n  split_ifs at h"
"## Tactic State A:\ncase pos\nx y : ℕ\np : Prop\ninst✝ : Decidable p\nh✝ : p\nh : x = y\n⊢ x = y\n---\ncase neg\nx y : ℕ\np : Prop\ninst✝ : Decidable p\nh✝ : ¬p\nh : y = x\n⊢ x = y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · exact h"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · exact h.symm"
"## Tactic State A:\nx : ℕ\np q : Prop\ninst✝¹ : Decidable p\ninst✝ : Decidable q\n⊢ x = if p then if q then x else x else x\n## Tactic State B:\ncase pos\nx : ℕ\np q : Prop\ninst✝¹ : Decidable p\ninst✝ : Decidable q\nh✝¹ : p\nh✝ : q\n⊢ x = x\n---\ncase neg\nx : ℕ\np q : Prop\ninst✝¹ : Decidable p\ninst✝ : Decidable q\nh✝¹ : p\nh✝ : ¬q\n⊢ x = x\n---\ncase neg\nx : ℕ\np q : Prop\ninst✝¹ : Decidable p\ninst✝ : Decidable q\nh✝ : ¬p\n⊢ x = x\n## Action:\n  split_ifs"
"## Tactic State A:\ncase pos\nx : ℕ\np q : Prop\ninst✝¹ : Decidable p\ninst✝ : Decidable q\nh✝¹ : p\nh✝ : q\n⊢ x = x\n---\ncase neg\nx : ℕ\np q : Prop\ninst✝¹ : Decidable p\ninst✝ : Decidable q\nh✝¹ : p\nh✝ : ¬q\n⊢ x = x\n---\ncase neg\nx : ℕ\np q : Prop\ninst✝¹ : Decidable p\ninst✝ : Decidable q\nh✝ : ¬p\n⊢ x = x\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · rfl"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · rfl"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · rfl"
"## Tactic State A:\nx : ℕ\np : Prop\ninst✝ : Decidable p\n⊢ x = if if p then False else True then x else x\n## Tactic State B:\ncase pos\nx : ℕ\np : Prop\ninst✝ : Decidable p\nh✝¹ : p\nh✝ : False\n⊢ x = x\n---\ncase neg\nx : ℕ\np : Prop\ninst✝ : Decidable p\nh✝¹ : p\nh✝ : ¬False\n⊢ x = x\n---\ncase neg\nx : ℕ\np : Prop\ninst✝ : Decidable p\nh✝ : ¬p\n⊢ x = x\n## Action:\n  split_ifs"
"## Tactic State A:\ncase pos\nx : ℕ\np : Prop\ninst✝ : Decidable p\nh✝¹ : p\nh✝ : False\n⊢ x = x\n---\ncase neg\nx : ℕ\np : Prop\ninst✝ : Decidable p\nh✝¹ : p\nh✝ : ¬False\n⊢ x = x\n---\ncase neg\nx : ℕ\np : Prop\ninst✝ : Decidable p\nh✝ : ¬p\n⊢ x = x\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · rfl"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · rfl"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · rfl"
"## Tactic State A:\np : Prop\ninst✝ : Decidable p\n⊢ if if ¬p then p else True then p else ¬p\n## Tactic State B:\ncase pos\np : Prop\ninst✝ : Decidable p\nh : p\n⊢ p\n---\ncase neg\np : Prop\ninst✝ : Decidable p\nh : ¬p\n⊢ ¬p\n## Action:\n  split_ifs with h"
"## Tactic State A:\ncase pos\np : Prop\ninst✝ : Decidable p\nh : p\n⊢ p\n---\ncase neg\np : Prop\ninst✝ : Decidable p\nh : ¬p\n⊢ ¬p\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · exact h"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · exact h"
"## Tactic State A:\np q : Prop\ninst✝¹ : Decidable p\ninst✝ : Decidable q\n⊢ if if if p then ¬p else q then p else q then q else ¬p ∨ ¬q\n## Tactic State B:\ncase pos\np q : Prop\ninst✝¹ : Decidable p\ninst✝ : Decidable q\nh1 : p\nh2 : q\n⊢ q\n---\ncase neg\np q : Prop\ninst✝¹ : Decidable p\ninst✝ : Decidable q\nh1 : p\nh2 : ¬q\n⊢ ¬p ∨ ¬q\n---\ncase pos\np q : Prop\ninst✝¹ : Decidable p\ninst✝ : Decidable q\nh1 : ¬p\nh3 : q\n⊢ ¬p ∨ ¬q\n---\ncase neg\np q : Prop\ninst✝¹ : Decidable p\ninst✝ : Decidable q\nh1 : ¬p\nh3 : ¬q\n⊢ ¬p ∨ ¬q\n## Action:\n  split_ifs with h1 h2 h3"
"## Tactic State A:\ncase pos\np q : Prop\ninst✝¹ : Decidable p\ninst✝ : Decidable q\nh1 : p\nh2 : q\n⊢ q\n---\ncase neg\np q : Prop\ninst✝¹ : Decidable p\ninst✝ : Decidable q\nh1 : p\nh2 : ¬q\n⊢ ¬p ∨ ¬q\n---\ncase pos\np q : Prop\ninst✝¹ : Decidable p\ninst✝ : Decidable q\nh1 : ¬p\nh3 : q\n⊢ ¬p ∨ ¬q\n---\ncase neg\np q : Prop\ninst✝¹ : Decidable p\ninst✝ : Decidable q\nh1 : ¬p\nh3 : ¬q\n⊢ ¬p ∨ ¬q\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · exact h2"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · exact Or.inr h2"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · exact Or.inl h1"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · exact Or.inr h3"
"## Tactic State A:\np : Prop\ninst✝ : Decidable p\nh : (if p then 1 else 2) > 3\n⊢ False\n## Tactic State B:\ncase pos\np : Prop\ninst✝ : Decidable p\nh✝ : p\nh : 1 > 3\n⊢ False\n---\ncase neg\np : Prop\ninst✝ : Decidable p\nh✝ : ¬p\nh : 2 > 3\n⊢ False\n## Action:\n  split_ifs at h"
"## Tactic State A:\ncase pos\np : Prop\ninst✝ : Decidable p\nh✝ : p\nh : 1 > 3\n⊢ False\n---\ncase neg\np : Prop\ninst✝ : Decidable p\nh✝ : ¬p\nh : 2 > 3\n⊢ False\n## Tactic State B:\ncase pos.step\np : Prop\ninst✝ : Decidable p\nh✝ : p\na✝ : (Nat.succ 3).le 0\n⊢ False\n---\ncase neg\np : Prop\ninst✝ : Decidable p\nh✝ : ¬p\nh : 2 > 3\n⊢ False\n## Action:\n  cases h"
"## Tactic State A:\ncase pos.step\np : Prop\ninst✝ : Decidable p\nh✝ : p\na✝ : (Nat.succ 3).le 0\n⊢ False\n---\ncase neg\np : Prop\ninst✝ : Decidable p\nh✝ : ¬p\nh : 2 > 3\n⊢ False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · case pos.step h => cases h"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · case neg h =>"
"## Tactic State A:\np : Prop\ninst✝ : Decidable p\nx : ℕ\nh : (if p then 1 else 2) > x\n⊢ x < (if ¬p then 1 else 0) + 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n   split_ifs at * <;> assumption"
"## Tactic State A:\np : Prop\ninst✝ : Decidable p\n⊢ if if ¬p then p else True then p else ¬p\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  split_ifs <;>"
"## Tactic State A:\np q : Prop\ninst✝¹ : Decidable p\ninst✝ : Decidable q\n⊢ if if if p then ¬p else q then p else q then q else ¬p ∨ ¬q\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  split_ifs <;>"
"## Tactic State A:\n⊢ True\n## Tactic State B:\n⊢ True\n## Action:\n  fail_if_success { split_ifs }"
"## Tactic State A:\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial"
"## Tactic State A:\nP Q : Prop\nw : if P then if Q then true = true else true = true else true = true\n⊢ true = true\n## Tactic State B:\ncase pos\nP Q : Prop\nh✝¹ : P\nh✝ : Q\nw : true = true\n⊢ true = true\n---\ncase neg\nP Q : Prop\nh✝¹ : P\nh✝ : ¬Q\nw : true = true\n⊢ true = true\n---\ncase neg\nP Q : Prop\nh✝ : ¬P\nw : true = true\n⊢ true = true\n## Action:\n  split_ifs at w"
"## Tactic State A:\ncase pos\nP Q : Prop\nh✝¹ : P\nh✝ : Q\nw : true = true\n⊢ true = true\n---\ncase neg\nP Q : Prop\nh✝¹ : P\nh✝ : ¬Q\nw : true = true\n⊢ true = true\n---\ncase neg\nP Q : Prop\nh✝ : ¬P\nw : true = true\n⊢ true = true\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  -- check that we've fully split w into three subgoals"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · trivial"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · trivial"
"## Tactic State A:\nu : ℕ\n⊢ (if u = u then 0 else 1) = 0\n## Tactic State B:\nu : ℕ\nh : u = u\n⊢ (if u = u then 0 else 1) = 0\n## Action:\n  have h : u = u := by rfl"
"## Tactic State A:\nu : ℕ\nh : u = u\n⊢ (if u = u then 0 else 1) = 0\n## Tactic State B:\nu : ℕ\nh : u = u\n⊢ 0 = 0\n## Action:\n  split_ifs"
"## Tactic State A:\nu : ℕ\nh : u = u\n⊢ 0 = 0\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  -- only one goal here"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rfl"
"## Tactic State A:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nz x y : ℚ\nhx : x ≠ 0\nhy : y ≠ 0\n⊢ x / (y / z) + y⁻¹ + 1 / (y * -x) = -1 / (x * y) + (x * z + 1) / y\n## Tactic State B:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nz x y : ℚ\nhx : x ≠ 0\nhy : y ≠ 0\n⊢ (-((x * z + 1) * (y * x)) + y) * (x * y * y) = -((-y + (x * z + 1) * (x * y)) * (y * (y * x)))\n## Action:\n  field_simp"
"## Tactic State A:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nz x y : ℚ\nhx : x ≠ 0\nhy : y ≠ 0\n⊢ (-((x * z + 1) * (y * x)) + y) * (x * y * y) = -((-y + (x * z + 1) * (x * y)) * (y * (y * x)))\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  ring"
"## Tactic State A:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\na b c d x y : ℚ\nhx : x ≠ 0\nhy : y ≠ 0\n⊢ a + b / x - c / x ^ 2 + d / x ^ 3 = a + x⁻¹ * (y * b / y + (d / x - c) / x)\n## Tactic State B:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\na b c d x y : ℚ\nhx : x ≠ 0\nhy : y ≠ 0\n⊢ (((a * x + b) * x ^ 2 - x * c) * x ^ 3 + d * (x * x ^ 2)) * (x * (x * x)) =\n    (a * (x * (x * x)) + (b * (x * x) + (d - x * c))) * (x * x ^ 2 * x ^ 3)\n## Action:\n  field_simp"
"## Tactic State A:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\na b c d x y : ℚ\nhx : x ≠ 0\nhy : y ≠ 0\n⊢ (((a * x + b) * x ^ 2 - x * c) * x ^ 3 + d * (x * x ^ 2)) * (x * (x * x)) =\n    (a * (x * (x * x)) + (b * (x * x) + (d - x * c))) * (x * x ^ 2 * x ^ 3)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  ring"
"## Tactic State A:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx : ℝ\nhx : x ≠ 0\n⊢ 2 * x ^ 3 * 2 / (24 * x) = x ^ 2 / 6\n## Tactic State B:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx : ℝ\nhx : x ≠ 0\n⊢ 2 * x ^ 3 * 2 * 6 = x ^ 2 * (24 * x)\n## Action:\n  field_simp"
"## Tactic State A:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx : ℝ\nhx : x ≠ 0\n⊢ 2 * x ^ 3 * 2 * 6 = x ^ 2 * (24 * x)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  ring"
"## Tactic State A:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx : ℤ\nh : x - x + x = 0\n⊢ x = 0\n## Tactic State B:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx : ℤ\nh : x = 0\n⊢ x = 0\n## Action:\n  ring_nf at h"
"## Tactic State A:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx : ℤ\nh : x = 0\n⊢ x = 0\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h"
"## Tactic State A:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\n⊢ 22 + 7 * 4 + 3 * 8 = 0 + 7 * 4 + 46\n## Tactic State B:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\n⊢ True\n## Action:\n  conv => ring"
"## Tactic State A:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial -- FIXME: not needed in lean 3"
"## Tactic State A:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\n⊢ (22 + 7 * 4 + 3 * 8 = 0 + 7 * 4 + 47) = (74 = 75)\n## Tactic State B:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\n⊢ True\n## Action:\n  conv => ring"
"## Tactic State A:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial"
"## Tactic State A:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx : ℕ\n⊢ 22 + 7 * x + 3 * 8 = 0 + 7 * x + 46\n## Tactic State B:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx : ℕ\n⊢ True\n## Action:\n  conv => ring"
"## Tactic State A:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx : ℕ\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial"
"## Tactic State A:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx : ℕ\n⊢ (22 + 7 * x + 3 * 8 = 0 + 7 * x + 46 + 1) = (7 * x + 46 = 7 * x + 47)\n## Tactic State B:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx : ℕ\n⊢ True\n## Action:\n  conv => ring"
"## Tactic State A:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx : ℕ\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial"
"## Tactic State A:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx✝ : Sort u_1\nf : x✝\na : ℕ\n⊢ 1 * sorry * 1 = sorry\n## Tactic State B:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx✝ : Sort u_1\nf : x✝\na : ℕ\nha : a + 0 = a\n⊢ 1 * sorry * 1 = sorry\n## Action:\n  have ha : a + 0 = a := by ring"
"## Tactic State A:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx✝ : Sort u_1\nf : x✝\na : ℕ\nha : a + 0 = a\n⊢ 1 * sorry * 1 = sorry\n## Tactic State B:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx✝ : Sort u_1\nf : x✝\na : ℕ\nha : a + 0 = a\n⊢ 1 * sorry * 1 = sorry\n## Action:\n  rw [ha] -- goal has mdata"
"## Tactic State A:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\na b : ℤ\n⊢ a + b = 0 ↔ b + a = 0\n## Tactic State B:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\na b : ℤ\nthis : 3 = 3\n⊢ a + b = 0 ↔ b + a = 0\n## Action:\n  have : 3 = 3 := rfl"
"## Tactic State A:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\na b : ℤ\nthis : 3 = 3\n⊢ a + b = 0 ↔ b + a = 0\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  ring_nf -- reduced to `True` with mdata"
"## Tactic State A:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx✝ : Sort u_1\nR : x✝\np : sorry\n⊢ p + 0 = p\n## Tactic State B:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx✝ : Sort u_1\nR : x✝\np : sorry\n⊢ p + 0 = p\n## Action:\n  ring"
"## Tactic State A:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx✝ : Sort u_1\nR : x✝\np : sorry\nq : sorry\n⊢ p + q = q + p\n## Tactic State B:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx✝ : Sort u_1\nR : x✝\np : sorry\nq : sorry\n⊢ p + q = q + p\n## Action:\n  ring"
"## Tactic State A:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx✝ : Sort u_1\nR : x✝\np : sorry\n⊢ p + 0 = p\n## Tactic State B:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx✝ : Sort u_1\nR : x✝\np : sorry\n⊢ p + 0 = p\n## Action:\n  ring_nf"
"## Tactic State A:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx✝ : Sort u_1\nR : x✝\np : sorry\nq : sorry\n⊢ p + q = q + p\n## Tactic State B:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx✝ : Sort u_1\nR : x✝\np : sorry\nq : sorry\n⊢ p + q = q + p\n## Action:\n  ring_nf"
"## Tactic State A:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nn : ℝ\n⊢ (n + 1 / 2) ^ 2 * (n + 1 + 1 / 3) = 1 / 3 + n * (19 / 12) + n ^ 2 * (7 / 3) + n ^ 3\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  -- `conv_lhs` prevents `ring_nf` picking a bad normalization for both sides."
"## Tactic State A:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nn : ℝ\n_hn : 0 ≤ n\n⊢ (n + 1 / 2) ^ 2 * (n + 1 + 1 / 3) ≤ (n + 1 / 3) * (n + 1) ^ 2\n## Tactic State B:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nn : ℝ\n_hn : 0 ≤ n\n⊢ 1 / 3 + n * (19 / 12) + n ^ 2 * (7 / 3) + n ^ 3 ≤ 1 / 3 + n * (5 / 3) + n ^ 2 * (7 / 3) + n ^ 3\n## Action:\n  ring_nf"
"## Tactic State A:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nn : ℝ\n_hn : 0 ≤ n\n⊢ 1 / 3 + n * (19 / 12) + n ^ 2 * (7 / 3) + n ^ 3 ≤ 1 / 3 + n * (5 / 3) + n ^ 2 * (7 / 3) + n ^ 3\n## Tactic State B:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nn : ℝ\n_hn : 0 ≤ n\n⊢ 1 / 3 + n * (19 / 12) + n ^ 2 * (7 / 3) + n ^ 3 ≤ 1 / 3 + n * (5 / 3) + n ^ 2 * (7 / 3) + n ^ 3\n## Action:\n  trace_state"
"## Tactic State A:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nn : ℝ\n_hn : 0 ≤ n\n⊢ 1 / 3 + n * (19 / 12) + n ^ 2 * (7 / 3) + n ^ 3 ≤ 1 / 3 + n * (5 / 3) + n ^ 2 * (7 / 3) + n ^ 3\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact test_sorry"
"## Tactic State A:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx : ℤ\nR : ℤ → ℤ → Prop\n⊢ True\n## Tactic State B:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx : ℤ\nR : ℤ → ℤ → Prop\nh : R (sorry + x) (x + sorry)\n⊢ True\n## Action:\n  have h : R (myId x + x) (x + myId x) := test_sorry"
"## Tactic State A:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx : ℤ\nR : ℤ → ℤ → Prop\nh : R (sorry + x) (x + sorry)\n⊢ True\n## Tactic State B:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx : ℤ\nR : ℤ → ℤ → Prop\nh : R (sorry + x) (sorry + x)\n⊢ True\n## Action:\n  ring_nf at h"
"## Tactic State A:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx : ℤ\nR : ℤ → ℤ → Prop\nh : R (sorry + x) (sorry + x)\n⊢ True\n## Tactic State B:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx : ℤ\nR : ℤ → ℤ → Prop\nh : R (sorry + x) (sorry + x)\n⊢ True\n## Action:\n  trace_state"
"## Tactic State A:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx : ℤ\nR : ℤ → ℤ → Prop\nh : R (sorry + x) (sorry + x)\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial"
"## Tactic State A:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx : ℝ\nf : ℝ → ℝ\n⊢ True\n## Tactic State B:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx : ℝ\nf : ℝ → ℝ\ny : ℝ := x\n⊢ True\n## Action:\n  let y := x"
"## Tactic State A:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx : ℝ\nf : ℝ → ℝ\ny : ℝ := x\n⊢ True\n## Tactic State B:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx : ℝ\nf : ℝ → ℝ\ny : ℝ := x\nthis : x = y\n⊢ True\n## Action:\n  have : x = y := by"
"## Tactic State A:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx : ℝ\nf : ℝ → ℝ\ny : ℝ := x\nthis : x = y\n⊢ True\n## Tactic State B:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx : ℝ\nf : ℝ → ℝ\ny : ℝ := x\nthis✝ : x = y\nthis : x - y = 0\n⊢ True\n## Action:\n    ring_nf"
"## Tactic State A:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx : ℝ\nf : ℝ → ℝ\ny : ℝ := x\nthis✝ : x = y\nthis : x - y = 0\n⊢ True\n## Tactic State B:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx : ℝ\nf : ℝ → ℝ\ny : ℝ := x\nthis✝¹ : x = y\nthis✝ : x - y = 0\nthis : f x = f y\n⊢ True\n## Action:\n    ring_nf!"
"## Tactic State A:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx : ℝ\nf : ℝ → ℝ\ny : ℝ := x\nthis✝¹ : x = y\nthis✝ : x - y = 0\nthis : f x = f y\n⊢ True\n## Tactic State B:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx : ℝ\nf : ℝ → ℝ\ny : ℝ := x\nthis✝² : x = y\nthis✝¹ : x - y = 0\nthis✝ : f x = f y\nthis : f x - f y = 0\n⊢ True\n## Action:\n  have : x - y = 0 := by"
"## Tactic State A:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx : ℝ\nf : ℝ → ℝ\ny : ℝ := x\nthis✝² : x = y\nthis✝¹ : x - y = 0\nthis✝ : f x = f y\nthis : f x - f y = 0\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    ring_nf"
"## Tactic State A:\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\n⊢ (fun x => x * x ^ 2) = fun y => y ^ 2 * y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  ring_nf"
"## Tactic State A:\nA B : Type\nh : A\nf : A → B\n⊢ B\n## Tactic State B:\nA B : Type\nf : A → B\nh : B\n⊢ B\n## Action:\n  replace h := f h"
"## Tactic State A:\nA B : Type\nf : A → B\nh : B\n⊢ B\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h"
"## Tactic State A:\nz : ℤ\n⊢ ℕ\n## Tactic State B:\ncase z\nz : ℤ\n⊢ ℕ\n---\nz : ℕ\n⊢ ℕ\n## Action:\n  replace z : Nat"
"## Tactic State A:\ncase z\nz : ℤ\n⊢ ℕ\n---\nz : ℕ\n⊢ ℕ\n## Tactic State B:\nz : ℕ\n⊢ ℕ\n## Action:\n  exact 0"
"## Tactic State A:\nz : ℕ\n⊢ ℕ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  assumption"
"## Tactic State A:\n⊢ True\n## Tactic State B:\nthis : 1 + 1 = 2\n⊢ True\n## Action:\n  have : 1 + 1 = 2 := by simp +arith"
"## Tactic State A:\nthis : 1 + 1 = 2\n⊢ True\n## Tactic State B:\ncase this\nthis : 1 + 1 = 2\n⊢ 2 + 2 = 4\n---\nthis : 2 + 2 = 4\n⊢ True\n## Action:\n  replace : 2 + 2 = 4"
"## Tactic State A:\ncase this\nthis : 1 + 1 = 2\n⊢ 2 + 2 = 4\n---\nthis : 2 + 2 = 4\n⊢ True\n## Tactic State B:\nthis : 2 + 2 = 4\n⊢ True\n## Action:\n  simp +arith"
"## Tactic State A:\nthis : 2 + 2 = 4\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial"
"## Tactic State A:\nh : True\n⊢ False\n## Tactic State B:\nh : True\n⊢ False\n## Action:\n  guard_hyp h : True"
"## Tactic State A:\nh : True\n⊢ False\n## Tactic State B:\ncase h\nh : True\n⊢ ?m.8\n---\nh✝ : True\nh : ?m.8\n⊢ False\n## Action:\n  replace h"
"## Tactic State A:\ncase h\nh : True\n⊢ ?m.8\n---\nh✝ : True\nh : ?m.8\n⊢ False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · exact true"
"## Tactic State A:\n\n## Tactic State B:\nh✝ : True\nh : Bool\n⊢ False\n## Action:\n  guard_hyp h : Bool"
"## Tactic State A:\nh✝ : True\nh : Bool\n⊢ False\n## Tactic State B:\nh' : True\nh : Bool\n⊢ False\n## Action:\n  rename_i h'"
"## Tactic State A:\nh' : True\nh : Bool\n⊢ False\n## Tactic State B:\nh' : True\nh : Bool\n⊢ False\n## Action:\n  guard_hyp h' : True"
"## Tactic State A:\nh' : True\nh : Bool\n⊢ False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact test_sorry"
"## Tactic State A:\nα β : Type\nh : α = β\nb : β\n⊢ α\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  convert b"
"## Tactic State A:\nα β : Type\nh : ∀ (α β : Type), α = β\nb : β\n⊢ α\n## Tactic State B:\nα β : Type\nh : ∀ (α β : Type), α = β\nb : β\n⊢ α = β\n## Action:\n  convert b"
"## Tactic State A:\nα β : Type\nh : ∀ (α β : Type), α = β\nb : β\n⊢ α = β\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  apply h"
"## Tactic State A:\nm n : ℕ\nh : m = n\nb : Fin n\n⊢ ℕ × ℕ × ℕ × Fin m\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  convert (37, 57, 2, b)"
"## Tactic State A:\nα β : Type\nh : α = β\nb : β\n⊢ ℕ × α\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  -- type eq ok since arguments to `Prod` are explicit"
"## Tactic State A:\nα β : Type\nh : β = α\nb : β\n⊢ ℕ × α\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  convert ← (37, b)"
"## Tactic State A:\nα β : Type\nh : α = β\nb : β\n⊢ ℕ × ℕ × ℕ × α\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  convert (37, 57, 2, b)"
"## Tactic State A:\nα β : Type\nh : α = β\nb : β\n⊢ ℕ × ℕ × ℕ × α\n## Tactic State B:\ncase h.e'_2.h.e'_2\nα β : Type\nh : α = β\nb : β\n⊢ (ℕ × α) = (ℕ × β)\n## Action:\n  convert (37, 57, 2, b) using 2"
"## Tactic State A:\ncase h.e'_2.h.e'_2\nα β : Type\nh : α = β\nb : β\n⊢ (ℕ × α) = (ℕ × β)\n## Tactic State B:\ncase h.e'_2.h.e'_2\nα β : Type\nh : α = β\nb : β\n⊢ (ℕ × α) = (ℕ × β)\n## Action:\n  guard_target = (Nat × α) = (Nat × β)"
"## Tactic State A:\ncase h.e'_2.h.e'_2\nα β : Type\nh : α = β\nb : β\n⊢ (ℕ × α) = (ℕ × β)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  congr!"
"## Tactic State A:\nβ : Type u_1\nα : Type u_2\nf : β → α\nx y : α\nh : x ≠ y\n⊢ f ⁻¹' {x} ∩ f ⁻¹' {y} = ∅\n## Tactic State B:\nβ : Type u_1\nα : Type u_2\nf : β → α\nx y : α\nh : x ≠ y\nthis : {x} ∩ {y} = ∅\n⊢ f ⁻¹' {x} ∩ f ⁻¹' {y} = ∅\n## Action:\n  have : {x} ∩ {y} = (∅ : Set α) := by simpa [ne_comm] using h"
"## Tactic State A:\nβ : Type u_1\nα : Type u_2\nf : β → α\nx y : α\nh : x ≠ y\nthis : {x} ∩ {y} = ∅\n⊢ f ⁻¹' {x} ∩ f ⁻¹' {y} = ∅\n## Tactic State B:\ncase h.e'_2\nβ : Type u_1\nα : Type u_2\nf : β → α\nx y : α\nh : x ≠ y\nthis : {x} ∩ {y} = ∅\n⊢ f ⁻¹' {x} ∩ f ⁻¹' {y} = ?convert_3 ⁻¹' ∅\n---\ncase convert_2\nβ : Type u_1\nα : Type u_2\nf : β → α\nx y : α\nh : x ≠ y\nthis : {x} ∩ {y} = ∅\n⊢ Type ?u.1522\n---\ncase convert_3\nβ : Type u_1\nα : Type u_2\nf : β → α\nx y : α\nh : x ≠ y\nthis : {x} ∩ {y} = ∅\n⊢ β → ?convert_2\n## Action:\n  convert Set.preimage_empty"
"## Tactic State A:\ncase h.e'_2\nβ : Type u_1\nα : Type u_2\nf : β → α\nx y : α\nh : x ≠ y\nthis : {x} ∩ {y} = ∅\n⊢ f ⁻¹' {x} ∩ f ⁻¹' {y} = ?convert_3 ⁻¹' ∅\n---\ncase convert_2\nβ : Type u_1\nα : Type u_2\nf : β → α\nx y : α\nh : x ≠ y\nthis : {x} ∩ {y} = ∅\n⊢ Type ?u.1522\n---\ncase convert_3\nβ : Type u_1\nα : Type u_2\nf : β → α\nx y : α\nh : x ≠ y\nthis : {x} ∩ {y} = ∅\n⊢ β → ?convert_2\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rw [← Set.preimage_inter, this]"
"## Tactic State A:\nα : Type u_1\ninst✝ : AddCommMonoid α\na b c d : α\nH : a = c\nH' : b = d\n⊢ a + b = d + c\n## Tactic State B:\ncase convert_2\nα : Type u_1\ninst✝ : AddCommMonoid α\na b c d : α\nH : a = c\nH' : b = d\n⊢ c + d = d + c\n## Action:\n  convert_to c + d = _ using 2"
"## Tactic State A:\ncase convert_2\nα : Type u_1\ninst✝ : AddCommMonoid α\na b c d : α\nH : a = c\nH' : b = d\n⊢ c + d = d + c\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rw [add_comm]"
"## Tactic State A:\nα : Type u_1\ninst✝ : AddCommMonoid α\na b c d : α\nH : a = c\nH' : b = d\n⊢ a + b = d + c\n## Tactic State B:\ncase h.e'_2\nα : Type u_1\ninst✝ : AddCommMonoid α\na b c d : α\nH : a = c\nH' : b = d\n⊢ a + b = c + d\n---\ncase convert_2\nα : Type u_1\ninst✝ : AddCommMonoid α\na b c d : α\nH : a = c\nH' : b = d\n⊢ c + d = d + c\n## Action:\n  convert_to c + d = _ -- defaults to `using 1`"
"## Tactic State A:\ncase h.e'_2\nα : Type u_1\ninst✝ : AddCommMonoid α\na b c d : α\nH : a = c\nH' : b = d\n⊢ a + b = c + d\n---\ncase convert_2\nα : Type u_1\ninst✝ : AddCommMonoid α\na b c d : α\nH : a = c\nH' : b = d\n⊢ c + d = d + c\n## Tactic State B:\ncase convert_2\nα : Type u_1\ninst✝ : AddCommMonoid α\na b c d : α\nH : a = c\nH' : b = d\n⊢ c + d = d + c\n## Action:\n  congr 2"
"## Tactic State A:\ncase convert_2\nα : Type u_1\ninst✝ : AddCommMonoid α\na b c d : α\nH : a = c\nH' : b = d\n⊢ c + d = d + c\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rw [add_comm]"
"## Tactic State A:\nα : Type u_1\ninst✝ : AddCommMonoid α\na b c d : α\nH : a = c\nH' : b = d\n⊢ a + b = d + c\n## Tactic State B:\ncase h.e'_2\nα : Type u_1\ninst✝ : AddCommMonoid α\na b c d : α\nH : a = c\nH' : b = d\n⊢ a + b = c + d\n---\ncase convert_2\nα : Type u_1\ninst✝ : AddCommMonoid α\na b c d : α\nH : a = c\nH' : b = d\n⊢ c + d = d + c\n## Action:\n  convert_to c + d = _ using 1"
"## Tactic State A:\ncase h.e'_2\nα : Type u_1\ninst✝ : AddCommMonoid α\na b c d : α\nH : a = c\nH' : b = d\n⊢ a + b = c + d\n---\ncase convert_2\nα : Type u_1\ninst✝ : AddCommMonoid α\na b c d : α\nH : a = c\nH' : b = d\n⊢ c + d = d + c\n## Tactic State B:\ncase convert_2\nα : Type u_1\ninst✝ : AddCommMonoid α\na b c d : α\nH : a = c\nH' : b = d\n⊢ c + d = d + c\n## Action:\n  congr 2"
"## Tactic State A:\ncase convert_2\nα : Type u_1\ninst✝ : AddCommMonoid α\na b c d : α\nH : a = c\nH' : b = d\n⊢ c + d = d + c\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rw [add_comm]"
"## Tactic State A:\nprime : ℕ → Prop\nn : ℕ\nh : prime (2 * n + 1)\n⊢ prime (n + n + 1)\n## Tactic State B:\ncase h.e'_1.h.e'_5.h.e\nprime : ℕ → Prop\nn : ℕ\nh : prime (2 * n + 1)\n⊢ HAdd.hAdd = HMul.hMul\n---\ncase h.e'_1.h.e'_5.h.e'_1\nprime : ℕ → Prop\nn : ℕ\nh : prime (2 * n + 1)\n⊢ n = 2\n## Action:\n  convert h"
"## Tactic State A:\ncase h.e'_1.h.e'_5.h.e\nprime : ℕ → Prop\nn : ℕ\nh : prime (2 * n + 1)\n⊢ HAdd.hAdd = HMul.hMul\n---\ncase h.e'_1.h.e'_5.h.e'_1\nprime : ℕ → Prop\nn : ℕ\nh : prime (2 * n + 1)\n⊢ n = 2\n## Tactic State B:\ncase h.e'_1.h.e'_5.h.e\nprime : ℕ → Prop\nn : ℕ\nh : prime (2 * n + 1)\n⊢ HAdd.hAdd = HMul.hMul\n## Action:\n  · guard_target = (HAdd.hAdd : Nat → Nat → Nat) = HMul.hMul"
"## Tactic State A:\ncase h.e'_1.h.e'_5.h.e\nprime : ℕ → Prop\nn : ℕ\nh : prime (2 * n + 1)\n⊢ HAdd.hAdd = HMul.hMul\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    exact test_sorry"
"## Tactic State A:\n\n## Tactic State B:\ncase h.e'_1.h.e'_5.h.e'_1\nprime : ℕ → Prop\nn : ℕ\nh : prime (2 * n + 1)\n⊢ n = 2\n## Action:\n  · guard_target = n = 2"
"## Tactic State A:\ncase h.e'_1.h.e'_5.h.e'_1\nprime : ℕ → Prop\nn : ℕ\nh : prime (2 * n + 1)\n⊢ n = 2\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    exact test_sorry"
"## Tactic State A:\nprime : ℕ → Prop\nn : ℕ\nh : prime (2 * n + 1)\n⊢ prime (n + n + 1)\n## Tactic State B:\ncase h.e'_1.h.e'_5\nprime : ℕ → Prop\nn : ℕ\nh : prime (2 * n + 1)\n⊢ n + n = 2 * n\n## Action:\n  convert (config := .unfoldSameFun) h"
"## Tactic State A:\ncase h.e'_1.h.e'_5\nprime : ℕ → Prop\nn : ℕ\nh : prime (2 * n + 1)\n⊢ n + n = 2 * n\n## Tactic State B:\ncase h.e'_1.h.e'_5\nprime : ℕ → Prop\nn : ℕ\nh : prime (2 * n + 1)\n⊢ n + n = 2 * n\n## Action:\n  guard_target = n + n = 2 * n"
"## Tactic State A:\ncase h.e'_1.h.e'_5\nprime : ℕ → Prop\nn : ℕ\nh : prime (2 * n + 1)\n⊢ n + n = 2 * n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact test_sorry"
"## Tactic State A:\np q : ℕ → Prop\nh : ∀ ε > 0, p ε\n⊢ ∀ ε > 0, q ε\n## Tactic State B:\ncase h.h'.a\np q : ℕ → Prop\nh : ∀ ε > 0, p ε\nε : ℕ\nhε : ε > 0\n⊢ q ε ↔ p ε\n## Action:\n  convert h using 2 with ε hε"
"## Tactic State A:\ncase h.h'.a\np q : ℕ → Prop\nh : ∀ ε > 0, p ε\nε : ℕ\nhε : ε > 0\n⊢ q ε ↔ p ε\n## Tactic State B:\ncase h.h'.a\np q : ℕ → Prop\nh : ∀ ε > 0, p ε\nε : ℕ\nhε : ε > 0\n⊢ q ε ↔ p ε\n## Action:\n  guard_hyp hε : ε > 0"
"## Tactic State A:\ncase h.h'.a\np q : ℕ → Prop\nh : ∀ ε > 0, p ε\nε : ℕ\nhε : ε > 0\n⊢ q ε ↔ p ε\n## Tactic State B:\ncase h.h'.a\np q : ℕ → Prop\nh : ∀ ε > 0, p ε\nε : ℕ\nhε : ε > 0\n⊢ q ε ↔ p ε\n## Action:\n  guard_target = q ε ↔ p ε"
"## Tactic State A:\ncase h.h'.a\np q : ℕ → Prop\nh : ∀ ε > 0, p ε\nε : ℕ\nhε : ε > 0\n⊢ q ε ↔ p ε\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact test_sorry"
"## Tactic State A:\ninstFintypeBool : Fintype Bool\n⊢ Fintype.card Bool = 2\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  convert Fintype.foo _"
"## Tactic State A:\ninstFintypeBool : Fintype Bool\n⊢ Fintype.card Bool = 2\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  convert Fintype.foo' _ using 1"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  guard_target = Fintype (Option Bool)"
"## Tactic State A:\n⊢ True\n## Tactic State B:\ncase a\n⊢ True ↔ ?x + ?y = ?z\n---\ncase x\n⊢ ?convert_1\n---\ncase y\n⊢ ?convert_2\n---\ncase z\n⊢ ?convert_4\n---\ncase convert_1\n⊢ Type ?u.9\n---\ncase convert_2\n⊢ Type ?u.8\n---\ncase convert_3\n⊢ HAdd ?convert_1 ?convert_2 ?convert_4\n---\ncase convert_4\n⊢ Type ?u.7\n---\ncase convert_5\n⊢ ?x + ?y = ?z\n## Action:\n  convert_to ?x + ?y = ?z"
"## Tactic State A:\ncase a\n⊢ True ↔ ?x + ?y = ?z\n---\ncase x\n⊢ ?convert_1\n---\ncase y\n⊢ ?convert_2\n---\ncase z\n⊢ ?convert_4\n---\ncase convert_1\n⊢ Type ?u.9\n---\ncase convert_2\n⊢ Type ?u.8\n---\ncase convert_3\n⊢ HAdd ?convert_1 ?convert_2 ?convert_4\n---\ncase convert_4\n⊢ Type ?u.7\n---\ncase convert_5\n⊢ ?x + ?y = ?z\n## Tactic State B:\ncase a\n⊢ True ↔ 1 + ?y = ?z\n---\ncase y\n⊢ ?convert_2\n---\ncase z\n⊢ ?convert_4\n---\ncase convert_2\n⊢ Type ?u.8\n---\ncase convert_3\n⊢ HAdd ℕ ?convert_2 ?convert_4\n---\ncase convert_4\n⊢ Type ?u.7\n---\ncase convert_5\n⊢ 1 + ?y = ?z\n## Action:\n  case x => exact 1"
"## Tactic State A:\ncase a\n⊢ True ↔ 1 + ?y = ?z\n---\ncase y\n⊢ ?convert_2\n---\ncase z\n⊢ ?convert_4\n---\ncase convert_2\n⊢ Type ?u.8\n---\ncase convert_3\n⊢ HAdd ℕ ?convert_2 ?convert_4\n---\ncase convert_4\n⊢ Type ?u.7\n---\ncase convert_5\n⊢ 1 + ?y = ?z\n## Tactic State B:\ncase a\n⊢ True ↔ 1 + 2 = ?z\n---\ncase z\n⊢ ?convert_4\n---\ncase convert_3\n⊢ HAdd ℕ ℕ ?convert_4\n---\ncase convert_4\n⊢ Type ?u.7\n---\ncase convert_5\n⊢ 1 + 2 = ?z\n## Action:\n  case y => exact 2"
"## Tactic State A:\ncase a\n⊢ True ↔ 1 + 2 = ?z\n---\ncase z\n⊢ ?convert_4\n---\ncase convert_3\n⊢ HAdd ℕ ℕ ?convert_4\n---\ncase convert_4\n⊢ Type ?u.7\n---\ncase convert_5\n⊢ 1 + 2 = ?z\n## Tactic State B:\ncase a\n⊢ True ↔ 1 + 2 = 3\n---\ncase convert_3\n⊢ HAdd ℕ ℕ ℕ\n---\ncase convert_5\n⊢ 1 + 2 = 3\n## Action:\n  case z => exact 3"
"## Tactic State A:\ncase a\n⊢ True ↔ 1 + 2 = 3\n---\ncase convert_3\n⊢ HAdd ℕ ℕ ℕ\n---\ncase convert_5\n⊢ 1 + 2 = 3\n## Tactic State B:\ncase a\n⊢ True ↔ 1 + 2 = 3\n---\ncase convert_5\n⊢ 1 + 2 = 3\n## Action:\n  all_goals try infer_instance"
"## Tactic State A:\ncase a\n⊢ True ↔ 1 + 2 = 3\n---\ncase convert_5\n⊢ 1 + 2 = 3\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · simp"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · simp"
"## Tactic State A:\nα β : Type u\ninst✝¹ : Fintype α\ninst✝ : Fintype β\n⊢ Fintype.card α = Fintype.card β\n## Tactic State B:\ncase h\nα β : Type u\ninst✝¹ : Fintype α\ninst✝ : Fintype β\n⊢ α = β\n## Action:\n  congr!"
"## Tactic State A:\ncase h\nα β : Type u\ninst✝¹ : Fintype α\ninst✝ : Fintype β\n⊢ α = β\n## Tactic State B:\ncase h\nα β : Type u\ninst✝¹ : Fintype α\ninst✝ : Fintype β\n⊢ α = β\n## Action:\n  guard_target = Fintype.card α = Fintype.card β"
"## Tactic State A:\nx y z : ℕ\nh : x + y = z\n⊢ y + x = z\n## Tactic State B:\ncase h.e'_2\nx y z : ℕ\nh : x + y = z\n⊢ x + y = y + x\n---\nx y z : ℕ\nh✝ : x + y = z\nh : y + x = z\n⊢ y + x = z\n## Action:\n  convert_to y + x = _ at h"
"## Tactic State A:\ncase h.e'_2\nx y z : ℕ\nh : x + y = z\n⊢ x + y = y + x\n---\nx y z : ℕ\nh✝ : x + y = z\nh : y + x = z\n⊢ y + x = z\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · rw [Nat.add_comm]"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h"
"## Tactic State A:\nx y : ℕ\nf : ℕ → ℕ\nh : f x = f y\n⊢ x = y\n## Tactic State B:\nx y : ℕ\nf : ℕ → ℕ\nh : f x = f y\n⊢ f x = f y\n---\ncase inj\nx y : ℕ\nf : ℕ → ℕ\nh : f x = f y\n⊢ Injective f\n## Action:\n  apply_fun f"
"## Tactic State A:\nx y : ℕ\nf : ℕ → ℕ\nh : f x = f y\n⊢ f x = f y\n---\ncase inj\nx y : ℕ\nf : ℕ → ℕ\nh : f x = f y\n⊢ Injective f\n## Tactic State B:\nx y : ℕ\nf : ℕ → ℕ\nh : f x = f y\n⊢ f x = f y\n## Action:\n  · guard_target = f x = f y"
"## Tactic State A:\nx y : ℕ\nf : ℕ → ℕ\nh : f x = f y\n⊢ f x = f y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    assumption"
"## Tactic State A:\n\n## Tactic State B:\ncase inj\nx y : ℕ\nf : ℕ → ℕ\nh : f x = f y\n⊢ Injective f\n## Action:\n  · guard_target = Injective f"
"## Tactic State A:\ncase inj\nx y : ℕ\nf : ℕ → ℕ\nh : f x = f y\n⊢ Injective f\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    exact test_sorry"
"## Tactic State A:\nx y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x = f 1 y\nhinj : ∀ (n : ℕ), Injective (f n)\n⊢ x = y\n## Tactic State B:\nx y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x = f 1 y\nhinj : ∀ (n : ℕ), Injective (f n)\n⊢ f ?foo x = f ?foo y\n---\ncase inj\nx y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x = f 1 y\nhinj : ∀ (n : ℕ), Injective (f n)\n⊢ Injective (f ?foo)\n---\ncase foo\nx y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x = f 1 y\nhinj : ∀ (n : ℕ), Injective (f n)\n⊢ ℕ\n## Action:\n  apply_fun f ?foo"
"## Tactic State A:\nx y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x = f 1 y\nhinj : ∀ (n : ℕ), Injective (f n)\n⊢ f ?foo x = f ?foo y\n---\ncase inj\nx y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x = f 1 y\nhinj : ∀ (n : ℕ), Injective (f n)\n⊢ Injective (f ?foo)\n---\ncase foo\nx y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x = f 1 y\nhinj : ∀ (n : ℕ), Injective (f n)\n⊢ ℕ\n## Tactic State B:\nx y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x = f 1 y\nhinj : ∀ (n : ℕ), Injective (f n)\n⊢ f ?foo x = f ?foo y\n---\ncase inj\nx y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x = f 1 y\nhinj : ∀ (n : ℕ), Injective (f n)\n⊢ Injective (f ?foo)\n---\ncase foo\nx y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x = f 1 y\nhinj : ∀ (n : ℕ), Injective (f n)\n⊢ ℕ\n## Action:\n  guard_target = f ?foo x = f ?foo y"
"## Tactic State A:\nx y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x = f 1 y\nhinj : ∀ (n : ℕ), Injective (f n)\n⊢ f ?foo x = f ?foo y\n---\ncase inj\nx y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x = f 1 y\nhinj : ∀ (n : ℕ), Injective (f n)\n⊢ Injective (f ?foo)\n---\ncase foo\nx y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x = f 1 y\nhinj : ∀ (n : ℕ), Injective (f n)\n⊢ ℕ\n## Tactic State B:\nx y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x = f 1 y\nhinj : ∀ (n : ℕ), Injective (f n)\n⊢ f 1 x = f 1 y\n---\ncase inj\nx y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x = f 1 y\nhinj : ∀ (n : ℕ), Injective (f n)\n⊢ Injective (f 1)\n## Action:\n  case foo => exact 1"
"## Tactic State A:\nx y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x = f 1 y\nhinj : ∀ (n : ℕ), Injective (f n)\n⊢ f 1 x = f 1 y\n---\ncase inj\nx y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x = f 1 y\nhinj : ∀ (n : ℕ), Injective (f n)\n⊢ Injective (f 1)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · exact h"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · apply hinj"
"## Tactic State A:\nα✝ : Sort u_1\nx y : α✝\nf : ℕ → ℕ → ℕ\n⊢ x = y\n## Tactic State B:\nα✝ : Sort u_1\nx y : α✝\nf : ℕ → ℕ → ℕ\n⊢ x = y\n## Action:\n  fail_if_success apply_fun f _"
"## Tactic State A:\nα✝ : Sort u_1\nx y : α✝\nf : ℕ → ℕ → ℕ\n⊢ x = y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact test_sorry"
"## Tactic State A:\nx y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x = f 1 y\nhinj : Injective (f 1)\n⊢ x = y\n## Tactic State B:\nx y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x = f 1 y\nhinj : Injective (f 1)\n⊢ f 1 x = f 1 y\n## Action:\n  apply_fun f _ using hinj"
"## Tactic State A:\nx y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x = f 1 y\nhinj : Injective (f 1)\n⊢ f 1 x = f 1 y\n## Tactic State B:\nx y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x = f 1 y\nhinj : Injective (f 1)\n⊢ f 1 x = f 1 y\n## Action:\n  -- Solves for the hole using unification since it makes use of the `using` clause."
"## Tactic State A:\nx y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x = f 1 y\nhinj : Injective (f 1)\n⊢ f 1 x = f 1 y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  guard_target = f 1 x = f 1 y"
"## Tactic State A:\nx y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x = f 1 y\nhinj : Injective (f 1)\n⊢ x = y\n## Tactic State B:\nx y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x = f 1 y\nhinj : Injective (f 1)\n⊢ f 1 x = f 1 y\n## Action:\n  apply_fun f _"
"## Tactic State A:\nx y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x = f 1 y\nhinj : Injective (f 1)\n⊢ f 1 x = f 1 y\n## Tactic State B:\nx y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x = f 1 y\nhinj : Injective (f 1)\n⊢ f 1 x = f 1 y\n## Action:\n  -- Solves for the hole using unification since `hinj` is pulled in by `assumption`."
"## Tactic State A:\nx y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x = f 1 y\nhinj : Injective (f 1)\n⊢ f 1 x = f 1 y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  guard_target = f 1 x = f 1 y"
"## Tactic State A:\nx y : ℕ\nf : ℕ → ℕ\nh : f x = f y\nhinj : Injective f\n⊢ x = y\n## Tactic State B:\nx y : ℕ\nf : ℕ → ℕ\nh : f x = f y\nhinj : Injective f\n⊢ f x = f y\n## Action:\n  apply_fun _"
"## Tactic State A:\nx y : ℕ\nf : ℕ → ℕ\nh : f x = f y\nhinj : Injective f\n⊢ f x = f y\n## Tactic State B:\nx y : ℕ\nf : ℕ → ℕ\nh : f x = f y\nhinj : Injective f\n⊢ f x = f y\n## Action:\n  guard_target = f x = f y"
"## Tactic State A:\nx y : ℕ\nf : ℕ → ℕ\nh : f x = f y\nhinj : Injective f\n⊢ f x = f y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  assumption"
"## Tactic State A:\nx y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x ≠ f 1 y\n⊢ x ≠ y\n## Tactic State B:\nx y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x ≠ f 1 y\n⊢ f ?foo x ≠ f ?foo y\n---\ncase foo\nx y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x ≠ f 1 y\n⊢ ℕ\n## Action:\n  apply_fun f ?foo"
"## Tactic State A:\nx y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x ≠ f 1 y\n⊢ f ?foo x ≠ f ?foo y\n---\ncase foo\nx y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x ≠ f 1 y\n⊢ ℕ\n## Tactic State B:\nx y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x ≠ f 1 y\n⊢ f ?foo x ≠ f ?foo y\n---\ncase foo\nx y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x ≠ f 1 y\n⊢ ℕ\n## Action:\n  guard_target = f ?foo x ≠ f ?foo y"
"## Tactic State A:\nx y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x ≠ f 1 y\n⊢ f ?foo x ≠ f ?foo y\n---\ncase foo\nx y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x ≠ f 1 y\n⊢ ℕ\n## Tactic State B:\nx y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x ≠ f 1 y\n⊢ f 1 x ≠ f 1 y\n## Action:\n  case foo => exact 1"
"## Tactic State A:\nx y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x ≠ f 1 y\n⊢ f 1 x ≠ f 1 y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  assumption"
"## Tactic State A:\nX Y Z : Type\nf : X → Y\ng : Y → Z\nH : Injective (g ∘ f)\n⊢ Injective f\n## Tactic State B:\nX Y Z : Type\nf : X → Y\ng : Y → Z\nH : Injective (g ∘ f)\nx x' : X\nh : f x = f x'\n⊢ x = x'\n## Action:\n  intros x x' h"
"## Tactic State A:\nX Y Z : Type\nf : X → Y\ng : Y → Z\nH : Injective (g ∘ f)\nx x' : X\nh : f x = f x'\n⊢ x = x'\n## Tactic State B:\nX Y Z : Type\nf : X → Y\ng : Y → Z\nH : Injective (g ∘ f)\nx x' : X\nh : g (f x) = g (f x')\n⊢ x = x'\n## Action:\n  apply_fun g at h"
"## Tactic State A:\nX Y Z : Type\nf : X → Y\ng : Y → Z\nH : Injective (g ∘ f)\nx x' : X\nh : g (f x) = g (f x')\n⊢ x = x'\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact H h"
"## Tactic State A:\nx : ℤ\nh : x = 1\n⊢ 1 = 1\n## Tactic State B:\nx : ℤ\nh : x = 1\n⊢ 1 = 1\n## Action:\n  apply_fun (fun p => p) at h"
"## Tactic State A:\nx : ℤ\nh : x = 1\n⊢ 1 = 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rfl"
"## Tactic State A:\na b : ℤ\nh : a = b\n⊢ a + 1 = b + 1\n## Tactic State B:\na b : ℤ\nh : a + 1 = b + 1\n⊢ a + 1 = b + 1\n## Action:\n  -- Make sure that we infer the type of the function only after we see the hypothesis:"
"## Tactic State A:\na b : ℤ\nh : a + 1 = b + 1\n⊢ a + 1 = b + 1\n## Tactic State B:\na b : ℤ\nh : a + 1 = b + 1\n⊢ a + 1 = b + 1\n## Action:\n  apply_fun (fun n => n + 1) at h"
"## Tactic State A:\na b : ℤ\nh : a + 1 = b + 1\n⊢ a + 1 = b + 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  -- check that `h` was β-reduced"
"## Tactic State A:\nP : ℕ → Type\nQ : (n : ℕ) → P n\na b : ℕ\nh : a = b\n⊢ True\n## Tactic State B:\nP : ℕ → Type\nQ : (n : ℕ) → P n\na b : ℕ\nh : a = b\n⊢ True\n## Action:\n  fail_if_success apply_fun Q at h"
"## Tactic State A:\nP : ℕ → Type\nQ : (n : ℕ) → P n\na b : ℕ\nh : a = b\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial"
"## Tactic State A:\nf : ℕ → ℕ\na b : ℕ\nmonof : Monotone f\nh : a ≤ b\n⊢ f a ≤ f b\n## Tactic State B:\nf : ℕ → ℕ\na b : ℕ\nmonof : Monotone f\nh : f a ≤ f b\n⊢ f a ≤ f b\n## Action:\n  apply_fun f at h using monof"
"## Tactic State A:\nf : ℕ → ℕ\na b : ℕ\nmonof : Monotone f\nh : f a ≤ f b\n⊢ f a ≤ f b\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  assumption"
"## Tactic State A:\nf : ℕ → ℕ\na b : ℕ\nmonof : Monotone f\nh : a ≤ b\n⊢ f a ≤ f b\n## Tactic State B:\nf : ℕ → ℕ\na b : ℕ\nmonof : Monotone f\nh : f a ≤ f b\n⊢ f a ≤ f b\n---\nf : ℕ → ℕ\na b : ℕ\nmonof : Monotone f\nh : a ≤ b\n⊢ Monotone f\n## Action:\n  apply_fun f at h"
"## Tactic State A:\nf : ℕ → ℕ\na b : ℕ\nmonof : Monotone f\nh : f a ≤ f b\n⊢ f a ≤ f b\n---\nf : ℕ → ℕ\na b : ℕ\nmonof : Monotone f\nh : a ≤ b\n⊢ Monotone f\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · assumption"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · assumption"
"## Tactic State A:\nn m : ℕ\nf : ℕ → ℕ\nh : f n ≠ f m\n⊢ n ≠ m\n## Tactic State B:\nn m : ℕ\nf : ℕ → ℕ\nh : f n ≠ f m\n⊢ f n ≠ f m\n## Action:\n  apply_fun f"
"## Tactic State A:\nn m : ℕ\nf : ℕ → ℕ\nh : f n ≠ f m\n⊢ f n ≠ f m\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h"
"## Tactic State A:\nn m : ℕ\nf : ℕ ≃ ℕ\nh : f n ≠ f m\n⊢ n ≠ m\n## Tactic State B:\nn m : ℕ\nf : ℕ ≃ ℕ\nh : f n ≠ f m\n⊢ f n ≠ f m\n## Action:\n  apply_fun f"
"## Tactic State A:\nn m : ℕ\nf : ℕ ≃ ℕ\nh : f n ≠ f m\n⊢ f n ≠ f m\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h"
"## Tactic State A:\nn m : ℕ\nf : ℕ → ℕ\nw : Injective f\nh : f n = f m\n⊢ n = m\n## Tactic State B:\nn m : ℕ\nf : ℕ → ℕ\nw : Injective f\nh : f n = f m\n⊢ f n = f m\n## Action:\n  apply_fun f"
"## Tactic State A:\nn m : ℕ\nf : ℕ → ℕ\nw : Injective f\nh : f n = f m\n⊢ f n = f m\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  assumption"
"## Tactic State A:\nn m : ℕ\nf : ℕ → ℕ\nw : Injective f\nh : f n = f m\n⊢ n = m\n## Tactic State B:\nn m : ℕ\nf : ℕ → ℕ\nw : Injective f\nh : f n = f m\n⊢ f n = f m\n## Action:\n  apply_fun f using w"
"## Tactic State A:\nn m : ℕ\nf : ℕ → ℕ\nw : Injective f\nh : f n = f m\n⊢ f n = f m\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  assumption"
"## Tactic State A:\nn m : ℕ\nf : ℕ → ℕ\nw : Injective f ∧ true = true\nh : f n = f m\n⊢ n = m\n## Tactic State B:\nn m : ℕ\nf : ℕ → ℕ\nw : Injective f ∧ true = true\nh : f n = f m\n⊢ f n = f m\n## Action:\n  apply_fun f using w.1"
"## Tactic State A:\nn m : ℕ\nf : ℕ → ℕ\nw : Injective f ∧ true = true\nh : f n = f m\n⊢ f n = f m\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  assumption"
"## Tactic State A:\nx y : ℕ\nf : ℕ ≃ ℕ\nh : f x = f y\n⊢ x = y\n## Tactic State B:\nx y : ℕ\nf : ℕ ≃ ℕ\nh : f x = f y\n⊢ f x = f y\n## Action:\n  apply_fun f"
"## Tactic State A:\nx y : ℕ\nf : ℕ ≃ ℕ\nh : f x = f y\n⊢ f x = f y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  assumption"
"## Tactic State A:\nx y : ℕ\nf : ℕ ≃ ℕ\nh : f x = f y\n⊢ x = y\n## Tactic State B:\nx y : ℕ\nf : ℕ ≃ ℕ\nh : f x = f y\n⊢ f x = f y\n## Action:\n  apply_fun f using f.injective"
"## Tactic State A:\nx y : ℕ\nf : ℕ ≃ ℕ\nh : f x = f y\n⊢ f x = f y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  assumption"
"## Tactic State A:\nx y : ℕ\nh : (Equiv.refl ℕ) x = (Equiv.refl ℕ) y\n⊢ x = y\n## Tactic State B:\nx y : ℕ\nh : (Equiv.refl ℕ) x = (Equiv.refl ℕ) y\n⊢ (Equiv.refl ℕ) x = (Equiv.refl ℕ) y\n## Action:\n  apply_fun Equiv.refl ℕ"
"## Tactic State A:\nx y : ℕ\nh : (Equiv.refl ℕ) x = (Equiv.refl ℕ) y\n⊢ (Equiv.refl ℕ) x = (Equiv.refl ℕ) y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  assumption"
"## Tactic State A:\nα : Type u_1\na b : List α\nP : a = b\n⊢ True\n## Tactic State B:\nα : Type u_1\na b : List α\nP : a.length = b.length\n⊢ True\n## Action:\n  apply_fun List.length at P"
"## Tactic State A:\nα : Type u_1\na b : List α\nP : a.length = b.length\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial"
"## Tactic State A:\na b : ℕ\nh : a ≤ b\n⊢ a + 1 ≤ b + 1\n## Tactic State B:\na b : ℕ\nh : (fun x => x + 1) a ≤ (fun x => x + 1) b\n⊢ a + 1 ≤ b + 1\n---\na b : ℕ\nh : a ≤ b\n⊢ Monotone fun x => x + 1\n## Action:\n  apply_fun (· + 1 : ℕ → ℕ) at h -- TODO shouldn't need type ascription here"
"## Tactic State A:\na b : ℕ\nh : (fun x => x + 1) a ≤ (fun x => x + 1) b\n⊢ a + 1 ≤ b + 1\n---\na b : ℕ\nh : a ≤ b\n⊢ Monotone fun x => x + 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · exact h"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · exact Monotone.add_const monotone_id 1"
"## Tactic State A:\na b : ℕ\nh : a < b\n⊢ a + 1 < b + 1\n## Tactic State B:\na b : ℕ\nh : (fun x => x + 1) a < (fun x => x + 1) b\n⊢ a + 1 < b + 1\n---\na b : ℕ\nh : a < b\n⊢ StrictMono fun x => x + 1\n## Action:\n  apply_fun (· + 1 : ℕ → ℕ) at h"
"## Tactic State A:\na b : ℕ\nh : (fun x => x + 1) a < (fun x => x + 1) b\n⊢ a + 1 < b + 1\n---\na b : ℕ\nh : a < b\n⊢ StrictMono fun x => x + 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · exact h"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · exact StrictMono.add_const strictMono_id 1"
"## Tactic State A:\na b : ℕ\nh : a < b\n⊢ a + 1 < b + 1\n## Tactic State B:\na b : ℕ\nh : (fun x => id x + 1) a < (fun x => id x + 1) b\n⊢ a + 1 < b + 1\n## Action:\n  apply_fun (· + 1 : ℕ → ℕ) at h using StrictMono.add_const strictMono_id 1"
"## Tactic State A:\na b : ℕ\nh : (fun x => id x + 1) a < (fun x => id x + 1) b\n⊢ a + 1 < b + 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · exact h"
"## Tactic State A:\na b : ℕ\nh : a ≠ b\n⊢ a + 1 ≠ b + 1\n## Tactic State B:\na b : ℕ\nh : a + 1 ≠ b + 1\n⊢ a + 1 ≠ b + 1\n---\na b : ℕ\nh : a ≠ b\n⊢ Injective fun x => x + 1\n## Action:\n  apply_fun (· + 1 : ℕ → ℕ) at h"
"## Tactic State A:\na b : ℕ\nh : a + 1 ≠ b + 1\n⊢ a + 1 ≠ b + 1\n---\na b : ℕ\nh : a ≠ b\n⊢ Injective fun x => x + 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · exact h"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · exact add_left_injective 1"
"## Tactic State A:\nn : Type\ninst✝¹ : Fintype n\nX : Type\ninst✝ : Semiring X\nf : Matrix n n X → Matrix n n X\nA B : Matrix n n X\nh : A * B = 0\n⊢ f (A * B) = f 0\n## Tactic State B:\nn : Type\ninst✝¹ : Fintype n\nX : Type\ninst✝ : Semiring X\nf : Matrix n n X → Matrix n n X\nA B : Matrix n n X\nh : f (A * B) = f 0\n⊢ f (A * B) = f 0\n## Action:\n  apply_fun f at h"
"## Tactic State A:\nn : Type\ninst✝¹ : Fintype n\nX : Type\ninst✝ : Semiring X\nf : Matrix n n X → Matrix n n X\nA B : Matrix n n X\nh : f (A * B) = f 0\n⊢ f (A * B) = f 0\n## Tactic State B:\nn : Type\ninst✝¹ : Fintype n\nX : Type\ninst✝ : Semiring X\nf : Matrix n n X → Matrix n n X\nA B : Matrix n n X\nh : f (A * B) = f 0\n⊢ f (A * B) = f 0\n## Action:\n  -- check that our β-reduction didn't mess things up:"
"## Tactic State A:\nn : Type\ninst✝¹ : Fintype n\nX : Type\ninst✝ : Semiring X\nf : Matrix n n X → Matrix n n X\nA B : Matrix n n X\nh : f (A * B) = f 0\n⊢ f (A * B) = f 0\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  -- (previously `apply_fun` was producing `f (A.mul B) = f 0`)"
"## Tactic State A:\nn m : ℕ\nf : ℕ ≃ ℕ\nh : f n = f m\n⊢ n = m\n## Tactic State B:\nn m : ℕ\nf : ℕ ≃ ℕ\nh : f n = f m\n⊢ f n = f m\n## Action:\n  apply_fun f"
"## Tactic State A:\nn m : ℕ\nf : ℕ ≃ ℕ\nh : f n = f m\n⊢ f n = f m\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  assumption"
"## Tactic State A:\nn m : ℕ\nf : ℕ ≃o ℕ\nh : f n ≤ f m\n⊢ n ≤ m\n## Tactic State B:\nn m : ℕ\nf : ℕ ≃o ℕ\nh : f n ≤ f m\n⊢ f n ≤ f m\n## Action:\n  apply_fun f"
"## Tactic State A:\nn m : ℕ\nf : ℕ ≃o ℕ\nh : f n ≤ f m\n⊢ f n ≤ f m\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  assumption"
"## Tactic State A:\nn m : ℕ\nf : ℕ ≃o ℕ\nh : f n < f m\n⊢ n < m\n## Tactic State B:\nn m : ℕ\nf : ℕ ≃o ℕ\nh : f n < f m\n⊢ f n < f m\n## Action:\n  apply_fun f"
"## Tactic State A:\nn m : ℕ\nf : ℕ ≃o ℕ\nh : f n < f m\n⊢ f n < f m\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  assumption"
"## Tactic State A:\n⊢ ∀ (m n : ℕ), m = n → (m < 2) = (n < 2)\n## Tactic State B:\nm n : ℕ\nh : m = n\n⊢ (m < 2) = (n < 2)\n## Action:\n  refine fun m n h => ?_"
"## Tactic State A:\nm n : ℕ\nh : m = n\n⊢ (m < 2) = (n < 2)\n## Tactic State B:\nm n : ℕ\nh : (m < 2) = (n < 2)\n⊢ (m < 2) = (n < 2)\n## Action:\n  apply_fun (· < 2) at h"
"## Tactic State A:\nm n : ℕ\nh : (m < 2) = (n < 2)\n⊢ (m < 2) = (n < 2)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h"
"## Tactic State A:\n⊢ ∀ (m n : ℕ), m = n → (m < 2) = (n < 2)\n## Tactic State B:\nm n : ℕ\nh : m = n\n⊢ (m < 2) = (n < 2)\n## Action:\n  intro m n h"
"## Tactic State A:\nm n : ℕ\nh : m = n\n⊢ (m < 2) = (n < 2)\n## Tactic State B:\nm n : ℕ\nh : (m < 2) = (n < 2)\n⊢ (m < 2) = (n < 2)\n## Action:\n  apply_fun (· < 2) at h"
"## Tactic State A:\nm n : ℕ\nh : (m < 2) = (n < 2)\n⊢ (m < 2) = (n < 2)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h"
"## Tactic State A:\nf : ℕ ≃ ℕ\na b : ℕ\nh : a = b\n⊢ True\n## Tactic State B:\nf : ℕ ≃ ℕ\na b : ℕ\nh : f a = f b\n⊢ True\n## Action:\n  apply_fun f at h"
"## Tactic State A:\nf : ℕ ≃ ℕ\na b : ℕ\nh : f a = f b\n⊢ True\n## Tactic State B:\nf : ℕ ≃ ℕ\na b : ℕ\nh : f a = f b\n⊢ True\n## Action:\n  guard_hyp h : f a = f b"
"## Tactic State A:\nf : ℕ ≃ ℕ\na b : ℕ\nh : f a = f b\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial"
"## Tactic State A:\nf : ℤ ≃ ℤ\na b : ℕ\nh : a = b\n⊢ True\n## Tactic State B:\nf : ℤ ≃ ℤ\na b : ℕ\nh : f ↑a = f ↑b\n⊢ True\n## Action:\n  apply_fun f at h"
"## Tactic State A:\nf : ℤ ≃ ℤ\na b : ℕ\nh : f ↑a = f ↑b\n⊢ True\n## Tactic State B:\nf : ℤ ≃ ℤ\na b : ℕ\nh : f ↑a = f ↑b\n⊢ True\n## Action:\n  guard_hyp h : f a = f b"
"## Tactic State A:\nf : ℤ ≃ ℤ\na b : ℕ\nh : f ↑a = f ↑b\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial"
"## Tactic State A:\nα : Sort u_1\nf : ℤ ≃ ℤ\na b : α\nh : a = b\n⊢ True\n## Tactic State B:\nα : Sort u_1\nf : ℤ ≃ ℤ\na b : α\nh : a = b\n⊢ True\n## Action:\n  fail_if_success apply_fun f at h"
"## Tactic State A:\nα : Sort u_1\nf : ℤ ≃ ℤ\na b : α\nh : a = b\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial"
"## Tactic State A:\nf : ℕ → ℕ\na b : ℕ\nh : a = b\n⊢ True\n## Tactic State B:\nf : ℕ → ℕ\na b : ℕ\nh : f a = f b\n⊢ True\n## Action:\n  apply_fun f at h"
"## Tactic State A:\nf : ℕ → ℕ\na b : ℕ\nh : f a = f b\n⊢ True\n## Tactic State B:\nf : ℕ → ℕ\na b : ℕ\nh : f a = f b\n⊢ True\n## Action:\n  guard_hyp h : f a = f b"
"## Tactic State A:\nf : ℕ → ℕ\na b : ℕ\nh : f a = f b\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial"
"## Tactic State A:\nf : {i : ℕ} → Fin i → ℕ\na b : Fin 37\nh : a = b\n⊢ True\n## Tactic State B:\nf : {i : ℕ} → Fin i → ℕ\na b : Fin 37\nh : f a = f b\n⊢ True\n## Action:\n  apply_fun f at h"
"## Tactic State A:\nf : {i : ℕ} → Fin i → ℕ\na b : Fin 37\nh : f a = f b\n⊢ True\n## Tactic State B:\nf : {i : ℕ} → Fin i → ℕ\na b : Fin 37\nh : f a = f b\n⊢ True\n## Action:\n  guard_hyp h : f a = f b"
"## Tactic State A:\nf : {i : ℕ} → Fin i → ℕ\na b : Fin 37\nh : f a = f b\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial"
"## Tactic State A:\nf : (p : Prop) → [inst : Decidable p] → ℕ\np q : Prop\nh : p = q\nh' : ∀ {n m : ℕ}, n = m → True\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  classical"
"## Tactic State A:\nf : (p : Prop) → [inst : Decidable p] → ℕ\np q : Prop\nh : p = q\nh' : ∀ {n m : ℕ}, n = m → True\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  classical"
"## Tactic State A:\na b : ℕ\nh : a = b\n⊢ True\n## Tactic State B:\na b : ℕ\nh : a + ?m.23 = b + ?m.23\n⊢ True\n---\na b : ℕ\nh : a = b\ni : ℕ\n⊢ ℕ\n## Action:\n  apply_fun (fun i => i + ?_) at h"
"## Tactic State A:\na b : ℕ\nh : a + ?m.23 = b + ?m.23\n⊢ True\n---\na b : ℕ\nh : a = b\ni : ℕ\n⊢ ℕ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · trivial"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · exact 37"
"## Tactic State A:\nα β : Type u\ninst✝¹ : Fintype α\ninst✝ : Fintype β\nh : α = β\n⊢ True\n## Tactic State B:\nα β : Type u\ninst✝¹ : Fintype α\ninst✝ : Fintype β\nh : Fintype.card α = Fintype.card β\n⊢ True\n## Action:\n  apply_fun Fintype.card at h"
"## Tactic State A:\nα β : Type u\ninst✝¹ : Fintype α\ninst✝ : Fintype β\nh : Fintype.card α = Fintype.card β\n⊢ True\n## Tactic State B:\nα β : Type u\ninst✝¹ : Fintype α\ninst✝ : Fintype β\nh : Fintype.card α = Fintype.card β\n⊢ True\n## Action:\n  guard_hyp h : Fintype.card α = Fintype.card β"
"## Tactic State A:\nα β : Type u\ninst✝¹ : Fintype α\ninst✝ : Fintype β\nh : Fintype.card α = Fintype.card β\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial"
"## Tactic State A:\nα : Sort u_1\nβ : Sort u_2\nf : α ≃ β\nx y : α\nh : f x = f y\n⊢ x = y\n## Tactic State B:\nα : Sort u_1\nβ : Sort u_2\nf : α ≃ β\nx y : α\nh : f x = f y\n⊢ x = y\n## Action:\n  change _"
"## Tactic State A:\nα : Sort u_1\nβ : Sort u_2\nf : α ≃ β\nx y : α\nh : f x = f y\n⊢ x = y\n## Tactic State B:\nα : Sort u_1\nβ : Sort u_2\nf : α ≃ β\nx y : α\nh : f x = f y\n⊢ f x = f y\n## Action:\n  -- now the goal is a metavariable"
"## Tactic State A:\nα : Sort u_1\nβ : Sort u_2\nf : α ≃ β\nx y : α\nh : f x = f y\n⊢ f x = f y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  apply_fun f"
"## Tactic State A:\nα : Sort u_1\nβ : Sort u_2\nf : α ≃ β\nx y : α\nh : f x = f y\n⊢ (fun s => s) (x = y)\n## Tactic State B:\nα : Sort u_1\nβ : Sort u_2\nf : α ≃ β\nx y : α\nh : f x = f y\n⊢ f x = f y\n## Action:\n  apply_fun f"
"## Tactic State A:\nα : Sort u_1\nβ : Sort u_2\nf : α ≃ β\nx y : α\nh : f x = f y\n⊢ f x = f y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h"
"## Tactic State A:\nx : ℕ\n⊢ x = x\n## Tactic State B:\nx : ℕ\n⊢ ↑x = ↑x\n## Action:\n  apply_fun (Nat.cast : ℕ → ℚ) using Nat.cast_injective"
"## Tactic State A:\nx : ℕ\n⊢ ↑x = ↑x\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rfl"
"## Tactic State A:\n⊢ 1 = 1\n## Tactic State B:\nf : ℕ → ℕ := fun x => x + 1\n⊢ 1 = 1\n## Action:\n  let f := fun (x : Nat) => x + 1"
"## Tactic State A:\nf : ℕ → ℕ := fun x => x + 1\n⊢ 1 = 1\n## Tactic State B:\nf : ℕ → ℕ := fun x => x + 1\ng : ∀ (f : ℕ → ℕ), Injective f\n⊢ 1 = 1\n## Action:\n  -- clearly false but for demo purposes only"
"## Tactic State A:\nf : ℕ → ℕ := fun x => x + 1\ng : ∀ (f : ℕ → ℕ), Injective f\n⊢ 1 = 1\n## Tactic State B:\nf : ℕ → ℕ := fun x => x + 1\ng : ∀ (f : ℕ → ℕ), Injective f\n⊢ f 1 = f 1\n## Action:\n  have g : ∀ (f : ℕ → ℕ), Function.Injective f := test_sorry"
"## Tactic State A:\nf : ℕ → ℕ := fun x => x + 1\ng : ∀ (f : ℕ → ℕ), Injective f\n⊢ f 1 = f 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  apply_fun f using (g f)"
"## Tactic State A:\nx✝ : Sort u_1\nfunFamily : x✝\n_h₁ : Injective sorry\n⊢ true = true\n## Tactic State B:\nx✝ : Sort u_1\nfunFamily : x✝\n_h₁ : Injective sorry\n⊢ true = true\n## Action:\n  apply_fun funFamily 0"
"## Tactic State A:\nn : ℤ\n⊢ 3 ∣ n ^ 3 - n\n## Tactic State B:\nn : ℤ\nH : n ≡ 0 [ZMOD 3]\n⊢ 3 ∣ n ^ 3 - n\n---\nn : ℤ\nH : n ≡ 1 [ZMOD 3]\n⊢ 3 ∣ n ^ 3 - n\n---\nn : ℤ\nH : n ≡ 2 [ZMOD 3]\n⊢ 3 ∣ n ^ 3 - n\n## Action:\n  mod_cases n % 3"
"## Tactic State A:\nn : ℤ\nH : n ≡ 0 [ZMOD 3]\n⊢ 3 ∣ n ^ 3 - n\n---\nn : ℤ\nH : n ≡ 1 [ZMOD 3]\n⊢ 3 ∣ n ^ 3 - n\n---\nn : ℤ\nH : n ≡ 2 [ZMOD 3]\n⊢ 3 ∣ n ^ 3 - n\n## Tactic State B:\nn : ℤ\nH : n ≡ 0 [ZMOD 3]\n⊢ 3 ∣ n ^ 3 - n\n## Action:\n  · guard_hyp H :ₛ n ≡ 0 [ZMOD 3]; guard_target = 3 ∣ n ^ 3 - n; exact test_sorry"
"## Tactic State A:\nn : ℤ\nH : n ≡ 0 [ZMOD 3]\n⊢ 3 ∣ n ^ 3 - n\n## Tactic State B:\nn : ℤ\nH : n ≡ 0 [ZMOD 3]\n⊢ 3 ∣ n ^ 3 - n\n## Action:\n  · guard_hyp H :ₛ n ≡ 1 [ZMOD 3]; guard_target = 3 ∣ n ^ 3 - n; exact test_sorry"
"## Tactic State A:\nn : ℤ\nH : n ≡ 0 [ZMOD 3]\n⊢ 3 ∣ n ^ 3 - n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · guard_hyp H :ₛ n ≡ 2 [ZMOD 3]; guard_target = 3 ∣ n ^ 3 - n; exact test_sorry"
"## Tactic State A:\nn : ℕ\n⊢ 3 ∣ n ^ 3 + n\n## Tactic State B:\nn : ℕ\nH : n ≡ 0 [MOD 3]\n⊢ 3 ∣ n ^ 3 + n\n---\nn : ℕ\nH : n ≡ 1 [MOD 3]\n⊢ 3 ∣ n ^ 3 + n\n---\nn : ℕ\nH : n ≡ 2 [MOD 3]\n⊢ 3 ∣ n ^ 3 + n\n## Action:\n  mod_cases n % 3"
"## Tactic State A:\nn : ℕ\nH : n ≡ 0 [MOD 3]\n⊢ 3 ∣ n ^ 3 + n\n---\nn : ℕ\nH : n ≡ 1 [MOD 3]\n⊢ 3 ∣ n ^ 3 + n\n---\nn : ℕ\nH : n ≡ 2 [MOD 3]\n⊢ 3 ∣ n ^ 3 + n\n## Tactic State B:\nn : ℕ\nH : n ≡ 0 [MOD 3]\n⊢ 3 ∣ n ^ 3 + n\n## Action:\n  · guard_hyp H :~ n ≡ 0 [MOD 3]; guard_target = 3 ∣ n ^ 3 + n; exact test_sorry"
"## Tactic State A:\nn : ℕ\nH : n ≡ 0 [MOD 3]\n⊢ 3 ∣ n ^ 3 + n\n## Tactic State B:\nn : ℕ\nH : n ≡ 0 [MOD 3]\n⊢ 3 ∣ n ^ 3 + n\n## Action:\n  · guard_hyp H :~ n ≡ 1 [MOD 3]; guard_target = 3 ∣ n ^ 3 + n; exact test_sorry"
"## Tactic State A:\nn : ℕ\nH : n ≡ 0 [MOD 3]\n⊢ 3 ∣ n ^ 3 + n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · guard_hyp H :~ n ≡ 2 [MOD 3]; guard_target = 3 ∣ n ^ 3 + n; exact test_sorry"
"## Tactic State A:\nn : ℕ\nz : ℤ\n⊢ n = n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  induction n with"
"## Tactic State A:\nα : Type u_1\ninst✝² : CommRing α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b : α\nh : a < b\nw : b < a\n⊢ False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith"
"## Tactic State A:\nα : Type\n_inst : (a : Prop) → Decidable a\ninst✝² : CommRing α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c : α\nha : a < 0\nhb : ¬b = 0\nhc' : c = 0\nh✝ : (1 - a) * (b * b) ≤ 0\nhc : 0 ≤ 0\nw : -(a * -b * -b + b * -b + 0) = (1 - a) * (b * b)\nh : (1 - a) * (b * b) ≤ 0\n⊢ 0 < 1 - a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith"
"## Tactic State A:\ne b c a v0 v1 : ℚ\nh1 : v0 = 5 * a\nh2 : v1 = 3 * b\nh3 : v0 + v1 + c = 10\n⊢ v0 + 5 + (v1 - 3) + (c - 2) = 10\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith"
"## Tactic State A:\nα : Type u_1\ninst✝² : CommRing α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\ne b c a v0 v1 : α\nh1 : v0 = 5 * a\nh2 : v1 = 3 * b\nh3 : v0 + v1 + c = 10\n⊢ v0 + 5 + (v1 - 3) + (c - 2) = 10\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith"
"## Tactic State A:\nh : 1 < 0\ng : ¬37 < 42\n_k : True\nl : -7 < 5\n⊢ 3 < 7\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith [(rfl : 0 = 0)]"
"## Tactic State A:\nu v r s t : ℚ\nh : 0 < u * (t * v + t * r + s)\n⊢ 0 < (t * (r + v) + s) * 3 * u\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith"
"## Tactic State A:\nA B : ℚ\nh : 0 < A * B\n⊢ 0 < 8 * A * B\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith"
"## Tactic State A:\nA B : ℚ\nh : 0 < A * B\n⊢ 0 < A * 8 * B\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith"
"## Tactic State A:\nα : Type u_1\ninst✝² : CommRing α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\nx : α\n⊢ 0 ≤ x\n## Tactic State B:\nα : Type u_1\ninst✝² : CommRing α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\nx : α\nh : 0 ≤ x\n⊢ 0 ≤ x\n## Action:\n  have h : 0 ≤ x := test_sorry"
"## Tactic State A:\nα : Type u_1\ninst✝² : CommRing α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\nx : α\nh : 0 ≤ x\n⊢ 0 ≤ x\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith"
"## Tactic State A:\nα : Type u_1\ninst✝² : CommRing α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\nx : α\n⊢ 0 ≤ x\n## Tactic State B:\nα : Type u_1\ninst✝² : CommRing α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\nx : α\nh : 0 ≤ x\n⊢ 0 ≤ x\n## Action:\n  have h : 0 ≤ x := test_sorry"
"## Tactic State A:\nα : Type u_1\ninst✝² : CommRing α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\nx : α\nh : 0 ≤ x\n⊢ 0 ≤ x\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith [h]"
"## Tactic State A:\nα : Type u_1\ninst✝² : CommRing α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\nA B : α\nh : 0 < A * B\n⊢ 0 < 8 * A * B\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith"
"## Tactic State A:\nA B : ℚ\nh : 0 < A * B\n⊢ 0 < A * B / 8\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith"
"## Tactic State A:\nA B : ℚ\nh : 0 < A * B\n⊢ 0 < A / 8 * B\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith"
"## Tactic State A:\nε : ℚ\nh1 : ε > 0\n⊢ ε / 2 + ε / 3 + ε / 7 < ε\n## Tactic State B:\nGoals Accomplished!\n## Action:\n by linarith"
"## Tactic State A:\nx y z : ℚ\nh1 : 2 * x < 3 * y\nh2 : -4 * x + z / 2 < 0\nh3 : 12 * y - z < 0\n⊢ False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith"
"## Tactic State A:\na b c : ℚ\nh2 : b + 2 > 3 + b\n⊢ False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith (config := {discharger := do Lean.Elab.Tactic.evalTactic (←`(tactic| ring1))})"
"## Tactic State A:\na b c : ℚ\nh2 : b + 2 > 3 + b\n⊢ False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith"
"## Tactic State A:\ng v V c h : ℚ\nh1 : h = 0\nh2 : v = V\nh3 : V > 0\nh4 : g > 0\nh5 : 0 ≤ c\nh6 : c < 1\n⊢ v ≤ V\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith"
"## Tactic State A:\nx y z : ℤ\nh1 : 2 * x < 3 * y\nh2 : -4 * x + 2 * z < 0\nh3 : 12 * y - 4 * z < 0\n⊢ False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith"
"## Tactic State A:\nx y z : ℤ\nh1 : 2 * x < 3 * y\nh2 : -4 * x + 2 * z < 0\nh3✝ : x * y < 5\nh3 : 12 * y - 4 * z < 0\n⊢ False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith"
"## Tactic State A:\na b c : ℚ\nh1 : a > 0\nh2 : b > 5\nh3 : c < -10\nh4 : a + b - c < 3\n⊢ False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith"
"## Tactic State A:\na b c : ℚ\nh2 : b > 0\nh3 : ¬b ≥ 0\n⊢ False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith"
"## Tactic State A:\nx y z : ℚ\nhx : x ≤ 3 * y\nh2 : y ≤ 2 * z\nh3 : x ≥ 6 * z\n⊢ x = 3 * y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith"
"## Tactic State A:\nx y z : ℤ\nh1 : 2 * x < 3 * y\nh2 : -4 * x + 2 * z < 0\nh3 : x * y < 5\n⊢ ¬12 * y - 4 * z < 0\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith"
"## Tactic State A:\nx y z : ℚ\nhx : ¬x > 3 * y\nh2 : ¬y > 2 * z\nh3 : x ≥ 6 * z\n⊢ x = 3 * y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith"
"## Tactic State A:\nx y : ℚ\nh : 6 + ((x + 4) * x + (6 + 3 * y) * y) = 3\nh' : (x + 4) * x ≥ 0\nh'' : (6 + 3 * y) * y ≥ 0\n⊢ False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith"
"## Tactic State A:\na : ℚ\nha : 0 ≤ a\n⊢ 0 * 0 ≤ 2 * a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith"
"## Tactic State A:\nx : ℚ\n⊢ id x ≥ x\n## Tactic State B:\nx : ℚ\n⊢ id x ≥ x\n## Action:\n  fail_if_success"
"## Tactic State A:\nx : ℚ\n⊢ id x ≥ x\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    linarith"
"## Tactic State A:\nx y z : ℚ\nh1 : 2 * x + -3 * y < 0\nh2 : -4 * x + 2 * z < 0\nh3 : 12 * y + -4 * z < 0\nh4 : sorry\n⊢ False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith"
"## Tactic State A:\nx y z : ℚ\nh1 : 2 * 1 * x + 3 * (y * -1) < 0\nh2 : -2 * x * 2 < -(z + z)\nh3 : 12 * y + -4 * z < 0\nh4 : sorry\n⊢ False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith"
"## Tactic State A:\nw x y z : ℤ\nh1 : 4 * x + -3 * y + 6 * w ≤ 0\nh2 : -1 * x < 0\nh3 : y < 0\nh4 : w ≥ 0\nh5 : sorry\n⊢ False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith"
"## Tactic State A:\nx : ℚ\nhx : x > 0\nh : x.num < 0\n⊢ False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith [Rat.num_pos.mpr hx, h]"
"## Tactic State A:\nx : ℚ\nhx : x > 0\nh : x.num < 0\n⊢ False\n## Tactic State B:\nx : ℚ\nhx : x > 0\nh : x.num < 0\n⊢ False\n## Action:\n  fail_if_success"
"## Tactic State A:\nx : ℚ\nhx : x > 0\nh : x.num < 0\n⊢ False\n## Tactic State B:\nx : ℚ\nhx : x > 0\nh : x.num < 0\n⊢ False\n## Action:\n    linarith"
"## Tactic State A:\nx : ℚ\nhx : x > 0\nh : x.num < 0\n⊢ False\n## Tactic State B:\nx : ℚ\nhx : x > 0\nh : x.num < 0\n⊢ False\n## Action:\n  fail_if_success"
"## Tactic State A:\nx : ℚ\nhx : x > 0\nh : x.num < 0\n⊢ False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    linarith only [h]"
"## Tactic State A:\ni n : ℕ\nh : 2 ^ i ≤ 2 ^ n\n⊢ 0 ≤ 2 ^ n - 2 ^ i\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith"
"## Tactic State A:\na b c : ℚ\nh2 : b > 0\nh3 : b < 0\n⊢ sorry\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith"
"## Tactic State A:\na b c : ℚ\nh2 : 2 > 3\n⊢ a + b - c ≥ 3\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith (config := {exfalso := false})"
"## Tactic State A:\nx y : ℚ\nh : 6 + ((x + 4) * x + (6 + 3 * y) * y) = 3 ∧ (x + 4) * x ≥ 0 ∧ (6 + 3 * y) * y ≥ 0\n⊢ False\n## Tactic State B:\nx y : ℚ\nh : 6 + ((x + 4) * x + (6 + 3 * y) * y) = 3 ∧ (x + 4) * x ≥ 0 ∧ (6 + 3 * y) * y ≥ 0\n⊢ False\n## Action:\n  fail_if_success"
"## Tactic State A:\nx y : ℚ\nh : 6 + ((x + 4) * x + (6 + 3 * y) * y) = 3 ∧ (x + 4) * x ≥ 0 ∧ (6 + 3 * y) * y ≥ 0\n⊢ False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    linarith (config := {splitHypotheses := false})"
"## Tactic State A:\nh : 1 < 0\ng : ¬37 < 42\nk : True\nl : -7 < 5\n⊢ 3 < 7\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith [(rfl : 0 = 0)]"
"## Tactic State A:\nh : 1 < 0\n⊢ 3 = 7\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith [Int.zero_lt_one]"
"## Tactic State A:\nh1 : 1 < 1\n⊢ False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith"
"## Tactic State A:\na b c : ℕ\n⊢ a + b ≥ a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith"
"## Tactic State A:\na b i : ℕ\nh1 : ¬a < i\nh2 : b < i\nh3 : a ≤ b\n⊢ False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith"
"## Tactic State A:\nx y : ℕ\nh : x < 3 * y\n⊢ True\n## Tactic State B:\nx y : ℕ\nh : ↑x < 3 * ↑y\n⊢ True\n## Action:\n  zify at h"
"## Tactic State A:\nx y : ℕ\nh : ↑x < 3 * ↑y\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial"
"## Tactic State A:\nx y z : ℕ\nhx : x ≤ 3 * y\nh2 : y ≤ 2 * z\nh3 : x ≥ 6 * z\n⊢ x = 3 * y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith"
"## Tactic State A:\na b c : ℕ\n⊢ ¬a + b < a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith"
"## Tactic State A:\nn : ℕ\nh1 : n ≤ 3\nh2 : n > 2\n⊢ n = 3\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith"
"## Tactic State A:\nz : ℕ\nhz : ¬z ≥ 2\nh2 : ¬z + 1 ≤ 2\n⊢ False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith"
"## Tactic State A:\nz : ℕ\nhz : ¬z ≥ 2\n⊢ z + 1 ≤ 2\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith"
"## Tactic State A:\ni : ℤ\nhi : i > 5\n⊢ 2 * i + 3 > 11\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith"
"## Tactic State A:\nm : ℕ\n⊢ m * m + m + (2 * m + 2) = m * m + m + (m + 1) + (m + 1)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith"
"## Tactic State A:\nmess : ℕ → ℕ\nS n : ℕ\n⊢ mess S + (n * mess S + n * 2 + 1) < n * mess S + mess S + (n * 2 + 2)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith"
"## Tactic State A:\np n p' n' : ℕ\nh : p + n' = p' + n\n⊢ n + p' = n' + p\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith"
"## Tactic State A:\na b c : ℚ\nh1 : 1 / a < b\nh2 : b < c\n⊢ 1 / a < c\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith"
"## Tactic State A:\nN n : ℕ\nHirrelevant : n > N\nA l : ℚ\nh : A - l ≤ -(A - l)\nh_1 : ¬A ≤ -A\nh_2 : ¬l ≤ -l\nh_3 : -(A - l) < 1\n⊢ A < l + 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith"
"## Tactic State A:\nd : ℚ\nq n : ℕ\nh1 : (↑q - 1) * ↑n ≥ 0\nh2 : d = 2 / 3 * ((↑q - 1) * ↑n)\n⊢ d ≤ (↑q - 1) * ↑n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith"
"## Tactic State A:\nd : ℚ\nq n : ℕ\nh1 : (↑q - 1) * ↑n ≥ 0\nh2 : d = 2 / 3 * ((↑q - 1) * ↑n)\n⊢ (↑q - 1) * ↑n - d = 1 / 3 * ((↑q - 1) * ↑n)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith"
"## Tactic State A:\nx y z : ℚ\nhx : x < 5\nhx2 : x > 5\nhy : y < 5000000000\nhz : z > 34 * y\n⊢ false = true\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith only [hx, hx2]"
"## Tactic State A:\nx y z : ℚ\nhx : x < 5\nhy : y < 5000000000\nhz : z > 34 * y\n⊢ x ≤ 5\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  linarith only [hx]"
"## Tactic State A:\nh : 0 + 0 = 0\n⊢ True\n## Tactic State B:\nh : True\n⊢ True\n## Action:\n  simp at h"
"## Tactic State A:\nh : True\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  try exact h"
"## Tactic State A:\na b : ℕ\nh : a = b\n⊢ a + 0 = b\n## Tactic State B:\na b : ℕ\nh : a = b\n⊢ a = b\n## Action:\n  simp"
"## Tactic State A:\na b : ℕ\nh : a = b\n⊢ a = b\n## Tactic State B:\na : ℕ\n⊢ a = a\n## Action:\n  subst h"
"## Tactic State A:\na : ℕ\n⊢ a = a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rfl"
"## Tactic State A:\na b : ℕ\nh : a = b\n⊢ a + 0 = b\n## Tactic State B:\na b : ℕ\nh : a = b\n⊢ a = b\n## Action:\n  simp"
"## Tactic State A:\na b : ℕ\nh : a = b\n⊢ a = b\n## Tactic State B:\ncase pos\na b : ℕ\nh h✝ : a = b\n⊢ a = b\n---\ncase neg\na b : ℕ\nh : a = b\nh✝ : ¬a = b\n⊢ a = b\n## Action:\n  by_cases a = b"
"## Tactic State A:\ncase pos\na b : ℕ\nh h✝ : a = b\n⊢ a = b\n---\ncase neg\na b : ℕ\nh : a = b\nh✝ : ¬a = b\n⊢ a = b\n## Tactic State B:\ncase pos\na : ℕ\nh✝ : a = a\n⊢ a = a\n---\ncase neg\na b : ℕ\nh : a = b\nh✝ : ¬a = b\n⊢ a = b\n## Action:\n  subst h; rfl"
"## Tactic State A:\ncase pos\na : ℕ\nh✝ : a = a\n⊢ a = a\n---\ncase neg\na b : ℕ\nh : a = b\nh✝ : ¬a = b\n⊢ a = b\n## Tactic State B:\ncase neg\na b : ℕ\nh : a = b\nh✝ : ¬a = b\n⊢ a = b\n## Action:\n  subst h; rfl"
"## Tactic State A:\na b : ℕ\nh : a = b\n⊢ a + 0 = b\n## Tactic State B:\na b : ℕ\nh : a = b\n⊢ a = b\n## Action:\n  simp"
"## Tactic State A:\na b : ℕ\nh : a = b\n⊢ a = b\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  induction a <;> assumption"
"## Tactic State A:\nh : 0 = 0 ∨ 0 = 0\n⊢ True\n## Tactic State B:\ncase inl\nh : True\n⊢ True\n---\ncase inr\nh : True\n⊢ True\n## Action:\n  cases h <;>"
"## Tactic State A:\ncase inl\nh : True\n⊢ True\n---\ncase inr\nh : True\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    rename_i h <;>"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    simp at h"
"## Tactic State A:\nh : 0 = 1 ∨ 0 = 1\n⊢ 0 = 1 ∧ 0 = 1\n## Tactic State B:\ncase inl\nh✝ : 0 = 1\n⊢ False\n---\ncase inr\nh✝ : 0 = 1\n⊢ False\n## Action:\n  cases h <;> simp"
"## Tactic State A:\ncase inl\nh✝ : 0 = 1\n⊢ False\n---\ncase inr\nh✝ : 0 = 1\n⊢ False\n## Tactic State B:\ncase inl\nh✝ : 0 = 1\n⊢ False\n## Action:\n  on_goal 2 => · contradiction"
"## Tactic State A:\ncase inl\nh✝ : 0 = 1\n⊢ False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · contradiction"
"## Tactic State A:\nh : 0 = 1 ∨ 0 = 1\n⊢ 0 = 1 ∧ 0 = 1\n## Tactic State B:\ncase inl\nh✝ : 0 = 1\n⊢ False\n---\ncase inr\nh✝ : 0 = 1\n⊢ False\n## Action:\n  cases h <;> simp"
"## Tactic State A:\ncase inl\nh✝ : 0 = 1\n⊢ False\n---\ncase inr\nh✝ : 0 = 1\n⊢ False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · contradiction"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · contradiction"
"## Tactic State A:\nh : 0 = 0\nk : 1 = 1\n⊢ True\n## Tactic State B:\nh k : True\n⊢ True\n## Action:\n  simp at h k;"
"## Tactic State A:\nh k : True\n⊢ True\n## Tactic State B:\nh k : True\n⊢ ¬¬True\n## Action:\n  rw [← Classical.not_not (a := True)]"
"## Tactic State A:\nh k : True\n⊢ ¬¬True\n## Tactic State B:\nh : True\nk : ¬¬True\n⊢ ¬¬True\n## Action:\n  -- flag the two below vvv do not above ^^^"
"## Tactic State A:\nh : True\nk : ¬¬True\n⊢ ¬¬True\n## Tactic State B:\nh k : ¬¬True\n⊢ ¬¬True\n## Action:\n  rw [← Classical.not_not (a := True)] at k"
"## Tactic State A:\nh k : ¬¬True\n⊢ ¬¬True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rw [← Classical.not_not (a := True)] at h"
"## Tactic State A:\na b : ℕ\nh : ∀ (c : ℕ), c + a + b = a + c\n⊢ 0 + 2 + 1 + a + b = a + 3\n## Tactic State B:\na b : ℕ\nh : ∀ (c : ℕ), c + a + b = a + c\n⊢ 3 + a + b = a + 3\n## Action:\n  simp"
"## Tactic State A:\na b : ℕ\nh : ∀ (c : ℕ), c + a + b = a + c\n⊢ 3 + a + b = a + 3\n## Tactic State B:\na b : ℕ\nh : 3 + a + b = a + 3\n⊢ 3 + a + b = a + 3\n## Action:\n  specialize h 3"
"## Tactic State A:\na b : ℕ\nh : 3 + a + b = a + 3\n⊢ 3 + a + b = a + 3\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  simp_all"
"## Tactic State A:\n⊢ 0 + 2 + 1 = 3\n## Tactic State B:\n⊢ 2 + 1 = 3\n## Action:\n  simp"
"## Tactic State A:\n⊢ 2 + 1 = 3\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  norm_num"
"## Tactic State A:\na : ℚ\n⊢ a + (0 + 2 + 1) = 3 + a\n## Tactic State B:\na : ℚ\n⊢ a + (2 + 1) = 3 + a\n## Action:\n  simp"
"## Tactic State A:\na : ℚ\n⊢ a + (2 + 1) = 3 + a\n## Tactic State B:\na : ℚ\n⊢ a + 3 = 3 + a\n## Action:\n  norm_num"
"## Tactic State A:\na : ℚ\n⊢ a + 3 = 3 + a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rw [add_comm]"
"## Tactic State A:\na b : ℕ\nh : a = b\n⊢ a + b + 0 = b + a\n## Tactic State B:\na b : ℕ\nh : a = b\n⊢ a + b = b + a\n## Action:\n  simp"
"## Tactic State A:\na b : ℕ\nh : a = b\n⊢ a + b = b + a\n## Tactic State B:\ncase e_a\na b : ℕ\nh : a = b\n⊢ b = a\n## Action:\n  congr"
"## Tactic State A:\ncase e_a\na b : ℕ\nh : a = b\n⊢ b = a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h.symm"
"## Tactic State A:\nh : False\n⊢ 0 ≠ 0\n## Tactic State B:\nh : False\n⊢ 0 ≠ 0\n## Action:\n  try (simp; done)"
"## Tactic State A:\nh : False\n⊢ 0 ≠ 0\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h.elim"
"## Tactic State A:\na b : ℕ\nh : a + b = a + (b + 1)\n⊢ a + b = b + a + 0 + 1\n## Tactic State B:\na b : ℕ\nh : a + b = a + (b + 1)\n⊢ a + b = b + a + 1\n## Action:\n  simp"
"## Tactic State A:\na b : ℕ\nh : a + b = a + (b + 1)\n⊢ a + b = b + a + 1\n## Tactic State B:\na b : ℕ\nh : a + b = a + (b + 1)\n⊢ a + b = a + (b + 1)\n## Action:\n  abel_nf"
"## Tactic State A:\na b : ℕ\nh : a + b = a + (b + 1)\n⊢ a + b = a + (b + 1)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  assumption"
"## Tactic State A:\na b : ℕ\n⊢ a + b = b + a + 0\n## Tactic State B:\na b : ℕ\n⊢ a + b = b + a\n## Action:\n  simp"
"## Tactic State A:\na b : ℕ\n⊢ a + b = b + a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  abel"
"## Tactic State A:\na b : ℕ\nh : a + b = 1 + a + b\n⊢ a + b = b + a + 0 + 1\n## Tactic State B:\na b : ℕ\nh : a + b = 1 + a + b\n⊢ a + b = b + a + 1\n## Action:\n  simp"
"## Tactic State A:\na b : ℕ\nh : a + b = 1 + a + b\n⊢ a + b = b + a + 1\n## Tactic State B:\na b : ℕ\nh : a + b = 1 + a + b\n⊢ a + b = 1 + a + b\n## Action:\n  ring_nf"
"## Tactic State A:\na b : ℕ\nh : a + b = 1 + a + b\n⊢ a + b = 1 + a + b\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  assumption"
"## Tactic State A:\na b : ℕ\n⊢ a + b = b + a + 0\n## Tactic State B:\na b : ℕ\n⊢ a + b = b + a\n## Action:\n  simp"
"## Tactic State A:\na b : ℕ\n⊢ a + b = b + a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  ring"
"## Tactic State A:\nh : 0 = 1 ∨ 0 = 1\n⊢ 0 = 1 ∧ 0 = 1\n## Tactic State B:\ncase inl\nh✝ : 0 = 1\n⊢ False\n---\ncase inr\nh✝ : 0 = 1\n⊢ False\n## Action:\n  cases h <;> simp"
"## Tactic State A:\ncase inl\nh✝ : 0 = 1\n⊢ False\n---\ncase inr\nh✝ : 0 = 1\n⊢ False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · simp_all"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · contradiction"
"## Tactic State A:\nn : ℕ\n⊢ n + 1 = 1 + n\n## Tactic State B:\ncase pos\nn : ℕ\nh✝ : 0 = 0\n⊢ n + 1 = 1 + n\n---\ncase neg\nn : ℕ\nh✝ : ¬0 = 0\n⊢ n + 1 = 1 + n\n## Action:\n  by_cases 0 = 0"
"## Tactic State A:\ncase pos\nn : ℕ\nh✝ : 0 = 0\n⊢ n + 1 = 1 + n\n---\ncase neg\nn : ℕ\nh✝ : ¬0 = 0\n⊢ n + 1 = 1 + n\n## Tactic State B:\ncase pos\nn : ℕ\n⊢ n + 1 = 1 + n\n## Action:\n  · simp_all"
"## Tactic State A:\ncase pos\nn : ℕ\n⊢ n + 1 = 1 + n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    omega"
"## Tactic State A:\n\n## Tactic State B:\ncase neg\nn : ℕ\nh✝ : ¬0 = 0\nthis : 0 ≠ 1\n⊢ n + 1 = 1 + n\n## Action:\n  · have : 0 ≠ 1 := by"
"## Tactic State A:\ncase neg\nn : ℕ\nh✝ : ¬0 = 0\nthis : 0 ≠ 1\n⊢ n + 1 = 1 + n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n      intro h"
"## Tactic State A:\nh : 0 = 0\nk : 1 = 1\n⊢ ¬¬True\n## Tactic State B:\nk : 1 = 1\nh : True\n⊢ ¬¬True\n## Action:\n  simp at h"
"## Tactic State A:\nk : 1 = 1\nh : True\n⊢ ¬¬True\n## Tactic State B:\nk : 1 + 0 = 1 + 0\nh : True\n⊢ ¬¬True\n## Action:\n  rw [← Nat.add_zero 1] at k"
"## Tactic State A:\nk : 1 + 0 = 1 + 0\nh : True\n⊢ ¬¬True\n## Tactic State B:\nk : 1 + 0 = 1 + 0\nh : ¬¬True\n⊢ ¬¬True\n## Action:\n  -- flag below vvv do not flag above ^^^"
"## Tactic State A:\nk : 1 + 0 = 1 + 0\nh : ¬¬True\n⊢ ¬¬True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rw [← Classical.not_not (a := True)] at h"
"## Tactic State A:\nh : 0 = 0\nk : 1 = 1\n⊢ True\n## Tactic State B:\nh k : True\n⊢ True\n## Action:\n  simp at h k"
"## Tactic State A:\nh k : True\n⊢ True\n## Tactic State B:\nh k : True\n⊢ ¬¬True\n## Action:\n  rw [← Classical.not_not (a := True)]"
"## Tactic State A:\nh k : True\n⊢ ¬¬True\n## Tactic State B:\nh : True\nk : ¬¬True\n⊢ ¬¬True\n## Action:\n  -- flag the two below vvv do not above ^^^"
"## Tactic State A:\nh : True\nk : ¬¬True\n⊢ ¬¬True\n## Tactic State B:\nh k : ¬¬True\n⊢ ¬¬True\n## Action:\n  rw [← Classical.not_not (a := True)] at k"
"## Tactic State A:\nh k : ¬¬True\n⊢ ¬¬True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rw [← Classical.not_not (a := True)] at h"
"## Tactic State A:\nh : 0 = 0\n⊢ True\n## Tactic State B:\nh : True\n⊢ True\n## Action:\n  simp at h"
"## Tactic State A:\nh : True\n⊢ True\n## Tactic State B:\nh : True\n⊢ ¬¬True\n## Action:\n  rw [← Classical.not_not (a := True)]"
"## Tactic State A:\nh : True\n⊢ ¬¬True\n## Tactic State B:\nh : ¬¬True\n⊢ ¬¬True\n## Action:\n  -- flag below vvv do not flag above ^^^"
"## Tactic State A:\nh : ¬¬True\n⊢ ¬¬True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rw [← Classical.not_not (a := True)] at h"
"## Tactic State A:\nh : False\n⊢ 0 = 1\n## Tactic State B:\nh : False\n⊢ False\n## Action:\n  simp"
"## Tactic State A:\nh : False\n⊢ False\n## Tactic State B:\nh : ¬¬False\n⊢ False\n## Action:\n  rw [← Classical.not_not (a := False)] at h"
"## Tactic State A:\nh : ¬¬False\n⊢ False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  -- flag below vvv do not flag above ^^^"
"## Tactic State A:\nh : False\n⊢ 0 = 1 ∧ 0 = 1\n## Tactic State B:\ncase left\nh : False\n⊢ 0 = 1\n---\ncase right\nh : False\n⊢ 0 = 1\n## Action:\n  constructor"
"## Tactic State A:\ncase left\nh : False\n⊢ 0 = 1\n---\ncase right\nh : False\n⊢ 0 = 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · simpa"
"## Tactic State A:\n\n## Tactic State B:\ncase right\nh : False\n⊢ False\n## Action:\n  . simp"
"## Tactic State A:\ncase right\nh : False\n⊢ False\n## Tactic State B:\ncase right\nh : ¬¬False\n⊢ False\n## Action:\n    rw [← Classical.not_not (a := False)] at h"
"## Tactic State A:\ncase right\nh : ¬¬False\n⊢ False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    rwa [← Classical.not_not (a := False)]"
"## Tactic State A:\np✝ q✝ r✝ : Prop\nh : p✝ ∧ q✝ ∨ p✝ ∧ r✝\np q r : Prop\n⊢ True\n## Tactic State B:\np✝ q✝ r✝ : Prop\nh : p✝ ∧ q✝ ∨ p✝ ∧ r✝\np q r : Prop\nthis : p ∨ ¬p\n⊢ True\n## Action:\n  haveI : p ∨ ¬p := by (fail_if_success itauto); sorry"
"## Tactic State A:\np✝ q✝ r✝ : Prop\nh : p✝ ∧ q✝ ∨ p✝ ∧ r✝\np q r : Prop\nthis : p ∨ ¬p\n⊢ True\n## Tactic State B:\np✝ q✝ r✝ : Prop\nh : p✝ ∧ q✝ ∨ p✝ ∧ r✝\np q r : Prop\n⊢ True\n## Action:\n  clear this; haveI : ¬(p ↔ q) → ¬p → q := by (fail_if_success itauto); sorry"
"## Tactic State A:\np✝ q✝ r✝ : Prop\nh : p✝ ∧ q✝ ∨ p✝ ∧ r✝\np q r : Prop\n⊢ True\n## Tactic State B:\np✝ q✝ r✝ : Prop\nh : p✝ ∧ q✝ ∨ p✝ ∧ r✝\np q r : Prop\nthis : ¬(p ↔ q) → ¬p → q\n⊢ True\n## Action:\n  clear this; haveI : ¬(p ↔ q) → (r ↔ q) → (p ↔ ¬r) := by (fail_if_success itauto); sorry"
"## Tactic State A:\np✝ q✝ r✝ : Prop\nh : p✝ ∧ q✝ ∨ p✝ ∧ r✝\np q r : Prop\nthis : ¬(p ↔ q) → ¬p → q\n⊢ True\n## Tactic State B:\np✝ q✝ r✝ : Prop\nh : p✝ ∧ q✝ ∨ p✝ ∧ r✝\np q r : Prop\n⊢ True\n## Action:\n  trivial"
"## Tactic State A:\n⊢ (fun₀ | 1 => 3) 1 = 3\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  simp"
"## Tactic State A:\n⊢ (fun₀ | 1 => 3 | 2 => 3 | 3 => 3 | 3 => 4) 1 = 3\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  simp"
"## Tactic State A:\n⊢ (fun₀ | 1 => 3 | 2 => 3 | 3 => 3 | 3 => 4) 2 = 3\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  simp"
"## Tactic State A:\n⊢ (fun₀ | 1 => 3 | 2 => 3 | 3 => 3 | 3 => 4) 3 = 4\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  simp"
"## Tactic State A:\n⊢ True\n## Tactic State B:\nx : id ℕ := id 1\n⊢ True\n## Action:\n  let x : id Nat := by dsimp; exact 1"
"## Tactic State A:\nx : id ℕ := id 1\n⊢ True\n## Tactic State B:\nx : id ℕ := id 1\n⊢ True\n## Action:\n  guard_hyp x :ₛ id Nat := id (1 : Nat)"
"## Tactic State A:\nx : id ℕ := id 1\n⊢ True\n## Tactic State B:\nx : id ℕ := id 1\nx' : id ℕ := 1\n⊢ True\n## Action:\n  let x' : id Nat := clean% by dsimp; exact 1"
"## Tactic State A:\nx : id ℕ := id 1\nx' : id ℕ := 1\n⊢ True\n## Tactic State B:\nx : id ℕ := id 1\nx' : id ℕ := 1\n⊢ True\n## Action:\n  guard_hyp x' :ₛ id Nat := (1 : Nat)"
"## Tactic State A:\nx : id ℕ := id 1\nx' : id ℕ := 1\n⊢ True\n## Tactic State B:\nx : id ℕ := id 1\nx' : id ℕ := 1\ny : ℕ :=\n  let_fun this := 1;\n  this\n⊢ True\n## Action:\n"
"## Tactic State A:\nx : id ℕ := id 1\nx' : id ℕ := 1\ny : ℕ :=\n  let_fun this := 1;\n  this\n⊢ True\n## Tactic State B:\nx : id ℕ := id 1\nx' : id ℕ := 1\ny : ℕ :=\n  let_fun this := 1;\n  this\n⊢ True\n## Action:\n  let y := show Nat from 1"
"## Tactic State A:\nx : id ℕ := id 1\nx' : id ℕ := 1\ny : ℕ :=\n  let_fun this := 1;\n  this\n⊢ True\n## Tactic State B:\nx : id ℕ := id 1\nx' : id ℕ := 1\ny : ℕ :=\n  let_fun this := 1;\n  this\ny' : ℕ := 1\n⊢ True\n## Action:\n  guard_hyp y :ₛ Nat := let_fun this := 1; this"
"## Tactic State A:\nx : id ℕ := id 1\nx' : id ℕ := 1\ny : ℕ :=\n  let_fun this := 1;\n  this\ny' : ℕ := 1\n⊢ True\n## Tactic State B:\nx : id ℕ := id 1\nx' : id ℕ := 1\ny : ℕ :=\n  let_fun this := 1;\n  this\ny' : ℕ := 1\n⊢ True\n## Action:\n  let y' := clean% show Nat from 1"
"## Tactic State A:\nx : id ℕ := id 1\nx' : id ℕ := 1\ny : ℕ :=\n  let_fun this := 1;\n  this\ny' : ℕ := 1\n⊢ True\n## Tactic State B:\nx : id ℕ := id 1\nx' : id ℕ := 1\ny : ℕ :=\n  let_fun this := 1;\n  this\ny' : ℕ := 1\nz : ℕ :=\n  let_fun x := 1;\n  x + x\n⊢ True\n## Action:\n  guard_hyp y' :ₛ Nat := 1"
"## Tactic State A:\nx : id ℕ := id 1\nx' : id ℕ := 1\ny : ℕ :=\n  let_fun this := 1;\n  this\ny' : ℕ := 1\nz : ℕ :=\n  let_fun x := 1;\n  x + x\n⊢ True\n## Tactic State B:\nx : id ℕ := id 1\nx' : id ℕ := 1\ny : ℕ :=\n  let_fun this := 1;\n  this\ny' : ℕ := 1\nz : ℕ :=\n  let_fun x := 1;\n  x + x\n⊢ True\n## Action:\n"
"## Tactic State A:\nx : id ℕ := id 1\nx' : id ℕ := 1\ny : ℕ :=\n  let_fun this := 1;\n  this\ny' : ℕ := 1\nz : ℕ :=\n  let_fun x := 1;\n  x + x\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  -- Not a tautological let_fun:"
"## Tactic State A:\nA : Type u_1\nB : Type u_2\ninst✝¹ : CommRing A\ninst✝ : CommRing B\nf : A →+* B\n⊢ True\n## Tactic State B:\nA : Type u_1\nB : Type u_2\ninst✝¹ : CommRing A\ninst✝ : CommRing B\nf : A →+* B\n⊢ True\n## Action:\n  fail_if_success -- Check that this instance is not available by default"
"## Tactic State A:\nA : Type u_1\nB : Type u_2\ninst✝¹ : CommRing A\ninst✝ : CommRing B\nf : A →+* B\n⊢ True\n## Tactic State B:\nA : Type u_1\nB : Type u_2\ninst✝¹ : CommRing A\ninst✝ : CommRing B\nf : A →+* B\nalgInst✝ : Algebra A B := f.toAlgebra\n⊢ True\n## Action:\n    have h : Algebra A B := inferInstance"
"## Tactic State A:\nA : Type u_1\nB : Type u_2\ninst✝¹ : CommRing A\ninst✝ : CommRing B\nf : A →+* B\nalgInst✝ : Algebra A B := f.toAlgebra\n⊢ True\n## Tactic State B:\nA : Type u_1\nB : Type u_2\ninst✝¹ : CommRing A\ninst✝ : CommRing B\nf : A →+* B\nalgInst✝ : Algebra A B := f.toAlgebra\n⊢ True\n## Action:\n  algebraize [f]"
"## Tactic State A:\nA : Type u_1\nB : Type u_2\ninst✝¹ : CommRing A\ninst✝ : CommRing B\nf : A →+* B\n⊢ True\n## Tactic State B:\nA : Type u_1\nB : Type u_2\ninst✝¹ : CommRing A\ninst✝ : CommRing B\nf : A →+* B\nf' : A →+* B := f\n⊢ True\n## Action:\n  let f' : A →+* B := f"
"## Tactic State A:\nA : Type u_1\nB : Type u_2\ninst✝¹ : CommRing A\ninst✝ : CommRing B\nf : A →+* B\nf' : A →+* B := f\n⊢ True\n## Tactic State B:\nA : Type u_1\nB : Type u_2\ninst✝¹ : CommRing A\ninst✝ : CommRing B\nf : A →+* B\nf' : A →+* B := f\n⊢ True\n## Action:\n  fail_if_success -- Check that this instance is not available by default"
"## Tactic State A:\nA : Type u_1\nB : Type u_2\ninst✝¹ : CommRing A\ninst✝ : CommRing B\nf : A →+* B\nf' : A →+* B := f\n⊢ True\n## Tactic State B:\nA : Type u_1\nB : Type u_2\ninst✝¹ : CommRing A\ninst✝ : CommRing B\nf : A →+* B\nf' : A →+* B := f\nalgInst✝ : Algebra A B := f'.toAlgebra\n⊢ True\n## Action:\n    have h : Algebra A B := inferInstance"
"## Tactic State A:\nA : Type u_1\nB : Type u_2\ninst✝¹ : CommRing A\ninst✝ : CommRing B\nf : A →+* B\nf' : A →+* B := f\nalgInst✝ : Algebra A B := f'.toAlgebra\n⊢ True\n## Tactic State B:\nA : Type u_1\nB : Type u_2\ninst✝¹ : CommRing A\ninst✝ : CommRing B\nf : A →+* B\nf' : A →+* B := f\nalgInst✝ : Algebra A B := f'.toAlgebra\n⊢ True\n## Action:\n  algebraize [f']"
"## Tactic State A:\nA : Type u_1\nB : Type u_2\nC : Type u_3\ninst✝² : CommRing A\ninst✝¹ : CommRing B\ninst✝ : CommRing C\nf : A →+* B\ng : B →+* C\n⊢ True\n## Tactic State B:\nA : Type u_1\nB : Type u_2\nC : Type u_3\ninst✝² : CommRing A\ninst✝¹ : CommRing B\ninst✝ : CommRing C\nf : A →+* B\ng : B →+* C\n⊢ True\n## Action:\n  fail_if_success -- Check that this instance is not available by default"
"## Tactic State A:\nA : Type u_1\nB : Type u_2\nC : Type u_3\ninst✝² : CommRing A\ninst✝¹ : CommRing B\ninst✝ : CommRing C\nf : A →+* B\ng : B →+* C\n⊢ True\n## Tactic State B:\nA : Type u_1\nB : Type u_2\nC : Type u_3\ninst✝² : CommRing A\ninst✝¹ : CommRing B\ninst✝ : CommRing C\nf : A →+* B\ng : B →+* C\nalgInst✝ : Algebra A C := (g.comp f).toAlgebra\n⊢ True\n## Action:\n    have h : Algebra A C := inferInstance"
"## Tactic State A:\nA : Type u_1\nB : Type u_2\nC : Type u_3\ninst✝² : CommRing A\ninst✝¹ : CommRing B\ninst✝ : CommRing C\nf : A →+* B\ng : B →+* C\nalgInst✝ : Algebra A C := (g.comp f).toAlgebra\n⊢ True\n## Tactic State B:\nA : Type u_1\nB : Type u_2\nC : Type u_3\ninst✝² : CommRing A\ninst✝¹ : CommRing B\ninst✝ : CommRing C\nf : A →+* B\ng : B →+* C\nalgInst✝ : Algebra A C := (g.comp f).toAlgebra\n⊢ True\n## Action:\n  algebraize [g.comp f]"
"## Tactic State A:\nA : Type u_1\nB : Type u_2\nC : Type u_3\ninst✝² : CommRing A\ninst✝¹ : CommRing B\ninst✝ : CommRing C\nf : A →+* B\ng : B →+* C\n⊢ True\n## Tactic State B:\nA : Type u_1\nB : Type u_2\nC : Type u_3\ninst✝² : CommRing A\ninst✝¹ : CommRing B\ninst✝ : CommRing C\nf : A →+* B\ng : B →+* C\n⊢ True\n## Action:\n  fail_if_success -- Check that this instance is not available by default"
"## Tactic State A:\nA : Type u_1\nB : Type u_2\nC : Type u_3\ninst✝² : CommRing A\ninst✝¹ : CommRing B\ninst✝ : CommRing C\nf : A →+* B\ng : B →+* C\n⊢ True\n## Tactic State B:\nA : Type u_1\nB : Type u_2\nC : Type u_3\ninst✝² : CommRing A\ninst✝¹ : CommRing B\ninst✝ : CommRing C\nf : A →+* B\ng : B →+* C\nalgInst✝² : Algebra A B := f.toAlgebra\nalgInst✝¹ : Algebra B C := g.toAlgebra\nalgInst✝ : Algebra A C := (g.comp f).toAlgebra\nscalarTowerInst✝ : IsScalarTower A B C := IsScalarTower.of_algebraMap_eq' (Eq.refl (algebraMap A C))\n⊢ True\n## Action:\n    have h : IsScalarTower A B C := inferInstance"
"## Tactic State A:\nA : Type u_1\nB : Type u_2\nC : Type u_3\ninst✝² : CommRing A\ninst✝¹ : CommRing B\ninst✝ : CommRing C\nf : A →+* B\ng : B →+* C\nalgInst✝² : Algebra A B := f.toAlgebra\nalgInst✝¹ : Algebra B C := g.toAlgebra\nalgInst✝ : Algebra A C := (g.comp f).toAlgebra\nscalarTowerInst✝ : IsScalarTower A B C := IsScalarTower.of_algebraMap_eq' (Eq.refl (algebraMap A C))\n⊢ True\n## Tactic State B:\nA : Type u_1\nB : Type u_2\nC : Type u_3\ninst✝² : CommRing A\ninst✝¹ : CommRing B\ninst✝ : CommRing C\nf : A →+* B\ng : B →+* C\nalgInst✝² : Algebra A B := f.toAlgebra\nalgInst✝¹ : Algebra B C := g.toAlgebra\nalgInst✝ : Algebra A C := (g.comp f).toAlgebra\nscalarTowerInst✝ : IsScalarTower A B C := IsScalarTower.of_algebraMap_eq' (Eq.refl (algebraMap A C))\n⊢ True\n## Action:\n  algebraize [f, g, g.comp f]"
"## Tactic State A:\nA : Type u_1\nB : Type u_2\ninst✝¹ : CommRing A\ninst✝ : CommRing B\nf : A →+* B\nhf : sorry\n⊢ True\n## Tactic State B:\nA : Type u_1\nB : Type u_2\ninst✝¹ : CommRing A\ninst✝ : CommRing B\nf : A →+* B\nhf : sorry\nalgInst✝ : Algebra A B := f.toAlgebra\n⊢ True\n## Action:\n  algebraize [f]"
"## Tactic State A:\nA : Type u_1\nB : Type u_2\ninst✝¹ : CommRing A\ninst✝ : CommRing B\nf : A →+* B\nhf : sorry\nalgInst✝ : Algebra A B := f.toAlgebra\n⊢ True\n## Tactic State B:\nA : Type u_1\nB : Type u_2\ninst✝¹ : CommRing A\ninst✝ : CommRing B\nf : A →+* B\nhf : sorry\nalgInst✝ : Algebra A B := f.toAlgebra\n⊢ True\n## Action:\n  guard_hyp algebraizeInst : Algebra.testProperty1 A B"
"## Tactic State A:\nA : Type u_1\nB : Type u_2\ninst✝¹ : CommRing A\ninst✝ : CommRing B\nf : A →+* B\nhf : sorry\n⊢ True\n## Tactic State B:\nA : Type u_1\nB : Type u_2\ninst✝¹ : CommRing A\ninst✝ : CommRing B\nf : A →+* B\nhf : sorry\nalgInst✝ : Algebra A B := f.toAlgebra\n⊢ True\n## Action:\n  algebraize [f]"
"## Tactic State A:\nA : Type u_1\nB : Type u_2\ninst✝¹ : CommRing A\ninst✝ : CommRing B\nf : A →+* B\nhf : sorry\nalgInst✝ : Algebra A B := f.toAlgebra\n⊢ True\n## Tactic State B:\nA : Type u_1\nB : Type u_2\ninst✝¹ : CommRing A\ninst✝ : CommRing B\nf : A →+* B\nhf : sorry\nalgInst✝ : Algebra A B := f.toAlgebra\n⊢ True\n## Action:\n  guard_hyp algebraizeInst : Module.testProperty2 A B"
"## Tactic State A:\nA : Type u_1\nB : Type u_2\ninst✝¹ : CommRing A\ninst✝ : CommRing B\nf : A →+* B\nhf : sorry\n⊢ True\n## Tactic State B:\nA : Type u_1\nB : Type u_2\ninst✝¹ : CommRing A\ninst✝ : CommRing B\nf : A →+* B\nhf : sorry\nalgInst✝ : Algebra A B := f.toAlgebra\n⊢ True\n## Action:\n  algebraize [f]"
"## Tactic State A:\nA : Type u_1\nB : Type u_2\ninst✝¹ : CommRing A\ninst✝ : CommRing B\nf : A →+* B\nhf : sorry\nalgInst✝ : Algebra A B := f.toAlgebra\n⊢ True\n## Tactic State B:\nA : Type u_1\nB : Type u_2\ninst✝¹ : CommRing A\ninst✝ : CommRing B\nf : A →+* B\nhf : sorry\nalgInst✝ : Algebra A B := f.toAlgebra\n⊢ True\n## Action:\n  guard_hyp algebraizeInst : Algebra.testProperty3 A B"
"## Tactic State A:\nn : ℕ\nA : Type u_1\nB : Type u_2\ninst✝¹ : CommRing A\ninst✝ : CommRing B\nf : A →+* B\nhf : sorry\n⊢ True\n## Tactic State B:\nn : ℕ\nA : Type u_1\nB : Type u_2\ninst✝¹ : CommRing A\ninst✝ : CommRing B\nf : A →+* B\nhf : sorry\nalgInst✝ : Algebra A B := f.toAlgebra\n⊢ True\n## Action:\n  algebraize [f]"
"## Tactic State A:\nn : ℕ\nA : Type u_1\nB : Type u_2\ninst✝¹ : CommRing A\ninst✝ : CommRing B\nf : A →+* B\nhf : sorry\nalgInst✝ : Algebra A B := f.toAlgebra\n⊢ True\n## Tactic State B:\nn : ℕ\nA : Type u_1\nB : Type u_2\ninst✝¹ : CommRing A\ninst✝ : CommRing B\nf : A →+* B\nhf : sorry\nalgInst✝ : Algebra A B := f.toAlgebra\n⊢ True\n## Action:\n  guard_hyp algebraizeInst : Algebra.testProperty4 n A B"
"## Tactic State A:\nA : Type u_1\nB : Type u_2\nC : Type u_3\ninst✝² : CommRing A\ninst✝¹ : CommRing B\ninst✝ : CommRing C\nf : A →+* B\ng : B →+* C\nhfg : sorry\n⊢ True\n## Tactic State B:\nA : Type u_1\nB : Type u_2\nC : Type u_3\ninst✝² : CommRing A\ninst✝¹ : CommRing B\ninst✝ : CommRing C\nf : A →+* B\ng : B →+* C\nhfg : sorry\n⊢ True\n## Action:\n  fail_if_success -- Check that this instance is not available by default"
"## Tactic State A:\nA : Type u_1\nB : Type u_2\nC : Type u_3\ninst✝² : CommRing A\ninst✝¹ : CommRing B\ninst✝ : CommRing C\nf : A →+* B\ng : B →+* C\nhfg : sorry\n⊢ True\n## Tactic State B:\nA : Type u_1\nB : Type u_2\nC : Type u_3\ninst✝² : CommRing A\ninst✝¹ : CommRing B\ninst✝ : CommRing C\nf : A →+* B\ng : B →+* C\nhfg : sorry\n⊢ True\n## Action:\n    have h : Algebra.Flat A C := inferInstance"
"## Tactic State A:\nA : Type u_1\nB : Type u_2\nC : Type u_3\ninst✝² : CommRing A\ninst✝¹ : CommRing B\ninst✝ : CommRing C\nf : A →+* B\ng : B →+* C\nhfg : sorry\n⊢ True\n## Tactic State B:\nA : Type u_1\nB : Type u_2\nC : Type u_3\ninst✝² : CommRing A\ninst✝¹ : CommRing B\ninst✝ : CommRing C\nf : A →+* B\ng : B →+* C\nhfg : sorry\nalgInst✝² : Algebra A B := f.toAlgebra\nalgInst✝¹ : Algebra B C := g.toAlgebra\nalgInst✝ : Algebra A C := (g.comp f).toAlgebra\nscalarTowerInst✝ : IsScalarTower A B C := IsScalarTower.of_algebraMap_eq' (Eq.refl (algebraMap A C))\n⊢ True\n## Action:\n  fail_if_success"
"## Tactic State A:\nA : Type u_1\nB : Type u_2\nC : Type u_3\ninst✝² : CommRing A\ninst✝¹ : CommRing B\ninst✝ : CommRing C\nf : A →+* B\ng : B →+* C\nhfg : sorry\nalgInst✝² : Algebra A B := f.toAlgebra\nalgInst✝¹ : Algebra B C := g.toAlgebra\nalgInst✝ : Algebra A C := (g.comp f).toAlgebra\nscalarTowerInst✝ : IsScalarTower A B C := IsScalarTower.of_algebraMap_eq' (Eq.refl (algebraMap A C))\n⊢ True\n## Tactic State B:\nA : Type u_1\nB : Type u_2\nC : Type u_3\ninst✝² : CommRing A\ninst✝¹ : CommRing B\ninst✝ : CommRing C\nf : A →+* B\ng : B →+* C\nhfg : sorry\nalgInst✝² : Algebra A B := f.toAlgebra\nalgInst✝¹ : Algebra B C := g.toAlgebra\nalgInst✝ : Algebra A C := (g.comp f).toAlgebra\nscalarTowerInst✝ : IsScalarTower A B C := IsScalarTower.of_algebraMap_eq' (Eq.refl (algebraMap A C))\n⊢ True\n## Action:\n    have h : IsScalarTower A B C := inferInstance"
"## Tactic State A:\ny : ℝ\nhy : y ≠ 0\n⊢ ContinuousAt (fun x => x * Real.log x ^ 2 - Real.exp x / x) y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  fun_prop (disch:=aesop)"
"## Tactic State A:\nF✝ : Type u_1\nfoo : ℕ → F✝\n⊢ DifferentiableOn ℝ foo {0}ᶜ\n## Tactic State B:\nF✝ : Type u_1\nfoo : ℕ → F✝\n⊢ DifferentiableOn ℝ foo {0}ᶜ\n## Action:\n  unfold foo; fun_prop (disch:=aesop)"
"## Tactic State A:\nF✝ : Type u_1\nfoo : ℕ → F✝\nn : WithTop ℕ∞\n⊢ ContDiffOn ℝ n foo {0}ᶜ\n## Tactic State B:\nF✝ : Type u_1\nfoo : ℕ → F✝\nn : WithTop ℕ∞\n⊢ ContDiffOn ℝ n foo {0}ᶜ\n## Action:\n  unfold foo; fun_prop (disch:=aesop)"
"## Tactic State A:\n⊢ Measurable fun x => x * Real.log x ^ 2 - Real.exp x / x\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  fun_prop"
"## Tactic State A:\n⊢ MeasureTheory.Measure ℝ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  fun_prop (config:={maxTransitionDepth:=2})"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n"
"## Tactic State A:\nF✝ : Type u_1\nT : ℕ → F✝\n⊢ DifferentiableOn ℝ T (Set.Icc 0 1)\n## Tactic State B:\nF✝ : Type u_1\nT : ℕ → F✝\n⊢ DifferentiableOn ℝ T (Set.Icc 0 1)\n## Action:\n  unfold T S"
"## Tactic State A:\nF✝ : Type u_1\nT : ℕ → F✝\nn : WithTop ℕ∞\n⊢ ContDiffOn ℝ n T (Set.Icc 0 1)\n## Tactic State B:\nF✝ : Type u_1\nT : ℕ → F✝\nn : WithTop ℕ∞\n⊢ ContDiffOn ℝ n T (Set.Icc 0 1)\n## Action:\n  unfold T S"
"## Tactic State A:\nT : ?m.110 → ?m.111\n⊢ MeasureTheory.Measure ?m.110\n## Tactic State B:\nT : ?m.357 → ?m.111\n⊢ MeasureTheory.Measure ?m.357\n## Action:\n  unfold T S"
"## Tactic State A:\nT : ?m.357 → ?m.111\n⊢ MeasureTheory.Measure ?m.357\n## Tactic State B:\nα✝ : Type u_1\nβ✝ : Type u_2\nT : α✝ → β✝\n⊢ AEMeasurable T sorry\n## Action:\n  fun_prop"
"## Tactic State A:\nf : ℝ → ℝ\nhf : ContDiff ℝ 12 f\n⊢ Differentiable ℝ (iteratedDeriv 5 fun x => f (2 * f (x + x)) + x)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  fun_prop (disch:=(exact t1))"
"## Tactic State A:\nP : ℕ → ℕ → Prop\nh : ∀ (n : ℕ), ∃ m, P n m\n⊢ ∀ (l : ℕ), ∃ m, P l m\n## Tactic State B:\nP : ℕ → ℕ → Prop\nh : ∀ (n : ℕ), ∃ m, P n m\n⊢ ∀ (l : ℕ), ∃ m, P l m\n## Action:\n  trace_state"
"## Tactic State A:\nP : ℕ → ℕ → Prop\nh : ∀ (n : ℕ), ∃ m, P n m\n⊢ ∀ (l : ℕ), ∃ m, P l m\n## Tactic State B:\nP : ℕ → ℕ → Prop\nh : ∀ (q : ℕ), ∃ m, P q m\n⊢ ∀ (l : ℕ), ∃ m, P l m\n## Action:\n  rename_bvar n → q at h"
"## Tactic State A:\nP : ℕ → ℕ → Prop\nh : ∀ (q : ℕ), ∃ m, P q m\n⊢ ∀ (l : ℕ), ∃ m, P l m\n## Tactic State B:\nP : ℕ → ℕ → Prop\nh : ∀ (q : ℕ), ∃ m, P q m\n⊢ ∀ (l : ℕ), ∃ m, P l m\n## Action:\n  trace_state"
"## Tactic State A:\nP : ℕ → ℕ → Prop\nh : ∀ (q : ℕ), ∃ m, P q m\n⊢ ∀ (l : ℕ), ∃ m, P l m\n## Tactic State B:\nP : ℕ → ℕ → Prop\nh : ∀ (q : ℕ), ∃ m, P q m\n⊢ ∀ (l : ℕ), ∃ n, P l n\n## Action:\n  rename_bvar m → n"
"## Tactic State A:\nP : ℕ → ℕ → Prop\nh : ∀ (q : ℕ), ∃ m, P q m\n⊢ ∀ (l : ℕ), ∃ n, P l n\n## Tactic State B:\nP : ℕ → ℕ → Prop\nh : ∀ (q : ℕ), ∃ m, P q m\n⊢ ∀ (l : ℕ), ∃ n, P l n\n## Action:\n  trace_state"
"## Tactic State A:\nP : ℕ → ℕ → Prop\nh : ∀ (q : ℕ), ∃ m, P q m\n⊢ ∀ (l : ℕ), ∃ n, P l n\n## Tactic State B:\nP : ℕ → ℕ → Prop\nh : ∀ (q : ℕ), ∃ m, P q m\n⊢ ∀ (m : ℕ), ∃ n, P m n\n## Action:\n  rename_bvar l → m"
"## Tactic State A:\nP : ℕ → ℕ → Prop\nh : ∀ (q : ℕ), ∃ m, P q m\n⊢ ∀ (m : ℕ), ∃ n, P m n\n## Tactic State B:\nP : ℕ → ℕ → Prop\nh : ∀ (q : ℕ), ∃ m, P q m\n⊢ ∀ (m : ℕ), ∃ n, P m n\n## Action:\n  trace_state"
"## Tactic State A:\nP : ℕ → ℕ → Prop\nh : ∀ (q : ℕ), ∃ m, P q m\n⊢ ∀ (m : ℕ), ∃ n, P m n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h"
"## Tactic State A:\na b c : ℤ\nh1 : a ∣ b\nh2 : b ∣ c\n⊢ a ∣ c\n## Tactic State B:\ncase intro\na b c : ℤ\nh2 : b ∣ c\nk : ℤ\nhk : b = a * k\n⊢ a ∣ c\n## Action:\n  rcases h1 with ⟨k, hk⟩"
"## Tactic State A:\ncase intro\na b c : ℤ\nh2 : b ∣ c\nk : ℤ\nhk : b = a * k\n⊢ a ∣ c\n## Tactic State B:\ncase intro\na b c : ℤ\nh2 : b ∣ c\nk : ℤ\nhk : b = a * k\n⊢ ∃ k, c = a * k\n## Action:\n  show ∃ k, c = a * k"
"## Tactic State A:\ncase intro\na b c : ℤ\nh2 : b ∣ c\nk : ℤ\nhk : b = a * k\n⊢ ∃ k, c = a * k\n## Tactic State B:\ncase intro\na b c : ℤ\nh2 : b ∣ c\nk : ℤ\nhk : b = a * k\n⊢ ∃ k, c = a * k\n## Action:\n  trace_state"
"## Tactic State A:\ncase intro\na b c : ℤ\nh2 : b ∣ c\nk : ℤ\nhk : b = a * k\n⊢ ∃ k, c = a * k\n## Tactic State B:\ncase intro\na b c : ℤ\nh2 : b ∣ c\nk : ℤ\nhk : b = a * k\n⊢ ∃ m, c = a * m\n## Action:\n  rename_bvar k → m"
"## Tactic State A:\ncase intro\na b c : ℤ\nh2 : b ∣ c\nk : ℤ\nhk : b = a * k\n⊢ ∃ m, c = a * m\n## Tactic State B:\ncase intro\na b c : ℤ\nh2 : b ∣ c\nk : ℤ\nhk : b = a * k\n⊢ ∃ m, c = a * m\n## Action:\n  trace_state"
"## Tactic State A:\ncase intro\na b c : ℤ\nh2 : b ∣ c\nk : ℤ\nhk : b = a * k\n⊢ ∃ m, c = a * m\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact test_sorry"
"## Tactic State A:\nP Q : Prop\n⊢ [P, Q].TFAE\n## Tactic State B:\nP Q : Prop\ntfae_1_to_2 : P → Q\n⊢ [P, Q].TFAE\n## Action:\n  tfae_have 1 → 2 := pq"
"## Tactic State A:\nP Q : Prop\ntfae_1_to_2 : P → Q\n⊢ [P, Q].TFAE\n## Tactic State B:\nP Q : Prop\ntfae_1_to_2 : P → Q\ntfae_2_to_1 : Q → P\n⊢ [P, Q].TFAE\n## Action:\n  tfae_have 2 → 1 := qp"
"## Tactic State A:\nP Q : Prop\ntfae_1_to_2 : P → Q\ntfae_2_to_1 : Q → P\n⊢ [P, Q].TFAE\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  tfae_finish"
"## Tactic State A:\nP Q : Prop\n⊢ [P, Q].TFAE\n## Tactic State B:\nP Q : Prop\ntfae_1_iff_2 : P ↔ Q\n⊢ [P, Q].TFAE\n## Action:\n  tfae_have 1 ↔ 2 := Iff.intro pq qp"
"## Tactic State A:\nP Q : Prop\ntfae_1_iff_2 : P ↔ Q\n⊢ [P, Q].TFAE\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  tfae_finish"
"## Tactic State A:\nP Q : Prop\n⊢ [P, Q].TFAE\n## Tactic State B:\nP Q : Prop\ntfae_2_from_1 : P → Q\n⊢ [P, Q].TFAE\n## Action:\n  tfae_have 2 ← 1 := pq"
"## Tactic State A:\nP Q : Prop\ntfae_2_from_1 : P → Q\n⊢ [P, Q].TFAE\n## Tactic State B:\nP Q : Prop\ntfae_2_from_1 : P → Q\n⊢ [P, Q].TFAE\n## Action:\n  guard_hyp tfae_2_from_1 : P → Q"
"## Tactic State A:\nP Q : Prop\ntfae_2_from_1 : P → Q\n⊢ [P, Q].TFAE\n## Tactic State B:\nP Q : Prop\ntfae_2_from_1 : P → Q\ntfae_1_from_2 : Q → P\n⊢ [P, Q].TFAE\n## Action:\n  tfae_have 1 ← 2 := qp"
"## Tactic State A:\nP Q : Prop\ntfae_2_from_1 : P → Q\ntfae_1_from_2 : Q → P\n⊢ [P, Q].TFAE\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  tfae_finish"
"## Tactic State A:\nP Q R : Prop\n⊢ [P, Q, R].TFAE\n## Tactic State B:\nP Q R : Prop\ntfae_1_to_2 : P → Q\n⊢ [P, Q, R].TFAE\n## Action:\n  tfae_have 1 → 2 := pq"
"## Tactic State A:\nP Q R : Prop\ntfae_1_to_2 : P → Q\n⊢ [P, Q, R].TFAE\n## Tactic State B:\nP Q R : Prop\ntfae_1_to_2 : P → Q\ntfae_2_to_3 : Q → R\n⊢ [P, Q, R].TFAE\n## Action:\n  tfae_have 2 → 3 := qr"
"## Tactic State A:\nP Q R : Prop\ntfae_1_to_2 : P → Q\ntfae_2_to_3 : Q → R\n⊢ [P, Q, R].TFAE\n## Tactic State B:\nP Q R : Prop\ntfae_1_to_2 : P → Q\ntfae_2_to_3 : Q → R\ntfae_3_to_1 : R → P\n⊢ [P, Q, R].TFAE\n## Action:\n  tfae_have 3 → 1 := rp"
"## Tactic State A:\nP Q R : Prop\ntfae_1_to_2 : P → Q\ntfae_2_to_3 : Q → R\ntfae_3_to_1 : R → P\n⊢ [P, Q, R].TFAE\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  tfae_finish"
"## Tactic State A:\nP Q R : Prop\n⊢ [P, Q, R].TFAE\n## Tactic State B:\nP Q R : Prop\n⊢ [P, Q, R].TFAE\n## Action:\n  tfae_have 1 ↔ 2 := Iff.intro pq (rp ∘ qr)"
"## Tactic State A:\nP Q R : Prop\n⊢ [P, Q, R].TFAE\n## Tactic State B:\nP Q R : Prop\ntfae_1_to_2 : P → Q\n⊢ [P, Q, R].TFAE\n## Action:\n  tfae_have 1 → 2 := pq"
"## Tactic State A:\nP Q R : Prop\ntfae_1_to_2 : P → Q\n⊢ [P, Q, R].TFAE\n## Tactic State B:\nP Q R : Prop\ntfae_1_to_2 : P → Q\n⊢ [P, Q, R].TFAE\n## Action:\n  tfae_have 2 → 1 := rp ∘ qr"
"## Tactic State A:\nP₁ P₂ P₃ P₄ P₅ P₆ P₇ : Prop\n⊢ [P₁, P₂, P₃, P₄, P₅, P₆, P₇].TFAE\n## Tactic State B:\nP₁ P₂ P₃ P₄ P₅ P₆ P₇ : Prop\ntest : P₁ ↔ P₂\n⊢ [P₁, P₂, P₃, P₄, P₅, P₆, P₇].TFAE\n## Action:\n  tfae_have test : 1 ↔ 2 := h₁"
"## Tactic State A:\nP₁ P₂ P₃ P₄ P₅ P₆ P₇ : Prop\ntest : P₁ ↔ P₂\n⊢ [P₁, P₂, P₃, P₄, P₅, P₆, P₇].TFAE\n## Tactic State B:\nP₁ P₂ P₃ P₄ P₅ P₆ P₇ : Prop\ntest : P₁ ↔ P₂\n⊢ [P₁, P₂, P₃, P₄, P₅, P₆, P₇].TFAE\n## Action:\n  guard_hyp test : _"
"## Tactic State A:\nP₁ P₂ P₃ P₄ P₅ P₆ P₇ : Prop\ntest : P₁ ↔ P₂\n⊢ [P₁, P₂, P₃, P₄, P₅, P₆, P₇].TFAE\n## Tactic State B:\nP₁ P₂ P₃ P₄ P₅ P₆ P₇ : Prop\ntest : P₁ ↔ P₂\ntfae_1_to_6 : P₁ → P₆\n⊢ [P₁, P₂, P₃, P₄, P₅, P₆, P₇].TFAE\n## Action:\n  tfae_have 1 → 6 := h₂"
"## Tactic State A:\nP₁ P₂ P₃ P₄ P₅ P₆ P₇ : Prop\ntest : P₁ ↔ P₂\ntfae_1_to_6 : P₁ → P₆\n⊢ [P₁, P₂, P₃, P₄, P₅, P₆, P₇].TFAE\n## Tactic State B:\nP₁ P₂ P₃ P₄ P₅ P₆ P₇ : Prop\ntest : P₁ ↔ P₂\ntfae_1_to_6 : P₁ → P₆\ntfae_6_to_7 : P₆ → P₇\n⊢ [P₁, P₂, P₃, P₄, P₅, P₆, P₇].TFAE\n## Action:\n  tfae_have 6 → 7 := h₃"
"## Tactic State A:\nP₁ P₂ P₃ P₄ P₅ P₆ P₇ : Prop\ntest : P₁ ↔ P₂\ntfae_1_to_6 : P₁ → P₆\ntfae_6_to_7 : P₆ → P₇\n⊢ [P₁, P₂, P₃, P₄, P₅, P₆, P₇].TFAE\n## Tactic State B:\nP₁ P₂ P₃ P₄ P₅ P₆ P₇ : Prop\ntest : P₁ ↔ P₂\ntfae_1_to_6 : P₁ → P₆\ntfae_6_to_7 : P₆ → P₇\ntfae_7_to_4 : P₇ → P₄\n⊢ [P₁, P₂, P₃, P₄, P₅, P₆, P₇].TFAE\n## Action:\n  tfae_have 7 → 4 := h₄"
"## Tactic State A:\nP₁ P₂ P₃ P₄ P₅ P₆ P₇ : Prop\ntest : P₁ ↔ P₂\ntfae_1_to_6 : P₁ → P₆\ntfae_6_to_7 : P₆ → P₇\ntfae_7_to_4 : P₇ → P₄\n⊢ [P₁, P₂, P₃, P₄, P₅, P₆, P₇].TFAE\n## Tactic State B:\nP₁ P₂ P₃ P₄ P₅ P₆ P₇ : Prop\ntest : P₁ ↔ P₂\ntfae_1_to_6 : P₁ → P₆\ntfae_6_to_7 : P₆ → P₇\ntfae_7_to_4 : P₇ → P₄\ntfae_4_to_5 : P₄ → P₅\n⊢ [P₁, P₂, P₃, P₄, P₅, P₆, P₇].TFAE\n## Action:\n  tfae_have 4 → 5 := h₅"
"## Tactic State A:\nP₁ P₂ P₃ P₄ P₅ P₆ P₇ : Prop\ntest : P₁ ↔ P₂\ntfae_1_to_6 : P₁ → P₆\ntfae_6_to_7 : P₆ → P₇\ntfae_7_to_4 : P₇ → P₄\ntfae_4_to_5 : P₄ → P₅\n⊢ [P₁, P₂, P₃, P₄, P₅, P₆, P₇].TFAE\n## Tactic State B:\nP₁ P₂ P₃ P₄ P₅ P₆ P₇ : Prop\ntest : P₁ ↔ P₂\ntfae_1_to_6 : P₁ → P₆\ntfae_6_to_7 : P₆ → P₇\ntfae_7_to_4 : P₇ → P₄\ntfae_4_to_5 : P₄ → P₅\ntfae_5_to_3 : P₅ → P₃\n⊢ [P₁, P₂, P₃, P₄, P₅, P₆, P₇].TFAE\n## Action:\n  tfae_have 5 → 3 := h₆"
"## Tactic State A:\nP₁ P₂ P₃ P₄ P₅ P₆ P₇ : Prop\ntest : P₁ ↔ P₂\ntfae_1_to_6 : P₁ → P₆\ntfae_6_to_7 : P₆ → P₇\ntfae_7_to_4 : P₇ → P₄\ntfae_4_to_5 : P₄ → P₅\ntfae_5_to_3 : P₅ → P₃\n⊢ [P₁, P₂, P₃, P₄, P₅, P₆, P₇].TFAE\n## Tactic State B:\nP₁ P₂ P₃ P₄ P₅ P₆ P₇ : Prop\ntest : P₁ ↔ P₂\ntfae_1_to_6 : P₁ → P₆\ntfae_6_to_7 : P₆ → P₇\ntfae_7_to_4 : P₇ → P₄\ntfae_4_to_5 : P₄ → P₅\ntfae_5_to_3 : P₅ → P₃\ntfae_3_to_2 : P₃ → P₂\n⊢ [P₁, P₂, P₃, P₄, P₅, P₆, P₇].TFAE\n## Action:\n  tfae_have 3 → 2 := h₇"
"## Tactic State A:\nP₁ P₂ P₃ P₄ P₅ P₆ P₇ : Prop\ntest : P₁ ↔ P₂\ntfae_1_to_6 : P₁ → P₆\ntfae_6_to_7 : P₆ → P₇\ntfae_7_to_4 : P₇ → P₄\ntfae_4_to_5 : P₄ → P₅\ntfae_5_to_3 : P₅ → P₃\ntfae_3_to_2 : P₃ → P₂\n⊢ [P₁, P₂, P₃, P₄, P₅, P₆, P₇].TFAE\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  tfae_finish"
"## Tactic State A:\nn : ℕ\n⊢ [n = 1, n + 1 = 2].TFAE\n## Tactic State B:\nn m : ℕ\n⊢ [m = 1, m + 1 = 2].TFAE\n## Action:\n  generalize n = m"
"## Tactic State A:\nn m : ℕ\n⊢ [m = 1, m + 1 = 2].TFAE\n## Tactic State B:\nn m : ℕ\ntfae_1_iff_2 : m = 1 ↔ m + 1 = 2\n⊢ [m = 1, m + 1 = 2].TFAE\n## Action:\n  tfae_have 1 ↔ 2 := by simp"
"## Tactic State A:\nn m : ℕ\ntfae_1_iff_2 : m = 1 ↔ m + 1 = 2\n⊢ [m = 1, m + 1 = 2].TFAE\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  tfae_finish"
"## Tactic State A:\nP Q : Prop\nh₁ : P → Q\nh₂ : Q → P\n⊢ [P, Q].TFAE\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  tfae_finish"
"## Tactic State A:\nP Q : Prop\n⊢ [P, Q].TFAE\n## Tactic State B:\nP Q : Prop\nh : P → Q\n⊢ [P, Q].TFAE\n## Action:\n  tfae_have h : 1 → 2 := pq"
"## Tactic State A:\nP Q : Prop\nh : P → Q\n⊢ [P, Q].TFAE\n## Tactic State B:\nP Q : Prop\nh : P → Q\n⊢ [P, Q].TFAE\n## Action:\n  guard_hyp h : P → Q"
"## Tactic State A:\nP Q : Prop\nh : P → Q\n⊢ [P, Q].TFAE\n## Tactic State B:\nP Q : Prop\nh : P → Q\nx✝ : Q → P\n⊢ [P, Q].TFAE\n## Action:\n  tfae_have _ : 1 ← 2 := qp"
"## Tactic State A:\nP Q : Prop\nh : P → Q\nx✝ : Q → P\n⊢ [P, Q].TFAE\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  tfae_finish"
"## Tactic State A:\nP Q : Prop\n⊢ [P, Q].TFAE\n## Tactic State B:\nP Q : Prop\nn : ℕ\n⊢ [P, Q].TFAE\n## Action:\n  have n : ℕ := 4"
"## Tactic State A:\nP Q : Prop\nn : ℕ\n⊢ [P, Q].TFAE\n## Tactic State B:\nP Q : Prop\nn : ℕ\ntfae_1_to_2 : P → Q\n⊢ [P, Q].TFAE\n## Action:\n  tfae_have 1 → 2 := by"
"## Tactic State A:\nP Q : Prop\nn : ℕ\ntfae_1_to_2 : P → Q\n⊢ [P, Q].TFAE\n## Tactic State B:\nP Q : Prop\nn : ℕ\ntfae_1_to_2 : P → Q\ntfae_1_from_2 : Q → P\n⊢ [P, Q].TFAE\n## Action:\n    guard_hyp n : ℕ -- hypotheses are accessible (context is correct)"
"## Tactic State A:\nP Q : Prop\nn : ℕ\ntfae_1_to_2 : P → Q\ntfae_1_from_2 : Q → P\n⊢ [P, Q].TFAE\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    guard_target =ₛ P → Q -- expected type is known"
"## Tactic State A:\nP Q : Prop\n⊢ [P, Q].TFAE\n## Tactic State B:\nP Q : Prop\nn : ℕ\n⊢ [P, Q].TFAE\n## Action:\n  have n : ℕ := 3"
"## Tactic State A:\nP Q : Prop\nn : ℕ\n⊢ [P, Q].TFAE\n## Tactic State B:\nP Q : Prop\nn : ℕ\ntfae_2_from_1 : P → Q\n⊢ [P, Q].TFAE\n---\ncase Qgoal\nP Q : Prop\nn : ℕ\np : P\n⊢ Q\n## Action:\n  tfae_have 2 ← 1 := fun p => ?Qgoal"
"## Tactic State A:\nP Q : Prop\nn : ℕ\ntfae_2_from_1 : P → Q\n⊢ [P, Q].TFAE\n---\ncase Qgoal\nP Q : Prop\nn : ℕ\np : P\n⊢ Q\n## Tactic State B:\nP Q : Prop\nn : ℕ\ntfae_2_from_1 : P → Q\n⊢ [P, Q].TFAE\n## Action:\n  case Qgoal => exact pq p"
"## Tactic State A:\nP Q : Prop\nn : ℕ\ntfae_2_from_1 : P → Q\n⊢ [P, Q].TFAE\n## Tactic State B:\ncase a\nP Q : Prop\nn : ℕ\ntfae_2_from_1 : P → Q\n⊢ [P, Q].TFAE\n## Action:\n  refine ?a"
"## Tactic State A:\ncase a\nP Q : Prop\nn : ℕ\ntfae_2_from_1 : P → Q\n⊢ [P, Q].TFAE\n## Tactic State B:\ncase a\nP Q : Prop\nn : ℕ\ntfae_2_from_1 : P → Q\n⊢ [P, Q].TFAE\n## Action:\n  fail_if_success (tfae_have 1 ← 2 := ((?a).out 1 2 sorry sorry).mpr)"
"## Tactic State A:\ncase a\nP Q : Prop\nn : ℕ\ntfae_2_from_1 : P → Q\n⊢ [P, Q].TFAE\n## Tactic State B:\ncase a\nP Q : Prop\nn : ℕ\ntfae_2_from_1 : P → Q\ntfae_2_to_1 : Q → P\n⊢ [P, Q].TFAE\n## Action:\n  tfae_have 2 → 1 := qp"
"## Tactic State A:\ncase a\nP Q : Prop\nn : ℕ\ntfae_2_from_1 : P → Q\ntfae_2_to_1 : Q → P\n⊢ [P, Q].TFAE\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  tfae_finish"
"## Tactic State A:\nP Q : Prop\n⊢ [P, Q].TFAE\n## Tactic State B:\nP Q : Prop\ntfae_1_to_2 : P → Q\n⊢ [P, Q].TFAE\n## Action:\n  tfae_have 1 → 2"
"## Tactic State A:\nP Q : Prop\ntfae_1_to_2 : P → Q\n⊢ [P, Q].TFAE\n## Tactic State B:\nP Q : Prop\ntfae_1_to_2 : P → Q\ntfae_2_to_1 : Q → P\n⊢ [P, Q].TFAE\n## Action:\n  | p => pq p"
"## Tactic State A:\nP Q : Prop\ntfae_1_to_2 : P → Q\ntfae_2_to_1 : Q → P\n⊢ [P, Q].TFAE\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  tfae_have 2 → 1"
"## Tactic State A:\nP Q : Prop\n⊢ [P, Q].TFAE\n## Tactic State B:\nP Q : Prop\nmp : P → Q\nmpr : Q → P\n⊢ [P, Q].TFAE\n## Action:\n  tfae_have ⟨mp, mpr⟩ : 1 ↔ 2 := ⟨pq, qp⟩"
"## Tactic State A:\nP Q : Prop\nmp : P → Q\nmpr : Q → P\n⊢ [P, Q].TFAE\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  tfae_finish"
"## Tactic State A:\nG : Type\ninst✝ : Group G\nn : ℤ\na : G\nh : a ^ (n * (n + 1) - n - n ^ 2) = a\n⊢ a = 1\n## Tactic State B:\nG : Type\ninst✝ : Group G\nn : ℤ\na : G\nh : 1 = a\n⊢ a = 1\n## Action:\n  group at h"
"## Tactic State A:\nG : Type\ninst✝ : Group G\nn : ℤ\na : G\nh : 1 = a\n⊢ a = 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h.symm"
"## Tactic State A:\nG : Type\ninst✝ : Group G\na b c d : G\nh : c = a * b ^ 2 * ((b * b)⁻¹ * a⁻¹) * d\n⊢ a * c * d⁻¹ = a\n## Tactic State B:\nG : Type\ninst✝ : Group G\na b c d : G\nh : c = d\n⊢ a * c * d⁻¹ = a\n## Action:\n  group at h"
"## Tactic State A:\nG : Type\ninst✝ : Group G\na b c d : G\nh : c = d\n⊢ a * c * d⁻¹ = a\n## Tactic State B:\nG : Type\ninst✝ : Group G\na b c d : G\nh : c = d\n⊢ a * d * d⁻¹ = a\n## Action:\n  rw [h]"
"## Tactic State A:\nG : Type\ninst✝ : Group G\na b c d : G\nh : c = d\n⊢ a * d * d⁻¹ = a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  group"
"## Tactic State A:\nG : Type\ninst✝ : Group G\nx : G\nh : x = 1\n⊢ x = 1\n## Tactic State B:\nG : Type\ninst✝ : Group G\nx : G\nh : x = 1\n⊢ x = 1\n## Action:\n  group"
"## Tactic State A:\nG : Type\ninst✝ : Group G\nx : G\nh : x = 1\n⊢ x = 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h"
"## Tactic State A:\nα : Sort u_1\nx : α\n⊢ sorry = x ∧ sorry = x\n## Tactic State B:\nα : Sort u_1\nx : α\n⊢ sorry () = x ∧ sorry () = x\n## Action:\n  dsimp"
"## Tactic State A:\nα : Sort u_1\nx : α\n⊢ sorry () = x ∧ sorry () = x\n## Tactic State B:\nα : Sort u_1\nx : α\n⊢ sorry () = x ∧ sorry () = x\n## Action:\n  guard_target = x = x ∧ x = x"
"## Tactic State A:\nα : Sort u_1\nx : α\n⊢ sorry = x ∧ sorry = x\n## Tactic State B:\nα : Sort u_1\nx : α\n⊢ sorry = x ∧ sorry = x\n## Action:\n  dsimp only [rfl2_toFun, rfl2_invFun]"
"## Tactic State A:\nx✝¹ : Sort u_1\nMyProd : x✝¹\nx✝ : Sort u_2\ntest : x✝\nα : ?m.951\nb : Bool\nx : sorry\nh : sorry = x\n⊢ sorry = x\n## Tactic State B:\nx✝¹ : Sort u_1\nMyProd : x✝¹\nx✝ : Sort u_2\ntest : x✝\nα : ?m.951\nb : Bool\nx : sorry\nh : sorry = x\n⊢ sorry () = x\n## Action:\n  dsimp"
"## Tactic State A:\nx✝¹ : Sort u_1\nMyProd : x✝¹\nx✝ : Sort u_2\ntest : x✝\nα : ?m.951\nb : Bool\nx : sorry\nh : sorry = x\n⊢ sorry () = x\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rw [h]"
"## Tactic State A:\nα β γ : Type\nf : α ≃ β\ng : β ≃ γ\nx : α\nz : γ\nh : g.toFun (f.toFun x) = z\n⊢ (f.trans g).toFun x = z\n## Tactic State B:\nα β γ : Type\nf : α ≃ β\ng : β ≃ γ\nx : α\nz : γ\nh : g.toFun (f.toFun x) = z\n⊢ (f.trans g).toFun x = z\n## Action:\n  dsimp only [Equiv'.trans_toFun]"
"## Tactic State A:\nn : ℕ\n⊢ sorry = n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  { /-successIfFail { rfl },-/ simp only [myNatEquiv_toFun, myNatEquiv_invFun] }"
"## Tactic State A:\nα : Sort u_1\nβ : Sort u_2\nγ : Sort u_3\ne₁ : α ≃ β\ne₂ : β ≃ γ\nx : γ\nz : α\nh : e₁.symm (e₂.symm x) = z\n⊢ (e₁.trans e₂).symm x = z\n## Tactic State B:\nα : Sort u_1\nβ : Sort u_2\nγ : Sort u_3\ne₁ : α ≃ β\ne₂ : β ≃ γ\nx : γ\nz : α\nh : e₁.symm (e₂.symm x) = z\n⊢ (e₁.trans e₂).symm x = z\n## Action:\n  simp only [Equiv.trans_invFun]; rw [h]"
"## Tactic State A:\nα✝¹ : Sort ?u.56\nβ✝¹ : Sort ?u.59\nγ✝¹ : Sort ?u.62\nα✝ : Sort ?u.65\nβ✝ : Sort ?u.68\nγ✝ : Sort ?u.71\nα : Sort u_1\nβ : Sort u_2\nγ : Sort u_3\ne₁ : α ≃ β\ne₂ : β ≃ γ\nx : γ\nz : α\nh : e₁.symm (e₂.symm x) = z\n⊢ (e₁.trans e₂).symm x = z\n## Tactic State B:\nα✝¹ : Sort ?u.56\nβ✝¹ : Sort ?u.59\nγ✝¹ : Sort ?u.62\nα✝ : Sort ?u.65\nβ✝ : Sort ?u.68\nγ✝ : Sort ?u.71\nα : Sort u_1\nβ : Sort u_2\nγ : Sort u_3\ne₁ : α ≃ β\ne₂ : β ≃ γ\nx : γ\nz : α\nh : e₁.symm (e₂.symm x) = z\n⊢ (e₁.trans e₂).symm x = z\n## Action:\n  simp only [Equiv.trans_invFun]; rw [h]"
"## Tactic State A:\nα✝⁴ : Sort ?u.191\nβ✝⁴ : Sort ?u.194\nγ✝⁴ : Sort ?u.197\nα✝³ : Sort ?u.200\nβ✝³ : Sort ?u.203\nγ✝³ : Sort ?u.206\nα✝² : Sort ?u.209\nβ✝² : Sort ?u.212\nγ✝² : Sort ?u.215\nα✝¹ : Sort ?u.218\nβ✝¹ : Sort ?u.221\nγ✝¹ : Sort ?u.224\nα✝ : Sort ?u.227\nβ✝ : Sort ?u.230\nγ✝ : Sort ?u.233\nα : Sort u_1\nβ : Sort u_2\nγ : Sort u_3\ne₁ : α ≃ β\ne₂ : β ≃ γ\nx : α\nz : γ\nh : e₂ (e₁ x) = z\n⊢ (e₁.trans e₂) x = z\n## Tactic State B:\nα✝⁴ : Sort ?u.191\nβ✝⁴ : Sort ?u.194\nγ✝⁴ : Sort ?u.197\nα✝³ : Sort ?u.200\nβ✝³ : Sort ?u.203\nγ✝³ : Sort ?u.206\nα✝² : Sort ?u.209\nβ✝² : Sort ?u.212\nγ✝² : Sort ?u.215\nα✝¹ : Sort ?u.218\nβ✝¹ : Sort ?u.221\nγ✝¹ : Sort ?u.224\nα✝ : Sort ?u.227\nβ✝ : Sort ?u.230\nγ✝ : Sort ?u.233\nα : Sort u_1\nβ : Sort u_2\nγ : Sort u_3\ne₁ : α ≃ β\ne₂ : β ≃ γ\nx : α\nz : γ\nh : e₂ (e₁ x) = z\n⊢ e₂ (e₁ x) = z\n## Action:\n  simp only [Equiv.trans_apply]; rw [h]"
"## Tactic State A:\nα✝⁴ : Sort ?u.191\nβ✝⁴ : Sort ?u.194\nγ✝⁴ : Sort ?u.197\nα✝³ : Sort ?u.200\nβ✝³ : Sort ?u.203\nγ✝³ : Sort ?u.206\nα✝² : Sort ?u.209\nβ✝² : Sort ?u.212\nγ✝² : Sort ?u.215\nα✝¹ : Sort ?u.218\nβ✝¹ : Sort ?u.221\nγ✝¹ : Sort ?u.224\nα✝ : Sort ?u.227\nβ✝ : Sort ?u.230\nγ✝ : Sort ?u.233\nα : Sort u_1\nβ : Sort u_2\nγ : Sort u_3\ne₁ : α ≃ β\ne₂ : β ≃ γ\nx : γ\nz : α\nh : e₁.symm (e₂.symm x) = z\n⊢ (e₁.trans e₂).symm x = z\n## Tactic State B:\nα✝⁴ : Sort ?u.191\nβ✝⁴ : Sort ?u.194\nγ✝⁴ : Sort ?u.197\nα✝³ : Sort ?u.200\nβ✝³ : Sort ?u.203\nγ✝³ : Sort ?u.206\nα✝² : Sort ?u.209\nβ✝² : Sort ?u.212\nγ✝² : Sort ?u.215\nα✝¹ : Sort ?u.218\nβ✝¹ : Sort ?u.221\nγ✝¹ : Sort ?u.224\nα✝ : Sort ?u.227\nβ✝ : Sort ?u.230\nγ✝ : Sort ?u.233\nα : Sort u_1\nβ : Sort u_2\nγ : Sort u_3\ne₁ : α ≃ β\ne₂ : β ≃ γ\nx : γ\nz : α\nh : e₁.symm (e₂.symm x) = z\n⊢ (e₁.trans e₂).symm x = z\n## Action:\n  simp only [Equiv.trans_symm_apply]; rw [h]"
"## Tactic State A:\nα✝⁵ : Sort ?u.254\nβ✝⁵ : Sort ?u.257\nγ✝⁵ : Sort ?u.260\nα✝⁴ : Sort ?u.263\nβ✝⁴ : Sort ?u.266\nγ✝⁴ : Sort ?u.269\nα✝³ : Sort ?u.272\nβ✝³ : Sort ?u.275\nγ✝³ : Sort ?u.278\nα✝² : Sort ?u.281\nβ✝² : Sort ?u.284\nγ✝² : Sort ?u.287\nα✝¹ : Sort ?u.290\nβ✝¹ : Sort ?u.293\nγ✝¹ : Sort ?u.296\nα✝ : Sort ?u.299\nβ✝ : Sort ?u.302\nγ✝ : Sort ?u.305\nα : Sort u_1\nβ : Sort u_2\nγ : Sort u_3\ne₁ : α ≃ β\ne₂ : β ≃ γ\nx : α\nz : γ\nh : e₂ (e₁ x) = z\n⊢ (e₁.trans e₂) x = z\n## Tactic State B:\nα✝⁵ : Sort ?u.254\nβ✝⁵ : Sort ?u.257\nγ✝⁵ : Sort ?u.260\nα✝⁴ : Sort ?u.263\nβ✝⁴ : Sort ?u.266\nγ✝⁴ : Sort ?u.269\nα✝³ : Sort ?u.272\nβ✝³ : Sort ?u.275\nγ✝³ : Sort ?u.278\nα✝² : Sort ?u.281\nβ✝² : Sort ?u.284\nγ✝² : Sort ?u.287\nα✝¹ : Sort ?u.290\nβ✝¹ : Sort ?u.293\nγ✝¹ : Sort ?u.296\nα✝ : Sort ?u.299\nβ✝ : Sort ?u.302\nγ✝ : Sort ?u.305\nα : Sort u_1\nβ : Sort u_2\nγ : Sort u_3\ne₁ : α ≃ β\ne₂ : β ≃ γ\nx : α\nz : γ\nh : e₂ (e₁ x) = z\n⊢ (⇑e₂ ∘ ⇑e₁) x = z\n## Action:\n  simp only [Equiv.coe_trans]"
"## Tactic State A:\nα✝⁵ : Sort ?u.254\nβ✝⁵ : Sort ?u.257\nγ✝⁵ : Sort ?u.260\nα✝⁴ : Sort ?u.263\nβ✝⁴ : Sort ?u.266\nγ✝⁴ : Sort ?u.269\nα✝³ : Sort ?u.272\nβ✝³ : Sort ?u.275\nγ✝³ : Sort ?u.278\nα✝² : Sort ?u.281\nβ✝² : Sort ?u.284\nγ✝² : Sort ?u.287\nα✝¹ : Sort ?u.290\nβ✝¹ : Sort ?u.293\nγ✝¹ : Sort ?u.296\nα✝ : Sort ?u.299\nβ✝ : Sort ?u.302\nγ✝ : Sort ?u.305\nα : Sort u_1\nβ : Sort u_2\nγ : Sort u_3\ne₁ : α ≃ β\ne₂ : β ≃ γ\nx : α\nz : γ\nh : e₂ (e₁ x) = z\n⊢ (⇑e₂ ∘ ⇑e₁) x = z\n## Tactic State B:\nα✝⁵ : Sort ?u.254\nβ✝⁵ : Sort ?u.257\nγ✝⁵ : Sort ?u.260\nα✝⁴ : Sort ?u.263\nβ✝⁴ : Sort ?u.266\nγ✝⁴ : Sort ?u.269\nα✝³ : Sort ?u.272\nβ✝³ : Sort ?u.275\nγ✝³ : Sort ?u.278\nα✝² : Sort ?u.281\nβ✝² : Sort ?u.284\nγ✝² : Sort ?u.287\nα✝¹ : Sort ?u.290\nβ✝¹ : Sort ?u.293\nγ✝¹ : Sort ?u.296\nα✝ : Sort ?u.299\nβ✝ : Sort ?u.302\nγ✝ : Sort ?u.305\nα : Sort u_1\nβ : Sort u_2\nγ : Sort u_3\ne₁ : α ≃ β\ne₂ : β ≃ γ\nx : α\nz : γ\nh : e₂ (e₁ x) = z\n⊢ (⇑e₂ ∘ ⇑e₁) x = z\n## Action:\n  rw [h]"
"## Tactic State A:\nα✝⁶ : Sort ?u.254\nβ✝⁶ : Sort ?u.257\nγ✝⁶ : Sort ?u.260\nα✝⁵ : Sort ?u.263\nβ✝⁵ : Sort ?u.266\nγ✝⁵ : Sort ?u.269\nα✝⁴ : Sort ?u.272\nβ✝⁴ : Sort ?u.275\nγ✝⁴ : Sort ?u.278\nα✝³ : Sort ?u.281\nβ✝³ : Sort ?u.284\nγ✝³ : Sort ?u.287\nα✝² : Sort ?u.290\nβ✝² : Sort ?u.293\nγ✝² : Sort ?u.296\nα✝¹ : Sort ?u.299\nβ✝¹ : Sort ?u.302\nγ✝¹ : Sort ?u.305\nα✝ : Sort ?u.308\nβ✝ : Sort ?u.311\nγ✝ : Sort ?u.314\nx✝ : Sort u_1\nfoo : x✝\nα : Type u_2\nβ : Type u_3\nγ : Type u_4\nδ : Type u_5\nx : α\ne₁ : α ≃ β\ne₂ : γ ≃ δ\nz : α × γ\ny : β\nh : e₁ z.1 = y\n⊢ sorry = y\n## Tactic State B:\nα✝⁶ : Sort ?u.254\nβ✝⁶ : Sort ?u.257\nγ✝⁶ : Sort ?u.260\nα✝⁵ : Sort ?u.263\nβ✝⁵ : Sort ?u.266\nγ✝⁵ : Sort ?u.269\nα✝⁴ : Sort ?u.272\nβ✝⁴ : Sort ?u.275\nγ✝⁴ : Sort ?u.278\nα✝³ : Sort ?u.281\nβ✝³ : Sort ?u.284\nγ✝³ : Sort ?u.287\nα✝² : Sort ?u.290\nβ✝² : Sort ?u.293\nγ✝² : Sort ?u.296\nα✝¹ : Sort ?u.299\nβ✝¹ : Sort ?u.302\nγ✝¹ : Sort ?u.305\nα✝ : Sort ?u.308\nβ✝ : Sort ?u.311\nγ✝ : Sort ?u.314\nx✝ : Sort u_1\nfoo : x✝\nα : Type u_2\nβ : Type u_3\nγ : Type u_4\nδ : Type u_5\nx : α\ne₁ : α ≃ β\ne₂ : γ ≃ δ\nz : α × γ\ny : β\nh : e₁ z.1 = y\n⊢ sorry = y\n## Action:\n  simp only [coe_foo_snd_fst]"
"## Tactic State A:\nα✝⁵ : Sort ?u.254\nβ✝⁵ : Sort ?u.257\nγ✝⁵ : Sort ?u.260\nα✝⁴ : Sort ?u.263\nβ✝⁴ : Sort ?u.266\nγ✝⁴ : Sort ?u.269\nα✝³ : Sort ?u.272\nβ✝³ : Sort ?u.275\nγ✝³ : Sort ?u.278\nα✝² : Sort ?u.281\nβ✝² : Sort ?u.284\nγ✝² : Sort ?u.287\nα✝¹ : Sort ?u.290\nβ✝¹ : Sort ?u.293\nγ✝¹ : Sort ?u.296\nα✝ : Sort ?u.299\nβ✝ : Sort ?u.302\nγ✝ : Sort ?u.305\nα : Sort ?u.308\nβ : Sort ?u.311\nγ : Sort ?u.314\nx : Set ℕ\nh : Set.univ = x\n⊢ sorry = x\n## Tactic State B:\nα✝⁵ : Sort ?u.254\nβ✝⁵ : Sort ?u.257\nγ✝⁵ : Sort ?u.260\nα✝⁴ : Sort ?u.263\nβ✝⁴ : Sort ?u.266\nγ✝⁴ : Sort ?u.269\nα✝³ : Sort ?u.272\nβ✝³ : Sort ?u.275\nγ✝³ : Sort ?u.278\nα✝² : Sort ?u.281\nβ✝² : Sort ?u.284\nγ✝² : Sort ?u.287\nα✝¹ : Sort ?u.290\nβ✝¹ : Sort ?u.293\nγ✝¹ : Sort ?u.296\nα✝ : Sort ?u.299\nβ✝ : Sort ?u.302\nγ✝ : Sort ?u.305\nα : Sort ?u.308\nβ : Sort ?u.311\nγ : Sort ?u.314\nx : Set ℕ\nh : Set.univ = x\n⊢ sorry = x\n## Action:\n  dsimp only [Nat.SetPlus1_s]"
"## Tactic State A:\nα✝⁵ : Sort ?u.254\nβ✝⁵ : Sort ?u.257\nγ✝⁵ : Sort ?u.260\nα✝⁴ : Sort ?u.263\nβ✝⁴ : Sort ?u.266\nγ✝⁴ : Sort ?u.269\nα✝³ : Sort ?u.272\nβ✝³ : Sort ?u.275\nγ✝³ : Sort ?u.278\nα✝² : Sort ?u.281\nβ✝² : Sort ?u.284\nγ✝² : Sort ?u.287\nα✝¹ : Sort ?u.290\nβ✝¹ : Sort ?u.293\nγ✝¹ : Sort ?u.296\nα✝ : Sort ?u.299\nβ✝ : Sort ?u.302\nγ✝ : Sort ?u.305\nα : Sort ?u.308\nβ : Sort ?u.311\nγ : Sort ?u.314\nx : Set ℕ\nh : Set.univ = x\n⊢ sorry = x\n## Tactic State B:\nα✝⁵ : Sort ?u.254\nβ✝⁵ : Sort ?u.257\nγ✝⁵ : Sort ?u.260\nα✝⁴ : Sort ?u.263\nβ✝⁴ : Sort ?u.266\nγ✝⁴ : Sort ?u.269\nα✝³ : Sort ?u.272\nβ✝³ : Sort ?u.275\nγ✝³ : Sort ?u.278\nα✝² : Sort ?u.281\nβ✝² : Sort ?u.284\nγ✝² : Sort ?u.287\nα✝¹ : Sort ?u.290\nβ✝¹ : Sort ?u.293\nγ✝¹ : Sort ?u.296\nα✝ : Sort ?u.299\nβ✝ : Sort ?u.302\nγ✝ : Sort ?u.305\nα : Sort ?u.308\nβ : Sort ?u.311\nγ : Sort ?u.314\nx : Set ℕ\nh : Set.univ = x\n⊢ sorry = x\n## Action:\n  fail_if_success { rw [h] }"
"## Tactic State A:\nα✝⁵ : Sort ?u.254\nβ✝⁵ : Sort ?u.257\nγ✝⁵ : Sort ?u.260\nα✝⁴ : Sort ?u.263\nβ✝⁴ : Sort ?u.266\nγ✝⁴ : Sort ?u.269\nα✝³ : Sort ?u.272\nβ✝³ : Sort ?u.275\nγ✝³ : Sort ?u.278\nα✝² : Sort ?u.281\nβ✝² : Sort ?u.284\nγ✝² : Sort ?u.287\nα✝¹ : Sort ?u.290\nβ✝¹ : Sort ?u.293\nγ✝¹ : Sort ?u.296\nα✝ : Sort ?u.299\nβ✝ : Sort ?u.302\nγ✝ : Sort ?u.305\nα : Sort ?u.308\nβ : Sort ?u.311\nγ : Sort ?u.314\nx : Set ℕ\nh : Set.univ = x\n⊢ sorry = x\n## Tactic State B:\nα✝⁵ : Sort ?u.254\nβ✝⁵ : Sort ?u.257\nγ✝⁵ : Sort ?u.260\nα✝⁴ : Sort ?u.263\nβ✝⁴ : Sort ?u.266\nγ✝⁴ : Sort ?u.269\nα✝³ : Sort ?u.272\nβ✝³ : Sort ?u.275\nγ✝³ : Sort ?u.278\nα✝² : Sort ?u.281\nβ✝² : Sort ?u.284\nγ✝² : Sort ?u.287\nα✝¹ : Sort ?u.290\nβ✝¹ : Sort ?u.293\nγ✝¹ : Sort ?u.296\nα✝ : Sort ?u.299\nβ✝ : Sort ?u.302\nγ✝ : Sort ?u.305\nα : Sort ?u.308\nβ : Sort ?u.311\nγ : Sort ?u.314\nx : Set ℕ\nh : Set.univ = x\n⊢ sorry = x\n## Action:\n  exact h"
"## Tactic State A:\nα✝⁵ : Sort ?u.254\nβ✝⁵ : Sort ?u.257\nγ✝⁵ : Sort ?u.260\nα✝⁴ : Sort ?u.263\nβ✝⁴ : Sort ?u.266\nγ✝⁴ : Sort ?u.269\nα✝³ : Sort ?u.272\nβ✝³ : Sort ?u.275\nγ✝³ : Sort ?u.278\nα✝² : Sort ?u.281\nβ✝² : Sort ?u.284\nγ✝² : Sort ?u.287\nα✝¹ : Sort ?u.290\nβ✝¹ : Sort ?u.293\nγ✝¹ : Sort ?u.296\nα✝ : Sort ?u.299\nβ✝ : Sort ?u.302\nγ✝ : Sort ?u.305\nα : Sort ?u.308\nβ : Sort ?u.311\nγ : Sort ?u.314\nx : Set ℕ\nh : Set.univ = x\n⊢ sorry = x\n## Tactic State B:\nα✝⁵ : Sort ?u.254\nβ✝⁵ : Sort ?u.257\nγ✝⁵ : Sort ?u.260\nα✝⁴ : Sort ?u.263\nβ✝⁴ : Sort ?u.266\nγ✝⁴ : Sort ?u.269\nα✝³ : Sort ?u.272\nβ✝³ : Sort ?u.275\nγ✝³ : Sort ?u.278\nα✝² : Sort ?u.281\nβ✝² : Sort ?u.284\nγ✝² : Sort ?u.287\nα✝¹ : Sort ?u.290\nβ✝¹ : Sort ?u.293\nγ✝¹ : Sort ?u.296\nα✝ : Sort ?u.299\nβ✝ : Sort ?u.302\nγ✝ : Sort ?u.305\nα : Sort ?u.308\nβ : Sort ?u.311\nγ : Sort ?u.314\nx : Set ℕ\nh : Set.univ = x\n⊢ sorry = x\n## Action:\n  dsimp only [Nat.SetPlus3_s]"
"## Tactic State A:\nα✝⁶ : Sort ?u.326\nβ✝⁶ : Sort ?u.329\nγ✝⁶ : Sort ?u.332\nα✝⁵ : Sort ?u.335\nβ✝⁵ : Sort ?u.338\nγ✝⁵ : Sort ?u.341\nα✝⁴ : Sort ?u.344\nβ✝⁴ : Sort ?u.347\nγ✝⁴ : Sort ?u.350\nα✝³ : Sort ?u.353\nβ✝³ : Sort ?u.356\nγ✝³ : Sort ?u.359\nα✝² : Sort ?u.362\nβ✝² : Sort ?u.365\nγ✝² : Sort ?u.368\nα✝¹ : Sort ?u.371\nβ✝¹ : Sort ?u.374\nγ✝¹ : Sort ?u.377\nα✝ : Sort ?u.380\nβ✝ : Sort ?u.383\nγ✝ : Sort ?u.386\nα : Sort u_1\nβ : Sort u_2\nγ : Sort ?u.395\ne : α ≃ β\nx : β → α\nh : e.invFun = x\n⊢ sorry = x\n## Tactic State B:\nα✝⁶ : Sort ?u.326\nβ✝⁶ : Sort ?u.329\nγ✝⁶ : Sort ?u.332\nα✝⁵ : Sort ?u.335\nβ✝⁵ : Sort ?u.338\nγ✝⁵ : Sort ?u.341\nα✝⁴ : Sort ?u.344\nβ✝⁴ : Sort ?u.347\nγ✝⁴ : Sort ?u.350\nα✝³ : Sort ?u.353\nβ✝³ : Sort ?u.356\nγ✝³ : Sort ?u.359\nα✝² : Sort ?u.362\nβ✝² : Sort ?u.365\nγ✝² : Sort ?u.368\nα✝¹ : Sort ?u.371\nβ✝¹ : Sort ?u.374\nγ✝¹ : Sort ?u.377\nα✝ : Sort ?u.380\nβ✝ : Sort ?u.383\nγ✝ : Sort ?u.386\nα : Sort u_1\nβ : Sort u_2\nγ : Sort ?u.395\ne : α ≃ β\nx : β → α\nh : e.invFun = x\n⊢ sorry = x\n## Action:\n  dsimp only [Equiv.symm2_invFun_toFun]"
"## Tactic State A:\nα✝⁶ : Sort ?u.326\nβ✝⁶ : Sort ?u.329\nγ✝⁶ : Sort ?u.332\nα✝⁵ : Sort ?u.335\nβ✝⁵ : Sort ?u.338\nγ✝⁵ : Sort ?u.341\nα✝⁴ : Sort ?u.344\nβ✝⁴ : Sort ?u.347\nγ✝⁴ : Sort ?u.350\nα✝³ : Sort ?u.353\nβ✝³ : Sort ?u.356\nγ✝³ : Sort ?u.359\nα✝² : Sort ?u.362\nβ✝² : Sort ?u.365\nγ✝² : Sort ?u.368\nα✝¹ : Sort ?u.371\nβ✝¹ : Sort ?u.374\nγ✝¹ : Sort ?u.377\nα✝ : Sort ?u.380\nβ✝ : Sort ?u.383\nγ✝ : Sort ?u.386\nα : Sort ?u.389\nβ : Sort ?u.392\nγ : Sort ?u.395\nx✝ : Sort u_1\nmyAlgHom : x✝\nx z : Bool\nh : id x = z\n⊢ sorry = z\n## Tactic State B:\nα✝⁶ : Sort ?u.326\nβ✝⁶ : Sort ?u.329\nγ✝⁶ : Sort ?u.332\nα✝⁵ : Sort ?u.335\nβ✝⁵ : Sort ?u.338\nγ✝⁵ : Sort ?u.341\nα✝⁴ : Sort ?u.344\nβ✝⁴ : Sort ?u.347\nγ✝⁴ : Sort ?u.350\nα✝³ : Sort ?u.353\nβ✝³ : Sort ?u.356\nγ✝³ : Sort ?u.359\nα✝² : Sort ?u.362\nβ✝² : Sort ?u.365\nγ✝² : Sort ?u.368\nα✝¹ : Sort ?u.371\nβ✝¹ : Sort ?u.374\nγ✝¹ : Sort ?u.377\nα✝ : Sort ?u.380\nβ✝ : Sort ?u.383\nγ✝ : Sort ?u.386\nα : Sort ?u.389\nβ : Sort ?u.392\nγ : Sort ?u.395\nx✝ : Sort u_1\nmyAlgHom : x✝\nx z : Bool\nh : id x = z\n⊢ sorry = z\n## Action:\n  simp only [myAlgHom_toFun]"
"## Tactic State A:\nα✝⁶ : Sort ?u.326\nβ✝⁶ : Sort ?u.329\nγ✝⁶ : Sort ?u.332\nα✝⁵ : Sort ?u.335\nβ✝⁵ : Sort ?u.338\nγ✝⁵ : Sort ?u.341\nα✝⁴ : Sort ?u.344\nβ✝⁴ : Sort ?u.347\nγ✝⁴ : Sort ?u.350\nα✝³ : Sort ?u.353\nβ✝³ : Sort ?u.356\nγ✝³ : Sort ?u.359\nα✝² : Sort ?u.362\nβ✝² : Sort ?u.365\nγ✝² : Sort ?u.368\nα✝¹ : Sort ?u.371\nβ✝¹ : Sort ?u.374\nγ✝¹ : Sort ?u.377\nα✝ : Sort ?u.380\nβ✝ : Sort ?u.383\nγ✝ : Sort ?u.386\nα : Sort ?u.389\nβ : Sort ?u.392\nγ : Sort ?u.395\nx✝ : Sort u_1\nmyRingHom : x✝\nx z : Bool\nh : id x = z\n⊢ sorry = z\n## Tactic State B:\nα✝⁶ : Sort ?u.326\nβ✝⁶ : Sort ?u.329\nγ✝⁶ : Sort ?u.332\nα✝⁵ : Sort ?u.335\nβ✝⁵ : Sort ?u.338\nγ✝⁵ : Sort ?u.341\nα✝⁴ : Sort ?u.344\nβ✝⁴ : Sort ?u.347\nγ✝⁴ : Sort ?u.350\nα✝³ : Sort ?u.353\nβ✝³ : Sort ?u.356\nγ✝³ : Sort ?u.359\nα✝² : Sort ?u.362\nβ✝² : Sort ?u.365\nγ✝² : Sort ?u.368\nα✝¹ : Sort ?u.371\nβ✝¹ : Sort ?u.374\nγ✝¹ : Sort ?u.377\nα✝ : Sort ?u.380\nβ✝ : Sort ?u.383\nγ✝ : Sort ?u.386\nα : Sort ?u.389\nβ : Sort ?u.392\nγ : Sort ?u.395\nx✝ : Sort u_1\nmyRingHom : x✝\nx z : Bool\nh : id x = z\n⊢ sorry = z\n## Action:\n  simp only [myRingHom_toFun]"
"## Tactic State A:\nα : Type u_1\nβ : Type u_2\nf : α → β\nL M : List α\n⊢ List.map f (L ++ M) = List.map f L ++ List.map f M\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rw?"
"## Tactic State A:\nC : Type u_1\ninst✝ : Category.{u_2, u_1} C\nX Y Z : C\nf : X ⟶ Y\ng : Y ⟶ Z\n⊢ f ≫ 𝟙 Y ≫ g = f ≫ g\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rw?"
"## Tactic State A:\nG : Type u_1\ninst✝ : Group G\nh : G\n⊢ 1 * h = h\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rw? [-mul_left_eq_self] -- exclude deprecated name for mul_eq_right, it is found first otherwise"
"## Tactic State A:\nG : Type u_1\ng : G\ninst✝ : Group G\nh : G\nhyp : g * 1 = h\n⊢ g = h\n## Tactic State B:\nG : Type u_1\ng : G\ninst✝ : Group G\nh : G\nhyp : g = h\n⊢ g = h\n## Action:\n  rw? at hyp"
"## Tactic State A:\nG : Type u_1\ng : G\ninst✝ : Group G\nh : G\nhyp : g = h\n⊢ g = h\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  assumption"
"## Tactic State A:\n⊢ ∀ (x y : ℕ), x ≤ y\n## Tactic State B:\nx y : ℕ\n⊢ x ≤ y\n## Action:\n  intros x y"
"## Tactic State A:\nx y : ℕ\n⊢ x ≤ y\n## Tactic State B:\nx y : ℕ\n⊢ ↑x ≤ ↑y\n## Action:\n  rw? -- Used to be an error here https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/panic.20and.20error.20with.20rw.3F/near/370495531"
"## Tactic State A:\nx y : ℕ\n⊢ ↑x ≤ ↑y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact test_sorry"
"## Tactic State A:\n⊢ ∀ (x y : ℕ), x ≤ y\n## Tactic State B:\n⊢ ∀ (x y : ℕ), x ≤ y\n## Action:\n  -- Used to be a panic here https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/panic.20and.20error.20with.20rw.3F/near/370495531"
"## Tactic State A:\n⊢ ∀ (x y : ℕ), x ≤ y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  success_if_fail_with_msg \"Could not find any lemmas which can rewrite the goal\" rw?"
"## Tactic State A:\nx✝ : Sort u_1\nfoo : x✝\nx : ℤ\n⊢ sorry = 1 ↔ ∃ k, x = k\n## Tactic State B:\nx✝ : Sort u_1\nfoo : x✝\nx : ℤ\n⊢ (∀ (p : ℕ), Nat.Prime p → ¬p ∣ sorry) ↔ ∃ k, x = k\n## Action:\n  rw? -- Used to panic, see https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/panic.20and.20error.20with.20rw.3F/near/370598036"
"## Tactic State A:\nx✝ : Sort u_1\nfoo : x✝\nx : ℤ\n⊢ (∀ (p : ℕ), Nat.Prime p → ¬p ∣ sorry) ↔ ∃ k, x = k\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact test_sorry"
"## Tactic State A:\n⊢ ∀ (x : ℕ), x ≤ 6\n## Tactic State B:\n⊢ ∀ (x : ℕ), x ≤ 6.num\n## Action:\n  rw?"
"## Tactic State A:\n⊢ ∀ (x : ℕ), x ≤ 6.num\n## Tactic State B:\n⊢ ∀ (x : ℕ), x ≤ 6.num\n## Action:\n  guard_target = ∀ (x : ℕ), x ≤ 7"
"## Tactic State A:\n⊢ ∀ x ≤ 6, x ≤ 8\n## Tactic State B:\n⊢ ∀ x ≤ 6.num, x ≤ 8\n## Action:\n  rw?"
"## Tactic State A:\n⊢ ∀ x ≤ 6.num, x ≤ 8\n## Tactic State B:\n⊢ ∀ x ≤ 6.num, x ≤ 8\n## Action:\n  guard_target = ∀ (x : ℕ) (_w : x ≤ 7), x ≤ 8"
"## Tactic State A:\nn : ℕ\n⊢ let y := 3;\n  n + y = 3 + n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rw?"
"## Tactic State A:\nx✝ : Sort u_1\nf : x✝\n⊢ sorry = sorry\n## Tactic State B:\nx✝ : Sort u_1\nf : x✝\n⊢ sorry = sorry\n## Action:\n  fail_if_success rw? [-f_eq] -- Check that we can forbid lemmas."
"## Tactic State A:\nx✝ : Sort u_1\nf : x✝\n⊢ sorry = sorry\n## Tactic State B:\nx✝ : Sort u_1\nf : x✝\n⊢ sorry = sorry\n## Action:\n  rw?"
"## Tactic State A:\nh : 1 = 2\n⊢ 2 = 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rw?"
"## Tactic State A:\ntestConst : ℕ\n⊢ testConst = 4\n## Tactic State B:\ntestConst : ℕ\n⊢ ↑testConst = ↑4\n## Action:\n  rw?"
"## Tactic State A:\ntestConst : ℕ\n⊢ ↑testConst = ↑4\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact test_sorry"
"## Tactic State A:\nP : Prop\np : P\nh : P → 1 = 2\n⊢ 2 = 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rw?"
"## Tactic State A:\nP Q : Prop\np : P\nf : P → Q\nh : Q → 1 = 2\n⊢ 2 = 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rw?"
"## Tactic State A:\nα : Sort u_1\nP : Prop\np : P\nQ : α → Prop\na b : α\nh₁ : P → a = b\nw : Q a\n⊢ Q b\n## Tactic State B:\nα : Sort u_1\nP : Prop\np : P\nQ : α → Prop\na b : α\nh₁ : P → a = b\nw : Q a\n⊢ Q a\n## Action:\n  rw?"
"## Tactic State A:\nα : Sort u_1\nP : Prop\np : P\nQ : α → Prop\na b : α\nh₁ : P → a = b\nw : Q a\n⊢ Q a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact w"
"## Tactic State A:\na b c : ℕ\nab : a = b\nbc : b = c\n⊢ c = a\n## Tactic State B:\na b c : ℕ\nab : a = b\nbc : b = c\nab_symm : b = a\nbc_symm : c = b\n⊢ c = a\n## Action:\n  symm_saturate"
"## Tactic State A:\na b c : ℕ\nab : a = b\nbc : b = c\nab_symm : b = a\nbc_symm : c = b\n⊢ c = a\n## Tactic State B:\na b c : ℕ\nab : a = b\nbc : b = c\nab_symm : b = a\nbc_symm : c = b\n⊢ c = a\n## Action:\n  -- Run twice to check that we don't add repeated copies."
"## Tactic State A:\na b c : ℕ\nab : a = b\nbc : b = c\nab_symm : b = a\nbc_symm : c = b\n⊢ c = a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  -- Unfortunately `guard_hyp_nums` doesn't seem to work so I haven't made an assertion."
"## Tactic State A:\nx✝ : Sort ?u.6\nMyEq : x✝\nn m : ℕ\nh : sorry\n⊢ sorry\n## Tactic State B:\nx✝ : Sort ?u.6\nMyEq : x✝\nn m : ℕ\nh : sorry\n⊢ sorry\n## Action:\n  symm"
"## Tactic State A:\nh : 0 + 1 = 0\n⊢ False\n## Tactic State B:\nh : 1 = 0\n⊢ False\n## Action:\n  change 1 = 0 at h"
"## Tactic State A:\nh : 1 = 0\n⊢ False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  simp at h"
"## Tactic State A:\n⊢ 0 + 1 = 1\n## Tactic State B:\n⊢ 1 = 1\n## Action:\n  change 1 = 1"
"## Tactic State A:\n⊢ 1 = 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rfl"
"## Tactic State A:\n⊢ 1 = 1\n## Tactic State B:\n⊢ 1 = 1\n## Action:\n  change 1 = 1"
"## Tactic State A:\n⊢ 1 = 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rfl"
"## Tactic State A:\n⊢ True\n## Tactic State B:\n⊢ True\n## Action:\n  #adaptation_note /-- hi -/"
"## Tactic State A:\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact .intro"
"## Tactic State A:\n⊢ True ∧ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  constructor <;> trivial;"
"## Tactic State A:\n⊢ True\n## Tactic State B:\n⊢ True\n## Action:\n  congr"
"## Tactic State A:\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  constructor"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  done"
"## Tactic State A:\n⊢ True\n## Tactic State B:\n⊢ True\n## Action:\n  skip"
"## Tactic State A:\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  constructor"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  done"
"## Tactic State A:\nR : Type u\ninst✝¹ : Semiring R\np : R[X]\ninst✝ : Subsingleton R\n⊢ p.degree = ⊥\n## Tactic State B:\nR : Type u\ninst✝¹ : Semiring R\np : R[X]\ninst✝ : Subsingleton R\n⊢ p.degree = ⊥\n## Action:\n  rw_search [-Polynomial.degree_of_subsingleton]"
"## Tactic State A:\nR : Type u\ninst✝¹ : Semiring R\np : R[X]\ninst✝ : Subsingleton R\n⊢ p.degree = ⊥\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  -- Mathlib proof:"
"## Tactic State A:\nR : Type u\na : R\ninst✝ : Semiring R\nn : ℕ\nha : a ≠ 0\n⊢ (C a * X ^ n).degree = ↑n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rw_search [-Polynomial.degree_C_mul_X_pow]"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  -- Mathlib proof:"
"## Tactic State A:\nR : Type u\ninst✝ : Semiring R\np q : R[X]\nh : p.degree < q.degree\n⊢ (p + q).degree = q.degree\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rw_search [-Polynomial.degree_add_eq_right_of_degree_lt]"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  -- Mathlib proof:"
"## Tactic State A:\nR : Type u\ninst✝ : Semiring R\na : R\nn : ℕ\n⊢ (C a * X ^ n).leadingCoeff = a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rw_search [-Polynomial.leadingCoeff_C_mul_X_pow]"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  -- Mathlib proof:"
"## Tactic State A:\nR : Type u\ninst✝ : Semiring R\np : R[X]\nh : p.support.card ≤ 1\n⊢ C p.leadingCoeff * X ^ p.natDegree = p\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rw_search [-Polynomial.C_mul_X_pow_eq_self]"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  -- Mathlib proof:"
"## Tactic State A:\nR : Type u\na b : R\ninst✝ : Semiring R\nha : a ≠ 0\n⊢ (C a * X + C b).natDegree = 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rw_search [-Polynomial.natDegree_linear]"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  -- Mathlib proof:"
"## Tactic State A:\nR : Type u\ninst✝¹ : Ring R\ninst✝ : Nontrivial R\nx : R\n⊢ (X - C x).natDegree = 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rw_search [-Polynomial.natDegree_X_sub_C]"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  -- Mathlib proof:"
"## Tactic State A:\nS : Type v\ninst✝ : Ring S\nc : S\n⊢ (X - C c).nextCoeff = -c\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rw_search"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  -- Mathlib proof:"
"## Tactic State A:\nR : Type u\ninst✝¹ : Ring R\ninst✝ : Nontrivial R\nn : ℕ\nhn : 0 < n\na : R\n⊢ (X ^ n - C a).degree = ↑n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rw_search [-Polynomial.degree_X_pow_sub_C]"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  -- Mathlib proof:"
"## Tactic State A:\nR : Type u\ninst✝¹ : Ring R\ninst✝ : Nontrivial R\nn : ℕ\nr : R\n⊢ (X ^ n - C r).natDegree = n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rw_search [-Polynomial.natDegree_X_pow_sub_C]"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  -- Mathlib proof:"
"## Tactic State A:\nα : Type u_1\nxs ys : List α\n⊢ (xs ++ ys).length = ys.length + xs.length\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rw_search"
"## Tactic State A:\nx y : ℕ\n⊢ True\n## Tactic State B:\nx y : ℕ\nh : x + y = y + x\n⊢ True\n## Action:\n  observe? h : x + y = y + x"
"## Tactic State A:\nx y : ℕ\nh : x + y = y + x\n⊢ True\n## Tactic State B:\nx y : ℕ\nh : x + y = y + x\n⊢ True\n## Action:\n  guard_hyp h : x + y = y + x"
"## Tactic State A:\nx y : ℕ\nh : x + y = y + x\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial"
"## Tactic State A:\na b : ℕ\n⊢ a + b = b + a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  apply?"
"## Tactic State A:\nn m k : ℕ\n⊢ n * (m - k) = n * m - n * k\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  apply?"
"## Tactic State A:\nn m k : ℕ\n⊢ n * m - n * k = n * (m - k)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  apply?"
"## Tactic State A:\na b : ℕ\nh : a ∣ b\nw : b > 0\n⊢ a ≤ b\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  apply?"
"## Tactic State A:\nx✝ : Sort u_1\nP : x✝\na b : ℕ\n_h1 : a < b\nh2 : sorry\n⊢ False\n## Tactic State B:\ncase a\nx✝ : Sort u_1\nP : x✝\na b : ℕ\n_h1 : a < b\nh2 : sorry\n⊢ ?n < 0\n---\ncase n\nx✝ : Sort u_1\nP : x✝\na b : ℕ\n_h1 : a < b\nh2 : sorry\n⊢ ℕ\n## Action:\n  apply Nat.not_lt_zero; cases h2; assumption"
"## Tactic State A:\nα : Type ?u.29\nβ : Type ?u.35\nγ : Type ?u.34\nl : List α\nf : α → β ⊕ γ\n⊢ List β × List γ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  apply? using f -- partitionMap f l"
"## Tactic State A:\nA B : Bool\n⊢ (A = B) = (A = true ↔ B = true)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  (cases A <;> cases B <;> simp)"
"## Tactic State A:\nA B : Bool\n⊢ (A = B) = (A = true ↔ B = true)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  apply? -- exact Bool_eq_iff"
"## Tactic State A:\nn : ℕ\n⊢ Prime n ↔ Nat.Prime n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact?"
"## Tactic State A:\nP Q : Prop\nh : P → Q\nh' : ¬Q\n⊢ ¬P\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact? says exact fun a ↦ h' (h a)"
"## Tactic State A:\n_h : List.range 10000 = List.range 10000\nn m : ℕ\n⊢ n + m = m + n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  with_reducible exact?"
"## Tactic State A:\nf : ℝ → ℝ\nK : Set ℝ\n_hK : IsCompact K\n⊢ ∃ x ∈ K, ∀ y ∈ K, f x ≤ f y\n## Tactic State B:\nf : ℝ → ℝ\nK : Set ℝ\n_hK : IsCompact K\n⊢ ∃ x ∈ K, ∀ y ∈ K, f x ≤ f y\n## Action:\n  fail_if_success exact?"
"## Tactic State A:\nf : ℝ → ℝ\nK : Set ℝ\n_hK : IsCompact K\n⊢ ∃ x ∈ K, ∀ y ∈ K, f x ≤ f y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  apply? -- Verify that this includes: `refine IsCompact.exists_forall_le _hK ?_ ?_`"
"## Tactic State A:\n⊢ NonUnitalNormedRing.toNormedAddCommGroup = Complex.instNormedAddCommGroup\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  with_reducible_and_instances rfl"
"## Tactic State A:\n⊢ Complex.SMul.instSMulRealComplex = Algebra.toSMul\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  with_reducible_and_instances rfl"
"## Tactic State A:\nk : Type u_1\ninst✝ : Field k\n⊢ AddCommGroup.toNatModule = Algebra.toModule\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  with_reducible_and_instances rfl"
"## Tactic State A:\nk : Type u_1\ninst✝ : Field k\n⊢ AddCommGroup.toIntModule (AlgebraicClosure k) = Algebra.toModule\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  with_reducible_and_instances rfl"
"## Tactic State A:\nF : Type u\nK : Type v\nL : Type w\ninst✝² : Field K\ninst✝¹ : Field L\ninst✝ : Field F\nf : K[X]\n⊢ AddCommGroup.toNatModule = Algebra.toModule\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  with_reducible_and_instances rfl"
"## Tactic State A:\nF : Type u\nK : Type v\nL : Type w\ninst✝² : Field K\ninst✝¹ : Field L\ninst✝ : Field F\nf : K[X]\n⊢ AddCommGroup.toIntModule f.SplittingField = Algebra.toModule\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  with_reducible_and_instances rfl"
"## Tactic State A:\n𝒮 : Type u₁\n𝒳 : Type u₂\ninst✝² : Category.{v₁, u₂} 𝒳\ninst✝¹ : Category.{v₂, u₁} 𝒮\np : 𝒳 ⥤ 𝒮\nR S : 𝒮\na b : 𝒳\nf : R ⟶ S\nφ : a ⟶ b\ninst✝ : p.IsHomLift f φ\n⊢ f = f\n## Tactic State B:\ncase map\n𝒮 : Type u₁\n𝒳 : Type u₂\ninst✝² : Category.{v₁, u₂} 𝒳\ninst✝¹ : Category.{v₂, u₁} 𝒮\np : 𝒳 ⥤ 𝒮\na✝ b✝ : 𝒳\nφ : a✝ ⟶ b✝\nR S : 𝒮\na b : 𝒳\ninst✝ : p.IsHomLift (p.map φ) φ\n⊢ p.map φ = p.map φ\n## Action:\n  subst_hom_lift p f φ"
"## Tactic State A:\ncase map\n𝒮 : Type u₁\n𝒳 : Type u₂\ninst✝² : Category.{v₁, u₂} 𝒳\ninst✝¹ : Category.{v₂, u₁} 𝒮\np : 𝒳 ⥤ 𝒮\na✝ b✝ : 𝒳\nφ : a✝ ⟶ b✝\nR S : 𝒮\na b : 𝒳\ninst✝ : p.IsHomLift (p.map φ) φ\n⊢ p.map φ = p.map φ\n## Tactic State B:\ncase map\n𝒮 : Type u₁\n𝒳 : Type u₂\ninst✝¹ : Category.{v₁, u₂} 𝒳\ninst✝ : Category.{v₂, u₁} 𝒮\np : 𝒳 ⥤ 𝒮\na✝ b✝ : 𝒳\nφ : a✝ ⟶ b✝\nR S : 𝒮\na b : 𝒳\nh : p.IsHomLift (p.map φ) φ\n⊢ p.map φ = p.map φ\n## Action:\n  rename_i h"
"## Tactic State A:\ncase map\n𝒮 : Type u₁\n𝒳 : Type u₂\ninst✝¹ : Category.{v₁, u₂} 𝒳\ninst✝ : Category.{v₂, u₁} 𝒮\np : 𝒳 ⥤ 𝒮\na✝ b✝ : 𝒳\nφ : a✝ ⟶ b✝\nR S : 𝒮\na b : 𝒳\nh : p.IsHomLift (p.map φ) φ\n⊢ p.map φ = p.map φ\n## Tactic State B:\ncase map\n𝒮 : Type u₁\n𝒳 : Type u₂\ninst✝¹ : Category.{v₁, u₂} 𝒳\ninst✝ : Category.{v₂, u₁} 𝒮\np : 𝒳 ⥤ 𝒮\na✝ b✝ : 𝒳\nφ : a✝ ⟶ b✝\nR S : 𝒮\na b : 𝒳\nh : p.IsHomLift (p.map φ) φ\n⊢ p.map φ = p.map φ\n## Action:\n  guard_hyp h : p.IsHomLift (p.map φ) φ"
"## Tactic State A:\ncase map\n𝒮 : Type u₁\n𝒳 : Type u₂\ninst✝¹ : Category.{v₁, u₂} 𝒳\ninst✝ : Category.{v₂, u₁} 𝒮\np : 𝒳 ⥤ 𝒮\na✝ b✝ : 𝒳\nφ : a✝ ⟶ b✝\nR S : 𝒮\na b : 𝒳\nh : p.IsHomLift (p.map φ) φ\n⊢ p.map φ = p.map φ\n## Tactic State B:\ncase map\n𝒮 : Type u₁\n𝒳 : Type u₂\ninst✝¹ : Category.{v₁, u₂} 𝒳\ninst✝ : Category.{v₂, u₁} 𝒮\np : 𝒳 ⥤ 𝒮\na✝ b✝ : 𝒳\nφ : a✝ ⟶ b✝\nR S : 𝒮\na b : 𝒳\nh : p.IsHomLift (p.map φ) φ\n⊢ p.map φ = p.map φ\n## Action:\n  guard_target = p.map φ = p.map φ"
"## Tactic State A:\ncase map\n𝒮 : Type u₁\n𝒳 : Type u₂\ninst✝¹ : Category.{v₁, u₂} 𝒳\ninst✝ : Category.{v₂, u₁} 𝒮\np : 𝒳 ⥤ 𝒮\na✝ b✝ : 𝒳\nφ : a✝ ⟶ b✝\nR S : 𝒮\na b : 𝒳\nh : p.IsHomLift (p.map φ) φ\n⊢ p.map φ = p.map φ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial"
"## Tactic State A:\n𝒮 : Type u₁\n𝒳 : Type u₂\ninst✝² : Category.{v₁, u₂} 𝒳\ninst✝¹ : Category.{v₂, u₁} 𝒮\np : 𝒳 ⥤ 𝒮\nR S T : 𝒮\na b c : 𝒳\nf : R ⟶ S\ng : S ⟶ T\nφ : a ⟶ b\nψ : b ⟶ c\ninst✝ : p.IsHomLift f (φ ≫ ψ)\n⊢ f = f\n## Tactic State B:\ncase map\n𝒮 : Type u₁\n𝒳 : Type u₂\ninst✝² : Category.{v₁, u₂} 𝒳\ninst✝¹ : Category.{v₂, u₁} 𝒮\np : 𝒳 ⥤ 𝒮\nT : 𝒮\na✝ b✝ c : 𝒳\nφ : a✝ ⟶ b✝\nψ : b✝ ⟶ c\nR S : 𝒮\na b : 𝒳\ng : p.obj c ⟶ T\ninst✝ : p.IsHomLift (p.map (φ ≫ ψ)) (φ ≫ ψ)\n⊢ p.map (φ ≫ ψ) = p.map (φ ≫ ψ)\n## Action:\n  subst_hom_lift p f (φ ≫ ψ)"
"## Tactic State A:\ncase map\n𝒮 : Type u₁\n𝒳 : Type u₂\ninst✝² : Category.{v₁, u₂} 𝒳\ninst✝¹ : Category.{v₂, u₁} 𝒮\np : 𝒳 ⥤ 𝒮\nT : 𝒮\na✝ b✝ c : 𝒳\nφ : a✝ ⟶ b✝\nψ : b✝ ⟶ c\nR S : 𝒮\na b : 𝒳\ng : p.obj c ⟶ T\ninst✝ : p.IsHomLift (p.map (φ ≫ ψ)) (φ ≫ ψ)\n⊢ p.map (φ ≫ ψ) = p.map (φ ≫ ψ)\n## Tactic State B:\ncase map\n𝒮 : Type u₁\n𝒳 : Type u₂\ninst✝¹ : Category.{v₁, u₂} 𝒳\ninst✝ : Category.{v₂, u₁} 𝒮\np : 𝒳 ⥤ 𝒮\nT : 𝒮\na✝ b✝ c : 𝒳\nφ : a✝ ⟶ b✝\nψ : b✝ ⟶ c\nR S : 𝒮\na b : 𝒳\ng : p.obj c ⟶ T\nh : p.IsHomLift (p.map (φ ≫ ψ)) (φ ≫ ψ)\n⊢ p.map (φ ≫ ψ) = p.map (φ ≫ ψ)\n## Action:\n  rename_i h"
"## Tactic State A:\ncase map\n𝒮 : Type u₁\n𝒳 : Type u₂\ninst✝¹ : Category.{v₁, u₂} 𝒳\ninst✝ : Category.{v₂, u₁} 𝒮\np : 𝒳 ⥤ 𝒮\nT : 𝒮\na✝ b✝ c : 𝒳\nφ : a✝ ⟶ b✝\nψ : b✝ ⟶ c\nR S : 𝒮\na b : 𝒳\ng : p.obj c ⟶ T\nh : p.IsHomLift (p.map (φ ≫ ψ)) (φ ≫ ψ)\n⊢ p.map (φ ≫ ψ) = p.map (φ ≫ ψ)\n## Tactic State B:\ncase map\n𝒮 : Type u₁\n𝒳 : Type u₂\ninst✝¹ : Category.{v₁, u₂} 𝒳\ninst✝ : Category.{v₂, u₁} 𝒮\np : 𝒳 ⥤ 𝒮\nT : 𝒮\na✝ b✝ c : 𝒳\nφ : a✝ ⟶ b✝\nψ : b✝ ⟶ c\nR S : 𝒮\na b : 𝒳\ng : p.obj c ⟶ T\nh : p.IsHomLift (p.map (φ ≫ ψ)) (φ ≫ ψ)\n⊢ p.map (φ ≫ ψ) = p.map (φ ≫ ψ)\n## Action:\n  guard_hyp h : p.IsHomLift (p.map (φ ≫ ψ)) (φ ≫ ψ)"
"## Tactic State A:\ncase map\n𝒮 : Type u₁\n𝒳 : Type u₂\ninst✝¹ : Category.{v₁, u₂} 𝒳\ninst✝ : Category.{v₂, u₁} 𝒮\np : 𝒳 ⥤ 𝒮\nT : 𝒮\na✝ b✝ c : 𝒳\nφ : a✝ ⟶ b✝\nψ : b✝ ⟶ c\nR S : 𝒮\na b : 𝒳\ng : p.obj c ⟶ T\nh : p.IsHomLift (p.map (φ ≫ ψ)) (φ ≫ ψ)\n⊢ p.map (φ ≫ ψ) = p.map (φ ≫ ψ)\n## Tactic State B:\ncase map\n𝒮 : Type u₁\n𝒳 : Type u₂\ninst✝¹ : Category.{v₁, u₂} 𝒳\ninst✝ : Category.{v₂, u₁} 𝒮\np : 𝒳 ⥤ 𝒮\nT : 𝒮\na✝ b✝ c : 𝒳\nφ : a✝ ⟶ b✝\nψ : b✝ ⟶ c\nR S : 𝒮\na b : 𝒳\ng : p.obj c ⟶ T\nh : p.IsHomLift (p.map (φ ≫ ψ)) (φ ≫ ψ)\n⊢ p.map (φ ≫ ψ) = p.map (φ ≫ ψ)\n## Action:\n  guard_target = p.map (φ ≫ ψ) = p.map (φ ≫ ψ)"
"## Tactic State A:\ncase map\n𝒮 : Type u₁\n𝒳 : Type u₂\ninst✝¹ : Category.{v₁, u₂} 𝒳\ninst✝ : Category.{v₂, u₁} 𝒮\np : 𝒳 ⥤ 𝒮\nT : 𝒮\na✝ b✝ c : 𝒳\nφ : a✝ ⟶ b✝\nψ : b✝ ⟶ c\nR S : 𝒮\na b : 𝒳\ng : p.obj c ⟶ T\nh : p.IsHomLift (p.map (φ ≫ ψ)) (φ ≫ ψ)\n⊢ p.map (φ ≫ ψ) = p.map (φ ≫ ψ)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  trivial"
"## Tactic State A:\nC : Type\ninst✝ : Category.{u_1, 0} C\nX Y Z W U : C\nf₁ f₂ : X ⟶ Y\ng g₁ g₂ : Y ⟶ Z\nh : Z ⟶ W\nl : W ⟶ U\nhyp : f₁ ≫ g₁ = f₂ ≫ g₂\n⊢ f₁ ≫ g₁ ≫ h ≫ l = (f₂ ≫ g₂) ≫ h ≫ l\n## Tactic State B:\nC : Type\ninst✝ : Category.{u_1, 0} C\nX Y Z W U : C\nf₁ f₂ : X ⟶ Y\ng g₁ g₂ : Y ⟶ Z\nh : Z ⟶ W\nl : W ⟶ U\nhyp : f₁ ≫ g₁ = f₂ ≫ g₂\n⊢ f₁ ≫ g₁ ≫ h ≫ l = f₂ ≫ (g₂ ≫ h) ≫ l\n## Action:\n  conv =>"
"## Tactic State A:\nC : Type\ninst✝ : Category.{u_1, 0} C\nX Y Z W U : C\nf₁ f₂ : X ⟶ Y\ng g₁ g₂ : Y ⟶ Z\nh : Z ⟶ W\nl : W ⟶ U\nhyp : f₁ ≫ g₁ = f₂ ≫ g₂\n⊢ f₁ ≫ g₁ ≫ h ≫ l = f₂ ≫ (g₂ ≫ h) ≫ l\n## Tactic State B:\nC : Type\ninst✝ : Category.{u_1, 0} C\nX Y Z W U : C\nf₁ f₂ : X ⟶ Y\ng g₁ g₂ : Y ⟶ Z\nh : Z ⟶ W\nl : W ⟶ U\nhyp : f₁ ≫ g₁ = f₂ ≫ g₂\n⊢ f₁ ≫ g₁ ≫ h ≫ l = f₂ ≫ (g₂ ≫ h) ≫ l\n## Action:\n    rhs"
"## Tactic State A:\nC : Type\ninst✝ : Category.{u_1, 0} C\nX Y Z W U : C\nf₁ f₂ : X ⟶ Y\ng g₁ g₂ : Y ⟶ Z\nh : Z ⟶ W\nl : W ⟶ U\nhyp : f₁ ≫ g₁ = f₂ ≫ g₂\n⊢ f₁ ≫ g₁ ≫ h ≫ l = f₂ ≫ (g₂ ≫ h) ≫ l\n## Tactic State B:\nC : Type\ninst✝ : Category.{u_1, 0} C\nX Y Z W U : C\nf₁ f₂ : X ⟶ Y\ng g₁ g₂ : Y ⟶ Z\nh : Z ⟶ W\nl : W ⟶ U\nhyp : f₁ ≫ g₁ = f₂ ≫ g₂\n⊢ ((f₂ ≫ g₂) ≫ h) ≫ l = f₂ ≫ (g₂ ≫ h) ≫ l\n## Action:\n    slice 2 3"
"## Tactic State A:\nC : Type\ninst✝ : Category.{u_1, 0} C\nX Y Z W U : C\nf₁ f₂ : X ⟶ Y\ng g₁ g₂ : Y ⟶ Z\nh : Z ⟶ W\nl : W ⟶ U\nhyp : f₁ ≫ g₁ = f₂ ≫ g₂\n⊢ ((f₂ ≫ g₂) ≫ h) ≫ l = f₂ ≫ (g₂ ≫ h) ≫ l\n## Tactic State B:\nC : Type\ninst✝ : Category.{u_1, 0} C\nX Y Z W U : C\nf₁ f₂ : X ⟶ Y\ng g₁ g₂ : Y ⟶ Z\nh : Z ⟶ W\nl : W ⟶ U\nhyp : f₁ ≫ g₁ = f₂ ≫ g₂\n⊢ ((f₂ ≫ g₂) ≫ h) ≫ l = f₂ ≫ (g₂ ≫ h) ≫ l\n## Action:\n  show f₁ ≫ g₁ ≫ h ≫ l = f₂ ≫ (g₂ ≫ h) ≫ l"
"## Tactic State A:\nC : Type\ninst✝ : Category.{u_1, 0} C\nX Y Z W U : C\nf₁ f₂ : X ⟶ Y\ng g₁ g₂ : Y ⟶ Z\nh : Z ⟶ W\nl : W ⟶ U\nhyp : f₁ ≫ g₁ = f₂ ≫ g₂\n⊢ ((f₂ ≫ g₂) ≫ h) ≫ l = f₂ ≫ (g₂ ≫ h) ≫ l\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  conv =>"
"## Tactic State A:\nC : Type\ninst✝ : Category.{u_1, 0} C\nX Y Z W U : C\nf₁ f₂ : X ⟶ Y\ng g₁ g₂ : Y ⟶ Z\nh : Z ⟶ W\nl : W ⟶ U\nhyp : f₁ ≫ g₁ = f₂ ≫ g₂\n⊢ f₁ ≫ g₁ ≫ h ≫ l = (f₂ ≫ g₂) ≫ h ≫ l\n## Tactic State B:\nC : Type\ninst✝ : Category.{u_1, 0} C\nX Y Z W U : C\nf₁ f₂ : X ⟶ Y\ng g₁ g₂ : Y ⟶ Z\nh : Z ⟶ W\nl : W ⟶ U\nhyp : f₁ ≫ g₁ = f₂ ≫ g₂\n⊢ ((f₂ ≫ g₂) ≫ h) ≫ l = (f₂ ≫ g₂) ≫ h ≫ l\n## Action:\n  slice_lhs 1 2 => { rw [hyp] }; slice_rhs 1 2 => skip"
"## Tactic State A:\nC : Type\ninst✝ : Category.{u_1, 0} C\nX Y Z W U : C\nf₁ f₂ : X ⟶ Y\ng g₁ g₂ : Y ⟶ Z\nh : Z ⟶ W\nl : W ⟶ U\nh₁ : f₁ = f₂\n⊢ f₁ ≫ g ≫ h ≫ l = ((f₂ ≫ g) ≫ h) ≫ l\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  slice_lhs 1 1 => rw [h₁]"
"## Tactic State A:\nC : Type\ninst✝ : Category.{u_1, 0} C\nX Y Z W U : C\nf₁ f₂ : X ⟶ Y\ng g₁ g₂ : Y ⟶ Z\nh : Z ⟶ W\nl : W ⟶ U\nh₁ : f₁ = f₂\n⊢ ((f₂ ≫ g) ≫ h) ≫ l = f₁ ≫ g ≫ h ≫ l\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  slice_rhs 1 1 => rw [h₁]"
"## Tactic State A:\nJ : Type u\ninst✝⁵ : Category.{v, u} J\nC : Type u₁\ninst✝⁴ : Category.{v₁, u₁} C\nD : Type u₂\ninst✝³ : Category.{v₂, u₂} D\nobj✝² : Type u_1\ninst✝² : Category.{u_2, u_1} obj✝²\nF : J ⥤ obj✝²\nobj✝¹ : Type u_3\ninst✝¹ : Category.{u_4, u_3} obj✝¹\nG : obj✝² ⥤ obj✝¹\nobj✝ : Type u_5\ninst✝ : Category.{u_6, u_5} obj✝\nH : obj✝¹ ⥤ obj✝\nj : J\n⊢ colimit.ι ((F ⋙ G) ⋙ H) j ≫ sorry = H.map (G.map (colimit.ι F j))\n## Tactic State B:\nJ : Type u\ninst✝⁵ : Category.{v, u} J\nC : Type u₁\ninst✝⁴ : Category.{v₁, u₁} C\nD : Type u₂\ninst✝³ : Category.{v₂, u₂} D\nobj✝² : Type u_1\ninst✝² : Category.{u_2, u_1} obj✝²\nF : J ⥤ obj✝²\nobj✝¹ : Type u_3\ninst✝¹ : Category.{u_4, u_3} obj✝¹\nG : obj✝² ⥤ obj✝¹\nobj✝ : Type u_5\ninst✝ : Category.{u_6, u_5} obj✝\nH : obj✝¹ ⥤ obj✝\nj : J\n⊢ colimit.ι ((F ⋙ G) ⋙ H) j ≫ sorry = H.map (G.map (colimit.ι F j))\n## Action:\n"
"## Tactic State A:\nJ : Type u\ninst✝⁵ : Category.{v, u} J\nC : Type u₁\ninst✝⁴ : Category.{v₁, u₁} C\nD : Type u₂\ninst✝³ : Category.{v₂, u₂} D\nobj✝² : Type u_1\ninst✝² : Category.{u_2, u_1} obj✝²\nF : J ⥤ obj✝²\nobj✝¹ : Type u_3\ninst✝¹ : Category.{u_4, u_3} obj✝¹\nG : obj✝² ⥤ obj✝¹\nobj✝ : Type u_5\ninst✝ : Category.{u_6, u_5} obj✝\nH : obj✝¹ ⥤ obj✝\nj : J\n⊢ colimit.ι ((F ⋙ G) ⋙ H) j ≫ sorry = H.map (G.map (colimit.ι F j))\n## Tactic State B:\nJ : Type u\ninst✝⁵ : Category.{v, u} J\nC : Type u₁\ninst✝⁴ : Category.{v₁, u₁} C\nD : Type u₂\ninst✝³ : Category.{v₂, u₂} D\nobj✝² : Type u_1\ninst✝² : Category.{u_2, u_1} obj✝²\nF : J ⥤ obj✝²\nobj✝¹ : Type u_3\ninst✝¹ : Category.{u_4, u_3} obj✝¹\nG : obj✝² ⥤ obj✝¹\nobj✝ : Type u_5\ninst✝ : Category.{u_6, u_5} obj✝\nH : obj✝¹ ⥤ obj✝\nj : J\n⊢ colimit.ι ((F ⋙ G) ⋙ H) j ≫ sorry = H.map (G.map (colimit.ι F j))\n## Action:\n  -- We know which lemma we want to use, and it's even a simp lemma, but `rw` won't let us apply it"
"## Tactic State A:\nJ : Type u\ninst✝⁵ : Category.{v, u} J\nC : Type u₁\ninst✝⁴ : Category.{v₁, u₁} C\nD : Type u₂\ninst✝³ : Category.{v₂, u₂} D\nobj✝² : Type u_1\ninst✝² : Category.{u_2, u_1} obj✝²\nF : J ⥤ obj✝²\nobj✝¹ : Type u_3\ninst✝¹ : Category.{u_4, u_3} obj✝¹\nG : obj✝² ⥤ obj✝¹\nobj✝ : Type u_5\ninst✝ : Category.{u_6, u_5} obj✝\nH : obj✝¹ ⥤ obj✝\nj : J\n⊢ colimit.ι ((F ⋙ G) ⋙ H) j ≫ sorry = H.map (G.map (colimit.ι F j))\n## Tactic State B:\nJ : Type u\ninst✝⁵ : Category.{v, u} J\nC : Type u₁\ninst✝⁴ : Category.{v₁, u₁} C\nD : Type u₂\ninst✝³ : Category.{v₂, u₂} D\nobj✝² : Type u_1\ninst✝² : Category.{u_2, u_1} obj✝²\nF : J ⥤ obj✝²\nobj✝¹ : Type u_3\ninst✝¹ : Category.{u_4, u_3} obj✝¹\nG : obj✝² ⥤ obj✝¹\nobj✝ : Type u_5\ninst✝ : Category.{u_6, u_5} obj✝\nH : obj✝¹ ⥤ obj✝\nj : J\n⊢ colimit.ι ((F ⋙ G) ⋙ H) j ≫ sorry = H.map (G.map (colimit.ι F j))\n## Action:\n  fail_if_success rw [ι_preservesColimitIso_inv]"
"## Tactic State A:\nJ : Type u\ninst✝⁵ : Category.{v, u} J\nC : Type u₁\ninst✝⁴ : Category.{v₁, u₁} C\nD : Type u₂\ninst✝³ : Category.{v₂, u₂} D\nobj✝² : Type u_1\ninst✝² : Category.{u_2, u_1} obj✝²\nF : J ⥤ obj✝²\nobj✝¹ : Type u_3\ninst✝¹ : Category.{u_4, u_3} obj✝¹\nG : obj✝² ⥤ obj✝¹\nobj✝ : Type u_5\ninst✝ : Category.{u_6, u_5} obj✝\nH : obj✝¹ ⥤ obj✝\nj : J\n⊢ colimit.ι ((F ⋙ G) ⋙ H) j ≫ sorry = H.map (G.map (colimit.ι F j))\n## Tactic State B:\nJ : Type u\ninst✝⁵ : Category.{v, u} J\nC : Type u₁\ninst✝⁴ : Category.{v₁, u₁} C\nD : Type u₂\ninst✝³ : Category.{v₂, u₂} D\nobj✝² : Type u_1\ninst✝² : Category.{u_2, u_1} obj✝²\nF : J ⥤ obj✝²\nobj✝¹ : Type u_3\ninst✝¹ : Category.{u_4, u_3} obj✝¹\nG : obj✝² ⥤ obj✝¹\nobj✝ : Type u_5\ninst✝ : Category.{u_6, u_5} obj✝\nH : obj✝¹ ⥤ obj✝\nj : J\n⊢ colimit.ι ((F ⋙ G) ⋙ H) j ≫ sorry = H.map (G.map (colimit.ι F j))\n## Action:\n  fail_if_success rw [ι_preservesColimitIso_inv (G ⋙ H)]"
"## Tactic State A:\nJ : Type u\ninst✝⁵ : Category.{v, u} J\nC : Type u₁\ninst✝⁴ : Category.{v₁, u₁} C\nD : Type u₂\ninst✝³ : Category.{v₂, u₂} D\nobj✝² : Type u_1\ninst✝² : Category.{u_2, u_1} obj✝²\nF : J ⥤ obj✝²\nobj✝¹ : Type u_3\ninst✝¹ : Category.{u_4, u_3} obj✝¹\nG : obj✝² ⥤ obj✝¹\nobj✝ : Type u_5\ninst✝ : Category.{u_6, u_5} obj✝\nH : obj✝¹ ⥤ obj✝\nj : J\n⊢ colimit.ι ((F ⋙ G) ⋙ H) j ≫ sorry = H.map (G.map (colimit.ι F j))\n## Tactic State B:\nJ : Type u\ninst✝⁵ : Category.{v, u} J\nC : Type u₁\ninst✝⁴ : Category.{v₁, u₁} C\nD : Type u₂\ninst✝³ : Category.{v₂, u₂} D\nobj✝² : Type u_1\ninst✝² : Category.{u_2, u_1} obj✝²\nF : J ⥤ obj✝²\nobj✝¹ : Type u_3\ninst✝¹ : Category.{u_4, u_3} obj✝¹\nG : obj✝² ⥤ obj✝¹\nobj✝ : Type u_5\ninst✝ : Category.{u_6, u_5} obj✝\nH : obj✝¹ ⥤ obj✝\nj : J\n⊢ colimit.ι (F ⋙ G ⋙ H) j ≫ sorry = H.map (G.map (colimit.ι F j))\n## Action:\n  fail_if_success simp only [ι_preservesColimitIso_inv]"
"## Tactic State A:\nJ : Type u\ninst✝⁵ : Category.{v, u} J\nC : Type u₁\ninst✝⁴ : Category.{v₁, u₁} C\nD : Type u₂\ninst✝³ : Category.{v₂, u₂} D\nobj✝² : Type u_1\ninst✝² : Category.{u_2, u_1} obj✝²\nF : J ⥤ obj✝²\nobj✝¹ : Type u_3\ninst✝¹ : Category.{u_4, u_3} obj✝¹\nG : obj✝² ⥤ obj✝¹\nobj✝ : Type u_5\ninst✝ : Category.{u_6, u_5} obj✝\nH : obj✝¹ ⥤ obj✝\nj : J\n⊢ colimit.ι (F ⋙ G ⋙ H) j ≫ sorry = H.map (G.map (colimit.ι F j))\n## Tactic State B:\nJ : Type u\ninst✝⁵ : Category.{v, u} J\nC : Type u₁\ninst✝⁴ : Category.{v₁, u₁} C\nD : Type u₂\ninst✝³ : Category.{v₂, u₂} D\nobj✝² : Type u_1\ninst✝² : Category.{u_2, u_1} obj✝²\nF : J ⥤ obj✝²\nobj✝¹ : Type u_3\ninst✝¹ : Category.{u_4, u_3} obj✝¹\nG : obj✝² ⥤ obj✝¹\nobj✝ : Type u_5\ninst✝ : Category.{u_6, u_5} obj✝\nH : obj✝¹ ⥤ obj✝\nj : J\n⊢ colimit.ι (F ⋙ G ⋙ H) j ≫ sorry () = H.map (G.map (colimit.ι F j))\n## Action:\n"
"## Tactic State A:\nC : Type u\ninst✝¹ : Category.{v, u} C\ninst✝ : MonoidalCategory C\nX₁ X₂ : C\n⊢ ((λ_ (𝟙_ C)).inv ⊗ 𝟙 (X₁ ⊗ X₂)) ≫ (α_ (𝟙_ C) (𝟙_ C) (X₁ ⊗ X₂)).hom ≫ (𝟙 (𝟙_ C) ⊗ (α_ (𝟙_ C) X₁ X₂).inv) =\n    𝟙 (𝟙_ C) ⊗ (λ_ X₁).inv ⊗ 𝟙 X₂\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  pure_coherence"
"## Tactic State A:\nC : Type u\ninst✝¹ : Category.{v, u} C\ninst✝ : MonoidalCategory C\nY Z : C\nf : Y ⟶ Z\ng : 𝟙_ C ⊗ Y ⟶ Z\nw : false = true\n⊢ (λ_ Y).hom ≫ f = g\n## Tactic State B:\nC : Type u\ninst✝¹ : Category.{v, u} C\ninst✝ : MonoidalCategory C\nY Z : C\nf : Y ⟶ Z\ng : 𝟙_ C ⊗ Y ⟶ Z\nw : false = true\n⊢ (𝟙 (𝟙_ C ⊗ Y) ≫ (λ_ Y).hom) ≫ f = 𝟙 (𝟙_ C ⊗ Y) ≫ g\n## Action:\n  liftable_prefixes"
"## Tactic State A:\nC : Type u\ninst✝¹ : Category.{v, u} C\ninst✝ : MonoidalCategory C\nY Z : C\nf : Y ⟶ Z\ng : 𝟙_ C ⊗ Y ⟶ Z\nw : false = true\n⊢ (𝟙 (𝟙_ C ⊗ Y) ≫ (λ_ Y).hom) ≫ f = 𝟙 (𝟙_ C ⊗ Y) ≫ g\n## Tactic State B:\nC : Type u\ninst✝¹ : Category.{v, u} C\ninst✝ : MonoidalCategory C\nY Z : C\nf : Y ⟶ Z\ng : 𝟙_ C ⊗ Y ⟶ Z\nw : false = true\n⊢ (𝟙 (𝟙_ C ⊗ Y) ≫ (λ_ Y).hom) ≫ f = 𝟙 (𝟙_ C ⊗ Y) ≫ g\n## Action:\n  guard_target = (𝟙 _ ≫ (λ_ _).hom) ≫ f = (𝟙 _) ≫ g"
"## Tactic State A:\nC : Type u\ninst✝¹ : Category.{v, u} C\ninst✝ : MonoidalCategory C\nY Z : C\nf : Y ⟶ Z\ng : 𝟙_ C ⊗ Y ⟶ Z\nw : false = true\n⊢ (𝟙 (𝟙_ C ⊗ Y) ≫ (λ_ Y).hom) ≫ f = 𝟙 (𝟙_ C ⊗ Y) ≫ g\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  cases w"
"## Tactic State A:\nC : Type u\ninst✝¹ : Category.{v, u} C\ninst✝ : MonoidalCategory C\nf : 𝟙_ C ⟶ 𝟙_ C ⊗ 𝟙_ C\n⊢ f ≫ (λ_ (𝟙_ C)).hom = f ≫ (ρ_ (𝟙_ C)).hom\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  coherence"
"## Tactic State A:\nC : Type u\ninst✝¹ : Category.{v, u} C\ninst✝ : MonoidalCategory C\nf : 𝟙_ C ⟶ 𝟙_ C ⊗ 𝟙_ C\n⊢ (λ_ (𝟙_ C)).hom ≫ f ≫ (λ_ (𝟙_ C)).hom = (ρ_ (𝟙_ C)).hom ≫ f ≫ (ρ_ (𝟙_ C)).hom\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  coherence"
"## Tactic State A:\nC : Type u\ninst✝¹ : Category.{v, u} C\ninst✝ : MonoidalCategory C\nU : C\nf : U ⟶ 𝟙_ C\n⊢ f ≫ (ρ_ (𝟙_ C)).inv ≫ (λ_ (𝟙_ C)).hom = f\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  coherence"
"## Tactic State A:\nC : Type u\ninst✝¹ : Category.{v, u} C\ninst✝ : MonoidalCategory C\nW X Y Z : C\nf : W ⊗ X ⊗ Y ⊗ Z ⟶ ((W ⊗ X) ⊗ Y) ⊗ Z\n⊢ ((α_ W X Y).hom ⊗ 𝟙 Z) ≫\n      (α_ W (X ⊗ Y) Z).hom ≫ (𝟙 W ⊗ (α_ X Y Z).hom) ≫ f ≫ (α_ (W ⊗ X) Y Z).hom ≫ (α_ W X (Y ⊗ Z)).hom =\n    (α_ (W ⊗ X) Y Z).hom ≫\n      (α_ W X (Y ⊗ Z)).hom ≫ f ≫ ((α_ W X Y).hom ⊗ 𝟙 Z) ≫ (α_ W (X ⊗ Y) Z).hom ≫ (𝟙 W ⊗ (α_ X Y Z).hom)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  coherence"
"## Tactic State A:\nC : Type u\ninst✝¹ : Category.{v, u} C\ninst✝ : MonoidalCategory C\nU V W X Y : C\nf : U ⟶ V ⊗ W ⊗ X\ng : (V ⊗ W) ⊗ X ⟶ Y\n⊢ f ⊗≫ g = f ≫ (α_ V W X).inv ≫ g\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  coherence"
"## Tactic State A:\nC : Type u\ninst✝¹ : Category.{v, u} C\ninst✝ : MonoidalCategory C\nX Y Z W : C\n⊢ (𝟙 X ⊗ (α_ Y Z W).hom) ≫ (α_ X Y (Z ⊗ W)).inv ≫ (α_ (X ⊗ Y) Z W).inv = (α_ X (Y ⊗ Z) W).inv ≫ ((α_ X Y Z).inv ⊗ 𝟙 W)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  coherence"
"## Tactic State A:\nC : Type u\ninst✝¹ : Category.{v, u} C\ninst✝ : MonoidalCategory C\nX Y : C\n⊢ (𝟙 X ⊗ (λ_ Y).inv) ≫ (α_ X (𝟙_ C) Y).inv = (ρ_ X).inv ⊗ 𝟙 Y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  coherence"
"## Tactic State A:\nC : Type u\ninst✝¹ : Category.{v, u} C\ninst✝ : MonoidalCategory C\nX Y : C\nf : 𝟙_ C ⟶ X\ng : X ⟶ Y\n_w : false = true\n⊢ (λ_ (𝟙_ C)).hom ≫ f ≫ 𝟙 X ≫ g = (ρ_ (𝟙_ C)).hom ≫ f ≫ g\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  coherence"
"## Tactic State A:\nC : Type u\ninst✝¹ : Category.{v, u} C\ninst✝ : MonoidalCategory C\nX₁ X₂ : C\n⊢ (α_ (𝟙_ C) (𝟙_ C) (X₁ ⊗ X₂)).hom ≫\n      (𝟙 (𝟙_ C) ⊗ (α_ (𝟙_ C) X₁ X₂).inv) ≫\n        (𝟙 (𝟙_ C) ⊗ (λ_ X₁).hom ≫ (ρ_ X₁).inv ⊗ 𝟙 X₂) ≫\n          (𝟙 (𝟙_ C) ⊗ (α_ X₁ (𝟙_ C) X₂).hom) ≫\n            (α_ (𝟙_ C) X₁ (𝟙_ C ⊗ X₂)).inv ≫\n              ((λ_ X₁).hom ≫ (ρ_ X₁).inv ⊗ 𝟙 (𝟙_ C ⊗ X₂)) ≫\n                (α_ X₁ (𝟙_ C) (𝟙_ C ⊗ X₂)).hom ≫\n                  (𝟙 X₁ ⊗ 𝟙 (𝟙_ C) ⊗ (λ_ X₂).hom ≫ (ρ_ X₂).inv) ≫\n                    (𝟙 X₁ ⊗ (α_ (𝟙_ C) X₂ (𝟙_ C)).inv) ≫\n                      (𝟙 X₁ ⊗ (λ_ X₂).hom ≫ (ρ_ X₂).inv ⊗ 𝟙 (𝟙_ C)) ≫\n                        (𝟙 X₁ ⊗ (α_ X₂ (𝟙_ C) (𝟙_ C)).hom) ≫ (α_ X₁ X₂ (𝟙_ C ⊗ 𝟙_ C)).inv =\n    (((λ_ (𝟙_ C)).hom ⊗ 𝟙 (X₁ ⊗ X₂)) ≫ (λ_ (X₁ ⊗ X₂)).hom ≫ (ρ_ (X₁ ⊗ X₂)).inv) ≫ (𝟙 (X₁ ⊗ X₂) ⊗ (λ_ (𝟙_ C)).inv)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  coherence"
"## Tactic State A:\nC : Type u\ninst✝² : Category.{v, u} C\ninst✝¹ : MonoidalCategory C\nB : Type u\ninst✝ : Bicategory B\na b c d e : B\nf : a ⟶ b\ng : b ⟶ c\nh : c ⟶ d\n⊢ (α_ f g h).inv ≫ (α_ f g h).hom = 𝟙 (f ≫ g ≫ h)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  bicategory_coherence"
"## Tactic State A:\nC : Type u\ninst✝² : Category.{v, u} C\ninst✝¹ : MonoidalCategory C\nB : Type u\ninst✝ : Bicategory B\na b c d e : B\nf : a ⟶ b\ng : b ⟶ c\nh : c ⟶ d\ni : d ⟶ e\n⊢ f ◁ (α_ g h i).hom ≫ (α_ f g (h ≫ i)).inv ≫ (α_ (f ≫ g) h i).inv = (α_ f (g ≫ h) i).inv ≫ (α_ f g h).inv ▷ i\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  bicategory_coherence"
"## Tactic State A:\nC : Type u\ninst✝² : Category.{v, u} C\ninst✝¹ : MonoidalCategory C\nB : Type u\ninst✝ : Bicategory B\na b c d e : B\nf : a ⟶ b\ng : b ⟶ c\n⊢ sorry ≫ (α_ f (𝟙 b) g).inv = sorry\n## Tactic State B:\nC : Type u\ninst✝² : Category.{v, u} C\ninst✝¹ : MonoidalCategory C\nB : Type u\ninst✝ : Bicategory B\na b c d e : B\nf : a ⟶ b\ng : b ⟶ c\n⊢ sorry ≫ (α_ f (𝟙 b) g).inv = sorry\n## Action:\n  bicategory_coherence"
"## Tactic State A:\nC : Type u\ninst✝² : Category.{v, u} C\ninst✝¹ : MonoidalCategory C\nB : Type u\ninst✝ : Bicategory B\na b c d e : B\n⊢ 𝟙 (𝟙 a ≫ 𝟙 a) ≫ sorry = 𝟙 (𝟙 a ≫ 𝟙 a) ≫ sorry\n## Tactic State B:\nC : Type u\ninst✝² : Category.{v, u} C\ninst✝¹ : MonoidalCategory C\nB : Type u\ninst✝ : Bicategory B\na b c d e : B\n⊢ 𝟙 (𝟙 a ≫ 𝟙 a) ≫ sorry = 𝟙 (𝟙 a ≫ 𝟙 a) ≫ sorry\n## Action:\n  bicategory_coherence"
"## Tactic State A:\nC : Type u\ninst✝² : Category.{v, u} C\ninst✝¹ : MonoidalCategory C\nB : Type u\ninst✝ : Bicategory B\na b c d e : B\nf g : a ⟶ a\nη : 𝟙 a ⟶ f\nθ : f ⟶ g\nw : false = true\n⊢ sorry ≫ η ≫ θ = sorry ≫ η ≫ θ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  coherence"
"## Tactic State A:\nC : Type u\ninst✝² : Category.{v, u} C\ninst✝¹ : MonoidalCategory C\nB : Type u\ninst✝ : Bicategory B\na b c d e : B\nf₁ : a ⟶ b\nf₂ : b ⟶ c\n⊢ (α_ (𝟙 a) (𝟙 a) (f₁ ≫ f₂)).hom ≫\n      𝟙 a ◁ (α_ (𝟙 a) f₁ f₂).inv ≫\n        sorry ≫\n          𝟙 a ◁ (α_ f₁ (𝟙 b) f₂).hom ≫\n            (α_ (𝟙 a) f₁ (𝟙 b ≫ f₂)).inv ≫\n              sorry ≫\n                (α_ f₁ (𝟙 b) (𝟙 b ≫ f₂)).hom ≫\n                  sorry ≫\n                    f₁ ◁ (α_ (𝟙 b) f₂ (𝟙 c)).inv ≫ sorry ≫ f₁ ◁ (α_ f₂ (𝟙 c) (𝟙 c)).hom ≫ (α_ f₁ f₂ (𝟙 c ≫ 𝟙 c)).inv =\n    (sorry ≫ sorry ≫ sorry) ≫ sorry\n## Tactic State B:\nC : Type u\ninst✝² : Category.{v, u} C\ninst✝¹ : MonoidalCategory C\nB : Type u\ninst✝ : Bicategory B\na b c d e : B\nf₁ : a ⟶ b\nf₂ : b ⟶ c\n⊢ (α_ (𝟙 a) (𝟙 a) (f₁ ≫ f₂)).hom ≫\n      𝟙 a ◁ (α_ (𝟙 a) f₁ f₂).inv ≫\n        sorry ≫\n          𝟙 a ◁ (α_ f₁ (𝟙 b) f₂).hom ≫\n            (α_ (𝟙 a) f₁ (𝟙 b ≫ f₂)).inv ≫\n              sorry ≫\n                (α_ f₁ (𝟙 b) (𝟙 b ≫ f₂)).hom ≫\n                  sorry ≫\n                    f₁ ◁ (α_ (𝟙 b) f₂ (𝟙 c)).inv ≫ sorry ≫ f₁ ◁ (α_ f₂ (𝟙 c) (𝟙 c)).hom ≫ (α_ f₁ f₂ (𝟙 c ≫ 𝟙 c)).inv =\n    (sorry ≫ sorry ≫ sorry) ≫ sorry\n## Action:\n  pure_coherence"
"## Tactic State A:\nC : Type u_1\ninst✝ : Category.{u_2, u_1} C\nM N K : C\nf : M ⟶ N\ng : N ⟶ K\nh : M ⟶ K\nw : f ≫ g = h\n⊢ f ≫ 𝟙 N ≫ g = h\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  simp [w]"
"## Tactic State A:\nC : Type u_1\ninst✝ : Category.{u_2, u_1} C\nM N K : C\nf : M ⟶ N\ng : N ⟶ K\nh : M ⟶ K\nw : f ≫ g = h\n⊢ f ≫ 𝟙 N ≫ g = h\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  simp [w]"
"## Tactic State A:\nM N K : Type\nf : M ⟶ N\ng : N ⟶ K\nh : M ⟶ K\nw : f ≫ g = h\nx : M\n⊢ g (f x) = h x\n## Tactic State B:\nM N K : Type\nf : M ⟶ N\ng : N ⟶ K\nh : M ⟶ K\nw : f ≫ g = h\nx : M\nthis : ∀ (x : M), g (f x) = h x\n⊢ g (f x) = h x\n## Action:\n  have := elementwise_of% w"
"## Tactic State A:\nM N K : Type\nf : M ⟶ N\ng : N ⟶ K\nh : M ⟶ K\nw : f ≫ g = h\nx : M\nthis : ∀ (x : M), g (f x) = h x\n⊢ g (f x) = h x\n## Tactic State B:\nM N K : Type\nf : M ⟶ N\ng : N ⟶ K\nh : M ⟶ K\nw : f ≫ g = h\nx : M\nthis : ∀ (x : M), g (f x) = h x\n⊢ g (f x) = h x\n## Action:\n  guard_hyp this : ∀ (x : M), g (f x) = h x"
"## Tactic State A:\nM N K : Type\nf : M ⟶ N\ng : N ⟶ K\nh : M ⟶ K\nw : f ≫ g = h\nx : M\nthis : ∀ (x : M), g (f x) = h x\n⊢ g (f x) = h x\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact this x"
"## Tactic State A:\nM N K : MonCat\nf : M ⟶ N\ng : N ⟶ K\nh : M ⟶ K\nw : f ≫ g = h\nm : ↑M\n⊢ (ConcreteCategory.hom g) ((ConcreteCategory.hom f) m) = (ConcreteCategory.hom h) m\n## Tactic State B:\nM N K : MonCat\nf : M ⟶ N\ng : N ⟶ K\nh : M ⟶ K\nm : ↑M\nw : ∀ (x : ToType M), (ConcreteCategory.hom g) ((ConcreteCategory.hom f) x) = (ConcreteCategory.hom h) x\n⊢ (ConcreteCategory.hom g) ((ConcreteCategory.hom f) m) = (ConcreteCategory.hom h) m\n## Action:\n  replace w := elementwise_of% w"
"## Tactic State A:\nM N K : MonCat\nf : M ⟶ N\ng : N ⟶ K\nh : M ⟶ K\nm : ↑M\nw : ∀ (x : ToType M), (ConcreteCategory.hom g) ((ConcreteCategory.hom f) x) = (ConcreteCategory.hom h) x\n⊢ (ConcreteCategory.hom g) ((ConcreteCategory.hom f) m) = (ConcreteCategory.hom h) m\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  apply w"
"## Tactic State A:\nα β : Type\nf g : α ⟶ β\nw : f = g\na : α\n⊢ f a = g a\n## Tactic State B:\nα β : Type\nf g : α ⟶ β\nw : f = g\na : α\n⊢ f a = g a\n## Action:\n  replace w := elementwise_of% w"
"## Tactic State A:\nα β : Type\nf g : α ⟶ β\nw : f ≫ 𝟙 β = g\na : α\n⊢ f a = g a\n## Tactic State B:\nα β : Type\nf g : α ⟶ β\na : α\nw : ∀ (x : α), f x = g x\n⊢ f a = g a\n## Action:\n  replace w := elementwise_of% w"
"## Tactic State A:\nα β : Type\nf g : α ⟶ β\na : α\nw : ∀ (x : α), f x = g x\n⊢ f a = g a\n## Tactic State B:\nα β : Type\nf g : α ⟶ β\na : α\nw : ∀ (x : α), f x = g x\n⊢ f a = g a\n## Action:\n  guard_hyp w : ∀ (x : α), f x = g x"
"## Tactic State A:\nα β : Type\nf g : α ⟶ β\na : α\nw : ∀ (x : α), f x = g x\n⊢ f a = g a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rw [w]"
"## Tactic State A:\nC : Type u_2\ninst✝ : Category.{u_5, u_2} C\nM N K : C\nf : M ⟶ N\ng : N ⟶ K\nh : M ⟶ K\nw : f ≫ g = h\n⊢ f ≫ 𝟙 N ≫ g = h\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  simp [w]"
"## Tactic State A:\nC : Type u_2\ninst✝ : Category.{u_5, u_2} C\nM N K : C\nf : M ⟶ N\ng : N ⟶ K\nh : M ⟶ K\nw : f ≫ g = h\n⊢ f ≫ 𝟙 N ≫ g = h\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  simp [w]"
"## Tactic State A:\nC : Type u_2\ninst✝² : Category.{u_5, u_2} C\nFC : C → C → Type u_6\nCC : C → Type u_7\ninst✝¹ : (X Y : C) → FunLike (FC X Y) (CC X) (CC Y)\ninst✝ : ConcreteCategory C FC\nM N K : C\nf : M ⟶ N\ng : N ⟶ K\nh : M ⟶ K\nw : f ≫ g = h\nx : ToType M\n⊢ (ConcreteCategory.hom g) ((ConcreteCategory.hom f) x) = (ConcreteCategory.hom h) x\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  apply foo_apply w"
"## Tactic State A:\nC✝ : Type u_1\ninst✝² : Category.{?u.309, u_1} C✝\nX : C✝\nFC✝ : C✝ → C✝ → Type ?u.318\nCC✝ : C✝ → Type ?u.323\ninst✝¹ : (X Y : C✝) → FunLike (FC✝ X Y) (CC✝ X) (CC✝ Y)\nC : Type u_2\nFC : C → C → Type u_3\nCC : C → Type u_4\ninst✝ : (X Y : C) → FunLike (FC X Y) (CC X) (CC Y)\nM N K : Type\nf : M ⟶ N\ng : N ⟶ K\nh : M ⟶ K\nw : f ≫ g = h\nx : M\n⊢ g (f x) = h x\n## Tactic State B:\nC✝ : Type u_1\ninst✝² : Category.{?u.309, u_1} C✝\nX : C✝\nFC✝ : C✝ → C✝ → Type ?u.318\nCC✝ : C✝ → Type ?u.323\ninst✝¹ : (X Y : C✝) → FunLike (FC✝ X Y) (CC✝ X) (CC✝ Y)\nC : Type u_2\nFC : C → C → Type u_3\nCC : C → Type u_4\ninst✝ : (X Y : C) → FunLike (FC X Y) (CC X) (CC Y)\nM N K : Type\nf : M ⟶ N\ng : N ⟶ K\nh : M ⟶ K\nw : f ≫ g = h\nx : M\nthis : ∀ (x : M), g (f x) = h x\n⊢ g (f x) = h x\n## Action:\n  have := elementwise_of% w"
"## Tactic State A:\nC✝ : Type u_1\ninst✝² : Category.{?u.309, u_1} C✝\nX : C✝\nFC✝ : C✝ → C✝ → Type ?u.318\nCC✝ : C✝ → Type ?u.323\ninst✝¹ : (X Y : C✝) → FunLike (FC✝ X Y) (CC✝ X) (CC✝ Y)\nC : Type u_2\nFC : C → C → Type u_3\nCC : C → Type u_4\ninst✝ : (X Y : C) → FunLike (FC X Y) (CC X) (CC Y)\nM N K : Type\nf : M ⟶ N\ng : N ⟶ K\nh : M ⟶ K\nw : f ≫ g = h\nx : M\nthis : ∀ (x : M), g (f x) = h x\n⊢ g (f x) = h x\n## Tactic State B:\nC✝ : Type u_1\ninst✝² : Category.{?u.309, u_1} C✝\nX : C✝\nFC✝ : C✝ → C✝ → Type ?u.318\nCC✝ : C✝ → Type ?u.323\ninst✝¹ : (X Y : C✝) → FunLike (FC✝ X Y) (CC✝ X) (CC✝ Y)\nC : Type u_2\nFC : C → C → Type u_3\nCC : C → Type u_4\ninst✝ : (X Y : C) → FunLike (FC X Y) (CC X) (CC Y)\nM N K : Type\nf : M ⟶ N\ng : N ⟶ K\nh : M ⟶ K\nw : f ≫ g = h\nx : M\nthis : ∀ (x : M), g (f x) = h x\n⊢ g (f x) = h x\n## Action:\n  guard_hyp this : ∀ (x : M), g (f x) = h x"
"## Tactic State A:\nC✝ : Type u_1\ninst✝² : Category.{?u.309, u_1} C✝\nX : C✝\nFC✝ : C✝ → C✝ → Type ?u.318\nCC✝ : C✝ → Type ?u.323\ninst✝¹ : (X Y : C✝) → FunLike (FC✝ X Y) (CC✝ X) (CC✝ Y)\nC : Type u_2\nFC : C → C → Type u_3\nCC : C → Type u_4\ninst✝ : (X Y : C) → FunLike (FC X Y) (CC X) (CC Y)\nM N K : Type\nf : M ⟶ N\ng : N ⟶ K\nh : M ⟶ K\nw : f ≫ g = h\nx : M\nthis : ∀ (x : M), g (f x) = h x\n⊢ g (f x) = h x\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact this x"
"## Tactic State A:\nC✝ : Type u_1\ninst✝⁵ : Category.{?u.309, u_1} C✝\nX : C✝\nFC✝¹ : C✝ → C✝ → Type ?u.318\nCC✝¹ : C✝ → Type ?u.323\ninst✝⁴ : (X Y : C✝) → FunLike (FC✝¹ X Y) (CC✝¹ X) (CC✝¹ Y)\nC : Type u_2\nFC✝ : C → C → Type u_3\nCC✝ : C → Type u_4\ninst✝³ : (X Y : C) → FunLike (FC✝ X Y) (CC✝ X) (CC✝ Y)\ninst✝² : Category.{u_5, u_2} C\nFC : C → C → Type u_6\nCC : C → Type u_7\ninst✝¹ : (X Y : C) → FunLike (FC X Y) (CC X) (CC Y)\ninst✝ : ConcreteCategory C FC\nM N K : C\nf : M ⟶ N\ng : N ⟶ K\nh : M ⟶ K\nw : f ≫ g = h\nx : ToType M\n⊢ (ConcreteCategory.hom g) ((ConcreteCategory.hom f) x) = (ConcreteCategory.hom h) x\n## Tactic State B:\nC✝ : Type u_1\ninst✝⁵ : Category.{?u.309, u_1} C✝\nX : C✝\nFC✝¹ : C✝ → C✝ → Type ?u.318\nCC✝¹ : C✝ → Type ?u.323\ninst✝⁴ : (X Y : C✝) → FunLike (FC✝¹ X Y) (CC✝¹ X) (CC✝¹ Y)\nC : Type u_2\nFC✝ : C → C → Type u_3\nCC✝ : C → Type u_4\ninst✝³ : (X Y : C) → FunLike (FC✝ X Y) (CC✝ X) (CC✝ Y)\ninst✝² : Category.{u_5, u_2} C\nFC : C → C → Type u_6\nCC : C → Type u_7\ninst✝¹ : (X Y : C) → FunLike (FC X Y) (CC X) (CC Y)\ninst✝ : ConcreteCategory C FC\nM N K : C\nf : M ⟶ N\ng : N ⟶ K\nh : M ⟶ K\nw : f ≫ g = h\nx : ToType M\nthis : ∀ (x : ToType M), (ConcreteCategory.hom g) ((ConcreteCategory.hom f) x) = (ConcreteCategory.hom h) x\n⊢ (ConcreteCategory.hom g) ((ConcreteCategory.hom f) x) = (ConcreteCategory.hom h) x\n## Action:\n  have := elementwise_of% w"
"## Tactic State A:\nC✝ : Type u_1\ninst✝⁵ : Category.{?u.309, u_1} C✝\nX : C✝\nFC✝¹ : C✝ → C✝ → Type ?u.318\nCC✝¹ : C✝ → Type ?u.323\ninst✝⁴ : (X Y : C✝) → FunLike (FC✝¹ X Y) (CC✝¹ X) (CC✝¹ Y)\nC : Type u_2\nFC✝ : C → C → Type u_3\nCC✝ : C → Type u_4\ninst✝³ : (X Y : C) → FunLike (FC✝ X Y) (CC✝ X) (CC✝ Y)\ninst✝² : Category.{u_5, u_2} C\nFC : C → C → Type u_6\nCC : C → Type u_7\ninst✝¹ : (X Y : C) → FunLike (FC X Y) (CC X) (CC Y)\ninst✝ : ConcreteCategory C FC\nM N K : C\nf : M ⟶ N\ng : N ⟶ K\nh : M ⟶ K\nw : f ≫ g = h\nx : ToType M\nthis : ∀ (x : ToType M), (ConcreteCategory.hom g) ((ConcreteCategory.hom f) x) = (ConcreteCategory.hom h) x\n⊢ (ConcreteCategory.hom g) ((ConcreteCategory.hom f) x) = (ConcreteCategory.hom h) x\n## Tactic State B:\nC✝ : Type u_1\ninst✝⁵ : Category.{?u.309, u_1} C✝\nX : C✝\nFC✝¹ : C✝ → C✝ → Type ?u.318\nCC✝¹ : C✝ → Type ?u.323\ninst✝⁴ : (X Y : C✝) → FunLike (FC✝¹ X Y) (CC✝¹ X) (CC✝¹ Y)\nC : Type u_2\nFC✝ : C → C → Type u_3\nCC✝ : C → Type u_4\ninst✝³ : (X Y : C) → FunLike (FC✝ X Y) (CC✝ X) (CC✝ Y)\ninst✝² : Category.{u_5, u_2} C\nFC : C → C → Type u_6\nCC : C → Type u_7\ninst✝¹ : (X Y : C) → FunLike (FC X Y) (CC X) (CC Y)\ninst✝ : ConcreteCategory C FC\nM N K : C\nf : M ⟶ N\ng : N ⟶ K\nh : M ⟶ K\nw : f ≫ g = h\nx : ToType M\nthis : ∀ (x : ToType M), (ConcreteCategory.hom g) ((ConcreteCategory.hom f) x) = (ConcreteCategory.hom h) x\n⊢ (ConcreteCategory.hom g) ((ConcreteCategory.hom f) x) = (ConcreteCategory.hom h) x\n## Action:\n  guard_hyp this : ∀ (x : ToType M), g (f x) = h x"
"## Tactic State A:\nC✝ : Type u_1\ninst✝⁵ : Category.{?u.309, u_1} C✝\nX : C✝\nFC✝¹ : C✝ → C✝ → Type ?u.318\nCC✝¹ : C✝ → Type ?u.323\ninst✝⁴ : (X Y : C✝) → FunLike (FC✝¹ X Y) (CC✝¹ X) (CC✝¹ Y)\nC : Type u_2\nFC✝ : C → C → Type u_3\nCC✝ : C → Type u_4\ninst✝³ : (X Y : C) → FunLike (FC✝ X Y) (CC✝ X) (CC✝ Y)\ninst✝² : Category.{u_5, u_2} C\nFC : C → C → Type u_6\nCC : C → Type u_7\ninst✝¹ : (X Y : C) → FunLike (FC X Y) (CC X) (CC Y)\ninst✝ : ConcreteCategory C FC\nM N K : C\nf : M ⟶ N\ng : N ⟶ K\nh : M ⟶ K\nw : f ≫ g = h\nx : ToType M\nthis : ∀ (x : ToType M), (ConcreteCategory.hom g) ((ConcreteCategory.hom f) x) = (ConcreteCategory.hom h) x\n⊢ (ConcreteCategory.hom g) ((ConcreteCategory.hom f) x) = (ConcreteCategory.hom h) x\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact this x"
"## Tactic State A:\nC✝ : Type u_1\ninst✝² : Category.{?u.309, u_1} C✝\nX : C✝\nFC✝ : C✝ → C✝ → Type ?u.318\nCC✝ : C✝ → Type ?u.323\ninst✝¹ : (X Y : C✝) → FunLike (FC✝ X Y) (CC✝ X) (CC✝ Y)\nC : Type u_2\nFC : C → C → Type u_3\nCC : C → Type u_4\ninst✝ : (X Y : C) → FunLike (FC X Y) (CC X) (CC Y)\nM N K : MonCat\nf : M ⟶ N\ng : N ⟶ K\nh : M ⟶ K\nw : f ≫ g = h\nm : ↑M\n⊢ (ConcreteCategory.hom g) ((ConcreteCategory.hom f) m) = (ConcreteCategory.hom h) m\n## Tactic State B:\nC✝ : Type u_1\ninst✝² : Category.{?u.309, u_1} C✝\nX : C✝\nFC✝ : C✝ → C✝ → Type ?u.318\nCC✝ : C✝ → Type ?u.323\ninst✝¹ : (X Y : C✝) → FunLike (FC✝ X Y) (CC✝ X) (CC✝ Y)\nC : Type u_2\nFC : C → C → Type u_3\nCC : C → Type u_4\ninst✝ : (X Y : C) → FunLike (FC X Y) (CC X) (CC Y)\nM N K : MonCat\nf : M ⟶ N\ng : N ⟶ K\nh : M ⟶ K\nm : ↑M\nw : ∀ (x : ToType M), (ConcreteCategory.hom g) ((ConcreteCategory.hom f) x) = (ConcreteCategory.hom h) x\n⊢ (ConcreteCategory.hom g) ((ConcreteCategory.hom f) m) = (ConcreteCategory.hom h) m\n## Action:\n  replace w := elementwise_of% w"
"## Tactic State A:\nC✝ : Type u_1\ninst✝² : Category.{?u.309, u_1} C✝\nX : C✝\nFC✝ : C✝ → C✝ → Type ?u.318\nCC✝ : C✝ → Type ?u.323\ninst✝¹ : (X Y : C✝) → FunLike (FC✝ X Y) (CC✝ X) (CC✝ Y)\nC : Type u_2\nFC : C → C → Type u_3\nCC : C → Type u_4\ninst✝ : (X Y : C) → FunLike (FC X Y) (CC X) (CC Y)\nM N K : MonCat\nf : M ⟶ N\ng : N ⟶ K\nh : M ⟶ K\nm : ↑M\nw : ∀ (x : ToType M), (ConcreteCategory.hom g) ((ConcreteCategory.hom f) x) = (ConcreteCategory.hom h) x\n⊢ (ConcreteCategory.hom g) ((ConcreteCategory.hom f) m) = (ConcreteCategory.hom h) m\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  apply w"
"## Tactic State A:\nC✝ : Type u_1\ninst✝² : Category.{?u.309, u_1} C✝\nX : C✝\nFC✝ : C✝ → C✝ → Type ?u.318\nCC✝ : C✝ → Type ?u.323\ninst✝¹ : (X Y : C✝) → FunLike (FC✝ X Y) (CC✝ X) (CC✝ Y)\nC : Type u_2\nFC : C → C → Type u_3\nCC : C → Type u_4\ninst✝ : (X Y : C) → FunLike (FC X Y) (CC X) (CC Y)\nα β : Type\nf g : α ⟶ β\nw : f = g\na : α\n⊢ f a = g a\n## Tactic State B:\nC✝ : Type u_1\ninst✝² : Category.{?u.309, u_1} C✝\nX : C✝\nFC✝ : C✝ → C✝ → Type ?u.318\nCC✝ : C✝ → Type ?u.323\ninst✝¹ : (X Y : C✝) → FunLike (FC✝ X Y) (CC✝ X) (CC✝ Y)\nC : Type u_2\nFC : C → C → Type u_3\nCC : C → Type u_4\ninst✝ : (X Y : C) → FunLike (FC X Y) (CC X) (CC Y)\nα β : Type\nf g : α ⟶ β\nw : f = g\na : α\n⊢ f a = g a\n## Action:\n  replace w := elementwise_of% w"
"## Tactic State A:\nC✝ : Type u_1\ninst✝² : Category.{?u.309, u_1} C✝\nX : C✝\nFC✝ : C✝ → C✝ → Type ?u.318\nCC✝ : C✝ → Type ?u.323\ninst✝¹ : (X Y : C✝) → FunLike (FC✝ X Y) (CC✝ X) (CC✝ Y)\nC : Type u_2\nFC : C → C → Type u_3\nCC : C → Type u_4\ninst✝ : (X Y : C) → FunLike (FC X Y) (CC X) (CC Y)\nα β : Type\nf g : α ⟶ β\nw : f ≫ 𝟙 β = g\na : α\n⊢ f a = g a\n## Tactic State B:\nC✝ : Type u_1\ninst✝² : Category.{?u.309, u_1} C✝\nX : C✝\nFC✝ : C✝ → C✝ → Type ?u.318\nCC✝ : C✝ → Type ?u.323\ninst✝¹ : (X Y : C✝) → FunLike (FC✝ X Y) (CC✝ X) (CC✝ Y)\nC : Type u_2\nFC : C → C → Type u_3\nCC : C → Type u_4\ninst✝ : (X Y : C) → FunLike (FC X Y) (CC X) (CC Y)\nα β : Type\nf g : α ⟶ β\na : α\nw : ∀ (x : α), f x = g x\n⊢ f a = g a\n## Action:\n  replace w := elementwise_of% w"
"## Tactic State A:\nC✝ : Type u_1\ninst✝² : Category.{?u.309, u_1} C✝\nX : C✝\nFC✝ : C✝ → C✝ → Type ?u.318\nCC✝ : C✝ → Type ?u.323\ninst✝¹ : (X Y : C✝) → FunLike (FC✝ X Y) (CC✝ X) (CC✝ Y)\nC : Type u_2\nFC : C → C → Type u_3\nCC : C → Type u_4\ninst✝ : (X Y : C) → FunLike (FC X Y) (CC X) (CC Y)\nα β : Type\nf g : α ⟶ β\na : α\nw : ∀ (x : α), f x = g x\n⊢ f a = g a\n## Tactic State B:\nC✝ : Type u_1\ninst✝² : Category.{?u.309, u_1} C✝\nX : C✝\nFC✝ : C✝ → C✝ → Type ?u.318\nCC✝ : C✝ → Type ?u.323\ninst✝¹ : (X Y : C✝) → FunLike (FC✝ X Y) (CC✝ X) (CC✝ Y)\nC : Type u_2\nFC : C → C → Type u_3\nCC : C → Type u_4\ninst✝ : (X Y : C) → FunLike (FC X Y) (CC X) (CC Y)\nα β : Type\nf g : α ⟶ β\na : α\nw : ∀ (x : α), f x = g x\n⊢ f a = g a\n## Action:\n  guard_hyp w : ∀ (x : α), f x = g x"
"## Tactic State A:\nC✝ : Type u_1\ninst✝² : Category.{?u.309, u_1} C✝\nX : C✝\nFC✝ : C✝ → C✝ → Type ?u.318\nCC✝ : C✝ → Type ?u.323\ninst✝¹ : (X Y : C✝) → FunLike (FC✝ X Y) (CC✝ X) (CC✝ Y)\nC : Type u_2\nFC : C → C → Type u_3\nCC : C → Type u_4\ninst✝ : (X Y : C) → FunLike (FC X Y) (CC X) (CC Y)\nα β : Type\nf g : α ⟶ β\na : α\nw : ∀ (x : α), f x = g x\n⊢ f a = g a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rw [w]"
"## Tactic State A:\nB : Type u\ninst✝ : Bicategory B\na b c d : B\nf j : a ⟶ d\ng : a ⟶ b\nh : b ⟶ c\ni : c ⟶ d\nη : f ⟶ g ≫ h ≫ i\nθ : (g ≫ h) ≫ i ⟶ j\n⊢ η ⊗≫ θ = η ≫ (α_ g h i).inv ≫ θ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  bicategory"
"## Tactic State A:\nB : Type u\ninst✝ : Bicategory B\na b c d : B\nf : a ⟶ b\ng : b ⟶ c\nh i : c ⟶ d\nη : h ⟶ i\n⊢ (f ≫ g) ◁ η = (α_ f g h).hom ≫ f ◁ g ◁ η ≫ (α_ f g i).inv\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  bicategory"
"## Tactic State A:\nB : Type u\ninst✝ : Bicategory B\na b c d : B\nf g h : a ⟶ b\nη : f ⟶ g\nθ : g ⟶ h\n⊢ η ≫ θ = η ≫ θ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  bicategory"
"## Tactic State A:\nX Y Z : Type u\ninst✝² : Group X\ninst✝¹ : TopologicalSpace X\ninst✝ : IsTopologicalGroup X\nU V W : ProfiniteGrp.{u_1}\nf : U ⟶ V\ng : V ⟶ W\nu : ↑U.toProfinite.toTop\n⊢ (Hom.hom (f ≫ g)) u = (Hom.hom g) ((Hom.hom f) u)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  simp"
"## Tactic State A:\nX Y Z : Type u\ninst✝² : Group X\ninst✝¹ : TopologicalSpace X\ninst✝ : IsTopologicalGroup X\nM N : ProfiniteGrp.{u}\nf : M ⟶ N\nx y : ↑M.toProfinite.toTop\n⊢ (Hom.hom f) (x * y) = (Hom.hom f) x * (Hom.hom f) y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  simp"
"## Tactic State A:\nX Y Z : Type u\ninst✝² : Group X\ninst✝¹ : TopologicalSpace X\ninst✝ : IsTopologicalGroup X\nM N : ProfiniteGrp.{u}\nf : M ⟶ N\n⊢ (Hom.hom f) 1 = 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  simp"
"## Tactic State A:\nM N : MonCat\nf : M ⟶ N\nx y : ↑M\n⊢ (ConcreteCategory.hom f) (x * y) = (ConcreteCategory.hom f) x * (ConcreteCategory.hom f) y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  simp"
"## Tactic State A:\nM N : MonCat\nf : M ⟶ N\n⊢ (ConcreteCategory.hom f) 1 = 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  simp"
"## Tactic State A:\nM N : SemiRingCat\nf : M ⟶ N\nx y : ↑M\n⊢ (ConcreteCategory.hom f) (x + y) = (ConcreteCategory.hom f) x + (ConcreteCategory.hom f) y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  simp"
"## Tactic State A:\nM N : SemiRingCat\nf : M ⟶ N\nx y : ↑M\n⊢ (ConcreteCategory.hom f) (x * y) = (ConcreteCategory.hom f) x * (ConcreteCategory.hom f) y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  simp"
"## Tactic State A:\nM N : SemiRingCat\nf : M ⟶ N\n⊢ (ConcreteCategory.hom f) 0 = 0\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  simp"
"## Tactic State A:\nM N : Semigrp\nf : M ⟶ N\nx y : ↑M\n⊢ (ConcreteCategory.hom f) (x * y) = (ConcreteCategory.hom f) x * (ConcreteCategory.hom f) y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  simp"
"## Tactic State A:\nR : Type u\ninst✝ : CommRing R\nM N : ModuleCat R\nf : M ⟶ N\nx y : ↑M\n⊢ (ConcreteCategory.hom f) (x + y) = (ConcreteCategory.hom f) x + (ConcreteCategory.hom f) y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  simp"
"## Tactic State A:\nR : Type u\ninst✝ : CommRing R\nM N : ModuleCat R\nf : M ⟶ N\n⊢ (ConcreteCategory.hom f) 0 = 0\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  simp"
"## Tactic State A:\nR : Type u\ninst✝ : CommRing R\nM N : ModuleCat R\nf : M ⟶ N\nr : R\nm : ↑M\n⊢ (ConcreteCategory.hom f) (r • m) = r • (ConcreteCategory.hom f) m\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  simp"
"## Tactic State A:\nM N : Grp\nf : M ⟶ N\nx y : ↑M\n⊢ (ConcreteCategory.hom f) (x * y) = (ConcreteCategory.hom f) x * (ConcreteCategory.hom f) y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  simp"
"## Tactic State A:\nM N : Grp\nf : M ⟶ N\n⊢ (ConcreteCategory.hom f) 1 = 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  simp"
"## Tactic State A:\nR : Type u\ninst✝ : CommRing R\nM N : AlgebraCat R\nf : M ⟶ N\nx y : ↑M\n⊢ (ConcreteCategory.hom f) (x + y) = (ConcreteCategory.hom f) x + (ConcreteCategory.hom f) y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  simp"
"## Tactic State A:\nR : Type u\ninst✝ : CommRing R\nM N : AlgebraCat R\nf : M ⟶ N\n⊢ (ConcreteCategory.hom f) 0 = 0\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  simp"
"## Tactic State A:\nR : Type u\ninst✝ : CommRing R\nM N : AlgebraCat R\nf : M ⟶ N\nr : R\nm : ↑M\n⊢ (ConcreteCategory.hom f) (r • m) = r • (ConcreteCategory.hom f) m\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  simp"
"## Tactic State A:\nC : Type u\ninst✝¹ : Category.{v, u} C\ninst✝ : MonoidalCategory C\nX Y Z W : C\nf✝ : X ⟶ Y\ng✝ : Y ⟶ Z\nU V : C\nf : U ⟶ V ⊗ W ⊗ X\ng : (V ⊗ W) ⊗ X ⟶ Y\n⊢ f ⊗≫ g = f ≫ (α_ V W X).inv ≫ g\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  monoidal"
"## Tactic State A:\nC : Type u\ninst✝¹ : Category.{v, u} C\ninst✝ : MonoidalCategory C\nX Y Z W : C\nf✝ : X ⟶ Y\ng : Y ⟶ Z\nf : Z ⟶ W\n⊢ (X ⊗ Y) ◁ f = (α_ X Y Z).hom ≫ X ◁ Y ◁ f ≫ (α_ X Y W).inv\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  monoidal"
"## Tactic State A:\nC : Type u\ninst✝¹ : Category.{v, u} C\ninst✝ : MonoidalCategory C\nX Y Z W : C\nf : X ⟶ Y\ng : Y ⟶ Z\n⊢ f ≫ g = f ≫ g\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  monoidal"
"## Tactic State A:\nC : Type u\ninst✝¹ : Category.{v, u} C\ninst✝ : MonoidalCategory C\nX Y Z W : C\nf : X ⟶ Y\ng : Y ⟶ Z\n⊢ (f ⊗ g) ▷ X = (α_ X Y X).hom ≫ (f ⊗ g ▷ X) ≫ (α_ Y Z X).inv\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  monoidal"
"## Tactic State A:\nC : Type u\ninst✝¹ : Category.{v, u} C\ninst✝ : MonoidalCategory C\nX Y Z W : C\nf : X ⟶ Y\ng : Y ⟶ Z\nV₁ V₂ V₃ : C\nR : (V₁ V₂ : C) → V₁ ⊗ V₂ ⟶ V₂ ⊗ V₁\n⊢ R V₁ V₂ ▷ V₃ ⊗≫ V₂ ◁ R V₁ V₃ = R V₁ V₂ ▷ V₃ ≫ (α_ V₂ V₁ V₃).hom ⊗≫ 𝟙 (V₂ ⊗ V₁ ⊗ V₃) ≫ V₂ ◁ R V₁ V₃\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  monoidal"
"## Tactic State A:\nα β : Type\nf : α → β\na : α\n⊢ β\n## Tactic State B:\nα β : Type\nf : α → β\na : α\n⊢ β\n## Action:\n  fail_if_success solve_by_elim [-f]"
"## Tactic State A:\nα β : Type\nf : α → β\na : α\n⊢ β\n## Tactic State B:\nα β : Type\nf : α → β\na : α\n⊢ β\n## Action:\n  fail_if_success solve_by_elim [-a]"
"## Tactic State A:\nα β : Type\nf : α → β\na : α\n⊢ β\n## Tactic State B:\nα β : Type\nf : α → β\na : α\n⊢ β\n## Action:\n  fail_if_success solve_by_elim only [f]"
"## Tactic State A:\nα β : Type\nf : α → β\na : α\n⊢ β\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  solve_by_elim"
"## Tactic State A:\nα β γ : Type\nf : α → β\ng : β → γ\nb : β\n⊢ γ\n## Tactic State B:\nα β γ : Type\nf : α → β\ng : β → γ\nb : β\n⊢ γ\n## Action:\n  fail_if_success solve_by_elim [-g]"
"## Tactic State A:\nα β γ : Type\nf : α → β\ng : β → γ\nb : β\n⊢ γ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  solve_by_elim [-f]"
"## Tactic State A:\nα : ℕ → Type\nf : (n : ℕ) → α n → α (n + 1)\na : α 0\n⊢ α 4\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  solve_by_elim only [f, a]"
"## Tactic State A:\nh₁ h₂ : False\n⊢ Empty\n## Tactic State B:\nh₁ h₂ : False\n⊢ Empty\n## Action:\n  -- 'It doesn't make sense to remove local hypotheses when using `only` without `*`.'"
"## Tactic State A:\nh₁ h₂ : False\n⊢ Empty\n## Tactic State B:\nh₁ h₂ : False\n⊢ Empty\n## Action:\n  fail_if_success solve_by_elim only [-h₁]"
"## Tactic State A:\nh₁ h₂ : False\n⊢ Empty\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  -- 'It does make sense to use `*` without `only`.'"
"## Tactic State A:\nα : Sort ?u.26\nβ : Sort ?u.40\nP₁ P₂ : α → Prop\nf : (a : α) → P₁ a → P₂ a → β\na : α\nha₁ : P₁ a\nha₂ : P₂ a\n⊢ β\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  solve_by_elim"
"## Tactic State A:\nX : Type\nx : X\n⊢ x = x\n## Tactic State B:\nX : Type\nx : X\n⊢ x = x\n## Action:\n  fail_if_success solve_by_elim (config := {constructor := false}) only -- needs the `rfl` lemma"
"## Tactic State A:\nX : Type\nx : X\n⊢ x = x\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  solve_by_elim"
"## Tactic State A:\n⊢ True\n## Tactic State B:\n⊢ True\n## Action:\n  fail_if_success solve_by_elim (config := {constructor := false}) only -- needs the `trivial` lemma"
"## Tactic State A:\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  solve_by_elim"
"## Tactic State A:\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  -- uses the `trivial` lemma, which should now be removed from the default set:"
"## Tactic State A:\n⊢ True\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  solve_by_elim only -- uses the constructor discharger."
"## Tactic State A:\nα : Sort ?u.26\nβ : Sort ?u.40\nP₁ P₂ : α → Prop\nf : (a : α) → P₁ a → P₂ a → β\na : α\n_ha₁ : P₁ a\na' : α\nha'₁ : P₁ a'\nha'₂ : P₂ a'\n⊢ β\n## Tactic State B:\nα : Sort ?u.26\nβ : Sort ?u.40\nP₁ P₂ : α → Prop\nf : (a : α) → P₁ a → P₂ a → β\na : α\n_ha₁ : P₁ a\na' : α\nha'₁ : P₁ a'\nha'₂ : P₂ a'\n⊢ β\n## Action:\n  fail_if_success solve_by_elim (config := .noBackTracking)"
"## Tactic State A:\nα : Sort ?u.26\nβ : Sort ?u.40\nP₁ P₂ : α → Prop\nf : (a : α) → P₁ a → P₂ a → β\na : α\n_ha₁ : P₁ a\na' : α\nha'₁ : P₁ a'\nha'₂ : P₂ a'\n⊢ β\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  solve_by_elim"
"## Tactic State A:\nα : Type\na b : α → Prop\nh₀ : b = a\ny : α\n⊢ a y = b y\n## Tactic State B:\nα : Type\na b : α → Prop\nh₀ : b = a\ny : α\n⊢ a y = b y\n## Action:\n  fail_if_success solve_by_elim (config := {symm := false})"
"## Tactic State A:\nα : Type\na b : α → Prop\nh₀ : b = a\ny : α\n⊢ a y = b y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  solve_by_elim"
"## Tactic State A:\nP : True → False\n⊢ 3 = 7\n## Tactic State B:\nP : True → False\n⊢ 3 = 7\n## Action:\n  fail_if_success solve_by_elim (config := {exfalso := false})"
"## Tactic State A:\nP : True → False\n⊢ 3 = 7\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  solve_by_elim"
"## Tactic State A:\nn : ℕ\n⊢ ℕ × ℕ\n## Tactic State B:\ncase fst\nn : ℕ\n⊢ ℕ\n---\ncase snd\nn : ℕ\n⊢ ℕ\n## Action:\n  constructor"
"## Tactic State A:\ncase fst\nn : ℕ\n⊢ ℕ\n---\ncase snd\nn : ℕ\n⊢ ℕ\n## Tactic State B:\ncase snd\nn : ℕ\n⊢ ℕ\n## Action:\n  solve_by_elim"
"## Tactic State A:\ncase snd\nn : ℕ\n⊢ ℕ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  solve_by_elim"
"## Tactic State A:\nn : ℕ\n⊢ ℕ × ℕ\n## Tactic State B:\ncase fst\nn : ℕ\n⊢ ℕ\n---\ncase snd\nn : ℕ\n⊢ ℕ\n## Action:\n  constructor"
"## Tactic State A:\ncase fst\nn : ℕ\n⊢ ℕ\n---\ncase snd\nn : ℕ\n⊢ ℕ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  solve_by_elim*"
"## Tactic State A:\nn m : ℕ\nf : ℕ → ℕ → Prop\nh : f n m\n⊢ ∃ p, f p.1 p.2\n## Tactic State B:\ncase w\nn m : ℕ\nf : ℕ → ℕ → Prop\nh : f n m\n⊢ ℕ × ℕ\n---\ncase h\nn m : ℕ\nf : ℕ → ℕ → Prop\nh : f n m\n⊢ f ?w.1 ?w.2\n## Action:\n  fconstructor"
"## Tactic State A:\ncase w\nn m : ℕ\nf : ℕ → ℕ → Prop\nh : f n m\n⊢ ℕ × ℕ\n---\ncase h\nn m : ℕ\nf : ℕ → ℕ → Prop\nh : f n m\n⊢ f ?w.1 ?w.2\n## Tactic State B:\ncase w.fst\nn m : ℕ\nf : ℕ → ℕ → Prop\nh : f n m\n⊢ ℕ\n---\ncase w.snd\nn m : ℕ\nf : ℕ → ℕ → Prop\nh : f n m\n⊢ ℕ\n---\ncase h\nn m : ℕ\nf : ℕ → ℕ → Prop\nh : f n m\n⊢ f (?w.fst, ?w.snd).1 (?w.fst, ?w.snd).2\n## Action:\n  fconstructor"
"## Tactic State A:\ncase w.fst\nn m : ℕ\nf : ℕ → ℕ → Prop\nh : f n m\n⊢ ℕ\n---\ncase w.snd\nn m : ℕ\nf : ℕ → ℕ → Prop\nh : f n m\n⊢ ℕ\n---\ncase h\nn m : ℕ\nf : ℕ → ℕ → Prop\nh : f n m\n⊢ f (?w.fst, ?w.snd).1 (?w.fst, ?w.snd).2\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  solve_by_elim*"
"## Tactic State A:\nP : ℕ → Type\nf : {n : ℕ} → P n\n⊢ P 2 × P 3\n## Tactic State B:\ncase fst\nP : ℕ → Type\nf : {n : ℕ} → P n\n⊢ P 2\n---\ncase snd\nP : ℕ → Type\nf : {n : ℕ} → P n\n⊢ P 3\n## Action:\n  fconstructor"
"## Tactic State A:\ncase fst\nP : ℕ → Type\nf : {n : ℕ} → P n\n⊢ P 2\n---\ncase snd\nP : ℕ → Type\nf : {n : ℕ} → P n\n⊢ P 3\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  solve_by_elim* only [f]"
"## Tactic State A:\n⊢ 6 = 6 ∧ [7] = [7]\n## Tactic State B:\ncase left\n⊢ 6 = 6\n---\ncase right\n⊢ [7] = [7]\n## Action:\n  fconstructor"
"## Tactic State A:\ncase left\n⊢ 6 = 6\n---\ncase right\n⊢ [7] = [7]\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  solve_by_elim* only [@rfl _]"
"## Tactic State A:\nf g : ℕ → Prop\n⊢ ((∃ k, f k) ∨ ∃ k, g k) ↔ ∃ k, f k ∨ g k\n## Tactic State B:\ncase mp\nf g : ℕ → Prop\n⊢ ((∃ k, f k) ∨ ∃ k, g k) → ∃ k, f k ∨ g k\n---\ncase mpr\nf g : ℕ → Prop\n⊢ (∃ k, f k ∨ g k) → (∃ k, f k) ∨ ∃ k, g k\n## Action:\n  fconstructor"
"## Tactic State A:\ncase mp\nf g : ℕ → Prop\n⊢ ((∃ k, f k) ∨ ∃ k, g k) → ∃ k, f k ∨ g k\n---\ncase mpr\nf g : ℕ → Prop\n⊢ (∃ k, f k ∨ g k) → (∃ k, f k) ∨ ∃ k, g k\n## Tactic State B:\ncase mp.inl.intro\nf g : ℕ → Prop\nn : ℕ\nfn : f n\n⊢ ∃ k, f k ∨ g k\n---\ncase mp.inr.intro\nf g : ℕ → Prop\nn : ℕ\ngn : g n\n⊢ ∃ k, f k ∨ g k\n---\ncase mpr\nf g : ℕ → Prop\n⊢ (∃ k, f k ∨ g k) → (∃ k, f k) ∨ ∃ k, g k\n## Action:\n  rintro (⟨n, fn⟩ | ⟨n, gn⟩)"
"## Tactic State A:\ncase mp.inl.intro\nf g : ℕ → Prop\nn : ℕ\nfn : f n\n⊢ ∃ k, f k ∨ g k\n---\ncase mp.inr.intro\nf g : ℕ → Prop\nn : ℕ\ngn : g n\n⊢ ∃ k, f k ∨ g k\n---\ncase mpr\nf g : ℕ → Prop\n⊢ (∃ k, f k ∨ g k) → (∃ k, f k) ∨ ∃ k, g k\n## Tactic State B:\ncase mpr\nf g : ℕ → Prop\n⊢ (∃ k, f k ∨ g k) → (∃ k, f k) ∨ ∃ k, g k\n---\ncase mp.inl.intro\nf g : ℕ → Prop\nn : ℕ\nfn : f n\n⊢ ∃ k, f k ∨ g k\n---\ncase mp.inr.intro\nf g : ℕ → Prop\nn : ℕ\ngn : g n\n⊢ ∃ k, f k ∨ g k\n## Action:\n  pick_goal 3"
"## Tactic State A:\ncase mpr\nf g : ℕ → Prop\n⊢ (∃ k, f k ∨ g k) → (∃ k, f k) ∨ ∃ k, g k\n---\ncase mp.inl.intro\nf g : ℕ → Prop\nn : ℕ\nfn : f n\n⊢ ∃ k, f k ∨ g k\n---\ncase mp.inr.intro\nf g : ℕ → Prop\nn : ℕ\ngn : g n\n⊢ ∃ k, f k ∨ g k\n## Tactic State B:\ncase mpr.intro.inl\nf g : ℕ → Prop\nn : ℕ\nhf : f n\n⊢ (∃ k, f k) ∨ ∃ k, g k\n---\ncase mpr.intro.inr\nf g : ℕ → Prop\nn : ℕ\nhg : g n\n⊢ (∃ k, f k) ∨ ∃ k, g k\n---\ncase mp.inl.intro\nf g : ℕ → Prop\nn : ℕ\nfn : f n\n⊢ ∃ k, f k ∨ g k\n---\ncase mp.inr.intro\nf g : ℕ → Prop\nn : ℕ\ngn : g n\n⊢ ∃ k, f k ∨ g k\n## Action:\n  rintro ⟨n, hf | hg⟩"
"## Tactic State A:\ncase mpr.intro.inl\nf g : ℕ → Prop\nn : ℕ\nhf : f n\n⊢ (∃ k, f k) ∨ ∃ k, g k\n---\ncase mpr.intro.inr\nf g : ℕ → Prop\nn : ℕ\nhg : g n\n⊢ (∃ k, f k) ∨ ∃ k, g k\n---\ncase mp.inl.intro\nf g : ℕ → Prop\nn : ℕ\nfn : f n\n⊢ ∃ k, f k ∨ g k\n---\ncase mp.inr.intro\nf g : ℕ → Prop\nn : ℕ\ngn : g n\n⊢ ∃ k, f k ∨ g k\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  solve_by_elim* (config := {maxDepth := 13}) [Or.inl, Or.inr, Exists.intro]"
"## Tactic State A:\nP : Prop\n⊢ P → P\n## Tactic State B:\nP : Prop\n⊢ P → P\n## Action:\n  fail_if_success solve_by_elim (config := {intro := false})"
"## Tactic State A:\nP : Prop\n⊢ P → P\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  solve_by_elim"
"## Tactic State A:\nP Q : Prop\n⊢ P ∧ Q → P ∧ Q\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  solve_by_elim"
"## Tactic State A:\na b : Type\nh₀ : a → b\nh₁ : a\n⊢ b\n## Tactic State B:\na b : Type\nh₀ : a → b\nh₁ : a\n⊢ a\n## Action:\n  apply_assumption"
"## Tactic State A:\na b : Type\nh₀ : a → b\nh₁ : a\n⊢ a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  apply_assumption"
"## Tactic State A:\nα : Type\np : α → Prop\nh₀ : ∀ (x : α), p x\ny : α\n⊢ p y\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  apply_assumption"
"## Tactic State A:\nα : Sort u_1\na b : α\nh : b = a\n⊢ a = b\n## Tactic State B:\nα : Sort u_1\na b : α\nh : b = a\n⊢ a = b\n## Action:\n  fail_if_success apply_assumption (config := {symm := false})"
"## Tactic State A:\nα : Sort u_1\na b : α\nh : b = a\n⊢ a = b\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  apply_assumption"
"## Tactic State A:\nP Q : Prop\np : P\nq : Q\nh : P → ¬Q\n⊢ ℕ\n## Tactic State B:\nP Q : Prop\np : P\nq : Q\nh : P → ¬Q\n⊢ ℕ\n## Action:\n  fail_if_success apply_assumption (config := {exfalso := false})"
"## Tactic State A:\nP Q : Prop\np : P\nq : Q\nh : P → ¬Q\n⊢ ℕ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  apply_assumption <;> assumption"
"## Tactic State A:\n⊢ 1 = 2\n## Tactic State B:\n⊢ 1 = 2\n## Action:\n  fail_if_success solve_by_elim"
"## Tactic State A:\n⊢ 1 = 2\n## Tactic State B:\n⊢ 1 = 2\n## Action:\n  solve_by_elim using dummy_label_attr"
"## Tactic State A:\n⊢ 5 ≤ 7\n## Tactic State B:\n⊢ 5 ≤ 7\n## Action:\n  apply_rules using dummy_label_attr"
"## Tactic State A:\n⊢ 5 ≤ 7\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  apply_rules [le_rfl]"
"## Tactic State A:\na b : ℕ\nha : a ≠ 0\nhb : b ≠ 0\n⊢ a * b ≠ 0\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  apply_rules [mul_ne_zero]"
"## Tactic State A:\nR : Type\ninst✝ : CommMonoid R\nf : Fin 10 → R\n⊢ ∏ i, f i = f 0 * f 1 * f 2 * f 3 * f 4 * f 5 * f 6 * f 7 * f 8 * f 9\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  simp only [Fin.prod_univ_ofNat]"
"## Tactic State A:\nR : Type\ninst✝ : AddCommMonoid R\nf : Fin 10 → R\n⊢ ∑ i, f i = f 0 + f 1 + f 2 + f 3 + f 4 + f 5 + f 6 + f 7 + f 8 + f 9\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  simp only [Fin.sum_univ_ofNat]"
"## Tactic State A:\nα : Type u\np q : α → Prop\na : α\nhp : p a\nhq : q a\n⊢ ∃ b, (p b ∧ b = a) ∧ q b\n## Tactic State B:\nα : Type u\np q : α → Prop\na : α\nhp : p a\nhq : q a\n⊢ (p a ∧ True) ∧ q a\n## Action:\n  simp only [existsAndEq]"
"## Tactic State A:\nα : Type u\np q : α → Prop\na : α\nhp : p a\nhq : q a\n⊢ (p a ∧ True) ∧ q a\n## Tactic State B:\nα : Type u\np q : α → Prop\na : α\nhp : p a\nhq : q a\n⊢ (p a ∧ True) ∧ q a\n## Action:\n  guard_target = (p a ∧ True) ∧ q a"
"## Tactic State A:\nα : Type u\np q : α → Prop\na : α\nhp : p a\nhq : q a\n⊢ (p a ∧ True) ∧ q a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact ⟨⟨hp, trivial⟩, hq⟩"
"## Tactic State A:\nα : Type u\np q : α → Prop\na : α\n⊢ ∃ b, b = a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  simp only [existsAndEq]"
"## Tactic State A:\nα : Type u\np q : α → Prop\nf : α → α\n⊢ ∃ a, a = f a\n## Tactic State B:\nα : Type u\np q : α → Prop\nf : α → α\n⊢ ∃ a, a = f a\n## Action:\n  simp only [existsAndEq]"
"## Tactic State A:\nα : Type u\np q : α → Prop\na : α\nhp : p a\nhq : q a\n⊢ ∃ b, p b ∧ ∃ c, b = a ∧ q c\n## Tactic State B:\nα : Type u\np q : α → Prop\na : α\nhp : p a\nhq : q a\n⊢ ∃ b, p b ∧ ∃ c, b = a ∧ q c\n## Action:\n  -- the simproc doesn't handle nested `Exists`"
"## Tactic State A:\nα : Type u\np q : α → Prop\na : α\nhp : p a\nhq : q a\n⊢ ∃ b, p b ∧ ∃ c, b = a ∧ q c\n## Tactic State B:\nα : Type u\np q : α → Prop\na : α\nhp : p a\nhq : q a\n⊢ ∃ b, p b ∧ ∃ c, b = a ∧ q c\n## Action:\n  simp -failIfUnchanged only [existsAndEq]"
"## Tactic State A:\nα : Type u\np q : α → Prop\na : α\nhp : p a\nhq : q a\n⊢ ∃ b, p b ∧ ∃ c, b = a ∧ q c\n## Tactic State B:\nα : Type u\np q : α → Prop\na : α\nhp : p a\nhq : q a\n⊢ ∃ b, p b ∧ b = a ∧ ∃ x, q x\n## Action:\n  guard_target = ∃ b : α, p b ∧ (∃ c : α, b = a ∧ q c)"
"## Tactic State A:\nα : Type u\np q : α → Prop\na : α\nhp : p a\nhq : q a\n⊢ ∃ b, p b ∧ b = a ∧ ∃ x, q x\n## Tactic State B:\nα : Type u\np q : α → Prop\na : α\nhp : p a\nhq : q a\n⊢ ∃ b, p b ∧ b = a ∧ ∃ x, q x\n## Action:\n  simp only [exists_and_left]"
"## Tactic State A:\nα : Type u\np q : α → Prop\na : α\nhp : p a\nhq : q a\n⊢ ∃ b, p b ∧ b = a ∧ ∃ x, q x\n## Tactic State B:\nα : Type u\np q : α → Prop\na : α\nhp : p a\nhq : q a\n⊢ p a ∧ True ∧ ∃ x, q x\n## Action:\n  guard_target = ∃ b, p b ∧ b = a ∧ ∃ x, q x"
"## Tactic State A:\nα : Type u\np q : α → Prop\na : α\nhp : p a\nhq : q a\n⊢ p a ∧ True ∧ ∃ x, q x\n## Tactic State B:\nα : Type u\np q : α → Prop\na : α\nhp : p a\nhq : q a\n⊢ p a ∧ True ∧ ∃ x, q x\n## Action:\n  -- but can clean up the rest"
"## Tactic State A:\nα : Type u\np q : α → Prop\na : α\nhp : p a\nhq : q a\n⊢ p a ∧ True ∧ ∃ x, q x\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  simp only [existsAndEq]"
