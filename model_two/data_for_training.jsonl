{"prompt": "example (a b: Nat) (h1: a + b = a): a + b = a := by\n  exact h1\na b : ℕ\nh1 : a + b = a\n⊢ a + b = a\n", "full_text": "example (a b: Nat) (h1: a + b = a): a + b = a := by\n  exact h1\na b : ℕ\nh1 : a + b = a\n⊢ a + b = a\n/- Goals Accomplished! -/\n"}
{"prompt": "theorem not_irrational_rpow :\n   ¬ ∀ a b : ℝ, Irrational a → Irrational b → 0 < a → Irrational (a ^ b) := by\n  push_neg\n  by_cases hc : Irrational (√2 ^ √2)\n  · use (√2 ^ √2), √2, hc, irrational_sqrt_two, by positivity\n    rw [← rpow_mul, mul_self_sqrt, rpow_two, sq_sqrt] <;> norm_num\n  · use √2, √2, irrational_sqrt_two, irrational_sqrt_two, by positivity, hc\n⊢ ¬∀ (a b : ℝ), Irrational a → Irrational b → 0 < a → Irrational (a ^ b)\n", "full_text": "theorem not_irrational_rpow :\n   ¬ ∀ a b : ℝ, Irrational a → Irrational b → 0 < a → Irrational (a ^ b) := by\n  push_neg\n  by_cases hc : Irrational (√2 ^ √2)\n  · use (√2 ^ √2), √2, hc, irrational_sqrt_two, by positivity\n    rw [← rpow_mul, mul_self_sqrt, rpow_two, sq_sqrt] <;> norm_num\n  · use √2, √2, irrational_sqrt_two, irrational_sqrt_two, by positivity, hc\n⊢ ¬∀ (a b : ℝ), Irrational a → Irrational b → 0 < a → Irrational (a ^ b)\n/- ⊢ ∃ a b, Irrational a ∧ Irrational b ∧ 0 < a ∧ ¬Irrational (a ^ b) -/\n/- case pos\nhc : Irrational (√2 ^ √2)\n⊢ ∃ a b, Irrational a ∧ Irrational b ∧ 0 < a ∧ ¬Irrational (a ^ b)\n---\ncase neg\nhc : ¬Irrational (√2 ^ √2)\n⊢ ∃ a b, Irrational a ∧ Irrational b ∧ 0 < a ∧ ¬Irrational (a ^ b) -/\n/- case right\nhc : Irrational (√2 ^ √2)\n⊢ ¬Irrational ((√2 ^ √2) ^ √2) -/\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "theorem euclid (n : ℕ) : ∃ N, n < N ∧ N.Prime := by\n  let N := n.factorial + 1\n  let p := minFac N\n  use p\n  have prime : p.Prime := by\n    apply minFac_prime\n    observe : n.factorial > 0\n    omega\n  constructor\n  · by_contra!\n    observe : p ∣ n.factorial\n    observe : p ∣ N\n    observe : p ∣ 1\n    observe : ¬ p ∣ 1\n    contradiction\n  · exact prime\nn : ℕ\n⊢ ∃ N, n < N ∧ Nat.Prime N\n", "full_text": "theorem euclid (n : ℕ) : ∃ N, n < N ∧ N.Prime := by\n  let N := n.factorial + 1\n  let p := minFac N\n  use p\n  have prime : p.Prime := by\n    apply minFac_prime\n    observe : n.factorial > 0\n    omega\n  constructor\n  · by_contra!\n    observe : p ∣ n.factorial\n    observe : p ∣ N\n    observe : p ∣ 1\n    observe : ¬ p ∣ 1\n    contradiction\n  · exact prime\nn : ℕ\n⊢ ∃ N, n < N ∧ Nat.Prime N\n/- n : ℕ\nN : ℕ := n ! + 1\n⊢ ∃ N, n < N ∧ Nat.Prime N -/\n/- n : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\n⊢ ∃ N, n < N ∧ Nat.Prime N -/\n/- case h\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\n⊢ n < p ∧ Nat.Prime p -/\n/- case h\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\nprime : Nat.Prime p\n⊢ n < p ∧ Nat.Prime p -/\n/- case h.left\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\nprime : Nat.Prime p\n⊢ n < p\n---\ncase h.right\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\nprime : Nat.Prime p\n⊢ Nat.Prime p -/\n/- case h.left\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\nprime : Nat.Prime p\nthis : p ≤ n\n⊢ False -/\n/- case h.left\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\nprime : Nat.Prime p\nthis✝ : p ≤ n\nthis : p ∣ n !\n⊢ False -/\n/- case h.left\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\nprime : Nat.Prime p\nthis✝¹ : p ≤ n\nthis✝ : p ∣ n !\nthis : N.minFac ∣ N\n⊢ False -/\n/- case h.left\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\nprime : Nat.Prime p\nthis✝² : p ≤ n\nthis✝¹ : p ∣ n !\nthis✝ : N.minFac ∣ N\nthis : p ∣ 1\n⊢ False -/\n/- case h.left\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\nprime : Nat.Prime p\nthis✝³ : p ≤ n\nthis✝² : p ∣ n !\nthis✝¹ : N.minFac ∣ N\nthis✝ : p ∣ 1\nthis : ¬p ∣ 1\n⊢ False -/\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : ∃ n : Int, n * 3 = 3 * 2 := by\n  use 2\n  rfl\n⊢ ∃ n, n * 3 = 3 * 2\n", "full_text": "example : ∃ n : Int, n * 3 = 3 * 2 := by\n  use 2\n  rfl\n⊢ ∃ n, n * 3 = 3 * 2\n/- case h\n⊢ 2 * 3 = 3 * 2 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : Σ _x _y : Int, Int × Int × Int := by\n  use 1, 2, 3, 4, 5\n⊢ (_ : ℤ) × (_ : ℤ) × ℤ × ℤ × ℤ\n", "full_text": "example : Σ _x _y : Int, Int × Int × Int := by\n  use 1, 2, 3, 4, 5\n⊢ (_ : ℤ) × (_ : ℤ) × ℤ × ℤ × ℤ\n/- Goals Accomplished! -/\n"}
{"prompt": "example : Σ _x _y : Int, (Int × Int) × Int := by\n  use! 1, 2, 3, 4, 5\n⊢ (_ : ℤ) × (_ : ℤ) × (ℤ × ℤ) × ℤ\n", "full_text": "example : Σ _x _y : Int, (Int × Int) × Int := by\n  use! 1, 2, 3, 4, 5\n⊢ (_ : ℤ) × (_ : ℤ) × (ℤ × ℤ) × ℤ\n/- Goals Accomplished! -/\n"}
{"prompt": "example : foo := by\n  use 100, ⟨true, 4⟩, 3\nfoo : Sort ?u.5\n⊢ foo\n", "full_text": "example : foo := by\n  use 100, ⟨true, 4⟩, 3\nfoo : Sort ?u.5\n⊢ foo\n/- Goals Accomplished! -/\n"}
{"prompt": "example : foo := by\n  use! 100, true, 4, 3\nfoo : Sort ?u.5\n⊢ foo\n", "full_text": "example : foo := by\n  use! 100, true, 4, 3\nfoo : Sort ?u.5\n⊢ foo\n/- Goals Accomplished! -/\n"}
{"prompt": "example : foo := show_term by\n  use ?x, ⟨?b, 4⟩\n  exact (3 : Nat)\n  exact (100 : Nat)\n  exact true\nfoo : Sort ?u.5\n⊢ foo\n", "full_text": "example : foo := show_term by\n  use ?x, ⟨?b, 4⟩\n  exact (3 : Nat)\n  exact (100 : Nat)\n  exact true\nfoo : Sort ?u.5\n⊢ foo\n/- Goals Accomplished! -/\n"}
{"prompt": "example : foo := show_term by\n  -- Type ascriptions keep refinement from occurring before applying the constructor\n  use! (?x : Nat), (?b : Bool), 4\n  exact (3 : Nat)\n  exact (100 : Nat)\n  exact true\nfoo : Sort ?u.5\n⊢ foo\n", "full_text": "example : foo := show_term by\n  -- Type ascriptions keep refinement from occurring before applying the constructor\n  use! (?x : Nat), (?b : Bool), 4\n  exact (3 : Nat)\n  exact (100 : Nat)\n  exact true\nfoo : Sort ?u.5\n⊢ foo\n/- Goals Accomplished! -/\n"}
{"prompt": "example : DecidableType := by\n  use Nat\nDecidableType : Sort ?u.5\n⊢ DecidableType\n", "full_text": "example : DecidableType := by\n  use Nat\nDecidableType : Sort ?u.5\n⊢ DecidableType\n/- Goals Accomplished! -/\n"}
{"prompt": "example (β : Type) [DecidableEq β] : DecidableType := by\n  use β\nDecidableType : Sort ?u.27\nβ : Type\ninst✝ : DecidableEq β\n⊢ DecidableType\n", "full_text": "example (β : Type) [DecidableEq β] : DecidableType := by\n  use β\nDecidableType : Sort ?u.27\nβ : Type\ninst✝ : DecidableEq β\n⊢ DecidableType\n/- Goals Accomplished! -/\n"}
{"prompt": "example (β : Type) : DecidableType := by\n  use β\n  guard_target = DecidableEq β\n  apply Classical.typeDecidableEq\nDecidableType : Sort ?u.9\nβ : Type\n⊢ DecidableType\n", "full_text": "example (β : Type) : DecidableType := by\n  use β\n  guard_target = DecidableEq β\n  apply Classical.typeDecidableEq\nDecidableType : Sort ?u.9\nβ : Type\n⊢ DecidableType\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (α : Type u) : Embedding α α × Unit := by\n  constructor\n  -- testing that `use` actually focuses on the main goal\n  use id\n  · simp\n  constructor\nx✝ : Sort ?u.6\nEmbedding : x✝\nα : Type u\n⊢ sorry × Unit\n", "full_text": "example (α : Type u) : Embedding α α × Unit := by\n  constructor\n  -- testing that `use` actually focuses on the main goal\n  use id\n  · simp\n  constructor\nx✝ : Sort ?u.6\nEmbedding : x✝\nα : Type u\n⊢ sorry × Unit\n/- case fst\nx✝ : Sort ?u.6\nEmbedding : x✝\nα : Type u\n⊢ sorry\n---\ncase snd\nx✝ : Sort ?u.6\nEmbedding : x✝\nα : Type u\n⊢ Unit -/\n/- case snd\nx✝ : Sort ?u.6\nEmbedding : x✝\nα : Type u\n⊢ Unit -/\n/- case snd\nx✝ : Sort ?u.6\nEmbedding : x✝\nα : Type u\n⊢ Unit -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h1 : 1 > 0) : ∃ (n : Nat) (_h : n > 0), n = n := by\n  use 1\nh1 : 1 > 0\n⊢ ∃ n, ∃ (_ : n > 0), n = n\n", "full_text": "example (h1 : 1 > 0) : ∃ (n : Nat) (_h : n > 0), n = n := by\n  use 1\nh1 : 1 > 0\n⊢ ∃ n, ∃ (_ : n > 0), n = n\n/- Goals Accomplished! -/\n"}
{"prompt": "example : let P : Nat → Prop := fun _x => ∃ _n : Nat, True; P 1 := by\n  intro P\n  use 1\n⊢ let P := fun _x => ∃ _n, True;\n  P 1\n", "full_text": "example : let P : Nat → Prop := fun _x => ∃ _n : Nat, True; P 1 := by\n  intro P\n  use 1\n⊢ let P := fun _x => ∃ _n, True;\n  P 1\n/- P : ℕ → Prop := fun _x => ∃ _n, True\n⊢ P 1 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : ∃ f : Nat → Nat, f 1 = 1 := by\n  use ·\n⊢ ∃ f, f 1 = 1\n", "full_text": "example : ∃ f : Nat → Nat, f 1 = 1 := by\n  use ·\n⊢ ∃ f, f 1 = 1\n/- case h\n⊢ sorry 1 = 1 -/\n"}
{"prompt": "example : ∃ f : Nat → Nat, f 1 = 1 := by\n  use (·)\n⊢ ∃ f, f 1 = 1\n", "full_text": "example : ∃ f : Nat → Nat, f 1 = 1 := by\n  use (·)\n⊢ ∃ f, f 1 = 1\n/- Goals Accomplished! -/\n"}
{"prompt": "example {F : ℕ → α → β} (hF : ∀ i, StronglyMeasurable (F i)) : Measurable (F 0) := by\n  measurability\nα : Type u_1\nβ : Type u_2\ninst✝⁴ : MeasurableSpace α\ninst✝³ : MeasurableSpace β\ninst✝² : TopologicalSpace β\ninst✝¹ : PseudoMetrizableSpace β\ninst✝ : BorelSpace β\nF : ℕ → α → β\nhF : ∀ (i : ℕ), StronglyMeasurable (F i)\n⊢ Measurable (F 0)\n", "full_text": "example {F : ℕ → α → β} (hF : ∀ i, StronglyMeasurable (F i)) : Measurable (F 0) := by\n  measurability\nα : Type u_1\nβ : Type u_2\ninst✝⁴ : MeasurableSpace α\ninst✝³ : MeasurableSpace β\ninst✝² : TopologicalSpace β\ninst✝¹ : PseudoMetrizableSpace β\ninst✝ : BorelSpace β\nF : ℕ → α → β\nhF : ∀ (i : ℕ), StronglyMeasurable (F i)\n⊢ Measurable (F 0)\n/- Goals Accomplished! -/\n"}
{"prompt": "example [AddCommMonoid β] [MeasurableAdd₂ β] {s : Finset ℕ} {F : ℕ → α → β}\n    (hF : ∀ i, Measurable (F i)) : Measurable (∑ i ∈ s, (fun x => F (i+1) x + F i x)) := by\n  fun_prop\nα : Type u_1\nβ : Type u_2\ninst✝⁶ : MeasurableSpace α\ninst✝⁵ : MeasurableSpace β\ninst✝⁴ : TopologicalSpace β\ninst✝³ : PseudoMetrizableSpace β\ninst✝² : BorelSpace β\ninst✝¹ : AddCommMonoid β\ninst✝ : MeasurableAdd₂ β\ns : Finset ℕ\nF : ℕ → α → β\nhF : ∀ (i : ℕ), Measurable (F i)\n⊢ Measurable (∑ i ∈ s, fun x => F (i + 1) x + F i x)\n", "full_text": "example [AddCommMonoid β] [MeasurableAdd₂ β] {s : Finset ℕ} {F : ℕ → α → β}\n    (hF : ∀ i, Measurable (F i)) : Measurable (∑ i ∈ s, (fun x => F (i+1) x + F i x)) := by\n  fun_prop\nα : Type u_1\nβ : Type u_2\ninst✝⁶ : MeasurableSpace α\ninst✝⁵ : MeasurableSpace β\ninst✝⁴ : TopologicalSpace β\ninst✝³ : PseudoMetrizableSpace β\ninst✝² : BorelSpace β\ninst✝¹ : AddCommMonoid β\ninst✝ : MeasurableAdd₂ β\ns : Finset ℕ\nF : ℕ → α → β\nhF : ∀ (i : ℕ), Measurable (F i)\n⊢ Measurable (∑ i ∈ s, fun x => F (i + 1) x + F i x)\n/- Goals Accomplished! -/\n"}
{"prompt": "example [AddCommMonoid β] [MeasurableAdd₂ β] {s : Finset ℕ} {F : ℕ → α → β}\n    (hF : ∀ i, AEMeasurable (F i) μ) : AEMeasurable (∑ i ∈ s, (fun x => F (i+1) x + F i x)) μ := by\n  measurability\nα : Type u_1\nβ : Type u_2\ninst✝⁷ : MeasurableSpace α\ninst✝⁶ : MeasurableSpace β\ninst✝⁵ : TopologicalSpace β\ninst✝⁴ : PseudoMetrizableSpace β\ninst✝³ : BorelSpace β\ninst✝² : MeasurableSpace α\nμ : Measure α\ninst✝¹ : AddCommMonoid β\ninst✝ : MeasurableAdd₂ β\ns : Finset ℕ\nF : ℕ → α → β\nhF : ∀ (i : ℕ), AEMeasurable (F i) μ\n⊢ AEMeasurable (∑ i ∈ s, fun x => F (i + 1) x + F i x) μ\n", "full_text": "example [AddCommMonoid β] [MeasurableAdd₂ β] {s : Finset ℕ} {F : ℕ → α → β}\n    (hF : ∀ i, AEMeasurable (F i) μ) : AEMeasurable (∑ i ∈ s, (fun x => F (i+1) x + F i x)) μ := by\n  measurability\nα : Type u_1\nβ : Type u_2\ninst✝⁷ : MeasurableSpace α\ninst✝⁶ : MeasurableSpace β\ninst✝⁵ : TopologicalSpace β\ninst✝⁴ : PseudoMetrizableSpace β\ninst✝³ : BorelSpace β\ninst✝² : MeasurableSpace α\nμ : Measure α\ninst✝¹ : AddCommMonoid β\ninst✝ : MeasurableAdd₂ β\ns : Finset ℕ\nF : ℕ → α → β\nhF : ∀ (i : ℕ), AEMeasurable (F i) μ\n⊢ AEMeasurable (∑ i ∈ s, fun x => F (i + 1) x + F i x) μ\n/- Goals Accomplished! -/\n"}
{"prompt": "example [TopologicalSpace α] [BorelSpace α] [NormedAddCommGroup β] [BorelSpace β]\n    [MeasurableAdd₂ β] [MeasurableSub₂ β] {s : Finset ℕ} {F : ℕ → α → β}\n    (hF : ∀ i, Measurable (F i)) : AEMeasurable (∑ i ∈ s, (fun x => F (i+1) x - F i x)) μ := by\n  measurability\nα : Type u_1\nβ : Type u_2\ninst✝¹¹ : MeasurableSpace α\ninst✝¹⁰ : MeasurableSpace β\ninst✝⁹ : TopologicalSpace β\ninst✝⁸ : PseudoMetrizableSpace β\ninst✝⁷ : BorelSpace β\ninst✝⁶ : MeasurableSpace α\nμ : Measure α\ninst✝⁵ : TopologicalSpace α\ninst✝⁴ : BorelSpace α\ninst✝³ : NormedAddCommGroup β\ninst✝² : BorelSpace β\ninst✝¹ : MeasurableAdd₂ β\ninst✝ : MeasurableSub₂ β\ns : Finset ℕ\nF : ℕ → α → β\nhF : ∀ (i : ℕ), Measurable (F i)\n⊢ AEMeasurable (∑ i ∈ s, fun x => F (i + 1) x - F i x) μ\n", "full_text": "example [TopologicalSpace α] [BorelSpace α] [NormedAddCommGroup β] [BorelSpace β]\n    [MeasurableAdd₂ β] [MeasurableSub₂ β] {s : Finset ℕ} {F : ℕ → α → β}\n    (hF : ∀ i, Measurable (F i)) : AEMeasurable (∑ i ∈ s, (fun x => F (i+1) x - F i x)) μ := by\n  measurability\nα : Type u_1\nβ : Type u_2\ninst✝¹¹ : MeasurableSpace α\ninst✝¹⁰ : MeasurableSpace β\ninst✝⁹ : TopologicalSpace β\ninst✝⁸ : PseudoMetrizableSpace β\ninst✝⁷ : BorelSpace β\ninst✝⁶ : MeasurableSpace α\nμ : Measure α\ninst✝⁵ : TopologicalSpace α\ninst✝⁴ : BorelSpace α\ninst✝³ : NormedAddCommGroup β\ninst✝² : BorelSpace β\ninst✝¹ : MeasurableAdd₂ β\ninst✝ : MeasurableSub₂ β\ns : Finset ℕ\nF : ℕ → α → β\nhF : ∀ (i : ℕ), Measurable (F i)\n⊢ AEMeasurable (∑ i ∈ s, fun x => F (i + 1) x - F i x) μ\n/- Goals Accomplished! -/\n"}
{"prompt": "example {a b c d e : Nat} (h1 : a ≤ b) (h2 : c ≤ d) (h3 : 0 ≤ e) :\n    a + c * e + a + c + 0 ≤ b + d * e + b + d + e := by\n  apply_rules [Nat.add_le_add, Nat.mul_le_mul_right]\na b c d e : ℕ\nh1 : a ≤ b\nh2 : c ≤ d\nh3 : 0 ≤ e\n⊢ a + c * e + a + c + 0 ≤ b + d * e + b + d + e\n", "full_text": "example {a b c d e : Nat} (h1 : a ≤ b) (h2 : c ≤ d) (h3 : 0 ≤ e) :\n    a + c * e + a + c + 0 ≤ b + d * e + b + d + e := by\n  apply_rules [Nat.add_le_add, Nat.mul_le_mul_right]\na b c d e : ℕ\nh1 : a ≤ b\nh2 : c ≤ d\nh3 : 0 ≤ e\n⊢ a + c * e + a + c + 0 ≤ b + d * e + b + d + e\n/- Goals Accomplished! -/\n"}
{"prompt": "example {a b c d e : Nat} (h1 : a ≤ b) (h2 : c ≤ d) (h3 : 0 ≤ e) :\n    a + c * e + a + c + 0 ≤ b + d * e + b + d + e := by\n  apply_rules (config := {maxDepth := 9}) [Nat.add_le_add, Nat.mul_le_mul_right]\n  guard_target = 0 ≤ e\n  assumption\na b c d e : ℕ\nh1 : a ≤ b\nh2 : c ≤ d\nh3 : 0 ≤ e\n⊢ a + c * e + a + c + 0 ≤ b + d * e + b + d + e\n", "full_text": "example {a b c d e : Nat} (h1 : a ≤ b) (h2 : c ≤ d) (h3 : 0 ≤ e) :\n    a + c * e + a + c + 0 ≤ b + d * e + b + d + e := by\n  apply_rules (config := {maxDepth := 9}) [Nat.add_le_add, Nat.mul_le_mul_right]\n  guard_target = 0 ≤ e\n  assumption\na b c d e : ℕ\nh1 : a ≤ b\nh2 : c ≤ d\nh3 : 0 ≤ e\n⊢ a + c * e + a + c + 0 ≤ b + d * e + b + d + e\n/- case h₂\na b c d e : ℕ\nh1 : a ≤ b\nh2 : c ≤ d\nh3 : 0 ≤ e\n⊢ 0 ≤ e -/\n/- case h₂\na b c d e : ℕ\nh1 : a ≤ b\nh2 : c ≤ d\nh3 : 0 ≤ e\n⊢ 0 ≤ e -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {P Q : Prop} (p : P) (f : P → Q) : Q := by\n  apply_rules only [f]\n  exact p\nP Q : Prop\np : P\nf : P → Q\n⊢ Q\n", "full_text": "example {P Q : Prop} (p : P) (f : P → Q) : Q := by\n  apply_rules only [f]\n  exact p\nP Q : Prop\np : P\nf : P → Q\n⊢ Q\n/- P Q : Prop\np : P\nf : P → Q\n⊢ P -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {P Q : Prop} (p : P) (f : P → Q) : Q := by\n  apply_rules [-p]\n  exact p\nP Q : Prop\np : P\nf : P → Q\n⊢ Q\n", "full_text": "example {P Q : Prop} (p : P) (f : P → Q) : Q := by\n  apply_rules [-p]\n  exact p\nP Q : Prop\np : P\nf : P → Q\n⊢ Q\n/- P Q : Prop\np : P\nf : P → Q\n⊢ P -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (P : Nat → Type) (f : {n : Nat} → P n → P (n + 1)) (g : P 0) : P 2 := by\n  apply_rules only [f, g]\nP : ℕ → Type\nf : {n : ℕ} → P n → P (n + 1)\ng : P 0\n⊢ P 2\n", "full_text": "example (P : Nat → Type) (f : {n : Nat} → P n → P (n + 1)) (g : P 0) : P 2 := by\n  apply_rules only [f, g]\nP : ℕ → Type\nf : {n : ℕ} → P n → P (n + 1)\ng : P 0\n⊢ P 2\n/- Goals Accomplished! -/\n"}
{"prompt": "example (Q : Type) (f : Nat → Q) : Int × Q := by\n  apply_rules only [Prod.mk, f]\n  guard_target = Int\n  exact 0\n  guard_target = Nat\n  exact 37\nQ : Type\nf : ℕ → Q\n⊢ ℤ × Q\n", "full_text": "example (Q : Type) (f : Nat → Q) : Int × Q := by\n  apply_rules only [Prod.mk, f]\n  guard_target = Int\n  exact 0\n  guard_target = Nat\n  exact 37\nQ : Type\nf : ℕ → Q\n⊢ ℤ × Q\n/- case fst\nQ : Type\nf : ℕ → Q\n⊢ ℤ\n---\ncase snd\nQ : Type\nf : ℕ → Q\n⊢ ℕ -/\n/- case fst\nQ : Type\nf : ℕ → Q\n⊢ ℤ\n---\ncase snd\nQ : Type\nf : ℕ → Q\n⊢ ℕ -/\n/- case snd\nQ : Type\nf : ℕ → Q\n⊢ ℕ -/\n/- case snd\nQ : Type\nf : ℕ → Q\n⊢ ℕ -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example [Field α] [LinearOrder α] [IsStrictOrderedRing α] {a b : α} (hb : 0 ≤ b) (hab : a ≤ b) :\n    a / 2 ≤ b / 2 := by\n  fail_if_success\n    apply_rules (config := { transparency := .reducible }) [mul_le_mul]\n  guard_target = a / 2 ≤ b / 2\n  exact div_le_div₀ hb hab zero_lt_two le_rfl\nα : Type u_1\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b : α\nhb : 0 ≤ b\nhab : a ≤ b\n⊢ a / 2 ≤ b / 2\n", "full_text": "example [Field α] [LinearOrder α] [IsStrictOrderedRing α] {a b : α} (hb : 0 ≤ b) (hab : a ≤ b) :\n    a / 2 ≤ b / 2 := by\n  fail_if_success\n    apply_rules (config := { transparency := .reducible }) [mul_le_mul]\n  guard_target = a / 2 ≤ b / 2\n  exact div_le_div₀ hb hab zero_lt_two le_rfl\nα : Type u_1\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b : α\nhb : 0 ≤ b\nhab : a ≤ b\n⊢ a / 2 ≤ b / 2\n/- α : Type u_1\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b : α\nhb : 0 ≤ b\nhab : a ≤ b\n⊢ a / 2 ≤ b / 2 -/\n/- α : Type u_1\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b : α\nhb : 0 ≤ b\nhab : a ≤ b\n⊢ a / 2 ≤ b / 2 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : True := by\n  refine' (by refine' .intro)\n⊢ True\n", "full_text": "example : True := by\n  refine' (by refine' .intro)\n⊢ True\n/- Goals Accomplished! -/\n"}
{"prompt": "example : True := by\n  refine' (by refine' .intro)\n⊢ True\n", "full_text": "example : True := by\n  refine' (by refine' .intro)\n⊢ True\n/- Goals Accomplished! -/\n"}
{"prompt": "example : True := by\n  refine' (by refine' .intro)\n⊢ True\n", "full_text": "example : True := by\n  refine' (by refine' .intro)\n⊢ True\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a : (True ∨ True) ∨ (True ∨ True)): True := by\n  cases' a with b b <;> cases' b <;> trivial\na : (True ∨ True) ∨ True ∨ True\n⊢ True\n", "full_text": "example (a : (True ∨ True) ∨ (True ∨ True)): True := by\n  cases' a with b b <;> cases' b <;> trivial\na : (True ∨ True) ∨ True ∨ True\n⊢ True\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a : (True ∨ True) ∨ (True ∨ True)): True := by\n  cases' a with b b <;> cases' b <;> trivial\na : (True ∨ True) ∨ True ∨ True\n⊢ True\n", "full_text": "example (a : (True ∨ True) ∨ (True ∨ True)): True := by\n  cases' a with b b <;> cases' b <;> trivial\na : (True ∨ True) ∨ True ∨ True\n⊢ True\n/- Goals Accomplished! -/\n"}
{"prompt": "example : True ∧ True := by\n  have : True := by\n    · admit\n  let foo : Nat := by admit\n  refine ⟨?_, ?_⟩\n  · admit\n  · admit\n⊢ True ∧ True\n", "full_text": "example : True ∧ True := by\n  have : True := by\n    · admit\n  let foo : Nat := by admit\n  refine ⟨?_, ?_⟩\n  · admit\n  · admit\n⊢ True ∧ True\n/- this : True\n⊢ True ∧ True -/\n/- this : True\nfoo : ℕ := sorry\n⊢ True ∧ True -/\n/- case refine_1\nthis : True\nfoo : ℕ := sorry\n⊢ True\n---\ncase refine_2\nthis : True\nfoo : ℕ := sorry\n⊢ True -/\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (p q : Prop) (h : ¬ (p ↔ q)) (h' : ¬ q) (h'' : ¬ p) : False := by\n  tauto\np✝² q✝² r✝¹ : Prop\nh✝¹ : p✝² ∧ q✝² ∨ p✝² ∧ r✝¹\nα✝ : Type\np✝¹ q✝¹ r✝ : α✝ → Prop\nh✝ : (∃ x, p✝¹ x ∧ q✝¹ x) ∨ ∃ x, p✝¹ x ∧ r✝ x\nα : Type\nx : α\np✝ q✝ r : α → Prop\nh₀ : (∀ (x : α), p✝ x → q✝ x → r x) ∨ r x\nh₁ : p✝ x\nh₂ : q✝ x\np q : Prop\nh : ¬(p ↔ q)\nh' : ¬q\nh'' : ¬p\n⊢ False\n", "full_text": "example (p q : Prop) (h : ¬ (p ↔ q)) (h' : ¬ q) (h'' : ¬ p) : False := by\n  tauto\np✝² q✝² r✝¹ : Prop\nh✝¹ : p✝² ∧ q✝² ∨ p✝² ∧ r✝¹\nα✝ : Type\np✝¹ q✝¹ r✝ : α✝ → Prop\nh✝ : (∃ x, p✝¹ x ∧ q✝¹ x) ∨ ∃ x, p✝¹ x ∧ r✝ x\nα : Type\nx : α\np✝ q✝ r : α → Prop\nh₀ : (∀ (x : α), p✝ x → q✝ x → r x) ∨ r x\nh₁ : p✝ x\nh₂ : q✝ x\np q : Prop\nh : ¬(p ↔ q)\nh' : ¬q\nh'' : ¬p\n⊢ False\n/- Goals Accomplished! -/\n"}
{"prompt": "example (p q r : Prop) (h : p ↔ q) (h' : r ↔ q) (h'' : ¬ r) : ¬ p := by\n  tauto\np✝² q✝² r✝² : Prop\nh✝¹ : p✝² ∧ q✝² ∨ p✝² ∧ r✝²\nα✝ : Type\np✝¹ q✝¹ r✝¹ : α✝ → Prop\nh✝ : (∃ x, p✝¹ x ∧ q✝¹ x) ∨ ∃ x, p✝¹ x ∧ r✝¹ x\nα : Type\nx : α\np✝ q✝ r✝ : α → Prop\nh₀ : (∀ (x : α), p✝ x → q✝ x → r✝ x) ∨ r✝ x\nh₁ : p✝ x\nh₂ : q✝ x\np q r : Prop\nh : p ↔ q\nh' : r ↔ q\nh'' : ¬r\n⊢ ¬p\n", "full_text": "example (p q r : Prop) (h : p ↔ q) (h' : r ↔ q) (h'' : ¬ r) : ¬ p := by\n  tauto\np✝² q✝² r✝² : Prop\nh✝¹ : p✝² ∧ q✝² ∨ p✝² ∧ r✝²\nα✝ : Type\np✝¹ q✝¹ r✝¹ : α✝ → Prop\nh✝ : (∃ x, p✝¹ x ∧ q✝¹ x) ∨ ∃ x, p✝¹ x ∧ r✝¹ x\nα : Type\nx : α\np✝ q✝ r✝ : α → Prop\nh₀ : (∀ (x : α), p✝ x → q✝ x → r✝ x) ∨ r✝ x\nh₁ : p✝ x\nh₂ : q✝ x\np q r : Prop\nh : p ↔ q\nh' : r ↔ q\nh'' : ¬r\n⊢ ¬p\n/- Goals Accomplished! -/\n"}
{"prompt": "example (p : Prop) (h : False) : p := by\n  -- causes `h'` to have a type that's a metavariable:\n  have h' := h\n  clear h\n  tauto\np✝² q✝¹ r✝¹ : Prop\nh✝¹ : p✝² ∧ q✝¹ ∨ p✝² ∧ r✝¹\nα✝ : Type\np✝¹ q✝ r✝ : α✝ → Prop\nh✝ : (∃ x, p✝¹ x ∧ q✝ x) ∨ ∃ x, p✝¹ x ∧ r✝ x\nα : Type\nx : α\np✝ q r : α → Prop\nh₀ : (∀ (x : α), p✝ x → q x → r x) ∨ r x\nh₁ : p✝ x\nh₂ : q x\np : Prop\nh : False\n⊢ p\n", "full_text": "example (p : Prop) (h : False) : p := by\n  -- causes `h'` to have a type that's a metavariable:\n  have h' := h\n  clear h\n  tauto\np✝² q✝¹ r✝¹ : Prop\nh✝¹ : p✝² ∧ q✝¹ ∨ p✝² ∧ r✝¹\nα✝ : Type\np✝¹ q✝ r✝ : α✝ → Prop\nh✝ : (∃ x, p✝¹ x ∧ q✝ x) ∨ ∃ x, p✝¹ x ∧ r✝ x\nα : Type\nx : α\np✝ q r : α → Prop\nh₀ : (∀ (x : α), p✝ x → q x → r x) ∨ r x\nh₁ : p✝ x\nh₂ : q x\np : Prop\nh : False\n⊢ p\n/- p✝² q✝¹ r✝¹ : Prop\nh✝¹ : p✝² ∧ q✝¹ ∨ p✝² ∧ r✝¹\nα✝ : Type\np✝¹ q✝ r✝ : α✝ → Prop\nh✝ : (∃ x, p✝¹ x ∧ q✝ x) ∨ ∃ x, p✝¹ x ∧ r✝ x\nα : Type\nx : α\np✝ q r : α → Prop\nh₀ : (∀ (x : α), p✝ x → q x → r x) ∨ r x\nh₁ : p✝ x\nh₂ : q x\np : Prop\nh h' : False\n⊢ p -/\n/- p✝² q✝¹ r✝¹ : Prop\nh✝ : p✝² ∧ q✝¹ ∨ p✝² ∧ r✝¹\nα✝ : Type\np✝¹ q✝ r✝ : α✝ → Prop\nh : (∃ x, p✝¹ x ∧ q✝ x) ∨ ∃ x, p✝¹ x ∧ r✝ x\nα : Type\nx : α\np✝ q r : α → Prop\nh₀ : (∀ (x : α), p✝ x → q x → r x) ∨ r x\nh₁ : p✝ x\nh₂ : q x\np : Prop\nh' : False\n⊢ p -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (P : Nat → Prop) (n : Nat) : P n → n = 7 ∨ n = 0 ∨ ¬ (n = 7 ∨ n = 0) ∧ P n := by\n  tauto\np✝¹ q✝¹ r✝¹ : Prop\nh✝ : p✝¹ ∧ q✝¹ ∨ p✝¹ ∧ r✝¹\nα✝ : Type\np✝ q✝ r✝ : α✝ → Prop\nh : (∃ x, p✝ x ∧ q✝ x) ∨ ∃ x, p✝ x ∧ r✝ x\nα : Type\nx : α\np q r : α → Prop\nh₀ : (∀ (x : α), p x → q x → r x) ∨ r x\nh₁ : p x\nh₂ : q x\nP : ℕ → Prop\nn : ℕ\n⊢ P n → n = 7 ∨ n = 0 ∨ ¬(n = 7 ∨ n = 0) ∧ P n\n", "full_text": "example (P : Nat → Prop) (n : Nat) : P n → n = 7 ∨ n = 0 ∨ ¬ (n = 7 ∨ n = 0) ∧ P n := by\n  tauto\np✝¹ q✝¹ r✝¹ : Prop\nh✝ : p✝¹ ∧ q✝¹ ∨ p✝¹ ∧ r✝¹\nα✝ : Type\np✝ q✝ r✝ : α✝ → Prop\nh : (∃ x, p✝ x ∧ q✝ x) ∨ ∃ x, p✝ x ∧ r✝ x\nα : Type\nx : α\np q r : α → Prop\nh₀ : (∀ (x : α), p x → q x → r x) ∨ r x\nh₁ : p x\nh₂ : q x\nP : ℕ → Prop\nn : ℕ\n⊢ P n → n = 7 ∨ n = 0 ∨ ¬(n = 7 ∨ n = 0) ∧ P n\n/- Goals Accomplished! -/\n"}
{"prompt": "example : ¬(¬a ≤ b ∧ a ≤ c ∨ ¬a ≤ c ∧ a ≤ b) ↔ a ≤ b ∧ a ≤ c ∨ ¬a ≤ c ∧ ¬a ≤ b := by\n  tauto\np✝¹ q✝¹ r✝¹ : Prop\nh✝ : p✝¹ ∧ q✝¹ ∨ p✝¹ ∧ r✝¹\nα✝ : Type\np✝ q✝ r✝ : α✝ → Prop\nh : (∃ x, p✝ x ∧ q✝ x) ∨ ∃ x, p✝ x ∧ r✝ x\nα : Type\nx : α\np q r : α → Prop\nh₀ : (∀ (x : α), p x → q x → r x) ∨ r x\nh₁ : p x\nh₂ : q x\na b c : ℕ\n⊢ ¬(¬a ≤ b ∧ a ≤ c ∨ ¬a ≤ c ∧ a ≤ b) ↔ a ≤ b ∧ a ≤ c ∨ ¬a ≤ c ∧ ¬a ≤ b\n", "full_text": "example : ¬(¬a ≤ b ∧ a ≤ c ∨ ¬a ≤ c ∧ a ≤ b) ↔ a ≤ b ∧ a ≤ c ∨ ¬a ≤ c ∧ ¬a ≤ b := by\n  tauto\np✝¹ q✝¹ r✝¹ : Prop\nh✝ : p✝¹ ∧ q✝¹ ∨ p✝¹ ∧ r✝¹\nα✝ : Type\np✝ q✝ r✝ : α✝ → Prop\nh : (∃ x, p✝ x ∧ q✝ x) ∨ ∃ x, p✝ x ∧ r✝ x\nα : Type\nx : α\np q r : α → Prop\nh₀ : (∀ (x : α), p x → q x → r x) ∨ r x\nh₁ : p x\nh₂ : q x\na b c : ℕ\n⊢ ¬(¬a ≤ b ∧ a ≤ c ∨ ¬a ≤ c ∧ a ≤ b) ↔ a ≤ b ∧ a ≤ c ∨ ¬a ≤ c ∧ ¬a ≤ b\n/- Goals Accomplished! -/\n"}
{"prompt": "example {α : Type*} {β : Type*} (a : α) {s_1 : Set α} :\n    (∃ (a_1 : α), a_1 = a ∨ a_1 ∈ s_1) := by\n  tauto {closer := `[simp]}\np✝² q✝² r✝² : Prop\nh✝¹ : p✝² ∧ q✝² ∨ p✝² ∧ r✝²\nα✝³ : Type\np✝¹ q✝¹ r✝¹ : α✝³ → Prop\nh✝ : (∃ x, p✝¹ x ∧ q✝¹ x) ∨ ∃ x, p✝¹ x ∧ r✝¹ x\nα✝² : Type\nx✝¹ : α✝²\np✝ q✝ r✝ : α✝² → Prop\nh₀ : (∀ (x : α✝²), p✝ x → q✝ x → r✝ x) ∨ r✝ x✝¹\nh₁ : p✝ x✝¹\nh₂ : q✝ x✝¹\na✝ b c : ℕ\np q r : Prop\nα✝¹ : Type\nx✝ y✝ : α✝¹\nh : x✝ = y✝\nh'' : (p ∧ q ↔ q ∨ r) ↔ (r ∧ p ↔ r ∨ q)\nα✝ : Type\nx y z w : α✝\nα : Type u_1\nβ : Type u_2\na : α\ns_1 : Set α\n⊢ ∃ a_1, a_1 = a ∨ a_1 ∈ s_1\n", "full_text": "example {α : Type*} {β : Type*} (a : α) {s_1 : Set α} :\n    (∃ (a_1 : α), a_1 = a ∨ a_1 ∈ s_1) := by\n  tauto {closer := `[simp]}\np✝² q✝² r✝² : Prop\nh✝¹ : p✝² ∧ q✝² ∨ p✝² ∧ r✝²\nα✝³ : Type\np✝¹ q✝¹ r✝¹ : α✝³ → Prop\nh✝ : (∃ x, p✝¹ x ∧ q✝¹ x) ∨ ∃ x, p✝¹ x ∧ r✝¹ x\nα✝² : Type\nx✝¹ : α✝²\np✝ q✝ r✝ : α✝² → Prop\nh₀ : (∀ (x : α✝²), p✝ x → q✝ x → r✝ x) ∨ r✝ x✝¹\nh₁ : p✝ x✝¹\nh₂ : q✝ x✝¹\na✝ b c : ℕ\np q r : Prop\nα✝¹ : Type\nx✝ y✝ : α✝¹\nh : x✝ = y✝\nh'' : (p ∧ q ↔ q ∨ r) ↔ (r ∧ p ↔ r ∨ q)\nα✝ : Type\nx y z w : α✝\nα : Type u_1\nβ : Type u_2\na : α\ns_1 : Set α\n⊢ ∃ a_1, a_1 = a ∨ a_1 ∈ s_1\n/- Goals Accomplished! -/\n"}
{"prompt": "example : (((r ∧ p ↔ r ∨ q) ∧ (q ∨ r)) → (p ∧ (x = w) ∧ (¬ x = w → p ∧ q ∧ r))) := by\n  tauto {closer := `[cc]}\np✝³ q✝³ r✝³ : Prop\nh✝² : p✝³ ∧ q✝³ ∨ p✝³ ∧ r✝³\nα✝³ : Type\np✝² q✝² r✝² : α✝³ → Prop\nh✝¹ : (∃ x, p✝² x ∧ q✝² x) ∨ ∃ x, p✝² x ∧ r✝² x\nα✝² : Type\nx✝² : α✝²\np✝¹ q✝¹ r✝¹ : α✝² → Prop\nh₀ : (∀ (x : α✝²), p✝¹ x → q✝¹ x → r✝¹ x) ∨ r✝¹ x✝²\nh₁✝ : p✝¹ x✝²\nh₂✝ : q✝¹ x✝²\na b c : ℕ\np✝ q✝ r✝ : Prop\nα✝¹ : Type\nx✝¹ y✝¹ : α✝¹\nh✝ : x✝¹ = y✝¹\nh''✝ : (p✝ ∧ q✝ ↔ q✝ ∨ r✝) ↔ (r✝ ∧ p✝ ↔ r✝ ∨ q✝)\nα✝ : Type\nx✝ y✝ z✝ w✝ : α✝\np q r : Prop\nα : Type\nx y z w : α\nh : x = y\nh₁ : y = z\nh₂ : z = w\nh'' : (p ∧ q ↔ q ∨ r) ↔ (r ∧ p ↔ r ∨ q)\n⊢ (r ∧ p ↔ r ∨ q) ∧ (q ∨ r) → p ∧ x = w ∧ (¬x = w → p ∧ q ∧ r)\n", "full_text": "example : (((r ∧ p ↔ r ∨ q) ∧ (q ∨ r)) → (p ∧ (x = w) ∧ (¬ x = w → p ∧ q ∧ r))) := by\n  tauto {closer := `[cc]}\np✝³ q✝³ r✝³ : Prop\nh✝² : p✝³ ∧ q✝³ ∨ p✝³ ∧ r✝³\nα✝³ : Type\np✝² q✝² r✝² : α✝³ → Prop\nh✝¹ : (∃ x, p✝² x ∧ q✝² x) ∨ ∃ x, p✝² x ∧ r✝² x\nα✝² : Type\nx✝² : α✝²\np✝¹ q✝¹ r✝¹ : α✝² → Prop\nh₀ : (∀ (x : α✝²), p✝¹ x → q✝¹ x → r✝¹ x) ∨ r✝¹ x✝²\nh₁✝ : p✝¹ x✝²\nh₂✝ : q✝¹ x✝²\na b c : ℕ\np✝ q✝ r✝ : Prop\nα✝¹ : Type\nx✝¹ y✝¹ : α✝¹\nh✝ : x✝¹ = y✝¹\nh''✝ : (p✝ ∧ q✝ ↔ q✝ ∨ r✝) ↔ (r✝ ∧ p✝ ↔ r✝ ∨ q✝)\nα✝ : Type\nx✝ y✝ z✝ w✝ : α✝\np q r : Prop\nα : Type\nx y z w : α\nh : x = y\nh₁ : y = z\nh₂ : z = w\nh'' : (p ∧ q ↔ q ∨ r) ↔ (r ∧ p ↔ r ∨ q)\n⊢ (r ∧ p ↔ r ∨ q) ∧ (q ∨ r) → p ∧ x = w ∧ (¬x = w → p ∧ q ∧ r)\n/- Goals Accomplished! -/\n"}
{"prompt": "example {x y : Nat} (h : ¬x ≠ y) : x = y := by\n  tauto\np✝³ q✝³ r✝³ : Prop\nh✝³ : p✝³ ∧ q✝³ ∨ p✝³ ∧ r✝³\nα✝³ : Type\np✝² q✝² r✝² : α✝³ → Prop\nh✝² : (∃ x, p✝² x ∧ q✝² x) ∨ ∃ x, p✝² x ∧ r✝² x\nα✝² : Type\nx✝³ : α✝²\np✝¹ q✝¹ r✝¹ : α✝² → Prop\nh₀ : (∀ (x : α✝²), p✝¹ x → q✝¹ x → r✝¹ x) ∨ r✝¹ x✝³\nh₁✝ : p✝¹ x✝³\nh₂✝ : q✝¹ x✝³\na b c : ℕ\np✝ q✝ r✝ : Prop\nα✝¹ : Type\nx✝² y✝² : α✝¹\nh✝¹ : x✝² = y✝²\nh''✝ : (p✝ ∧ q✝ ↔ q✝ ∨ r✝) ↔ (r✝ ∧ p✝ ↔ r✝ ∨ q✝)\nα✝ : Type\nx✝¹ y✝¹ z✝ w✝ : α✝\np q r : Prop\nα : Type\nx✝ y✝ z w : α\nh✝ : x✝ = y✝\nh₁ : y✝ = z\nh₂ : z = w\nh'' : (p ∧ q ↔ q ∨ r) ↔ (r ∧ p ↔ r ∨ q)\nx y : ℕ\nh : ¬x ≠ y\n⊢ x = y\n", "full_text": "example {x y : Nat} (h : ¬x ≠ y) : x = y := by\n  tauto\np✝³ q✝³ r✝³ : Prop\nh✝³ : p✝³ ∧ q✝³ ∨ p✝³ ∧ r✝³\nα✝³ : Type\np✝² q✝² r✝² : α✝³ → Prop\nh✝² : (∃ x, p✝² x ∧ q✝² x) ∨ ∃ x, p✝² x ∧ r✝² x\nα✝² : Type\nx✝³ : α✝²\np✝¹ q✝¹ r✝¹ : α✝² → Prop\nh₀ : (∀ (x : α✝²), p✝¹ x → q✝¹ x → r✝¹ x) ∨ r✝¹ x✝³\nh₁✝ : p✝¹ x✝³\nh₂✝ : q✝¹ x✝³\na b c : ℕ\np✝ q✝ r✝ : Prop\nα✝¹ : Type\nx✝² y✝² : α✝¹\nh✝¹ : x✝² = y✝²\nh''✝ : (p✝ ∧ q✝ ↔ q✝ ∨ r✝) ↔ (r✝ ∧ p✝ ↔ r✝ ∨ q✝)\nα✝ : Type\nx✝¹ y✝¹ z✝ w✝ : α✝\np q r : Prop\nα : Type\nx✝ y✝ z w : α\nh✝ : x✝ = y✝\nh₁ : y✝ = z\nh₂ : z = w\nh'' : (p ∧ q ↔ q ∨ r) ↔ (r ∧ p ↔ r ∨ q)\nx y : ℕ\nh : ¬x ≠ y\n⊢ x = y\n/- Goals Accomplished! -/\n"}
{"prompt": "example (p : Prop) (o : Part α) (h : p → o.Dom) (a : α) :\n    a ∈ restrict p o h ↔ p ∧ a ∈ o := by\n  dsimp [restrict, mem_eq]\n  tauto\np✝⁴ q✝³ r✝³ : Prop\nh✝³ : p✝⁴ ∧ q✝³ ∨ p✝⁴ ∧ r✝³\nα✝³ : Type\np✝³ q✝² r✝² : α✝³ → Prop\nh✝² : (∃ x, p✝³ x ∧ q✝² x) ∨ ∃ x, p✝³ x ∧ r✝² x\nα✝² : Type\nx✝³ : α✝²\np✝² q✝¹ r✝¹ : α✝² → Prop\nh₀ : (∀ (x : α✝²), p✝² x → q✝¹ x → r✝¹ x) ∨ r✝¹ x✝³\nh₁✝ : p✝² x✝³\nh₂✝ : q✝¹ x✝³\na✝ b c : ℕ\np✝¹ q✝ r✝ : Prop\nα✝¹ : Type\nx✝² y✝¹ : α✝¹\nh✝¹ : x✝² = y✝¹\nh''✝ : (p✝¹ ∧ q✝ ↔ q✝ ∨ r✝) ↔ (r✝ ∧ p✝¹ ↔ r✝ ∨ q✝)\nα✝ : Type\nx✝¹ y✝ z✝ w✝ : α✝\np✝ q r : Prop\nα : Type\nx y z w : α\nh✝ : x = y\nh₁ : y = z\nh₂ : z = w\nh'' : (p✝ ∧ q ↔ q ∨ r) ↔ (r ∧ p✝ ↔ r ∨ q)\nx✝ : Sort u_1\nrestrict : x✝\np : Prop\no : Part α\nh : p → o.Dom\na : α\n⊢ a ∈ sorry ↔ p ∧ a ∈ o\n", "full_text": "example (p : Prop) (o : Part α) (h : p → o.Dom) (a : α) :\n    a ∈ restrict p o h ↔ p ∧ a ∈ o := by\n  dsimp [restrict, mem_eq]\n  tauto\np✝⁴ q✝³ r✝³ : Prop\nh✝³ : p✝⁴ ∧ q✝³ ∨ p✝⁴ ∧ r✝³\nα✝³ : Type\np✝³ q✝² r✝² : α✝³ → Prop\nh✝² : (∃ x, p✝³ x ∧ q✝² x) ∨ ∃ x, p✝³ x ∧ r✝² x\nα✝² : Type\nx✝³ : α✝²\np✝² q✝¹ r✝¹ : α✝² → Prop\nh₀ : (∀ (x : α✝²), p✝² x → q✝¹ x → r✝¹ x) ∨ r✝¹ x✝³\nh₁✝ : p✝² x✝³\nh₂✝ : q✝¹ x✝³\na✝ b c : ℕ\np✝¹ q✝ r✝ : Prop\nα✝¹ : Type\nx✝² y✝¹ : α✝¹\nh✝¹ : x✝² = y✝¹\nh''✝ : (p✝¹ ∧ q✝ ↔ q✝ ∨ r✝) ↔ (r✝ ∧ p✝¹ ↔ r✝ ∨ q✝)\nα✝ : Type\nx✝¹ y✝ z✝ w✝ : α✝\np✝ q r : Prop\nα : Type\nx y z w : α\nh✝ : x = y\nh₁ : y = z\nh₂ : z = w\nh'' : (p✝ ∧ q ↔ q ∨ r) ↔ (r ∧ p✝ ↔ r ∨ q)\nx✝ : Sort u_1\nrestrict : x✝\np : Prop\no : Part α\nh : p → o.Dom\na : α\n⊢ a ∈ sorry ↔ p ∧ a ∈ o\n/- p✝⁴ q✝³ r✝³ : Prop\nh✝³ : p✝⁴ ∧ q✝³ ∨ p✝⁴ ∧ r✝³\nα✝³ : Type\np✝³ q✝² r✝² : α✝³ → Prop\nh✝² : (∃ x, p✝³ x ∧ q✝² x) ∨ ∃ x, p✝³ x ∧ r✝² x\nα✝² : Type\nx✝³ : α✝²\np✝² q✝¹ r✝¹ : α✝² → Prop\nh₀ : (∀ (x : α✝²), p✝² x → q✝¹ x → r✝¹ x) ∨ r✝¹ x✝³\nh₁✝ : p✝² x✝³\nh₂✝ : q✝¹ x✝³\na✝ b c : ℕ\np✝¹ q✝ r✝ : Prop\nα✝¹ : Type\nx✝² y✝¹ : α✝¹\nh✝¹ : x✝² = y✝¹\nh''✝ : (p✝¹ ∧ q✝ ↔ q✝ ∨ r✝) ↔ (r✝ ∧ p✝¹ ↔ r✝ ∨ q✝)\nα✝ : Type\nx✝¹ y✝ z✝ w✝ : α✝\np✝ q r : Prop\nα : Type\nx y z w : α\nh✝ : x = y\nh₁ : y = z\nh₂ : z = w\nh'' : (p✝ ∧ q ↔ q ∨ r) ↔ (r ∧ p✝ ↔ r ∨ q)\nx✝ : Sort u_1\nrestrict : x✝\np : Prop\no : Part α\nh : p → o.Dom\na : α\n⊢ a ∈ sorry () ↔ p ∧ a ∈ o -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x : Nat) (h : x = x) : x = x := by\n  set! p := h\n  set q : x = x := p\n  apply q\nx : ℕ\nh : x = x\n⊢ x = x\n", "full_text": "example (x : Nat) (h : x = x) : x = x := by\n  set! p := h\n  set q : x = x := p\n  apply q\nx : ℕ\nh : x = x\n⊢ x = x\n/- x : ℕ\nh : x = x\np : x = x := h\n⊢ x = x -/\n/- x : ℕ\nh : x = x\np : x = x := h\nq : x = x := p\n⊢ x = x -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x : Nat) (h : x + x - x = 3) : x + x - x = 3 := by\n  set! y := x with ← h2\n  set w := x\n  guard_hyp y := x\n  guard_hyp w := x\n  guard_hyp h : w + w - w = 3\n  guard_hyp h2 : w = y\n  set z := w with _h3\n  set a := 3\n  guard_target = z + z - z = a\n  set i'm_the_goal : Prop := z + z - z = a\n  guard_target = i'm_the_goal\n  apply h\nx : ℕ\nh : x + x - x = 3\n⊢ x + x - x = 3\n", "full_text": "example (x : Nat) (h : x + x - x = 3) : x + x - x = 3 := by\n  set! y := x with ← h2\n  set w := x\n  guard_hyp y := x\n  guard_hyp w := x\n  guard_hyp h : w + w - w = 3\n  guard_hyp h2 : w = y\n  set z := w with _h3\n  set a := 3\n  guard_target = z + z - z = a\n  set i'm_the_goal : Prop := z + z - z = a\n  guard_target = i'm_the_goal\n  apply h\nx : ℕ\nh : x + x - x = 3\n⊢ x + x - x = 3\n/- x : ℕ\nh : x + x - x = 3\ny : ℕ := x\nh2 : x = y\n⊢ x + x - x = 3 -/\n/- x : ℕ\ny : ℕ := x\nw : ℕ := x\nh : w + w - w = 3\nh2 : w = y\n⊢ w + w - w = 3 -/\n/- x : ℕ\ny : ℕ := x\nw : ℕ := x\nh : w + w - w = 3\nh2 : w = y\n⊢ w + w - w = 3 -/\n/- x : ℕ\ny : ℕ := x\nw : ℕ := x\nh : w + w - w = 3\nh2 : w = y\n⊢ w + w - w = 3 -/\n/- x : ℕ\ny : ℕ := x\nw : ℕ := x\nh : w + w - w = 3\nh2 : w = y\n⊢ w + w - w = 3 -/\n/- x : ℕ\ny : ℕ := x\nw : ℕ := x\nh : w + w - w = 3\nh2 : w = y\n⊢ w + w - w = 3 -/\n/- x : ℕ\ny : ℕ := x\nw : ℕ := x\nz : ℕ := w\nh : z + z - z = 3\nh2 : z = y\n_h3 : z = w\n⊢ z + z - z = 3 -/\n/- x : ℕ\ny : ℕ := x\nw : ℕ := x\nz : ℕ := w\nh2 : z = y\n_h3 : z = w\na : ℕ := 3\nh : z + z - z = a\n⊢ z + z - z = a -/\n/- x : ℕ\ny : ℕ := x\nw : ℕ := x\nz : ℕ := w\nh2 : z = y\n_h3 : z = w\na : ℕ := 3\nh : z + z - z = a\n⊢ z + z - z = a -/\n/- x : ℕ\ny : ℕ := x\nw : ℕ := x\nz : ℕ := w\nh2 : z = y\n_h3 : z = w\na : ℕ := 3\ni'm_the_goal : Prop := z + z - z = a\nh : i'm_the_goal\n⊢ i'm_the_goal -/\n/- x : ℕ\ny : ℕ := x\nw : ℕ := x\nz : ℕ := w\nh2 : z = y\n_h3 : z = w\na : ℕ := 3\ni'm_the_goal : Prop := z + z - z = a\nh : i'm_the_goal\n⊢ i'm_the_goal -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x : Nat) (h : x - x = 0) : x = x := by\n  set y : Nat := x\n  set! z := y + 1 with ← _eq1\n  set! p : x - x = 0 := h with _eq2\n  rfl\nx : ℕ\nh : x - x = 0\n⊢ x = x\n", "full_text": "example (x : Nat) (h : x - x = 0) : x = x := by\n  set y : Nat := x\n  set! z := y + 1 with ← _eq1\n  set! p : x - x = 0 := h with _eq2\n  rfl\nx : ℕ\nh : x - x = 0\n⊢ x = x\n/- x : ℕ\ny : ℕ := x\nh : y - y = 0\n⊢ y = y -/\n/- x : ℕ\ny : ℕ := x\nh : y - y = 0\nz : ℕ := y + 1\n_eq1 : y + 1 = z\n⊢ y = y -/\n/- x : ℕ\ny : ℕ := x\nh : y - y = 0\nz : ℕ := y + 1\n_eq1 : y + 1 = z\np : x - x = 0 := h\n_eq2 : p = h\n⊢ y = y -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : True := by\n  set g : Nat → Int := (fun ε => ε) with _h\n  trivial\n⊢ True\n", "full_text": "example : True := by\n  set g : Nat → Int := (fun ε => ε) with _h\n  trivial\n⊢ True\n/- g : ℕ → ℤ := fun ε => ↑ε\n_h : g = fun ε => ↑ε\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {_a _b _c _d _e _f _g _h : Nat} : 1 = 1 := by\n  set a : Nat := test with _h\n  trivial\n_a _b _c _d _e _f _g _h : ℕ\n⊢ 1 = 1\n", "full_text": "example {_a _b _c _d _e _f _g _h : Nat} : 1 = 1 := by\n  set a : Nat := test with _h\n  trivial\n_a _b _c _d _e _f _g _h : ℕ\n⊢ 1 = 1\n/- _a _b _c _d _e _f _g _h✝ : ℕ\na : ℕ := sorry\n_h : a = sorry\n⊢ 1 = 1 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : True := by\n  classical\n  let zero' := 0\n  replace _zero := zero'\n  let eq := (rfl : 0 = 0)\n  replace _eq := eq\n  tauto\n⊢ True\n", "full_text": "example : True := by\n  classical\n  let zero' := 0\n  replace _zero := zero'\n  let eq := (rfl : 0 = 0)\n  replace _eq := eq\n  tauto\n⊢ True\n/- Goals Accomplished! -/\n"}
{"prompt": "example : True := by\n  noise\n  have ⟨_zero, _⟩ : Fin 1 := ⟨0, Nat.zero_lt_one⟩\n  exact .intro\n⊢ True\n", "full_text": "example : True := by\n  noise\n  have ⟨_zero, _⟩ : Fin 1 := ⟨0, Nat.zero_lt_one⟩\n  exact .intro\n⊢ True\n/- ⊢ True -/\n"}
{"prompt": "example : True := by\n  have ⟨_zero, _⟩ : Fin 1 := ⟨0, Nat.zero_lt_one⟩\n  exact .intro\n⊢ True\n", "full_text": "example : True := by\n  have ⟨_zero, _⟩ : Fin 1 := ⟨0, Nat.zero_lt_one⟩\n  exact .intro\n⊢ True\n/- _zero : ℕ\nisLt✝ : _zero < 1\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : True := by\n  have ⟨_zero, _⟩ : Fin 1 := ⟨0, Nat.zero_lt_one⟩\n  exact .intro\n⊢ True\n", "full_text": "example : True := by\n  have ⟨_zero, _⟩ : Fin 1 := ⟨0, Nat.zero_lt_one⟩\n  exact .intro\n⊢ True\n/- _zero : ℕ\nisLt✝ : _zero < 1\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : True := by\n  have ⟨_zero, _⟩ : Fin 1 := ⟨0, Nat.zero_lt_one⟩\n  noise\n  exact .intro\n⊢ True\n", "full_text": "example : True := by\n  have ⟨_zero, _⟩ : Fin 1 := ⟨0, Nat.zero_lt_one⟩\n  noise\n  exact .intro\n⊢ True\n/- _zero : ℕ\nisLt✝ : _zero < 1\n⊢ True -/\n/- _zero : ℕ\nisLt✝ : _zero < 1\n⊢ True -/\n"}
{"prompt": "example : True := by\n  have ⟨_zero, _⟩ : Fin 1 := ⟨0, Nat.zero_lt_one⟩\n  noise\n  exact .intro\n⊢ True\n", "full_text": "example : True := by\n  have ⟨_zero, _⟩ : Fin 1 := ⟨0, Nat.zero_lt_one⟩\n  noise\n  exact .intro\n⊢ True\n/- _zero : ℕ\nisLt✝ : _zero < 1\n⊢ True -/\n/- _zero : ℕ\nisLt✝ : _zero < 1\n⊢ True -/\n"}
{"prompt": "example : True := by\n  noise\n  have _a := 0\n  have _b : Nat := 0\n  have _b : 0 = 0 := rfl\n  have _oh : Nat := 0\n  have _b : Nat := 2\n  tauto\n⊢ True\n", "full_text": "example : True := by\n  noise\n  have _a := 0\n  have _b : Nat := 0\n  have _b : 0 = 0 := rfl\n  have _oh : Nat := 0\n  have _b : Nat := 2\n  tauto\n⊢ True\n/- ⊢ True -/\n"}
{"prompt": "example : True := by\n  have := Nat.succ ?_;\n  noise\n  exact .intro\n  exact 0\n⊢ True\n", "full_text": "example : True := by\n  have := Nat.succ ?_;\n  noise\n  exact .intro\n  exact 0\n⊢ True\n/- case refine_2\nthis : ℕ\n⊢ True\n---\ncase refine_1\n⊢ ℕ -/\n/- case refine_2\nthis : ℕ\n⊢ True\n---\ncase refine_1\n⊢ ℕ -/\n"}
{"prompt": "example : True := by\n  have := And.intro (Nat.add_comm ?_ ?_) (Nat.add_comm ?_ ?_)\n  apply True.intro\n  noise\n  repeat exact 0\n⊢ True\n", "full_text": "example : True := by\n  have := And.intro (Nat.add_comm ?_ ?_) (Nat.add_comm ?_ ?_)\n  apply True.intro\n  noise\n  repeat exact 0\n⊢ True\n/- case refine_5\nthis : ?refine_1 + ?refine_2 = ?refine_2 + ?refine_1 ∧ ?refine_3 + ?refine_4 = ?refine_4 + ?refine_3\n⊢ True\n---\ncase refine_1\n⊢ ℕ\n---\ncase refine_2\n⊢ ℕ\n---\ncase refine_3\n⊢ ℕ\n---\ncase refine_4\n⊢ ℕ -/\n/- case refine_1\n⊢ ℕ\n---\ncase refine_2\n⊢ ℕ\n---\ncase refine_3\n⊢ ℕ\n---\ncase refine_4\n⊢ ℕ -/\n/- case refine_1\n⊢ ℕ\n---\ncase refine_2\n⊢ ℕ\n---\ncase refine_3\n⊢ ℕ\n---\ncase refine_4\n⊢ ℕ -/\n"}
{"prompt": "example (h : False) : True := by\n  have : False := h\n  noise\n  exact .intro\nh : False\n⊢ True\n", "full_text": "example (h : False) : True := by\n  have : False := h\n  noise\n  exact .intro\nh : False\n⊢ True\n/- h this : False\n⊢ True -/\n/- h this : False\n⊢ True -/\n"}
{"prompt": "theorem ghi : True := by\n  noise\n  have : Nat := Nat.succ 1;\n  exact .intro\n⊢ True\n", "full_text": "theorem ghi : True := by\n  noise\n  have : Nat := Nat.succ 1;\n  exact .intro\n⊢ True\n/- ⊢ True -/\n"}
{"prompt": "example : 0 = 0 := by\n  rw [] -- this goal is closed by the `rfl` implied by `rw`\na✝ a : ℕ\n⊢ 0 = 0\n", "full_text": "example : 0 = 0 := by\n  rw [] -- this goal is closed by the `rfl` implied by `rw`\na✝ a : ℕ\n⊢ 0 = 0\n/- Goals Accomplished! -/\n"}
{"prompt": "example [AddCommGroup α] (n : ℕ) (a : α) : 0 + n • a = n • a := by abel1\nα : Type u_1\na✝ b : α\ninst✝ : AddCommGroup α\nn : ℕ\na : α\n⊢ 0 + n • a = n • a\n", "full_text": "example [AddCommGroup α] (n : ℕ) (a : α) : 0 + n • a = n • a := by abel1\nα : Type u_1\na✝ b : α\ninst✝ : AddCommGroup α\nn : ℕ\na : α\n⊢ 0 + n • a = n • a\n/- Goals Accomplished! -/\n"}
{"prompt": "example [AddCommMonoid α] (a b c d e : α) :\n    a + (b + (a + (c + (a + (d + (a + e)))))) = e + d + c + b + 3 • a ∨ True := by\n  fail_if_success\n    left; abel1\n  right; trivial\nα : Type u_1\na✝ b✝ : α\ninst✝ : AddCommMonoid α\na b c d e : α\n⊢ a + (b + (a + (c + (a + (d + (a + e)))))) = e + d + c + b + 3 • a ∨ True\n", "full_text": "example [AddCommMonoid α] (a b c d e : α) :\n    a + (b + (a + (c + (a + (d + (a + e)))))) = e + d + c + b + 3 • a ∨ True := by\n  fail_if_success\n    left; abel1\n  right; trivial\nα : Type u_1\na✝ b✝ : α\ninst✝ : AddCommMonoid α\na b c d e : α\n⊢ a + (b + (a + (c + (a + (d + (a + e)))))) = e + d + c + b + 3 • a ∨ True\n/- α : Type u_1\na✝ b✝ : α\ninst✝ : AddCommMonoid α\na b c d e : α\n⊢ a + (b + (a + (c + (a + (d + (a + e)))))) = e + d + c + b + 3 • a ∨ True -/\n/- case h\nα : Type u_1\na✝ b✝ : α\ninst✝ : AddCommMonoid α\na b c d e : α\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example [AddCommGroup α] (a b c d e : α) :\n    a + (b + (a + (c + (a + (d + (a + e)))))) = e + d + c + b + 3 • a ∨ True := by\n  fail_if_success\n    left; abel1\n  right; trivial\nα : Type u_1\na✝ b✝ : α\ninst✝ : AddCommGroup α\na b c d e : α\n⊢ a + (b + (a + (c + (a + (d + (a + e)))))) = e + d + c + b + 3 • a ∨ True\n", "full_text": "example [AddCommGroup α] (a b c d e : α) :\n    a + (b + (a + (c + (a + (d + (a + e)))))) = e + d + c + b + 3 • a ∨ True := by\n  fail_if_success\n    left; abel1\n  right; trivial\nα : Type u_1\na✝ b✝ : α\ninst✝ : AddCommGroup α\na b c d e : α\n⊢ a + (b + (a + (c + (a + (d + (a + e)))))) = e + d + c + b + 3 • a ∨ True\n/- α : Type u_1\na✝ b✝ : α\ninst✝ : AddCommGroup α\na b c d e : α\n⊢ a + (b + (a + (c + (a + (d + (a + e)))))) = e + d + c + b + 3 • a ∨ True -/\n/- case h\nα : Type u_1\na✝ b✝ : α\ninst✝ : AddCommGroup α\na b c d e : α\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example [AddCommGroup α] (a b c d : α) :\n    a + b + (c + d - a) = b + c - d ∨ True := by\n  fail_if_success\n    left; abel1\n  right; trivial\nα : Type u_1\na✝ b✝ : α\ninst✝ : AddCommGroup α\na b c d : α\n⊢ a + b + (c + d - a) = b + c - d ∨ True\n", "full_text": "example [AddCommGroup α] (a b c d : α) :\n    a + b + (c + d - a) = b + c - d ∨ True := by\n  fail_if_success\n    left; abel1\n  right; trivial\nα : Type u_1\na✝ b✝ : α\ninst✝ : AddCommGroup α\na b c d : α\n⊢ a + b + (c + d - a) = b + c - d ∨ True\n/- α : Type u_1\na✝ b✝ : α\ninst✝ : AddCommGroup α\na b c d : α\n⊢ a + b + (c + d - a) = b + c - d ∨ True -/\n/- case h\nα : Type u_1\na✝ b✝ : α\ninst✝ : AddCommGroup α\na b c d : α\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example [AddCommGroup α] (a b c : α) :\n    a + b + c + (c - a - a) = (-1)•a + b + c ∨ True := by\n  fail_if_success\n    left; abel1\n  right; trivial\nα : Type u_1\na✝ b✝ : α\ninst✝ : AddCommGroup α\na b c : α\n⊢ a + b + c + (c - a - a) = -1 • a + b + c ∨ True\n", "full_text": "example [AddCommGroup α] (a b c : α) :\n    a + b + c + (c - a - a) = (-1)•a + b + c ∨ True := by\n  fail_if_success\n    left; abel1\n  right; trivial\nα : Type u_1\na✝ b✝ : α\ninst✝ : AddCommGroup α\na b c : α\n⊢ a + b + c + (c - a - a) = -1 • a + b + c ∨ True\n/- α : Type u_1\na✝ b✝ : α\ninst✝ : AddCommGroup α\na b c : α\n⊢ a + b + c + (c - a - a) = -1 • a + b + c ∨ True -/\n/- case h\nα : Type u_1\na✝ b✝ : α\ninst✝ : AddCommGroup α\na b c : α\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : MyTrue := by\n  abel_nf\nα : Type ?u.9\na b : α\nMyTrue : Sort ?u.19\n⊢ MyTrue\n", "full_text": "example : MyTrue := by\n  abel_nf\nα : Type ?u.9\na b : α\nMyTrue : Sort ?u.19\n⊢ MyTrue\n/- α : Type ?u.9\na b : α\nMyTrue : Sort ?u.19\n⊢ MyTrue -/\n"}
{"prompt": "example [AddCommGroup α] (a b : α) : a + b - b - id' a = 0 := by\n  fail_if_success\n    abel1\n  abel1!\nα : Type u_2\na✝ b✝ : α\nx✝ : Sort u_1\nid' : x✝\ninst✝ : AddCommGroup α\na b : α\n⊢ a + b - b - sorry = 0\n", "full_text": "example [AddCommGroup α] (a b : α) : a + b - b - id' a = 0 := by\n  fail_if_success\n    abel1\n  abel1!\nα : Type u_2\na✝ b✝ : α\nx✝ : Sort u_1\nid' : x✝\ninst✝ : AddCommGroup α\na b : α\n⊢ a + b - b - sorry = 0\n/- α : Type u_2\na✝ b✝ : α\nx✝ : Sort u_1\nid' : x✝\ninst✝ : AddCommGroup α\na b : α\n⊢ a + b - b - sorry = 0 -/\n/- α : Type u_2\na✝ b✝ : α\nx✝ : Sort u_1\nid' : x✝\ninst✝ : AddCommGroup α\na b : α\n⊢ a + b - b - sorry = 0 -/\n"}
{"prompt": "example [AddCommGroup α] : True := by\n  have : ∀ (p q r s : α), s + p - q = s - r - (q - r - p) := by\n    intro p q r s\n    abel\n  trivial\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\n⊢ True\n", "full_text": "example [AddCommGroup α] : True := by\n  have : ∀ (p q r s : α), s + p - q = s - r - (q - r - p) := by\n    intro p q r s\n    abel\n  trivial\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\n⊢ True\n/- α : Type u_1\na b : α\ninst✝ : AddCommGroup α\nthis : ∀ (p q r s : α), s + p - q = s - r - (q - r - p)\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example [AddCommGroup α] (x y z : α) : y = x + z - (x - y + z) := by\n  have : True := trivial\n  abel\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\n⊢ y = x + z - (x - y + z)\n", "full_text": "example [AddCommGroup α] (x y z : α) : y = x + z - (x - y + z) := by\n  have : True := trivial\n  abel\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\n⊢ y = x + z - (x - y + z)\n/- α : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\nthis : True\n⊢ y = x + z - (x - y + z) -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : True := by\n  have := 0\n  abel_nf\nα : Type ?u.9\na b : α\n⊢ True\n", "full_text": "example : True := by\n  have := 0\n  abel_nf\nα : Type ?u.9\na b : α\n⊢ True\n/- α : Type ?u.9\na b : α\nthis : ℕ\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example [AddCommGroup α] (x y z : α) (w : x = y + z) : False := by\n  abel_nf at w\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\nw : x = y + z\n⊢ False\n", "full_text": "example [AddCommGroup α] (x y z : α) (w : x = y + z) : False := by\n  abel_nf at w\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\nw : x = y + z\n⊢ False\n/- α : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\nw : x = y + z\n⊢ False -/\n"}
{"prompt": "example [AddCommGroup α] (x y z : α) (h : False) (w : x - x = y + z) : False := by\n  abel_nf at w\n  guard_hyp w : 0 = y + z\n  assumption\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\nh : False\nw : x - x = y + z\n⊢ False\n", "full_text": "example [AddCommGroup α] (x y z : α) (h : False) (w : x - x = y + z) : False := by\n  abel_nf at w\n  guard_hyp w : 0 = y + z\n  assumption\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\nh : False\nw : x - x = y + z\n⊢ False\n/- α : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\nh : False\nw : 0 = y + z\n⊢ False -/\n/- α : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\nh : False\nw : 0 = y + z\n⊢ False -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example [AddCommGroup α] (x y z : α) (_w : x = y + z) : False := by\n  abel_nf at *\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\n_w : x = y + z\n⊢ False\n", "full_text": "example [AddCommGroup α] (x y z : α) (_w : x = y + z) : False := by\n  abel_nf at *\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\n_w : x = y + z\n⊢ False\n/- α : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\n_w : x = y + z\n⊢ False -/\n"}
{"prompt": "example [AddCommGroup α] (x y z : α) (_w : x = y + z) : x - x = 0 := by\n  abel_nf at *\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\n_w : x = y + z\n⊢ x - x = 0\n", "full_text": "example [AddCommGroup α] (x y z : α) (_w : x = y + z) : x - x = 0 := by\n  abel_nf at *\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\n_w : x = y + z\n⊢ x - x = 0\n/- Goals Accomplished! -/\n"}
{"prompt": "example [AddCommGroup α] (x y z : α) (w : x = y + z) : x - x = 0 := by\n  abel_nf at w ⊢\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\nw : x = y + z\n⊢ x - x = 0\n", "full_text": "example [AddCommGroup α] (x y z : α) (w : x = y + z) : x - x = 0 := by\n  abel_nf at w ⊢\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\nw : x = y + z\n⊢ x - x = 0\n/- α : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\nw : x = y + z\n⊢ x - x = 0 -/\n"}
{"prompt": "example [AddCommGroup α] (x y z : α) (w : x - x = y + z) : x = 0 := by\n  abel_nf at w ⊢\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\nw : x - x = y + z\n⊢ x = 0\n", "full_text": "example [AddCommGroup α] (x y z : α) (w : x - x = y + z) : x = 0 := by\n  abel_nf at w ⊢\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\nw : x - x = y + z\n⊢ x = 0\n/- α : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\nw : 0 = y + z\n⊢ x = 0 -/\n"}
{"prompt": "example [AddCommGroup α] (x y z : α) (h : False) (w : x - x = y + z) : False := by\n  abel_nf at *\n  guard_hyp w : 0 = y + z\n  assumption\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\nh : False\nw : x - x = y + z\n⊢ False\n", "full_text": "example [AddCommGroup α] (x y z : α) (h : False) (w : x - x = y + z) : False := by\n  abel_nf at *\n  guard_hyp w : 0 = y + z\n  assumption\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\nh : False\nw : x - x = y + z\n⊢ False\n/- α : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\nh : False\nw : 0 = y + z\n⊢ False -/\n/- α : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx y z : α\nh : False\nw : 0 = y + z\n⊢ False -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x : ℤ) (R : ℤ → ℤ → Prop) (hR : Reflexive R) : True := by\n  have h : R (myId x + x) (x + myId x) := hR ..\n  abel_nf at h\n  trace_state\n  trivial\nα : Type ?u.9\na b : α\nx : ℤ\nR : ℤ → ℤ → Prop\nhR : Reflexive R\n⊢ True\n", "full_text": "example (x : ℤ) (R : ℤ → ℤ → Prop) (hR : Reflexive R) : True := by\n  have h : R (myId x + x) (x + myId x) := hR ..\n  abel_nf at h\n  trace_state\n  trivial\nα : Type ?u.9\na b : α\nx : ℤ\nR : ℤ → ℤ → Prop\nhR : Reflexive R\n⊢ True\n/- α : Type ?u.9\na b : α\nx : ℤ\nR : ℤ → ℤ → Prop\nhR : Reflexive R\n⊢ True -/\n"}
{"prompt": "example [AddCommGroup α] (x : α) (f : α → α) : True := by\n  let y := x\n  have : x = y := by\n    fail_if_success abel_nf\n    abel_nf!\n  have : x - y = 0 := by\n    abel_nf\n    abel_nf!\n  have : f x = f y := by\n    fail_if_success abel_nf\n    abel_nf!\n  have : f x - f y = 0 := by\n    abel_nf\n    abel_nf!\n  trivial\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx : α\nf : α → α\n⊢ True\n", "full_text": "example [AddCommGroup α] (x : α) (f : α → α) : True := by\n  let y := x\n  have : x = y := by\n    fail_if_success abel_nf\n    abel_nf!\n  have : x - y = 0 := by\n    abel_nf\n    abel_nf!\n  have : f x = f y := by\n    fail_if_success abel_nf\n    abel_nf!\n  have : f x - f y = 0 := by\n    abel_nf\n    abel_nf!\n  trivial\nα : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx : α\nf : α → α\n⊢ True\n/- α : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx : α\nf : α → α\ny : α := x\n⊢ True -/\n/- α : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx : α\nf : α → α\ny : α := x\nthis : x = y\n⊢ True -/\n/- α : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx : α\nf : α → α\ny : α := x\nthis✝ : x = y\nthis : x - y = 0\n⊢ True -/\n/- α : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx : α\nf : α → α\ny : α := x\nthis✝¹ : x = y\nthis✝ : x - y = 0\nthis : f x = f y\n⊢ True -/\n/- α : Type u_1\na b : α\ninst✝ : AddCommGroup α\nx : α\nf : α → α\ny : α := x\nthis✝² : x = y\nthis✝¹ : x - y = 0\nthis✝ : f x = f y\nthis : f x - f y = 0\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : True := by\n  run_tac\n    let t : Option Bool := (← Lean.MonadOptions.getOptions).get? `pp.all\n    -- should be true as set\n    guard (t == true)\n  trivial\n⊢ True\n", "full_text": "example : True := by\n  run_tac\n    let t : Option Bool := (← Lean.MonadOptions.getOptions).get? `pp.all\n    -- should be true as set\n    guard (t == true)\n  trivial\n⊢ True\n/- ⊢ True -/\n"}
{"prompt": "example : True := by\n  run_tac\n    let t : Option Bool := (← Lean.MonadOptions.getOptions).get? `pp.all\n    -- should be none as unset\n    guard (t == Option.none)\n  trivial\n⊢ True\n", "full_text": "example : True := by\n  run_tac\n    let t : Option Bool := (← Lean.MonadOptions.getOptions).get? `pp.all\n    -- should be none as unset\n    guard (t == Option.none)\n  trivial\n⊢ True\n/- ⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : True := by\n  run_tac\n    let t : Option Bool := (← Lean.MonadOptions.getOptions).get? `pp.all\n    -- should be true as only unset within section\n    guard (t == true)\n  trivial\n⊢ True\n", "full_text": "example : True := by\n  run_tac\n    let t : Option Bool := (← Lean.MonadOptions.getOptions).get? `pp.all\n    -- should be true as only unset within section\n    guard (t == true)\n  trivial\n⊢ True\n/- ⊢ True -/\n"}
{"prompt": "example (h : a ∧ b ∨ c ∧ d) (h2 : e ∧ f) : True := by\n  casesm* _∨_, _∧_\n  · clear ‹a› ‹b› ‹e› ‹f›; (fail_if_success clear ‹c›); trivial\n  · clear ‹c› ‹d› ‹e› ‹f›; trivial\na b c d e f : Prop\nh : a ∧ b ∨ c ∧ d\nh2 : e ∧ f\n⊢ True\n", "full_text": "example (h : a ∧ b ∨ c ∧ d) (h2 : e ∧ f) : True := by\n  casesm* _∨_, _∧_\n  · clear ‹a› ‹b› ‹e› ‹f›; (fail_if_success clear ‹c›); trivial\n  · clear ‹c› ‹d› ‹e› ‹f›; trivial\na b c d e f : Prop\nh : a ∧ b ∨ c ∧ d\nh2 : e ∧ f\n⊢ True\n/- case inl.intro.intro\na b c d e f : Prop\nleft✝¹ : e\nright✝¹ : f\nleft✝ : a\nright✝ : b\n⊢ True\n---\ncase inr.intro.intro\na b c d e f : Prop\nleft✝¹ : e\nright✝¹ : f\nleft✝ : c\nright✝ : d\n⊢ True -/\n/- case inl.intro.intro\na b c d e f : Prop\n⊢ True -/\n/- case inl.intro.intro\na b c d e f : Prop\n⊢ True -/\n"}
{"prompt": "example (h : a ∧ b ∨ c ∧ d) : True := by\n  fail_if_success casesm* _∧_ -- no match expected\n  clear ‹a ∧ b ∨ c ∧ d›; trivial\na b c d : Prop\nh : a ∧ b ∨ c ∧ d\n⊢ True\n", "full_text": "example (h : a ∧ b ∨ c ∧ d) : True := by\n  fail_if_success casesm* _∧_ -- no match expected\n  clear ‹a ∧ b ∨ c ∧ d›; trivial\na b c d : Prop\nh : a ∧ b ∨ c ∧ d\n⊢ True\n/- a b c d : Prop\nh : a ∧ b ∨ c ∧ d\n⊢ True -/\n/- a b c d : Prop\n⊢ True -/\n"}
{"prompt": "example (h : a ∧ b ∨ c ∨ d) : True := by\n  casesm* _∨_\n  · clear ‹a ∧ b›; trivial\n  · clear ‹c›; trivial\n  · clear ‹d›; trivial\na b c d : Prop\nh : a ∧ b ∨ c ∨ d\n⊢ True\n", "full_text": "example (h : a ∧ b ∨ c ∨ d) : True := by\n  casesm* _∨_\n  · clear ‹a ∧ b›; trivial\n  · clear ‹c›; trivial\n  · clear ‹d›; trivial\na b c d : Prop\nh : a ∧ b ∨ c ∨ d\n⊢ True\n/- case inl\na b c d : Prop\nh : a ∧ b\n⊢ True\n---\ncase inr.inl\na b c d : Prop\nh : c\n⊢ True\n---\ncase inr.inr\na b c d : Prop\nh : d\n⊢ True -/\n/- case inl\na b c d : Prop\n⊢ True -/\n/- Goals Accomplished! -/\n/- case inr.inl\na b c d : Prop\n⊢ True -/\n"}
{"prompt": "example (h : a ∧ b ∨ c ∨ d) : True := by\n  casesm _∨_\n  · clear ‹a ∧ b›; trivial\n  · clear ‹c ∨ d›; trivial\na b c d : Prop\nh : a ∧ b ∨ c ∨ d\n⊢ True\n", "full_text": "example (h : a ∧ b ∨ c ∨ d) : True := by\n  casesm _∨_\n  · clear ‹a ∧ b›; trivial\n  · clear ‹c ∨ d›; trivial\na b c d : Prop\nh : a ∧ b ∨ c ∨ d\n⊢ True\n/- case inl\na b c d : Prop\nh : a ∧ b\n⊢ True\n---\ncase inr\na b c d : Prop\nh : c ∨ d\n⊢ True -/\n/- case inl\na b c d : Prop\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : a ∧ b ∨ c ∨ d) : True := by\n  cases_type And Or\n  · clear ‹a ∧ b›; trivial\n  · clear ‹c ∨ d›; trivial\na b c d : Prop\nh : a ∧ b ∨ c ∨ d\n⊢ True\n", "full_text": "example (h : a ∧ b ∨ c ∨ d) : True := by\n  cases_type And Or\n  · clear ‹a ∧ b›; trivial\n  · clear ‹c ∨ d›; trivial\na b c d : Prop\nh : a ∧ b ∨ c ∨ d\n⊢ True\n/- case inl\na b c d : Prop\nh : a ∧ b\n⊢ True\n---\ncase inr\na b c d : Prop\nh : c ∨ d\n⊢ True -/\n/- case inl\na b c d : Prop\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : a ∧ b ∨ c ∨ d) : True := by\n  fail_if_success cases_type* And -- no match expected\n  · clear ‹a ∧ b ∨ c ∨ d›; trivial\na b c d : Prop\nh : a ∧ b ∨ c ∨ d\n⊢ True\n", "full_text": "example (h : a ∧ b ∨ c ∨ d) : True := by\n  fail_if_success cases_type* And -- no match expected\n  · clear ‹a ∧ b ∨ c ∨ d›; trivial\na b c d : Prop\nh : a ∧ b ∨ c ∨ d\n⊢ True\n/- a b c d : Prop\nh : a ∧ b ∨ c ∨ d\n⊢ True -/\n/- a b c d : Prop\n⊢ True -/\n"}
{"prompt": "example (h : a ∧ b ∨ c ∨ d) : True := by\n  cases_type Or\n  · clear ‹a ∧ b›; trivial\n  · clear ‹c ∨ d›; trivial\na b c d : Prop\nh : a ∧ b ∨ c ∨ d\n⊢ True\n", "full_text": "example (h : a ∧ b ∨ c ∨ d) : True := by\n  cases_type Or\n  · clear ‹a ∧ b›; trivial\n  · clear ‹c ∨ d›; trivial\na b c d : Prop\nh : a ∧ b ∨ c ∨ d\n⊢ True\n/- case inl\na b c d : Prop\nh : a ∧ b\n⊢ True\n---\ncase inr\na b c d : Prop\nh : c ∨ d\n⊢ True -/\n/- case inl\na b c d : Prop\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : a ∧ b ∨ c ∨ d) : True := by\n  cases_type* Or\n  · clear ‹a ∧ b›; trivial\n  · clear ‹c›; trivial\n  · clear ‹d›; trivial\na b c d : Prop\nh : a ∧ b ∨ c ∨ d\n⊢ True\n", "full_text": "example (h : a ∧ b ∨ c ∨ d) : True := by\n  cases_type* Or\n  · clear ‹a ∧ b›; trivial\n  · clear ‹c›; trivial\n  · clear ‹d›; trivial\na b c d : Prop\nh : a ∧ b ∨ c ∨ d\n⊢ True\n/- case inl\na b c d : Prop\nh : a ∧ b\n⊢ True\n---\ncase inr.inl\na b c d : Prop\nh : c\n⊢ True\n---\ncase inr.inr\na b c d : Prop\nh : d\n⊢ True -/\n/- case inl\na b c d : Prop\n⊢ True -/\n/- Goals Accomplished! -/\n/- case inr.inl\na b c d : Prop\n⊢ True -/\n"}
{"prompt": "example (h : a ∧ b ∨ c ∨ d) : True := by\n  fail_if_success cases_type!* And Or -- no match expected\n  · clear ‹a ∧ b ∨ c ∨ d›; trivial\na b c d : Prop\nh : a ∧ b ∨ c ∨ d\n⊢ True\n", "full_text": "example (h : a ∧ b ∨ c ∨ d) : True := by\n  fail_if_success cases_type!* And Or -- no match expected\n  · clear ‹a ∧ b ∨ c ∨ d›; trivial\na b c d : Prop\nh : a ∧ b ∨ c ∨ d\n⊢ True\n/- a b c d : Prop\nh : a ∧ b ∨ c ∨ d\n⊢ True -/\n/- a b c d : Prop\n⊢ True -/\n"}
{"prompt": "example (h : a ∧ b ∧ (c ∨ d)) : True := by\n  cases_type! And Or\n  · clear ‹a› ‹b ∧ (c ∨ d)›; trivial\na b c d : Prop\nh : a ∧ b ∧ (c ∨ d)\n⊢ True\n", "full_text": "example (h : a ∧ b ∧ (c ∨ d)) : True := by\n  cases_type! And Or\n  · clear ‹a› ‹b ∧ (c ∨ d)›; trivial\na b c d : Prop\nh : a ∧ b ∧ (c ∨ d)\n⊢ True\n/- case intro\na b c d : Prop\nh : a\nright✝ : b ∧ (c ∨ d)\n⊢ True -/\n/- case intro\na b c d : Prop\n⊢ True -/\n"}
{"prompt": "example (h : a ∧ b ∧ (c ∨ d)) : True := by\n  cases_type!* And Or\n  · clear ‹a› ‹b› ‹c ∨ d›; trivial\na b c d : Prop\nh : a ∧ b ∧ (c ∨ d)\n⊢ True\n", "full_text": "example (h : a ∧ b ∧ (c ∨ d)) : True := by\n  cases_type!* And Or\n  · clear ‹a› ‹b› ‹c ∨ d›; trivial\na b c d : Prop\nh : a ∧ b ∧ (c ∨ d)\n⊢ True\n/- case intro.intro\na b c d : Prop\nh : a\nright✝¹ : b\nright✝ : c ∨ d\n⊢ True -/\n/- case intro.intro\na b c d : Prop\n⊢ True -/\n"}
{"prompt": "example (_ : Test n) (h2 : Test (m + 1)) : True := by\n  cases_type!* Test\n  · clear ‹Test n› ‹False›; trivial\nx✝¹ : Sort u_1\nTest : x✝¹\nx✝ : sorry\nh2 : sorry\n⊢ True\n", "full_text": "example (_ : Test n) (h2 : Test (m + 1)) : True := by\n  cases_type!* Test\n  · clear ‹Test n› ‹False›; trivial\nx✝¹ : Sort u_1\nTest : x✝¹\nx✝ : sorry\nh2 : sorry\n⊢ True\n/- x✝¹ : Sort u_1\nTest : x✝¹\nx✝ : sorry\nh2 : sorry\n⊢ True -/\n"}
{"prompt": "example (_ : Test n) (h2 : Test (m + 1)) : True := by\n  cases_type Test\n  · clear ‹Test (m + 1)›; trivial\n  · clear ‹False› ‹Test (m + 1)›; trivial\nx✝¹ : Sort u_1\nTest : x✝¹\nx✝ : sorry\nh2 : sorry\n⊢ True\n", "full_text": "example (_ : Test n) (h2 : Test (m + 1)) : True := by\n  cases_type Test\n  · clear ‹Test (m + 1)›; trivial\n  · clear ‹False› ‹Test (m + 1)›; trivial\nx✝¹ : Sort u_1\nTest : x✝¹\nx✝ : sorry\nh2 : sorry\n⊢ True\n/- x✝¹ : Sort u_1\nTest : x✝¹\nx✝ : sorry\nh2 : sorry\n⊢ True -/\n"}
{"prompt": "example (_ : Test n) (h2 : Test (m + 1)) : True := by\n  cases_type* Test\n  · clear ‹False›; trivial\n  · clear ‹False›; clear ‹False›; trivial\nx✝¹ : Sort u_1\nTest : x✝¹\nx✝ : sorry\nh2 : sorry\n⊢ True\n", "full_text": "example (_ : Test n) (h2 : Test (m + 1)) : True := by\n  cases_type* Test\n  · clear ‹False›; trivial\n  · clear ‹False›; clear ‹False›; trivial\nx✝¹ : Sort u_1\nTest : x✝¹\nx✝ : sorry\nh2 : sorry\n⊢ True\n/- x✝¹ : Sort u_1\nTest : x✝¹\nx✝ : sorry\nh2 : sorry\n⊢ True -/\n"}
{"prompt": "example : True ∧ True ∧ True := by\n  fail_if_success constructorm* True, _∨_ -- no match expected\n  guard_target = True ∧ True ∧ True\n  constructorm _∧_\n  · guard_target = True; constructorm True\n  · guard_target = True ∧ True; constructorm* True, _∧_\n⊢ True ∧ True ∧ True\n", "full_text": "example : True ∧ True ∧ True := by\n  fail_if_success constructorm* True, _∨_ -- no match expected\n  guard_target = True ∧ True ∧ True\n  constructorm _∧_\n  · guard_target = True; constructorm True\n  · guard_target = True ∧ True; constructorm* True, _∧_\n⊢ True ∧ True ∧ True\n/- ⊢ True ∧ True ∧ True -/\n/- ⊢ True ∧ True ∧ True -/\n/- case left\n⊢ True\n---\ncase right\n⊢ True ∧ True -/\n/- case left\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (n : Nat) : True := by\n  fail_if_success casesm! Nat  -- two constructors, so `casesm!` doesn't fire\n  trivial\nn : ℕ\n⊢ True\n", "full_text": "example (n : Nat) : True := by\n  fail_if_success casesm! Nat  -- two constructors, so `casesm!` doesn't fire\n  trivial\nn : ℕ\n⊢ True\n/- n : ℕ\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : Array Nat) : True := by\n  casesm! Array _\n  trivial\nh : Array ℕ\n⊢ True\n", "full_text": "example (h : Array Nat) : True := by\n  casesm! Array _\n  trivial\nh : Array ℕ\n⊢ True\n/- case mk\nh : List ℕ\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : Array Nat) : True := by\n  casesm Array _\n  -- user facing name is preserved:\n  guard_hyp h : List Nat\n  trivial\nh : Array ℕ\n⊢ True\n", "full_text": "example (h : Array Nat) : True := by\n  casesm Array _\n  -- user facing name is preserved:\n  guard_hyp h : List Nat\n  trivial\nh : Array ℕ\n⊢ True\n/- case mk\nh : List ℕ\n⊢ True -/\n/- case mk\nh : List ℕ\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (n : Nat) (h : n = 0) : True := by\n  casesm Nat\n  · trivial\n  · -- user facing name is preserved:\n    guard_hyp h : n + 1 = 0\n    trivial\nn : ℕ\nh : n = 0\n⊢ True\n", "full_text": "example (n : Nat) (h : n = 0) : True := by\n  casesm Nat\n  · trivial\n  · -- user facing name is preserved:\n    guard_hyp h : n + 1 = 0\n    trivial\nn : ℕ\nh : n = 0\n⊢ True\n/- case zero\nh : Nat.zero = 0\n⊢ True\n---\ncase succ\nn : ℕ\nh : n.succ = 0\n⊢ True -/\n/- Goals Accomplished! -/\n/- case succ\nn : ℕ\nh : n.succ = 0\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : P ∧ Q) : True := by\n  casesm _ ∧ _\n  -- user facing name is not used here, because there are multiple new hypotheses.\n  fail_if_success guard_hyp h : P\n  rename_i p q\n  guard_hyp p : P\n  guard_hyp q : Q\n  trivial\nP Q : Prop\nh : P ∧ Q\n⊢ True\n", "full_text": "example (h : P ∧ Q) : True := by\n  casesm _ ∧ _\n  -- user facing name is not used here, because there are multiple new hypotheses.\n  fail_if_success guard_hyp h : P\n  rename_i p q\n  guard_hyp p : P\n  guard_hyp q : Q\n  trivial\nP Q : Prop\nh : P ∧ Q\n⊢ True\n/- case intro\nP Q : Prop\nleft✝ : P\nright✝ : Q\n⊢ True -/\n/- case intro\nP Q : Prop\nleft✝ : P\nright✝ : Q\n⊢ True -/\n/- case intro\nP Q : Prop\np : P\nq : Q\n⊢ True -/\n/- case intro\nP Q : Prop\np : P\nq : Q\n⊢ True -/\n/- case intro\nP Q : Prop\np : P\nq : Q\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "theorem foo : p ∧ p := by\n  cases h\n  · casesm (_ ∧ _)\n    constructor <;> assumption\n  · casesm (_ ∧ _)\n    constructor <;> assumption\np : Prop\n⊢ p ∧ p\n", "full_text": "theorem foo : p ∧ p := by\n  cases h\n  · casesm (_ ∧ _)\n    constructor <;> assumption\n  · casesm (_ ∧ _)\n    constructor <;> assumption\np : Prop\n⊢ p ∧ p\n/- p : Prop\nx✝ : ?m.27\n⊢ p ∧ p -/\n"}
{"prompt": "example (a b c : ℕ) (h : a - b = c) (hab : b ≤ a) : a = c + b := by\n  qify [hab] at h ⊢ -- `zify` does the same thing here.\n  exact sub_eq_iff_eq_add.1 h\na b c : ℕ\nh : a - b = c\nhab : b ≤ a\n⊢ a = c + b\n", "full_text": "example (a b c : ℕ) (h : a - b = c) (hab : b ≤ a) : a = c + b := by\n  qify [hab] at h ⊢ -- `zify` does the same thing here.\n  exact sub_eq_iff_eq_add.1 h\na b c : ℕ\nh : a - b = c\nhab : b ≤ a\n⊢ a = c + b\n/- a b c : ℕ\nhab : b ≤ a\nh : ↑a - ↑b = ↑c\n⊢ ↑a = ↑c + ↑b -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c : ℚ≥0) (h : a - b = c) (hab : b ≤ a) : a = c + b := by\n  qify [hab] at h ⊢\n  exact sub_eq_iff_eq_add.1 h\na b c : ℚ≥0\nh : a - b = c\nhab : b ≤ a\n⊢ a = c + b\n", "full_text": "example (a b c : ℚ≥0) (h : a - b = c) (hab : b ≤ a) : a = c + b := by\n  qify [hab] at h ⊢\n  exact sub_eq_iff_eq_add.1 h\na b c : ℚ≥0\nh : a - b = c\nhab : b ≤ a\n⊢ a = c + b\n/- a b c : ℚ≥0\nhab : b ≤ a\nh : ↑a - ↑b = ↑c\n⊢ ↑a = ↑c + ↑b -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c : ℤ) (h : a / b = c) (hab : b ∣ a) (hb : b ≠ 0) : a = c * b := by\n  qify [hab] at h hb ⊢\n  exact (div_eq_iff hb).1 h\na b c : ℤ\nh : a / b = c\nhab : b ∣ a\nhb : b ≠ 0\n⊢ a = c * b\n", "full_text": "example (a b c : ℤ) (h : a / b = c) (hab : b ∣ a) (hb : b ≠ 0) : a = c * b := by\n  qify [hab] at h hb ⊢\n  exact (div_eq_iff hb).1 h\na b c : ℤ\nh : a / b = c\nhab : b ∣ a\nhb : b ≠ 0\n⊢ a = c * b\n/- a b c : ℤ\nhab : b ∣ a\nh : ↑a / ↑b = ↑c\nhb : ↑b ≠ 0\n⊢ ↑a = ↑c * ↑b -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c : ℕ) (h : a / b = c) (hab : b ∣ a) (hb : b ≠ 0) : a = c * b := by\n  qify [hab] at h hb ⊢\n  exact (div_eq_iff hb).1 h\na b c : ℕ\nh : a / b = c\nhab : b ∣ a\nhb : b ≠ 0\n⊢ a = c * b\n", "full_text": "example (a b c : ℕ) (h : a / b = c) (hab : b ∣ a) (hb : b ≠ 0) : a = c * b := by\n  qify [hab] at h hb ⊢\n  exact (div_eq_iff hb).1 h\na b c : ℕ\nh : a / b = c\nhab : b ∣ a\nhb : b ≠ 0\n⊢ a = c * b\n/- a b c : ℕ\nhab : b ∣ a\nh : ↑a / ↑b = ↑c\nhb : ↑b ≠ 0\n⊢ ↑a = ↑c * ↑b -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : ∃ x : Nat, x = x := by\n  existsi 42\n  rfl\n⊢ ∃ x, x = x\n", "full_text": "example : ∃ x : Nat, x = x := by\n  existsi 42\n  rfl\n⊢ ∃ x, x = x\n/- ⊢ 42 = 42 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : ∃ x : Nat, ∃ y : Nat, x = y := by\n  existsi 42, 42\n  rfl\n⊢ ∃ x y, x = y\n", "full_text": "example : ∃ x : Nat, ∃ y : Nat, x = y := by\n  existsi 42, 42\n  rfl\n⊢ ∃ x y, x = y\n/- ⊢ 42 = 42 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : Nat := by\n  have h : Nat\n  exact 5\n  exact h\n⊢ ℕ\n", "full_text": "example : Nat := by\n  have h : Nat\n  exact 5\n  exact h\n⊢ ℕ\n/- case h\n⊢ ℕ\n---\nh : ℕ\n⊢ ℕ -/\n/- h : ℕ\n⊢ ℕ -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : Nat := by\n  have : Nat\n  · exact 5\n  exact this\n⊢ ℕ\n", "full_text": "example : Nat := by\n  have : Nat\n  · exact 5\n  exact this\n⊢ ℕ\n/- case this\n⊢ ℕ\n---\nthis : ℕ\n⊢ ℕ -/\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {a : Nat} : a = a := by\n  have h : a = a\n  · rfl\n  exact h\na : ℕ\n⊢ a = a\n", "full_text": "example {a : Nat} : a = a := by\n  have h : a = a\n  · rfl\n  exact h\na : ℕ\n⊢ a = a\n/- case h\na : ℕ\n⊢ a = a\n---\na : ℕ\nh : a = a\n⊢ a = a -/\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {a : Nat} : a = a := by\n  have : a = a\n  · rfl\n  exact this\na : ℕ\n⊢ a = a\n", "full_text": "example {a : Nat} : a = a := by\n  have : a = a\n  · rfl\n  exact this\na : ℕ\n⊢ a = a\n/- case this\na : ℕ\n⊢ a = a\n---\na : ℕ\nthis : a = a\n⊢ a = a -/\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : True := by\n  let _N; -- FIXME: https://github.com/leanprover/lean4/issues/1670\n  exact Nat\n  have\n  · exact 0\n  have _h : Nat\n  · exact this\n  have _h' x : x < x + 1\n  · exact Nat.lt.base x\n  have _h'' (x : Nat) : x < x + 1\n  · exact Nat.lt.base x\n  let _m\n  · exact 6\n  let _m' x (y : Nat) : x + y = y + x\n  rw [Nat.add_comm]\n  have _q\n  · exact 6\n  simp\n⊢ True\n", "full_text": "example : True := by\n  let _N; -- FIXME: https://github.com/leanprover/lean4/issues/1670\n  exact Nat\n  have\n  · exact 0\n  have _h : Nat\n  · exact this\n  have _h' x : x < x + 1\n  · exact Nat.lt.base x\n  have _h'' (x : Nat) : x < x + 1\n  · exact Nat.lt.base x\n  let _m\n  · exact 6\n  let _m' x (y : Nat) : x + y = y + x\n  rw [Nat.add_comm]\n  have _q\n  · exact 6\n  simp\n⊢ True\n/- case _N\n⊢ ?m.5\n---\n_N : ?m.5 := ?_N\n⊢ True -/\n/- _N : Type := ℕ\n⊢ True -/\n/- case this\n_N : Type := ℕ\n⊢ ?m.12\n---\n_N : Type := ℕ\nthis : ?m.12\n⊢ True -/\n/- Goals Accomplished! -/\n/- case _h\n_N : Type := ℕ\nthis : ℕ\n⊢ ℕ\n---\n_N : Type := ℕ\nthis _h : ℕ\n⊢ True -/\n/- Goals Accomplished! -/\n/- case _h'\n_N : Type := ℕ\nthis _h x : ℕ\n⊢ x < x + 1\n---\n_N : Type := ℕ\nthis _h : ℕ\n_h' : ∀ (x : ℕ), x < x + 1\n⊢ True -/\n/- Goals Accomplished! -/\n/- case _h''\n_N : Type := ℕ\nthis _h : ℕ\n_h' : ∀ (x : ℕ), x < x + 1\nx : ℕ\n⊢ x < x + 1\n---\n_N : Type := ℕ\nthis _h : ℕ\n_h' _h'' : ∀ (x : ℕ), x < x + 1\n⊢ True -/\n/- Goals Accomplished! -/\n/- case _m\n_N : Type := ℕ\nthis _h : ℕ\n_h' _h'' : ∀ (x : ℕ), x < x + 1\n⊢ ?m.883\n---\n_N : Type := ℕ\nthis _h : ℕ\n_h' _h'' : ∀ (x : ℕ), x < x + 1\n_m : ?m.883 := ?_m\n⊢ True -/\n/- Goals Accomplished! -/\n/- case _m'\n_N : Type := ℕ\nthis _h : ℕ\n_h' _h'' : ∀ (x : ℕ), x < x + 1\n_m : ℕ := 6\nx y : ℕ\n⊢ x + y = y + x\n---\n_N : Type := ℕ\nthis _h : ℕ\n_h' _h'' : ∀ (x : ℕ), x < x + 1\n_m : ℕ := 6\n_m' : ∀ (x y : ℕ), x + y = y + x := fun x y => ?_m'\n⊢ True -/\n/- _N : Type := ℕ\nthis _h : ℕ\n_h' _h'' : ∀ (x : ℕ), x < x + 1\n_m : ℕ := 6\n_m' : ∀ (x y : ℕ), x + y = y + x :=\n  fun x y => Eq.mpr (id (congrArg (fun _a => _a = y + x) (Nat.add_comm x y))) (Eq.refl (y + x))\n⊢ True -/\n/- case _q\n_N : Type := ℕ\nthis _h : ℕ\n_h' _h'' : ∀ (x : ℕ), x < x + 1\n_m : ℕ := 6\n_m' : ∀ (x y : ℕ), x + y = y + x :=\n  fun x y => Eq.mpr (id (congrArg (fun _a => _a = y + x) (Nat.add_comm x y))) (Eq.refl (y + x))\n⊢ ?m.1001\n---\n_N : Type := ℕ\nthis _h : ℕ\n_h' _h'' : ∀ (x : ℕ), x < x + 1\n_m : ℕ := 6\n_m' : ∀ (x y : ℕ), x + y = y + x :=\n  fun x y => Eq.mpr (id (congrArg (fun _a => _a = y + x) (Nat.add_comm x y))) (Eq.refl (y + x))\n_q : ?m.1001\n⊢ True -/\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "theorem ex1 (a b c : Nat) (h : a = b) : a + c = b + c := by\n  congr!\na b c : ℕ\nh : a = b\n⊢ a + c = b + c\n", "full_text": "theorem ex1 (a b c : Nat) (h : a = b) : a + c = b + c := by\n  congr!\na b c : ℕ\nh : a = b\n⊢ a + c = b + c\n/- Goals Accomplished! -/\n"}
{"prompt": "theorem ex2 (a b : Nat) (h : a = b) : ∀ c, a + c = b + c := by\n  congr!\na b : ℕ\nh : a = b\n⊢ ∀ (c : ℕ), a + c = b + c\n", "full_text": "theorem ex2 (a b : Nat) (h : a = b) : ∀ c, a + c = b + c := by\n  congr!\na b : ℕ\nh : a = b\n⊢ ∀ (c : ℕ), a + c = b + c\n/- Goals Accomplished! -/\n"}
{"prompt": "theorem ex3 (a b : Nat) (h : a = b) : (fun c => a + c) = (fun c => b + c) := by\n  congr!\na b : ℕ\nh : a = b\n⊢ (fun c => a + c) = fun c => b + c\n", "full_text": "theorem ex3 (a b : Nat) (h : a = b) : (fun c => a + c) = (fun c => b + c) := by\n  congr!\na b : ℕ\nh : a = b\n⊢ (fun c => a + c) = fun c => b + c\n/- Goals Accomplished! -/\n"}
{"prompt": "theorem ex4 (a b : Nat) : Fin (a + b) = Fin (b + a) := by\n  congr! 1\n  guard_target = a + b = b + a\n  apply Nat.add_comm\na b : ℕ\n⊢ Fin (a + b) = Fin (b + a)\n", "full_text": "theorem ex4 (a b : Nat) : Fin (a + b) = Fin (b + a) := by\n  congr! 1\n  guard_target = a + b = b + a\n  apply Nat.add_comm\na b : ℕ\n⊢ Fin (a + b) = Fin (b + a)\n/- case h.e'_1\na b : ℕ\n⊢ a + b = b + a -/\n/- case h.e'_1\na b : ℕ\n⊢ a + b = b + a -/\n/- Goals Accomplished! -/\n"}
{"prompt": "theorem ex5 : ((a : Nat) → Fin (a + 1)) = ((a : Nat) → Fin (1 + a)) := by\n  congr! 2 with a\n  guard_target = a + 1 = 1 + a\n  apply Nat.add_comm\n⊢ ((a : ℕ) → Fin (a + 1)) = ((a : ℕ) → Fin (1 + a))\n", "full_text": "theorem ex5 : ((a : Nat) → Fin (a + 1)) = ((a : Nat) → Fin (1 + a)) := by\n  congr! 2 with a\n  guard_target = a + 1 = 1 + a\n  apply Nat.add_comm\n⊢ ((a : ℕ) → Fin (a + 1)) = ((a : ℕ) → Fin (1 + a))\n/- case h.h.e'_1\na : ℕ\n⊢ a + 1 = 1 + a -/\n/- case h.h.e'_1\na : ℕ\n⊢ a + 1 = 1 + a -/\n/- Goals Accomplished! -/\n"}
{"prompt": "theorem ex6 : ((a : Nat) × Fin (a + 1)) = ((a : Nat) × Fin (1 + a)) := by\n  congr! 3 with a\n  guard_target = a + 1 = 1 + a\n  apply Nat.add_comm\n⊢ ((a : ℕ) × Fin (a + 1)) = ((a : ℕ) × Fin (1 + a))\n", "full_text": "theorem ex6 : ((a : Nat) × Fin (a + 1)) = ((a : Nat) × Fin (1 + a)) := by\n  congr! 3 with a\n  guard_target = a + 1 = 1 + a\n  apply Nat.add_comm\n⊢ ((a : ℕ) × Fin (a + 1)) = ((a : ℕ) × Fin (1 + a))\n/- case h.e'_2.h.h.e'_1\na : ℕ\n⊢ a + 1 = 1 + a -/\n/- case h.e'_2.h.h.e'_1\na : ℕ\n⊢ a + 1 = 1 + a -/\n/- Goals Accomplished! -/\n"}
{"prompt": "theorem ex7 (p : Prop) (h1 h2 : p) : h1 = h2 := by\n  congr!\np : Prop\nh1 h2 : p\n⊢ h1 = h2\n", "full_text": "theorem ex7 (p : Prop) (h1 h2 : p) : h1 = h2 := by\n  congr!\np : Prop\nh1 h2 : p\n⊢ h1 = h2\n/- Goals Accomplished! -/\n"}
{"prompt": "theorem ex8 (p q : Prop) (h1 : p) (h2 : q) : HEq h1 h2 := by\n  congr!\np q : Prop\nh1 : p\nh2 : q\n⊢ HEq h1 h2\n", "full_text": "theorem ex8 (p q : Prop) (h1 : p) (h2 : q) : HEq h1 h2 := by\n  congr!\np q : Prop\nh1 : p\nh2 : q\n⊢ HEq h1 h2\n/- Goals Accomplished! -/\n"}
{"prompt": "theorem ex9 (a b : Nat) (h : a = b) : a + 1 ≤ b + 1 := by\n  congr!\na b : ℕ\nh : a = b\n⊢ a + 1 ≤ b + 1\n", "full_text": "theorem ex9 (a b : Nat) (h : a = b) : a + 1 ≤ b + 1 := by\n  congr!\na b : ℕ\nh : a = b\n⊢ a + 1 ≤ b + 1\n/- Goals Accomplished! -/\n"}
{"prompt": "theorem ex10 (x y : Unit) : x = y := by\n  congr!\nx y : Unit\n⊢ x = y\n", "full_text": "theorem ex10 (x y : Unit) : x = y := by\n  congr!\nx y : Unit\n⊢ x = y\n/- Goals Accomplished! -/\n"}
{"prompt": "theorem ex11 (p q r : Nat → Prop) (h : q = r) : (∀ n, p n → q n) ↔ (∀ n, p n → r n) := by\n  congr!\np q r : ℕ → Prop\nh : q = r\n⊢ (∀ (n : ℕ), p n → q n) ↔ ∀ (n : ℕ), p n → r n\n", "full_text": "theorem ex11 (p q r : Nat → Prop) (h : q = r) : (∀ n, p n → q n) ↔ (∀ n, p n → r n) := by\n  congr!\np q r : ℕ → Prop\nh : q = r\n⊢ (∀ (n : ℕ), p n → q n) ↔ ∀ (n : ℕ), p n → r n\n/- Goals Accomplished! -/\n"}
{"prompt": "theorem ex12 (p q : Prop) (h : p ↔ q) : p = q := by\n  congr!\np q : Prop\nh : p ↔ q\n⊢ p = q\n", "full_text": "theorem ex12 (p q : Prop) (h : p ↔ q) : p = q := by\n  congr!\np q : Prop\nh : p ↔ q\n⊢ p = q\n/- Goals Accomplished! -/\n"}
{"prompt": "theorem ex13 (x y : α) (h : x = y) (f : α → Nat) : f x = f y := by\n  congr!\nα : Sort u_1\nx y : α\nh : x = y\nf : α → ℕ\n⊢ f x = f y\n", "full_text": "theorem ex13 (x y : α) (h : x = y) (f : α → Nat) : f x = f y := by\n  congr!\nα : Sort u_1\nx y : α\nh : x = y\nf : α → ℕ\n⊢ f x = f y\n/- Goals Accomplished! -/\n"}
{"prompt": "theorem ex14 {α : Type} (f : Nat → Nat) (h : ∀ x, f x = 0) (z : α) (hz : HEq z 0) :\n    HEq f (fun (_ : α) => z) := by\n  congr!\n  · guard_target = Nat = α\n    exact type_eq_of_heq hz.symm\n  next n x _ =>\n    guard_target = HEq (f n) z\n    rw [h]\n    exact hz.symm\nα : Type\nf : ℕ → ℕ\nh : ∀ (x : ℕ), f x = 0\nz : α\nhz : HEq z 0\n⊢ HEq f fun x => z\n", "full_text": "theorem ex14 {α : Type} (f : Nat → Nat) (h : ∀ x, f x = 0) (z : α) (hz : HEq z 0) :\n    HEq f (fun (_ : α) => z) := by\n  congr!\n  · guard_target = Nat = α\n    exact type_eq_of_heq hz.symm\n  next n x _ =>\n    guard_target = HEq (f n) z\n    rw [h]\n    exact hz.symm\nα : Type\nf : ℕ → ℕ\nh : ∀ (x : ℕ), f x = 0\nz : α\nhz : HEq z 0\n⊢ HEq f fun x => z\n/- case hα\nα : Type\nf : ℕ → ℕ\nh : ∀ (x : ℕ), f x = 0\nz : α\nhz : HEq z 0\n⊢ ℕ = α\n---\ncase h\nα : Type\nf : ℕ → ℕ\nh : ∀ (x : ℕ), f x = 0\nz : α\nhz : HEq z 0\na✝¹ : ℕ\na'✝ : α\na✝ : HEq a✝¹ a'✝\n⊢ HEq (f a✝¹) z -/\n/- case hα\nα : Type\nf : ℕ → ℕ\nh : ∀ (x : ℕ), f x = 0\nz : α\nhz : HEq z 0\n⊢ ℕ = α -/\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "theorem ex15 (p q : Nat → Prop) :\n    (∀ ε > 0, p ε) ↔ ∀ ε > 0, q ε := by\n  congr! 2 with ε hε\n  guard_hyp hε : ε > 0\n  guard_target = p ε ↔ q ε\n  exact test_sorry\np q : ℕ → Prop\n⊢ (∀ ε > 0, p ε) ↔ ∀ ε > 0, q ε\n", "full_text": "theorem ex15 (p q : Nat → Prop) :\n    (∀ ε > 0, p ε) ↔ ∀ ε > 0, q ε := by\n  congr! 2 with ε hε\n  guard_hyp hε : ε > 0\n  guard_target = p ε ↔ q ε\n  exact test_sorry\np q : ℕ → Prop\n⊢ (∀ ε > 0, p ε) ↔ ∀ ε > 0, q ε\n/- case a.h.h'.a\np q : ℕ → Prop\nε : ℕ\nhε : ε > 0\n⊢ p ε ↔ q ε -/\n/- case a.h.h'.a\np q : ℕ → Prop\nε : ℕ\nhε : ε > 0\n⊢ p ε ↔ q ε -/\n/- case a.h.h'.a\np q : ℕ → Prop\nε : ℕ\nhε : ε > 0\n⊢ p ε ↔ q ε -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (s t : Set α) : (ℕ × Subtype s) = (ℕ × Subtype t) := by\n  congr! 1\n  guard_target = Subtype s = Subtype t\n  congr! 1\n  guard_target = s = t\n  exact test_sorry\nα : Type u_1\ns t : Set α\n⊢ (ℕ × Subtype s) = (ℕ × Subtype t)\n", "full_text": "example (s t : Set α) : (ℕ × Subtype s) = (ℕ × Subtype t) := by\n  congr! 1\n  guard_target = Subtype s = Subtype t\n  congr! 1\n  guard_target = s = t\n  exact test_sorry\nα : Type u_1\ns t : Set α\n⊢ (ℕ × Subtype s) = (ℕ × Subtype t)\n/- case h.e'_2\nα : Type u_1\ns t : Set α\n⊢ Subtype s = Subtype t -/\n/- case h.e'_2\nα : Type u_1\ns t : Set α\n⊢ Subtype s = Subtype t -/\n/- case h.e'_2.h.e'_2\nα : Type u_1\ns t : Set α\n⊢ s = t -/\n/- case h.e'_2.h.e'_2\nα : Type u_1\ns t : Set α\n⊢ s = t -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (s t : Set α) (f : Subtype s → α) (g : Subtype t → α) :\n    Set.image f Set.univ = Set.image g Set.univ := by\n  congr!\n  · guard_target = s = t\n    exact test_sorry\n  · guard_target = HEq f g\n    exact test_sorry\nα : Type u_1\ns t : Set α\nf : Subtype s → α\ng : Subtype t → α\n⊢ f '' Set.univ = g '' Set.univ\n", "full_text": "example (s t : Set α) (f : Subtype s → α) (g : Subtype t → α) :\n    Set.image f Set.univ = Set.image g Set.univ := by\n  congr!\n  · guard_target = s = t\n    exact test_sorry\n  · guard_target = HEq f g\n    exact test_sorry\nα : Type u_1\ns t : Set α\nf : Subtype s → α\ng : Subtype t → α\n⊢ f '' Set.univ = g '' Set.univ\n/- case h.e'_1.h.e'_2\nα : Type u_1\ns t : Set α\nf : Subtype s → α\ng : Subtype t → α\n⊢ s = t\n---\ncase h.e'_3\nα : Type u_1\ns t : Set α\nf : Subtype s → α\ng : Subtype t → α\ne_1✝ : Subtype s = Subtype t\n⊢ HEq f g -/\n/- case h.e'_1.h.e'_2\nα : Type u_1\ns t : Set α\nf : Subtype s → α\ng : Subtype t → α\n⊢ s = t -/\n/- Goals Accomplished! -/\n/- case h.e'_3\nα : Type u_1\ns t : Set α\nf : Subtype s → α\ng : Subtype t → α\ne_1✝ : Subtype s = Subtype t\n⊢ HEq f g -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {ι κ : Type u} (f : ι → α) (g : κ → α) :\n    Set.image f Set.univ = Set.image g Set.univ := by\n  congr!\n  guard_target = Set.image f Set.univ = Set.image g Set.univ\n  congr! (config := {typeEqs := true})\n  · guard_target = ι = κ\n    exact test_sorry\n  · guard_target = HEq f g\n    exact test_sorry\nα : Type u_1\nι κ : Type u\nf : ι → α\ng : κ → α\n⊢ f '' Set.univ = g '' Set.univ\n", "full_text": "example {ι κ : Type u} (f : ι → α) (g : κ → α) :\n    Set.image f Set.univ = Set.image g Set.univ := by\n  congr!\n  guard_target = Set.image f Set.univ = Set.image g Set.univ\n  congr! (config := {typeEqs := true})\n  · guard_target = ι = κ\n    exact test_sorry\n  · guard_target = HEq f g\n    exact test_sorry\nα : Type u_1\nι κ : Type u\nf : ι → α\ng : κ → α\n⊢ f '' Set.univ = g '' Set.univ\n/- α : Type u_1\nι κ : Type u\nf : ι → α\ng : κ → α\n⊢ f '' Set.univ = g '' Set.univ -/\n/- α : Type u_1\nι κ : Type u\nf : ι → α\ng : κ → α\n⊢ f '' Set.univ = g '' Set.univ -/\n/- case h.e'_1\nα : Type u_1\nι κ : Type u\nf : ι → α\ng : κ → α\n⊢ ι = κ\n---\ncase h.e'_3\nα : Type u_1\nι κ : Type u\nf : ι → α\ng : κ → α\ne_1✝ : ι = κ\n⊢ HEq f g -/\n/- case h.e'_1\nα : Type u_1\nι κ : Type u\nf : ι → α\ng : κ → α\n⊢ ι = κ -/\n/- Goals Accomplished! -/\n/- case h.e'_3\nα : Type u_1\nι κ : Type u\nf : ι → α\ng : κ → α\ne_1✝ : ι = κ\n⊢ HEq f g -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (s : Set α) (t : Set β) : (ℕ × Subtype s) = (ℕ × Subtype t) := by\n  congr!\n  guard_target = Subtype s = Subtype t\n  exact test_sorry\nα β : Type u_1\ns : Set α\nt : Set β\n⊢ (ℕ × Subtype s) = (ℕ × Subtype t)\n", "full_text": "example (s : Set α) (t : Set β) : (ℕ × Subtype s) = (ℕ × Subtype t) := by\n  congr!\n  guard_target = Subtype s = Subtype t\n  exact test_sorry\nα β : Type u_1\ns : Set α\nt : Set β\n⊢ (ℕ × Subtype s) = (ℕ × Subtype t)\n/- case h.e'_2\nα β : Type u_1\ns : Set α\nt : Set β\n⊢ Subtype s = Subtype t -/\n/- case h.e'_2\nα β : Type u_1\ns : Set α\nt : Set β\n⊢ Subtype s = Subtype t -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (m n : Nat) (h : m = n) (x : Fin m) (y : Fin n) : HEq (x + x) (y + y) := by\n  congr!\n  guard_target = HEq x y\n  exact test_sorry\n  guard_target = HEq x y\n  exact test_sorry\nm n : ℕ\nh : m = n\nx : Fin m\ny : Fin n\n⊢ HEq (x + x) (y + y)\n", "full_text": "example (m n : Nat) (h : m = n) (x : Fin m) (y : Fin n) : HEq (x + x) (y + y) := by\n  congr!\n  guard_target = HEq x y\n  exact test_sorry\n  guard_target = HEq x y\n  exact test_sorry\nm n : ℕ\nh : m = n\nx : Fin m\ny : Fin n\n⊢ HEq (x + x) (y + y)\n/- case e'_5\nm n : ℕ\nh : m = n\nx : Fin m\ny : Fin n\ne_1✝ : Fin m = Fin n\n⊢ HEq x y\n---\ncase e'_6\nm n : ℕ\nh : m = n\nx : Fin m\ny : Fin n\ne_2✝ : Fin m = Fin n\n⊢ HEq x y -/\n/- case e'_5\nm n : ℕ\nh : m = n\nx : Fin m\ny : Fin n\ne_1✝ : Fin m = Fin n\n⊢ HEq x y\n---\ncase e'_6\nm n : ℕ\nh : m = n\nx : Fin m\ny : Fin n\ne_2✝ : Fin m = Fin n\n⊢ HEq x y -/\n/- case e'_6\nm n : ℕ\nh : m = n\nx : Fin m\ny : Fin n\ne_2✝ : Fin m = Fin n\n⊢ HEq x y -/\n/- case e'_6\nm n : ℕ\nh : m = n\nx : Fin m\ny : Fin n\ne_2✝ : Fin m = Fin n\n⊢ HEq x y -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (p q r : Prop) : p ∧ q ↔ p ∧ r := by\n  congr!\n  guard_target = q ↔ r\n  exact test_sorry\np q r : Prop\n⊢ p ∧ q ↔ p ∧ r\n", "full_text": "example (p q r : Prop) : p ∧ q ↔ p ∧ r := by\n  congr!\n  guard_target = q ↔ r\n  exact test_sorry\np q r : Prop\n⊢ p ∧ q ↔ p ∧ r\n/- case a.h.e'_2.a\np q r : Prop\n⊢ q ↔ r -/\n/- case a.h.e'_2.a\np q r : Prop\n⊢ q ↔ r -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (α β) [inst1 : Add α] [inst2 : Add β] (x : α) (y : β) : HEq (x + x) (y + y) := by\n  congr!\n  guard_target = HEq (x + x) (y + y)\n  -- But with typeEqs we can get it to generate the congruence anyway:\n  have : α = β := test_sorry\n  have : HEq inst1 inst2 := test_sorry\n  congr! (config := { typeEqs := true })\n  guard_target = HEq x y\n  exact test_sorry\n  guard_target = HEq x y\n  exact test_sorry\nα β : Type u_1\ninst1 : Add α\ninst2 : Add β\nx : α\ny : β\n⊢ HEq (x + x) (y + y)\n", "full_text": "example (α β) [inst1 : Add α] [inst2 : Add β] (x : α) (y : β) : HEq (x + x) (y + y) := by\n  congr!\n  guard_target = HEq (x + x) (y + y)\n  -- But with typeEqs we can get it to generate the congruence anyway:\n  have : α = β := test_sorry\n  have : HEq inst1 inst2 := test_sorry\n  congr! (config := { typeEqs := true })\n  guard_target = HEq x y\n  exact test_sorry\n  guard_target = HEq x y\n  exact test_sorry\nα β : Type u_1\ninst1 : Add α\ninst2 : Add β\nx : α\ny : β\n⊢ HEq (x + x) (y + y)\n/- α β : Type u_1\ninst1 : Add α\ninst2 : Add β\nx : α\ny : β\n⊢ HEq (x + x) (y + y) -/\n/- α β : Type u_1\ninst1 : Add α\ninst2 : Add β\nx : α\ny : β\n⊢ HEq (x + x) (y + y) -/\n/- α β : Type u_1\ninst1 : Add α\ninst2 : Add β\nx : α\ny : β\nthis : α = β\n⊢ HEq (x + x) (y + y) -/\n/- α β : Type u_1\ninst1 : Add α\ninst2 : Add β\nx : α\ny : β\nthis✝ : α = β\nthis : HEq inst1 inst2\n⊢ HEq (x + x) (y + y) -/\n/- case e'_5\nα β : Type u_1\ninst1 : Add α\ninst2 : Add β\nx : α\ny : β\nthis✝ : α = β\nthis : HEq inst1 inst2\n⊢ HEq x y\n---\ncase e'_6\nα β : Type u_1\ninst1 : Add α\ninst2 : Add β\nx : α\ny : β\nthis✝ : α = β\nthis : HEq inst1 inst2\n⊢ HEq x y -/\n/- case e'_5\nα β : Type u_1\ninst1 : Add α\ninst2 : Add β\nx : α\ny : β\nthis✝ : α = β\nthis : HEq inst1 inst2\n⊢ HEq x y\n---\ncase e'_6\nα β : Type u_1\ninst1 : Add α\ninst2 : Add β\nx : α\ny : β\nthis✝ : α = β\nthis : HEq inst1 inst2\n⊢ HEq x y -/\n/- case e'_6\nα β : Type u_1\ninst1 : Add α\ninst2 : Add β\nx : α\ny : β\nthis✝ : α = β\nthis : HEq inst1 inst2\n⊢ HEq x y -/\n/- case e'_6\nα β : Type u_1\ninst1 : Add α\ninst2 : Add β\nx : α\ny : β\nthis✝ : α = β\nthis : HEq inst1 inst2\n⊢ HEq x y -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (prime : Nat → Prop) (n : Nat) :\n    prime (2 * n + 1) = prime (n + n + 1) := by\n  congr!\n  · guard_target =ₛ (HMul.hMul : Nat → Nat → Nat) = HAdd.hAdd\n    exact test_sorry\n  · guard_target = 2 = n\n    exact test_sorry\nprime : ℕ → Prop\nn : ℕ\n⊢ prime (2 * n + 1) = prime (n + n + 1)\n", "full_text": "example (prime : Nat → Prop) (n : Nat) :\n    prime (2 * n + 1) = prime (n + n + 1) := by\n  congr!\n  · guard_target =ₛ (HMul.hMul : Nat → Nat → Nat) = HAdd.hAdd\n    exact test_sorry\n  · guard_target = 2 = n\n    exact test_sorry\nprime : ℕ → Prop\nn : ℕ\n⊢ prime (2 * n + 1) = prime (n + n + 1)\n/- case h.e'_1.h.e'_5.h.e\nprime : ℕ → Prop\nn : ℕ\n⊢ HMul.hMul = HAdd.hAdd\n---\ncase h.e'_1.h.e'_5.h.e'_1\nprime : ℕ → Prop\nn : ℕ\n⊢ 2 = n -/\n/- case h.e'_1.h.e'_5.h.e\nprime : ℕ → Prop\nn : ℕ\n⊢ HMul.hMul = HAdd.hAdd -/\n/- Goals Accomplished! -/\n/- case h.e'_1.h.e'_5.h.e'_1\nprime : ℕ → Prop\nn : ℕ\n⊢ 2 = n -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (prime : Nat → Prop) (n : Nat) :\n    prime (2 * n + 1) = prime (n + n + 1) := by\n  congr! (config := {etaExpand := true})\n  · guard_target =ₛ (fun (x y : Nat) => x * y) = (fun (x y : Nat) => x + y)\n    exact test_sorry\n  · guard_target = 2 = n\n    exact test_sorry\nprime : ℕ → Prop\nn : ℕ\n⊢ prime (2 * n + 1) = prime (n + n + 1)\n", "full_text": "example (prime : Nat → Prop) (n : Nat) :\n    prime (2 * n + 1) = prime (n + n + 1) := by\n  congr! (config := {etaExpand := true})\n  · guard_target =ₛ (fun (x y : Nat) => x * y) = (fun (x y : Nat) => x + y)\n    exact test_sorry\n  · guard_target = 2 = n\n    exact test_sorry\nprime : ℕ → Prop\nn : ℕ\n⊢ prime (2 * n + 1) = prime (n + n + 1)\n/- case h.e'_1.h.e'_5.h.e\nprime : ℕ → Prop\nn : ℕ\n⊢ (fun a a_1 => a * a_1) = fun a a_1 => a + a_1\n---\ncase h.e'_1.h.e'_5.h.e'_1\nprime : ℕ → Prop\nn : ℕ\n⊢ 2 = n -/\n/- case h.e'_1.h.e'_5.h.e\nprime : ℕ → Prop\nn : ℕ\n⊢ (fun a a_1 => a * a_1) = fun a a_1 => a + a_1 -/\n/- Goals Accomplished! -/\n/- case h.e'_1.h.e'_5.h.e'_1\nprime : ℕ → Prop\nn : ℕ\n⊢ 2 = n -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (prime : Nat → Prop) (n : Nat) :\n    prime (2 * n + 1) = prime (n + n + 1) := by\n  congr! 2\n  guard_target = 2 * n = n + n\n  exact test_sorry\nprime : ℕ → Prop\nn : ℕ\n⊢ prime (2 * n + 1) = prime (n + n + 1)\n", "full_text": "example (prime : Nat → Prop) (n : Nat) :\n    prime (2 * n + 1) = prime (n + n + 1) := by\n  congr! 2\n  guard_target = 2 * n = n + n\n  exact test_sorry\nprime : ℕ → Prop\nn : ℕ\n⊢ prime (2 * n + 1) = prime (n + n + 1)\n/- case h.e'_1.h.e'_5\nprime : ℕ → Prop\nn : ℕ\n⊢ 2 * n = n + n -/\n/- case h.e'_1.h.e'_5\nprime : ℕ → Prop\nn : ℕ\n⊢ 2 * n = n + n -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (prime : Nat → Prop) (n : Nat) :\n    prime (2 * n + 1) = prime (n + n + 1) := by\n  congr! (config := .unfoldSameFun)\n  guard_target = 2 * n = n + n\n  exact test_sorry\nprime : ℕ → Prop\nn : ℕ\n⊢ prime (2 * n + 1) = prime (n + n + 1)\n", "full_text": "example (prime : Nat → Prop) (n : Nat) :\n    prime (2 * n + 1) = prime (n + n + 1) := by\n  congr! (config := .unfoldSameFun)\n  guard_target = 2 * n = n + n\n  exact test_sorry\nprime : ℕ → Prop\nn : ℕ\n⊢ prime (2 * n + 1) = prime (n + n + 1)\n/- case h.e'_1.h.e'_5\nprime : ℕ → Prop\nn : ℕ\n⊢ 2 * n = n + n -/\n/- case h.e'_1.h.e'_5\nprime : ℕ → Prop\nn : ℕ\n⊢ 2 * n = n + n -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : partiallyApplied (True ∧ True) = partiallyApplied True := by\n  congr!\n  decide\nx✝ : Sort u_1\npartiallyApplied : x✝\n⊢ sorry = sorry\n", "full_text": "example : partiallyApplied (True ∧ True) = partiallyApplied True := by\n  congr!\n  decide\nx✝ : Sort u_1\npartiallyApplied : x✝\n⊢ sorry = sorry\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (w : walk α x y) (w' : walk α x' y') (f : α → β) : HEq (w.map f) (w'.map f) := by\n  congr!\n  guard_target = x = x'\n  exact test_sorry\n  guard_target = y = y'\n  exact test_sorry\n  -- get x = y and y = y' in context for `HEq w w'` goal.\n  have : x = x' := by assumption\n  have : y = y' := by assumption\n  guard_target = HEq w w'\n  exact test_sorry\nx✝ : Sort u_1\nwalk : x✝\nα : Sort u_2\nβ : Sort u_3\nw : sorry\nw' : sorry\nf : α → β\n⊢ HEq sorry sorry\n", "full_text": "example (w : walk α x y) (w' : walk α x' y') (f : α → β) : HEq (w.map f) (w'.map f) := by\n  congr!\n  guard_target = x = x'\n  exact test_sorry\n  guard_target = y = y'\n  exact test_sorry\n  -- get x = y and y = y' in context for `HEq w w'` goal.\n  have : x = x' := by assumption\n  have : y = y' := by assumption\n  guard_target = HEq w w'\n  exact test_sorry\nx✝ : Sort u_1\nwalk : x✝\nα : Sort u_2\nβ : Sort u_3\nw : sorry\nw' : sorry\nf : α → β\n⊢ HEq sorry sorry\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (w : walk α x y) (w' : walk α x' y') (f : α → β) : HEq (w.map f) (w'.map f) := by\n  congr! with rfl rfl\n  guard_target = x = x'\n  exact test_sorry\n  guard_target = y = y'\n  exact test_sorry\n  guard_target = w = w'\n  exact test_sorry\nx✝ : Sort u_1\nwalk : x✝\nα : Sort u_2\nβ : Sort u_3\nw : sorry\nw' : sorry\nf : α → β\n⊢ HEq sorry sorry\n", "full_text": "example (w : walk α x y) (w' : walk α x' y') (f : α → β) : HEq (w.map f) (w'.map f) := by\n  congr! with rfl rfl\n  guard_target = x = x'\n  exact test_sorry\n  guard_target = y = y'\n  exact test_sorry\n  guard_target = w = w'\n  exact test_sorry\nx✝ : Sort u_1\nwalk : x✝\nα : Sort u_2\nβ : Sort u_3\nw : sorry\nw' : sorry\nf : α → β\n⊢ HEq sorry sorry\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (s t : MySet α) (f g : α → β) (h1 : s = t) (h2 : f = g) :\n    MySet.image f s = MySet.image g t := by\n  congr!\nx✝ : Sort u_1\nMySet : x✝\nα : Sort u_2\nβ : Sort u_3\ns : sorry\nt : sorry\nf g : α → β\nh1 : s = t\nh2 : f = g\n⊢ sorry = sorry\n", "full_text": "example (s t : MySet α) (f g : α → β) (h1 : s = t) (h2 : f = g) :\n    MySet.image f s = MySet.image g t := by\n  congr!\nx✝ : Sort u_1\nMySet : x✝\nα : Sort u_2\nβ : Sort u_3\ns : sorry\nt : sorry\nf g : α → β\nh1 : s = t\nh2 : f = g\n⊢ sorry = sorry\n/- Goals Accomplished! -/\n"}
{"prompt": "example (c : Prop → Prop → Prop → Prop) (x x' y z z' : Prop)\n    (h₀ : x ↔ x') (h₁ : z ↔ z') : c x y z ↔ c x' y z' := by\n  congr!\nc : Prop → Prop → Prop → Prop\nx x' y z z' : Prop\nh₀ : x ↔ x'\nh₁ : z ↔ z'\n⊢ c x y z ↔ c x' y z'\n", "full_text": "example (c : Prop → Prop → Prop → Prop) (x x' y z z' : Prop)\n    (h₀ : x ↔ x') (h₁ : z ↔ z') : c x y z ↔ c x' y z' := by\n  congr!\nc : Prop → Prop → Prop → Prop\nx x' y z z' : Prop\nh₀ : x ↔ x'\nh₁ : z ↔ z'\n⊢ c x y z ↔ c x' y z'\n/- Goals Accomplished! -/\n"}
{"prompt": "example {α β γ δ} {F : ∀ {α β}, (α → β) → γ → δ} {f g : α → β} {s : γ} (h : ∀ (x : α), f x = g x) :\n    F f s = F g s := by\n  congr!\n  funext\n  apply h\nα : Sort u_1\nβ : Sort u_2\nγ : Sort u_3\nδ : Sort u_4\nF : {α : Sort u_1} → {β : Sort u_2} → (α → β) → γ → δ\nf g : α → β\ns : γ\nh : ∀ (x : α), f x = g x\n⊢ F f s = F g s\n", "full_text": "example {α β γ δ} {F : ∀ {α β}, (α → β) → γ → δ} {f g : α → β} {s : γ} (h : ∀ (x : α), f x = g x) :\n    F f s = F g s := by\n  congr!\n  funext\n  apply h\nα : Sort u_1\nβ : Sort u_2\nγ : Sort u_3\nδ : Sort u_4\nF : {α : Sort u_1} → {β : Sort u_2} → (α → β) → γ → δ\nf g : α → β\ns : γ\nh : ∀ (x : α), f x = g x\n⊢ F f s = F g s\n/- case h.e'_3\nα : Sort u_1\nβ : Sort u_2\nγ : Sort u_3\nδ : Sort u_4\nF : {α : Sort u_1} → {β : Sort u_2} → (α → β) → γ → δ\nf g : α → β\ns : γ\nh : ∀ (x : α), f x = g x\n⊢ f = g -/\n/- case h.e'_3.h\nα : Sort u_1\nβ : Sort u_2\nγ : Sort u_3\nδ : Sort u_4\nF : {α : Sort u_1} → {β : Sort u_2} → (α → β) → γ → δ\nf g : α → β\ns : γ\nh : ∀ (x : α), f x = g x\nx✝ : α\n⊢ f x✝ = g x✝ -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {α β} {f : _ → β} {x y : {x : {x : α // x = x} // x = x}} (h : x.1 = y.1) :\n    f x = f y := by\n  congr! 1\n  ext1\n  exact h\nα : Sort u_1\nβ : Sort u_2\nf : { x // x = x } → β\nx y : { x // x = x }\nh : ↑x = ↑y\n⊢ f x = f y\n", "full_text": "example {α β} {f : _ → β} {x y : {x : {x : α // x = x} // x = x}} (h : x.1 = y.1) :\n    f x = f y := by\n  congr! 1\n  ext1\n  exact h\nα : Sort u_1\nβ : Sort u_2\nf : { x // x = x } → β\nx y : { x // x = x }\nh : ↑x = ↑y\n⊢ f x = f y\n/- case h.e'_1\nα : Sort u_1\nβ : Sort u_2\nf : { x // x = x } → β\nx y : { x // x = x }\nh : ↑x = ↑y\n⊢ x = y -/\n/- case h.e'_1.a\nα : Sort u_1\nβ : Sort u_2\nf : { x // x = x } → β\nx y : { x // x = x }\nh : ↑x = ↑y\n⊢ ↑x = ↑y -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {α β} {F : _ → β} {f g : {f : α → β // f = f}}\n    (h : ∀ x : α, (f : α → β) x = (g : α → β) x) :\n    F f = F g := by\n  congr!\n  ext x\n  apply h\nα : Sort u_1\nβ : Sort u_2\nF : { f // f = f } → β\nf g : { f // f = f }\nh : ∀ (x : α), ↑f x = ↑g x\n⊢ F f = F g\n", "full_text": "example {α β} {F : _ → β} {f g : {f : α → β // f = f}}\n    (h : ∀ x : α, (f : α → β) x = (g : α → β) x) :\n    F f = F g := by\n  congr!\n  ext x\n  apply h\nα : Sort u_1\nβ : Sort u_2\nF : { f // f = f } → β\nf g : { f // f = f }\nh : ∀ (x : α), ↑f x = ↑g x\n⊢ F f = F g\n/- case h.e'_1\nα : Sort u_1\nβ : Sort u_2\nF : { f // f = f } → β\nf g : { f // f = f }\nh : ∀ (x : α), ↑f x = ↑g x\n⊢ f = g -/\n/- case h.e'_1.a.h\nα : Sort u_1\nβ : Sort u_2\nF : { f // f = f } → β\nf g : { f // f = f }\nh : ∀ (x : α), ↑f x = ↑g x\nx : α\n⊢ ↑f x = ↑g x -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {ls : List ℕ} :\n    ls.map (fun x => (ls.map (fun y => 1 + y)).sum + 1) =\n      ls.map (fun x => (ls.map (fun y => Nat.succ y)).sum + 1) := by\n  congr! 6 with - y\n  guard_target = 1 + y = y.succ\n  rw [Nat.add_comm]\nls : List ℕ\n⊢ List.map (fun x => (List.map (fun y => 1 + y) ls).sum + 1) ls =\n    List.map (fun x => (List.map (fun y => y.succ) ls).sum + 1) ls\n", "full_text": "example {ls : List ℕ} :\n    ls.map (fun x => (ls.map (fun y => 1 + y)).sum + 1) =\n      ls.map (fun x => (ls.map (fun y => Nat.succ y)).sum + 1) := by\n  congr! 6 with - y\n  guard_target = 1 + y = y.succ\n  rw [Nat.add_comm]\nls : List ℕ\n⊢ List.map (fun x => (List.map (fun y => 1 + y) ls).sum + 1) ls =\n    List.map (fun x => (List.map (fun y => y.succ) ls).sum + 1) ls\n/- case h.e'_3.h.h.e'_5.h.e'_4.h.e'_3.h\nls : List ℕ\ny : ℕ\n⊢ 1 + y = y.succ -/\n/- case h.e'_3.h.h.e'_5.h.e'_4.h.e'_3.h\nls : List ℕ\ny : ℕ\n⊢ 1 + y = y.succ -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {ls : List ℕ} {f g : ℕ → ℕ} {h : ∀ x, f x = g x} :\n    ls.map (fun x => f x + 3) = ls.map (fun x => g x + 3) := by\n  congr! 3 with x -- it's a little too powerful and will get to `f = g`\n  exact h x\nls : List ℕ\nf g : ℕ → ℕ\nh : ∀ (x : ℕ), f x = g x\n⊢ List.map (fun x => f x + 3) ls = List.map (fun x => g x + 3) ls\n", "full_text": "example {ls : List ℕ} {f g : ℕ → ℕ} {h : ∀ x, f x = g x} :\n    ls.map (fun x => f x + 3) = ls.map (fun x => g x + 3) := by\n  congr! 3 with x -- it's a little too powerful and will get to `f = g`\n  exact h x\nls : List ℕ\nf g : ℕ → ℕ\nh : ∀ (x : ℕ), f x = g x\n⊢ List.map (fun x => f x + 3) ls = List.map (fun x => g x + 3) ls\n/- case h.e'_3.h.h.e'_5\nls : List ℕ\nf g : ℕ → ℕ\nh : ∀ (x : ℕ), f x = g x\nx : ℕ\n⊢ f x = g x -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {α} (a b : α) (h : false) : a = b := by\n  fail_if_success { congr! }\n  cases h\nα : Sort u_1\na b : α\nh : false = true\n⊢ a = b\n", "full_text": "example {α} (a b : α) (h : false) : a = b := by\n  fail_if_success { congr! }\n  cases h\nα : Sort u_1\na b : α\nh : false = true\n⊢ a = b\n/- α : Sort u_1\na b : α\nh : false = true\n⊢ a = b -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x y z : Nat) (h : x = z) (hy : y = 2) : 1 + x + y = g z + 2 := by\n  congr!\n  guard_target = HAdd.hAdd 1 = g\n  funext\n  simp [g, Nat.add_comm]\nx✝ : Sort u_1\ng : x✝\nx y z : ℕ\nh : x = z\nhy : y = 2\n⊢ 1 + x + y = sorry + 2\n", "full_text": "example (x y z : Nat) (h : x = z) (hy : y = 2) : 1 + x + y = g z + 2 := by\n  congr!\n  guard_target = HAdd.hAdd 1 = g\n  funext\n  simp [g, Nat.add_comm]\nx✝ : Sort u_1\ng : x✝\nx y z : ℕ\nh : x = z\nhy : y = 2\n⊢ 1 + x + y = sorry + 2\n/- case h.e'_5\nx✝ : Sort u_1\ng : x✝\nx y z : ℕ\nh : x = z\nhy : y = 2\n⊢ 1 + x = sorry -/\n/- case h.e'_5\nx✝ : Sort u_1\ng : x✝\nx y z : ℕ\nh : x = z\nhy : y = 2\n⊢ 1 + x = sorry -/\n"}
{"prompt": "example (Fintype : Type → Type)\n    (α β : Type) (inst : Fintype α) (inst' : Fintype β) : HEq inst inst' := by\n  congr!\n  guard_target = HEq inst inst'\n  exact test_sorry\nFintype : Type → Type\nα β : Type\ninst : Fintype α\ninst' : Fintype β\n⊢ HEq inst inst'\n", "full_text": "example (Fintype : Type → Type)\n    (α β : Type) (inst : Fintype α) (inst' : Fintype β) : HEq inst inst' := by\n  congr!\n  guard_target = HEq inst inst'\n  exact test_sorry\nFintype : Type → Type\nα β : Type\ninst : Fintype α\ninst' : Fintype β\n⊢ HEq inst inst'\n/- Fintype : Type → Type\nα β : Type\ninst : Fintype α\ninst' : Fintype β\n⊢ HEq inst inst' -/\n/- Fintype : Type → Type\nα β : Type\ninst : Fintype α\ninst' : Fintype β\n⊢ HEq inst inst' -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (Fintype : Type → Type) [∀ γ, Subsingleton (Fintype γ)]\n    (α β : Type) (inst : Fintype α) (inst' : Fintype β) : HEq inst inst' := by\n  congr!\n  guard_target = α = β\n  exact test_sorry\nFintype : Type → Type\ninst✝ : ∀ (γ : Type), Subsingleton (Fintype γ)\nα β : Type\ninst : Fintype α\ninst' : Fintype β\n⊢ HEq inst inst'\n", "full_text": "example (Fintype : Type → Type) [∀ γ, Subsingleton (Fintype γ)]\n    (α β : Type) (inst : Fintype α) (inst' : Fintype β) : HEq inst inst' := by\n  congr!\n  guard_target = α = β\n  exact test_sorry\nFintype : Type → Type\ninst✝ : ∀ (γ : Type), Subsingleton (Fintype γ)\nα β : Type\ninst : Fintype α\ninst' : Fintype β\n⊢ HEq inst inst'\n/- case h.e'_1\nFintype : Type → Type\ninst✝¹ : ∀ (γ : Type), Subsingleton (Fintype γ)\nα β : Type\ninst✝ : Fintype α\ninst' : Fintype β\ninst : ∀ (γ : Type), Lean.Meta.FastSubsingleton (Fintype γ)\n⊢ α = β -/\n/- case h.e'_1\nFintype : Type → Type\ninst✝¹ : ∀ (γ : Type), Subsingleton (Fintype γ)\nα β : Type\ninst✝ : Fintype α\ninst' : Fintype β\ninst : ∀ (γ : Type), Lean.Meta.FastSubsingleton (Fintype γ)\n⊢ α = β -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : n = m → 3 + n = m + 3 := by\n  congr! 0 with rfl\n  guard_target = 3 + n = n + 3\n  apply add_comm\nn m : ℕ\n⊢ n = m → 3 + n = m + 3\n", "full_text": "example : n = m → 3 + n = m + 3 := by\n  congr! 0 with rfl\n  guard_target = 3 + n = n + 3\n  apply add_comm\nn m : ℕ\n⊢ n = m → 3 + n = m + 3\n/- n : ℕ\n⊢ 3 + n = n + 3 -/\n/- n : ℕ\n⊢ 3 + n = n + 3 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x y x' y' : Nat) (hx : x = x') (hy : y = y') : x + y = x' + y' := by\n  congr! (config := { closePre := false, closePost := false })\n  exact hx\n  exact hy\nx y x' y' : ℕ\nhx : x = x'\nhy : y = y'\n⊢ x + y = x' + y'\n", "full_text": "example (x y x' y' : Nat) (hx : x = x') (hy : y = y') : x + y = x' + y' := by\n  congr! (config := { closePre := false, closePost := false })\n  exact hx\n  exact hy\nx y x' y' : ℕ\nhx : x = x'\nhy : y = y'\n⊢ x + y = x' + y'\n/- case h.e'_5\nx y x' y' : ℕ\nhx : x = x'\nhy : y = y'\n⊢ x = x'\n---\ncase h.e'_6\nx y x' y' : ℕ\nhx : x = x'\nhy : y = y'\n⊢ y = y' -/\n/- case h.e'_6\nx y x' y' : ℕ\nhx : x = x'\nhy : y = y'\n⊢ y = y' -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x y x' : Nat) (hx : id x = id x') : x + y = x' + y := by\n  congr!\nx y x' : ℕ\nhx : id x = id x'\n⊢ x + y = x' + y\n", "full_text": "example (x y x' : Nat) (hx : id x = id x') : x + y = x' + y := by\n  congr!\nx y x' : ℕ\nhx : id x = id x'\n⊢ x + y = x' + y\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x y x' : Nat) (hx : id x = id x') : x + y = x' + y := by\n  congr! (config := { closePost := false })\n  exact hx\nx y x' : ℕ\nhx : id x = id x'\n⊢ x + y = x' + y\n", "full_text": "example (x y x' : Nat) (hx : id x = id x') : x + y = x' + y := by\n  congr! (config := { closePost := false })\n  exact hx\nx y x' : ℕ\nhx : id x = id x'\n⊢ x + y = x' + y\n/- case h.e'_5\nx y x' : ℕ\nhx : id x = id x'\n⊢ x = x' -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : { f : Nat → Nat // f = id } :=\n  ⟨?_, by\n    -- prevents `rfl` from solving for `?m` in `?m = id`:\n    congr! (config := { closePre := false, closePost := false })\n    ext x\n    exact Nat.zero_add x⟩\n⊢ ?m.58 = id\n", "full_text": "example : { f : Nat → Nat // f = id } :=\n  ⟨?_, by\n    -- prevents `rfl` from solving for `?m` in `?m = id`:\n    congr! (config := { closePre := false, closePost := false })\n    ext x\n    exact Nat.zero_add x⟩\n⊢ ?m.58 = id\n/- ⊢ ?m.58 = id -/\n/- case h\nx : ℕ\n⊢ ?m.58 x = id x -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : z = y) : (x = y ∨ x = z) → x = y := by\n  congr! with (rfl|rfl)\nα✝ : Sort u_1\nz y x : α✝\nh : z = y\n⊢ x = y ∨ x = z → x = y\n", "full_text": "example (h : z = y) : (x = y ∨ x = z) → x = y := by\n  congr! with (rfl|rfl)\nα✝ : Sort u_1\nz y x : α✝\nh : z = y\n⊢ x = y ∨ x = z → x = y\n/- Goals Accomplished! -/\n"}
{"prompt": "example {α} [AddCommMonoid α] [PartialOrder α] {a b c d e f g : α} :\n    (a + b) + (c + d) + (e + f) + g ≤ a + d + e + f + c + g + b := by\n  ac_change a + d + e + f + c + g + b ≤ _; rfl\nα : Type u_1\ninst✝¹ : AddCommMonoid α\ninst✝ : PartialOrder α\na b c d e f g : α\n⊢ a + b + (c + d) + (e + f) + g ≤ a + d + e + f + c + g + b\n", "full_text": "example {α} [AddCommMonoid α] [PartialOrder α] {a b c d e f g : α} :\n    (a + b) + (c + d) + (e + f) + g ≤ a + d + e + f + c + g + b := by\n  ac_change a + d + e + f + c + g + b ≤ _; rfl\nα : Type u_1\ninst✝¹ : AddCommMonoid α\ninst✝ : PartialOrder α\na b c d e f g : α\n⊢ a + b + (c + d) + (e + f) + g ≤ a + d + e + f + c + g + b\n/- case h.e'_3\nα : Type u_1\ninst✝¹ : AddCommMonoid α\ninst✝ : PartialOrder α\na b c d e f g : α\n⊢ a + b + (c + d) + (e + f) + g = a + d + e + f + c + g + b\n---\ncase convert_2\nα : Type u_1\ninst✝¹ : AddCommMonoid α\ninst✝ : PartialOrder α\na b c d e f g : α\n⊢ a + d + e + f + c + g + b ≤ a + d + e + f + c + g + b -/\n"}
{"prompt": "example {α} [AddCommMonoid α] [PartialOrder α] {a b c d e f g : α} :\n    (a + b) + (c + d) + (e + f) + g ≤ a + d + e + f + c + b + g := by\n  ac_change a + d + e + f + c + g + b ≤ a + d + e + f + c + g + b\n  rfl\nα : Type u_1\ninst✝¹ : AddCommMonoid α\ninst✝ : PartialOrder α\na b c d e f g : α\n⊢ a + b + (c + d) + (e + f) + g ≤ a + d + e + f + c + b + g\n", "full_text": "example {α} [AddCommMonoid α] [PartialOrder α] {a b c d e f g : α} :\n    (a + b) + (c + d) + (e + f) + g ≤ a + d + e + f + c + b + g := by\n  ac_change a + d + e + f + c + g + b ≤ a + d + e + f + c + g + b\n  rfl\nα : Type u_1\ninst✝¹ : AddCommMonoid α\ninst✝ : PartialOrder α\na b c d e f g : α\n⊢ a + b + (c + d) + (e + f) + g ≤ a + d + e + f + c + b + g\n/- case h.e'_3\nα : Type u_1\ninst✝¹ : AddCommMonoid α\ninst✝ : PartialOrder α\na b c d e f g : α\n⊢ a + b + (c + d) + (e + f) + g = a + d + e + f + c + g + b\n---\ncase h.e'_4\nα : Type u_1\ninst✝¹ : AddCommMonoid α\ninst✝ : PartialOrder α\na b c d e f g : α\n⊢ a + d + e + f + c + b + g = a + d + e + f + c + g + b\n---\nα : Type u_1\ninst✝¹ : AddCommMonoid α\ninst✝ : PartialOrder α\na b c d e f g : α\n⊢ a + d + e + f + c + g + b ≤ a + d + e + f + c + g + b -/\n/- case h.e'_3\nα : Type u_1\ninst✝¹ : AddCommMonoid α\ninst✝ : PartialOrder α\na b c d e f g : α\n⊢ a + b + (c + d) + (e + f) + g = a + d + e + f + c + g + b\n---\ncase h.e'_4\nα : Type u_1\ninst✝¹ : AddCommMonoid α\ninst✝ : PartialOrder α\na b c d e f g : α\n⊢ a + d + e + f + c + b + g = a + d + e + f + c + g + b\n---\nα : Type u_1\ninst✝¹ : AddCommMonoid α\ninst✝ : PartialOrder α\na b c d e f g : α\n⊢ a + d + e + f + c + g + b ≤ a + d + e + f + c + g + b -/\n"}
{"prompt": "example : True := by\n  rsuffices ⟨n : ℕ, h : n = n, -⟩ : ∃ n : ℕ, n = n ∧ True\n  · guard_hyp n : ℕ\n    guard_hyp h : n = n\n    trivial\n  · existsi 0\n    simp\n⊢ True\n", "full_text": "example : True := by\n  rsuffices ⟨n : ℕ, h : n = n, -⟩ : ∃ n : ℕ, n = n ∧ True\n  · guard_hyp n : ℕ\n    guard_hyp h : n = n\n    trivial\n  · existsi 0\n    simp\n⊢ True\n/- case intro.intro\nn : ℕ\nh : n = n\n⊢ True\n---\n⊢ ∃ n, n = n ∧ True -/\n/- case intro.intro\nn : ℕ\nh : n = n\n⊢ True -/\n/- case intro.intro\nn : ℕ\nh : n = n\n⊢ True -/\n/- Goals Accomplished! -/\n/- ⊢ 0 = 0 ∧ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : True := by\n  rsuffices : ∃ n : ℕ, n = n ∧ True\n  · trivial\n  · existsi 0\n    simp\n⊢ True\n", "full_text": "example : True := by\n  rsuffices : ∃ n : ℕ, n = n ∧ True\n  · trivial\n  · existsi 0\n    simp\n⊢ True\n/- this✝ : ∃ n, n = n ∧ True\n⊢ True\n---\n⊢ ∃ n, n = n ∧ True -/\n/- Goals Accomplished! -/\n/- ⊢ 0 = 0 ∧ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : True := by\n  rsuffices (h : True) | ⟨⟨⟩⟩ : True ∨ False\n  · guard_hyp h : True\n    trivial\n  · left\n    trivial\n⊢ True\n", "full_text": "example : True := by\n  rsuffices (h : True) | ⟨⟨⟩⟩ : True ∨ False\n  · guard_hyp h : True\n    trivial\n  · left\n    trivial\n⊢ True\n/- case inl\nh : True\n⊢ True\n---\n⊢ True ∨ False -/\n/- case inl\nh : True\n⊢ True -/\n/- Goals Accomplished! -/\n/- case h\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x y : α × β) : True := by\n  rsuffices ⟨⟨a, b⟩, c, d⟩ : (α × β) × (α × β)\n  · guard_hyp a : α\n    guard_hyp b : β\n    guard_hyp c : α\n    guard_hyp d : β\n    trivial\n  · exact ⟨x, y⟩\nα : Type u_1\nβ : Type u_2\nx y : α × β\n⊢ True\n", "full_text": "example (x y : α × β) : True := by\n  rsuffices ⟨⟨a, b⟩, c, d⟩ : (α × β) × (α × β)\n  · guard_hyp a : α\n    guard_hyp b : β\n    guard_hyp c : α\n    guard_hyp d : β\n    trivial\n  · exact ⟨x, y⟩\nα : Type u_1\nβ : Type u_2\nx y : α × β\n⊢ True\n/- case mk.mk.mk\nα : Type u_1\nβ : Type u_2\nx y : α × β\na : α\nb : β\nc : α\nd : β\n⊢ True\n---\nα : Type u_1\nβ : Type u_2\nx y : α × β\n⊢ (α × β) × α × β -/\n/- case mk.mk.mk\nα : Type u_1\nβ : Type u_2\nx y : α × β\na : α\nb : β\nc : α\nd : β\n⊢ True -/\n/- case mk.mk.mk\nα : Type u_1\nβ : Type u_2\nx y : α × β\na : α\nb : β\nc : α\nd : β\n⊢ True -/\n/- case mk.mk.mk\nα : Type u_1\nβ : Type u_2\nx y : α × β\na : α\nb : β\nc : α\nd : β\n⊢ True -/\n/- case mk.mk.mk\nα : Type u_1\nβ : Type u_2\nx y : α × β\na : α\nb : β\nc : α\nd : β\n⊢ True -/\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x y : α ⊕ β) : True := by\n  rsuffices ⟨a|b, c|d⟩ : (α ⊕ β) × (α ⊕ β)\n  · guard_hyp a : α\n    guard_hyp c : α\n    trivial\n  · guard_hyp a : α\n    guard_hyp d : β\n    trivial\n  · guard_hyp b : β\n    guard_hyp c : α\n    trivial\n  · guard_hyp b : β\n    guard_hyp d : β\n    trivial\n  exact ⟨x, y⟩\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\n⊢ True\n", "full_text": "example (x y : α ⊕ β) : True := by\n  rsuffices ⟨a|b, c|d⟩ : (α ⊕ β) × (α ⊕ β)\n  · guard_hyp a : α\n    guard_hyp c : α\n    trivial\n  · guard_hyp a : α\n    guard_hyp d : β\n    trivial\n  · guard_hyp b : β\n    guard_hyp c : α\n    trivial\n  · guard_hyp b : β\n    guard_hyp d : β\n    trivial\n  exact ⟨x, y⟩\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\n⊢ True\n/- case mk.inl.inl\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\na c : α\n⊢ True\n---\ncase mk.inl.inr\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\na : α\nd : β\n⊢ True\n---\ncase mk.inr.inl\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\nb : β\nc : α\n⊢ True\n---\ncase mk.inr.inr\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\nb d : β\n⊢ True\n---\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\n⊢ (α ⊕ β) × (α ⊕ β) -/\n/- case mk.inl.inl\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\na c : α\n⊢ True -/\n/- case mk.inl.inl\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\na c : α\n⊢ True -/\n/- Goals Accomplished! -/\n/- case mk.inl.inr\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\na : α\nd : β\n⊢ True -/\n/- case mk.inl.inr\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\na : α\nd : β\n⊢ True -/\n/- Goals Accomplished! -/\n/- case mk.inr.inl\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\nb : β\nc : α\n⊢ True -/\n/- case mk.inr.inl\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\nb : β\nc : α\n⊢ True -/\n/- Goals Accomplished! -/\n/- case mk.inr.inr\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\nb d : β\n⊢ True -/\n/- case mk.inr.inr\nα : Type u_1\nβ : Type u_2\nx y : α ⊕ β\nb d : β\n⊢ True -/\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {α} (V : Set α) (w : True → ∃ p, p ∈ (V.foo V) ∩ (V.foo V)) : True := by\n  rsuffices ⟨_, _⟩ : ∃ p, p ∈ (V.foo V) ∩ (V.foo V)\n  · trivial\n  · exact w trivial\nα : Type u_1\nV : Set α\nw : True → ∃ p, p ∈ sorry ∩ sorry\n⊢ True\n", "full_text": "example {α} (V : Set α) (w : True → ∃ p, p ∈ (V.foo V) ∩ (V.foo V)) : True := by\n  rsuffices ⟨_, _⟩ : ∃ p, p ∈ (V.foo V) ∩ (V.foo V)\n  · trivial\n  · exact w trivial\nα : Type u_1\nV : Set α\nw : True → ∃ p, p ∈ sorry ∩ sorry\n⊢ True\n/- case intro\nα : Type u_1\nV : Set α\nw : True → ∃ p, p ∈ sorry ∩ sorry\nw✝ : ?m.625\nh✝ : w✝ ∈ sorry ∩ sorry\n⊢ True\n---\nα : Type u_1\nV : Set α\nw : True → ∃ p, p ∈ sorry ∩ sorry\n⊢ ∃ p, p ∈ sorry ∩ sorry -/\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a : Nat) (b : Int) : Int × Nat := by\n  rename' a => c, b => d\n  exact (d, c)\na : ℕ\nb : ℤ\n⊢ ℤ × ℕ\n", "full_text": "example (a : Nat) (b : Int) : Int × Nat := by\n  rename' a => c, b => d\n  exact (d, c)\na : ℕ\nb : ℤ\n⊢ ℤ × ℕ\n/- c : ℕ\nd : ℤ\n⊢ ℤ × ℕ -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a : Nat) (b : Int) : Int × Nat := by\n  rename' a => b, b => a\n  exact (a, b)\na : ℕ\nb : ℤ\n⊢ ℤ × ℕ\n", "full_text": "example (a : Nat) (b : Int) : Int × Nat := by\n  rename' a => b, b => a\n  exact (a, b)\na : ℕ\nb : ℤ\n⊢ ℤ × ℕ\n/- b : ℕ\na : ℤ\n⊢ ℤ × ℕ -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b : ENat) (h : a = b) : a - b = b - a := by\n  enat_to_nat\n  omega\na b : ℕ∞\nh : a = b\n⊢ a - b = b - a\n", "full_text": "example (a b : ENat) (h : a = b) : a - b = b - a := by\n  enat_to_nat\n  omega\na b : ℕ∞\nh : a = b\n⊢ a - b = b - a\n/- case coe.coe\na b : ℕ\nh : a = b\n⊢ a - b = b - a -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b : ENat) (h : a ≤ b) : a - b < b + 1 := by\n  enat_to_nat\n  omega\na b : ℕ∞\nh : a ≤ b\n⊢ a - b < b + 1\n", "full_text": "example (a b : ENat) (h : a ≤ b) : a - b < b + 1 := by\n  enat_to_nat\n  omega\na b : ℕ∞\nh : a ≤ b\n⊢ a - b < b + 1\n/- case coe.coe\na b : ℕ\nh : a ≤ b\n⊢ a - b < b + 1 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b : ENat) (h : a ≤ b) : a - 2 * b ≤ b + 1 := by\n  enat_to_nat\n  omega\na b : ℕ∞\nh : a ≤ b\n⊢ a - 2 * b ≤ b + 1\n", "full_text": "example (a b : ENat) (h : a ≤ b) : a - 2 * b ≤ b + 1 := by\n  enat_to_nat\n  omega\na b : ℕ∞\nh : a ≤ b\n⊢ a - 2 * b ≤ b + 1\n/- case coe.coe\na b : ℕ\nh : a ≤ b\n⊢ a - 2 * b ≤ b + 1 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c : ENat) (hab : a ≥ b) (hbc : b ≥ c) : a ≥ c := by\n  enat_to_nat\n  omega\na b c : ℕ∞\nhab : a ≥ b\nhbc : b ≥ c\n⊢ a ≥ c\n", "full_text": "example (a b c : ENat) (hab : a ≥ b) (hbc : b ≥ c) : a ≥ c := by\n  enat_to_nat\n  omega\na b c : ℕ∞\nhab : a ≥ b\nhbc : b ≥ c\n⊢ a ≥ c\n/- case coe.coe.coe\na b c : ℕ\nhab : b ≤ a\nhbc : c ≤ b\n⊢ c ≤ a -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b : ENat) (h : a = b) : a - b = b - a := by\n  -- to test if the tactic works with inaccessible names\n  let a : ℤ := 42\n  let b : ℤ := 32\n  enat_to_nat\n  omega\na b : ℕ∞\nh : a = b\n⊢ a - b = b - a\n", "full_text": "example (a b : ENat) (h : a = b) : a - b = b - a := by\n  -- to test if the tactic works with inaccessible names\n  let a : ℤ := 42\n  let b : ℤ := 32\n  enat_to_nat\n  omega\na b : ℕ∞\nh : a = b\n⊢ a - b = b - a\n/- a✝ b : ℕ∞\nh : a✝ = b\na : ℤ := 42\n⊢ a✝ - b = b - a✝ -/\n/- a✝ b✝ : ℕ∞\nh : a✝ = b✝\na : ℤ := 42\nb : ℤ := 32\n⊢ a✝ - b✝ = b✝ - a✝ -/\n/- case coe.coe\na : ℤ := 42\nb : ℤ := 32\na✝¹ a✝ : ℕ\nh : a✝¹ = a✝\n⊢ a✝¹ - a✝ = a✝ - a✝¹ -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {x : Nat} (h : x ∈ [0, 2, 37]) : x ≤ 57 := by\n  fin_cases h\n  repeat decide\nx : ℕ\nh : x ∈ [0, 2, 37]\n⊢ x ≤ 57\n", "full_text": "example {x : Nat} (h : x ∈ [0, 2, 37]) : x ≤ 57 := by\n  fin_cases h\n  repeat decide\nx : ℕ\nh : x ∈ [0, 2, 37]\n⊢ x ≤ 57\n/- case «0»\n⊢ 0 ≤ 57\n---\ncase «1»\n⊢ 2 ≤ 57\n---\ncase «2»\n⊢ 37 ≤ 57 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {x : Nat} (h : x ∈ [0, 2, 37]) : x = 0 ∨ x = 2 ∨ x = 37 := by\n  fin_cases h\n  repeat simp\nx : ℕ\nh : x ∈ [0, 2, 37]\n⊢ x = 0 ∨ x = 2 ∨ x = 37\n", "full_text": "example {x : Nat} (h : x ∈ [0, 2, 37]) : x = 0 ∨ x = 2 ∨ x = 37 := by\n  fin_cases h\n  repeat simp\nx : ℕ\nh : x ∈ [0, 2, 37]\n⊢ x = 0 ∨ x = 2 ∨ x = 37\n/- case «0»\n⊢ 0 = 0 ∨ 0 = 2 ∨ 0 = 37\n---\ncase «1»\n⊢ 2 = 0 ∨ 2 = 2 ∨ 2 = 37\n---\ncase «2»\n⊢ 37 = 0 ∨ 37 = 2 ∨ 37 = 37 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {x : Nat} (h : x ∈ List.range 5) : x ≤ 4 := by\n  fin_cases h\n  repeat decide\nx : ℕ\nh : x ∈ List.range 5\n⊢ x ≤ 4\n", "full_text": "example {x : Nat} (h : x ∈ List.range 5) : x ≤ 4 := by\n  fin_cases h\n  repeat decide\nx : ℕ\nh : x ∈ List.range 5\n⊢ x ≤ 4\n/- case «0»\n⊢ 0 ≤ 4\n---\ncase «1»\n⊢ 1 ≤ 4\n---\ncase «2»\n⊢ 2 ≤ 4\n---\ncase «3»\n⊢ 3 ≤ 4\n---\ncase «4»\n⊢ 4 ≤ 4 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {p : Fin 4 → Prop} (i : Fin 4) (h : p i) : p i := by\n  fin_cases i\n  repeat exact h\np : Fin 4 → Prop\ni : Fin 4\nh : p i\n⊢ p i\n", "full_text": "example {p : Fin 4 → Prop} (i : Fin 4) (h : p i) : p i := by\n  fin_cases i\n  repeat exact h\np : Fin 4 → Prop\ni : Fin 4\nh : p i\n⊢ p i\n/- case «0»\np : Fin 4 → Prop\nh : p ((fun i => i) ⟨0, ⋯⟩)\n⊢ p ((fun i => i) ⟨0, ⋯⟩)\n---\ncase «1»\np : Fin 4 → Prop\nh : p ((fun i => i) ⟨1, ⋯⟩)\n⊢ p ((fun i => i) ⟨1, ⋯⟩)\n---\ncase «2»\np : Fin 4 → Prop\nh : p ((fun i => i) ⟨2, ⋯⟩)\n⊢ p ((fun i => i) ⟨2, ⋯⟩)\n---\ncase «3»\np : Fin 4 → Prop\nh : p ((fun i => i) ⟨3, ⋯⟩)\n⊢ p ((fun i => i) ⟨3, ⋯⟩) -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (f : Nat → Prop) (p : Fin 3) (h0 : f 0) (h1 : f 1) (h2 : f 2) : f p.val := by\n  fin_cases p\n  all_goals\n    assumption\nf : ℕ → Prop\np : Fin 3\nh0 : f 0\nh1 : f 1\nh2 : f 2\n⊢ f ↑p\n", "full_text": "example (f : Nat → Prop) (p : Fin 3) (h0 : f 0) (h1 : f 1) (h2 : f 2) : f p.val := by\n  fin_cases p\n  all_goals\n    assumption\nf : ℕ → Prop\np : Fin 3\nh0 : f 0\nh1 : f 1\nh2 : f 2\n⊢ f ↑p\n/- case «0»\nf : ℕ → Prop\nh0 : f 0\nh1 : f 1\nh2 : f 2\n⊢ f ↑((fun i => i) ⟨0, ⋯⟩)\n---\ncase «1»\nf : ℕ → Prop\nh0 : f 0\nh1 : f 1\nh2 : f 2\n⊢ f ↑((fun i => i) ⟨1, ⋯⟩)\n---\ncase «2»\nf : ℕ → Prop\nh0 : f 0\nh1 : f 1\nh2 : f 2\n⊢ f ↑((fun i => i) ⟨2, ⋯⟩) -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (f : Nat → Prop) (p : Fin 0) : f p.val := by\n  fin_cases p\nf : ℕ → Prop\np : Fin 0\n⊢ f ↑p\n", "full_text": "example (f : Nat → Prop) (p : Fin 0) : f p.val := by\n  fin_cases p\nf : ℕ → Prop\np : Fin 0\n⊢ f ↑p\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x2 : Fin 2) (x3 : Fin 3) : True := by\n  fin_cases x2, x3\n  all_goals trivial\nx2 : Fin 2\nx3 : Fin 3\n⊢ True\n", "full_text": "example (x2 : Fin 2) (x3 : Fin 3) : True := by\n  fin_cases x2, x3\n  all_goals trivial\nx2 : Fin 2\nx3 : Fin 3\n⊢ True\n/- case «0».«0»\n⊢ True\n---\ncase «0».«1»\n⊢ True\n---\ncase «0».«2»\n⊢ True\n---\ncase «1».«0»\n⊢ True\n---\ncase «1».«1»\n⊢ True\n---\ncase «1».«2»\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (p : ℕ) (h2 : 2 < p) (h5 : p < 5) : p = 3 ∨ p = 4 := by\n  have hp : ?_ := ?foo\n  case foo => exact (Finset.mem_Ioo).2 ⟨h2, h5⟩\n  fin_cases hp\n  · norm_num\n  · norm_num\np : ℕ\nh2 : 2 < p\nh5 : p < 5\n⊢ p = 3 ∨ p = 4\n", "full_text": "example (p : ℕ) (h2 : 2 < p) (h5 : p < 5) : p = 3 ∨ p = 4 := by\n  have hp : ?_ := ?foo\n  case foo => exact (Finset.mem_Ioo).2 ⟨h2, h5⟩\n  fin_cases hp\n  · norm_num\n  · norm_num\np : ℕ\nh2 : 2 < p\nh5 : p < 5\n⊢ p = 3 ∨ p = 4\n/- case refine_2\np : ℕ\nh2 : 2 < p\nh5 : p < 5\nhp : ?refine_1\n⊢ p = 3 ∨ p = 4\n---\ncase refine_1\np : ℕ\nh2 : 2 < p\nh5 : p < 5\n⊢ Sort ?u.129\n---\ncase foo\np : ℕ\nh2 : 2 < p\nh5 : p < 5\n⊢ ?refine_1 -/\n/- case refine_2\np : ℕ\nh2 : 2 < p\nh5 : p < 5\nhp : p ∈ Finset.Ioo 2 5\n⊢ p = 3 ∨ p = 4 -/\n/- case refine_2.«0»\nh2 : 2 < 2 + 1\nh5 : 2 + 1 < 5\n⊢ 2 + 1 = 3 ∨ 2 + 1 = 4\n---\ncase refine_2.«1»\nh2 : 2 < 2 + 1 + 1\nh5 : 2 + 1 + 1 < 5\n⊢ 2 + 1 + 1 = 3 ∨ 2 + 1 + 1 = 4 -/\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x y : Fin 2): True := by\n  fin_cases x, y\n  trace_state\n  all_goals trivial\nx y : Fin 2\n⊢ True\n", "full_text": "example (x y : Fin 2): True := by\n  fin_cases x, y\n  trace_state\n  all_goals trivial\nx y : Fin 2\n⊢ True\n/- case «0».«0»\n⊢ True\n---\ncase «0».«1»\n⊢ True\n---\ncase «1».«0»\n⊢ True\n---\ncase «1».«1»\n⊢ True -/\n/- case «0».«0»\n⊢ True\n---\ncase «0».«1»\n⊢ True\n---\ncase «1».«0»\n⊢ True\n---\ncase «1».«1»\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x2 : Fin 2) (x3 : Fin 3) (n : Nat) (y : Fin n) : x2.val * x3.val = x3.val * x2.val := by\n  fin_cases x2 <;> fin_cases x3\n  fail_if_success\n    fin_cases y\n  all_goals rfl\nx2 : Fin 2\nx3 : Fin 3\nn : ℕ\ny : Fin n\n⊢ ↑x2 * ↑x3 = ↑x3 * ↑x2\n", "full_text": "example (x2 : Fin 2) (x3 : Fin 3) (n : Nat) (y : Fin n) : x2.val * x3.val = x3.val * x2.val := by\n  fin_cases x2 <;> fin_cases x3\n  fail_if_success\n    fin_cases y\n  all_goals rfl\nx2 : Fin 2\nx3 : Fin 3\nn : ℕ\ny : Fin n\n⊢ ↑x2 * ↑x3 = ↑x3 * ↑x2\n/- case «0».«0»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨0, ⋯⟩) * ↑((fun i => i) ⟨0, ⋯⟩) = ↑((fun i => i) ⟨0, ⋯⟩) * ↑((fun i => i) ⟨0, ⋯⟩)\n---\ncase «0».«1»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨0, ⋯⟩) * ↑((fun i => i) ⟨1, ⋯⟩) = ↑((fun i => i) ⟨1, ⋯⟩) * ↑((fun i => i) ⟨0, ⋯⟩)\n---\ncase «0».«2»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨0, ⋯⟩) * ↑((fun i => i) ⟨2, ⋯⟩) = ↑((fun i => i) ⟨2, ⋯⟩) * ↑((fun i => i) ⟨0, ⋯⟩)\n---\ncase «1».«0»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨1, ⋯⟩) * ↑((fun i => i) ⟨0, ⋯⟩) = ↑((fun i => i) ⟨0, ⋯⟩) * ↑((fun i => i) ⟨1, ⋯⟩)\n---\ncase «1».«1»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨1, ⋯⟩) * ↑((fun i => i) ⟨1, ⋯⟩) = ↑((fun i => i) ⟨1, ⋯⟩) * ↑((fun i => i) ⟨1, ⋯⟩)\n---\ncase «1».«2»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨1, ⋯⟩) * ↑((fun i => i) ⟨2, ⋯⟩) = ↑((fun i => i) ⟨2, ⋯⟩) * ↑((fun i => i) ⟨1, ⋯⟩) -/\n/- case «0».«0»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨0, ⋯⟩) * ↑((fun i => i) ⟨0, ⋯⟩) = ↑((fun i => i) ⟨0, ⋯⟩) * ↑((fun i => i) ⟨0, ⋯⟩)\n---\ncase «0».«1»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨0, ⋯⟩) * ↑((fun i => i) ⟨1, ⋯⟩) = ↑((fun i => i) ⟨1, ⋯⟩) * ↑((fun i => i) ⟨0, ⋯⟩)\n---\ncase «0».«2»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨0, ⋯⟩) * ↑((fun i => i) ⟨2, ⋯⟩) = ↑((fun i => i) ⟨2, ⋯⟩) * ↑((fun i => i) ⟨0, ⋯⟩)\n---\ncase «1».«0»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨1, ⋯⟩) * ↑((fun i => i) ⟨0, ⋯⟩) = ↑((fun i => i) ⟨0, ⋯⟩) * ↑((fun i => i) ⟨1, ⋯⟩)\n---\ncase «1».«1»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨1, ⋯⟩) * ↑((fun i => i) ⟨1, ⋯⟩) = ↑((fun i => i) ⟨1, ⋯⟩) * ↑((fun i => i) ⟨1, ⋯⟩)\n---\ncase «1».«2»\nn : ℕ\ny : Fin n\n⊢ ↑((fun i => i) ⟨1, ⋯⟩) * ↑((fun i => i) ⟨2, ⋯⟩) = ↑((fun i => i) ⟨2, ⋯⟩) * ↑((fun i => i) ⟨1, ⋯⟩) -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : List.nthLe [1, 2] 1 (by simp) = 2 := by\n  generalize_proofs h\n  guard_hyp h :ₛ 1 < List.length [1, 2]\n  guard_target =ₛ [1, 2].nthLe 1 h = 2\n  exact test_sorry\n⊢ sorry = 2\n", "full_text": "example : List.nthLe [1, 2] 1 (by simp) = 2 := by\n  generalize_proofs h\n  guard_hyp h :ₛ 1 < List.length [1, 2]\n  guard_target =ₛ [1, 2].nthLe 1 h = 2\n  exact test_sorry\n⊢ sorry = 2\n/- ⊢ sorry = 2 -/\n/- ⊢ sorry = 2 -/\n"}
{"prompt": "example (x : ℕ) (h : x < 2) : Classical.choose (⟨x, h⟩ : ∃ x, x < 2) < 2 := by\n  generalize_proofs a\n  guard_hyp a :ₛ ∃ x, x < 2\n  guard_target =ₛ Classical.choose a < 2\n  exact Classical.choose_spec a\nx : ℕ\nh : x < 2\n⊢ Classical.choose ⋯ < 2\n", "full_text": "example (x : ℕ) (h : x < 2) : Classical.choose (⟨x, h⟩ : ∃ x, x < 2) < 2 := by\n  generalize_proofs a\n  guard_hyp a :ₛ ∃ x, x < 2\n  guard_target =ₛ Classical.choose a < 2\n  exact Classical.choose_spec a\nx : ℕ\nh : x < 2\n⊢ Classical.choose ⋯ < 2\n/- x : ℕ\nh : x < 2\na : ∃ x, x < 2\n⊢ Classical.choose a < 2 -/\n/- x : ℕ\nh : x < 2\na : ∃ x, x < 2\n⊢ Classical.choose a < 2 -/\n/- x : ℕ\nh : x < 2\na : ∃ x, x < 2\n⊢ Classical.choose a < 2 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x : ℕ) (h : x < 2) :\n    Classical.choose (⟨x, h⟩ : ∃ x, x < 2) = Classical.choose (⟨x, h⟩ : ∃ x, x < 2) := by\n  generalize_proofs a\n  guard_hyp a :ₛ ∃ x, x < 2\n  guard_target =ₛ Classical.choose a = Classical.choose a\n  rfl\nx : ℕ\nh : x < 2\n⊢ Classical.choose ⋯ = Classical.choose ⋯\n", "full_text": "example (x : ℕ) (h : x < 2) :\n    Classical.choose (⟨x, h⟩ : ∃ x, x < 2) = Classical.choose (⟨x, h⟩ : ∃ x, x < 2) := by\n  generalize_proofs a\n  guard_hyp a :ₛ ∃ x, x < 2\n  guard_target =ₛ Classical.choose a = Classical.choose a\n  rfl\nx : ℕ\nh : x < 2\n⊢ Classical.choose ⋯ = Classical.choose ⋯\n/- x : ℕ\nh : x < 2\na : ∃ x, x < 2\n⊢ Classical.choose a = Classical.choose a -/\n/- x : ℕ\nh : x < 2\na : ∃ x, x < 2\n⊢ Classical.choose a = Classical.choose a -/\n/- x : ℕ\nh : x < 2\na : ∃ x, x < 2\n⊢ Classical.choose a = Classical.choose a -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x : ℕ) (h : x < 2) (h' : x < 1) :\n    Classical.choose (⟨x, h⟩ : ∃ x, x < 2)\n      = Classical.choose (⟨x, (by clear h; omega)⟩ : ∃ x, x < 2) := by\n  generalize_proofs a\n  guard_hyp a :ₛ ∃ x, x < 2\n  guard_target =ₛ Classical.choose a = Classical.choose a\n  rfl\nx : ℕ\nh : x < 2\nh' : x < 1\n⊢ x < 2\n", "full_text": "example (x : ℕ) (h : x < 2) (h' : x < 1) :\n    Classical.choose (⟨x, h⟩ : ∃ x, x < 2)\n      = Classical.choose (⟨x, (by clear h; omega)⟩ : ∃ x, x < 2) := by\n  generalize_proofs a\n  guard_hyp a :ₛ ∃ x, x < 2\n  guard_target =ₛ Classical.choose a = Classical.choose a\n  rfl\nx : ℕ\nh : x < 2\nh' : x < 1\n⊢ x < 2\n/- x : ℕ\nh' : x < 1\n⊢ x < 2 -/\n/- Goals Accomplished! -/\n/- x : ℕ\nh : x < 2\nh' : x < 1\na : ∃ x, x < 2\n⊢ Classical.choose a = Classical.choose a -/\n/- x : ℕ\nh : x < 2\nh' : x < 1\na : ∃ x, x < 2\n⊢ Classical.choose a = Classical.choose a -/\n"}
{"prompt": "example (x : ℕ) (h h' : x < 2) :\n    Classical.choose (⟨x, h⟩ : ∃ x, x < 2) = Classical.choose (⟨x, h'⟩ : ∃ x, x < 2) := by\n  change _ at h'\n  fail_if_success guard_target =ₛ\n    Classical.choose (⟨x, h⟩ : ∃ x, x < 2) = Classical.choose (⟨x, h⟩ : ∃ x, x < 2)\n  generalize_proofs at h'\n  fail_if_success change _ at h'\n  guard_target =ₛ Classical.choose (⟨x, h⟩ : ∃ x, x < 2) = Classical.choose (⟨x, h⟩ : ∃ x, x < 2)\n  generalize_proofs a\n  guard_target =ₛ Classical.choose a = Classical.choose a\n  rfl\nx : ℕ\nh h' : x < 2\n⊢ Classical.choose ⋯ = Classical.choose ⋯\n", "full_text": "example (x : ℕ) (h h' : x < 2) :\n    Classical.choose (⟨x, h⟩ : ∃ x, x < 2) = Classical.choose (⟨x, h'⟩ : ∃ x, x < 2) := by\n  change _ at h'\n  fail_if_success guard_target =ₛ\n    Classical.choose (⟨x, h⟩ : ∃ x, x < 2) = Classical.choose (⟨x, h⟩ : ∃ x, x < 2)\n  generalize_proofs at h'\n  fail_if_success change _ at h'\n  guard_target =ₛ Classical.choose (⟨x, h⟩ : ∃ x, x < 2) = Classical.choose (⟨x, h⟩ : ∃ x, x < 2)\n  generalize_proofs a\n  guard_target =ₛ Classical.choose a = Classical.choose a\n  rfl\nx : ℕ\nh h' : x < 2\n⊢ Classical.choose ⋯ = Classical.choose ⋯\n/- x : ℕ\nh h' : x < 2\n⊢ Classical.choose ⋯ = Classical.choose ⋯ -/\n/- x : ℕ\nh h' : x < 2\n⊢ Classical.choose ⋯ = Classical.choose ⋯ -/\n/- x : ℕ\nh : x < 2\n⊢ Classical.choose ⋯ = Classical.choose ⋯ -/\n/- x : ℕ\nh : x < 2\n⊢ Classical.choose ⋯ = Classical.choose ⋯ -/\n/- x : ℕ\nh : x < 2\n⊢ Classical.choose ⋯ = Classical.choose ⋯ -/\n/- x : ℕ\nh : x < 2\na : ∃ x, x < 2\n⊢ Classical.choose a = Classical.choose a -/\n/- x : ℕ\nh : x < 2\na : ∃ x, x < 2\n⊢ Classical.choose a = Classical.choose a -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x : ℕ) (h : x < 2) :\n    Classical.choose (⟨x, h⟩ : ∃ x, x < 2)\n      = Classical.choose (⟨x, Nat.lt_succ_of_lt h⟩ : ∃ x, x < 3) := by\n  generalize_proofs a a'\n  guard_hyp a :ₛ ∃ x, x < 2\n  guard_hyp a' :ₛ ∃ x, x < 3\n  guard_target =ₛ Classical.choose a = Classical.choose a'\n  exact test_sorry\nx : ℕ\nh : x < 2\n⊢ Classical.choose ⋯ = Classical.choose ⋯\n", "full_text": "example (x : ℕ) (h : x < 2) :\n    Classical.choose (⟨x, h⟩ : ∃ x, x < 2)\n      = Classical.choose (⟨x, Nat.lt_succ_of_lt h⟩ : ∃ x, x < 3) := by\n  generalize_proofs a a'\n  guard_hyp a :ₛ ∃ x, x < 2\n  guard_hyp a' :ₛ ∃ x, x < 3\n  guard_target =ₛ Classical.choose a = Classical.choose a'\n  exact test_sorry\nx : ℕ\nh : x < 2\n⊢ Classical.choose ⋯ = Classical.choose ⋯\n/- x : ℕ\nh : x < 2\na : ∃ x, x < 2\na' : ∃ x, x < 3\n⊢ Classical.choose a = Classical.choose a' -/\n/- x : ℕ\nh : x < 2\na : ∃ x, x < 2\na' : ∃ x, x < 3\n⊢ Classical.choose a = Classical.choose a' -/\n/- x : ℕ\nh : x < 2\na : ∃ x, x < 2\na' : ∃ x, x < 3\n⊢ Classical.choose a = Classical.choose a' -/\n/- x : ℕ\nh : x < 2\na : ∃ x, x < 2\na' : ∃ x, x < 3\n⊢ Classical.choose a = Classical.choose a' -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x : ℕ) (h : x < 2) : Classical.choose (⟨x, h⟩ : ∃ x, x < 2) =\n  Classical.choose (⟨x, Nat.lt_succ_of_lt h⟩ : ∃ x, x < 3) := by\n  generalize_proofs\n  guard_target = Classical.choose _ = Classical.choose _\n  exact test_sorry\nx : ℕ\nh : x < 2\n⊢ Classical.choose ⋯ = Classical.choose ⋯\n", "full_text": "example (x : ℕ) (h : x < 2) : Classical.choose (⟨x, h⟩ : ∃ x, x < 2) =\n  Classical.choose (⟨x, Nat.lt_succ_of_lt h⟩ : ∃ x, x < 3) := by\n  generalize_proofs\n  guard_target = Classical.choose _ = Classical.choose _\n  exact test_sorry\nx : ℕ\nh : x < 2\n⊢ Classical.choose ⋯ = Classical.choose ⋯\n/- x : ℕ\nh : x < 2\npf✝¹ : ∃ x, x < 2\npf✝ : ∃ x, x < 3\n⊢ Classical.choose pf✝¹ = Classical.choose pf✝ -/\n/- x : ℕ\nh : x < 2\npf✝¹ : ∃ x, x < 2\npf✝ : ∃ x, x < 3\n⊢ Classical.choose pf✝¹ = Classical.choose pf✝ -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x : ℕ) (h : x < 2) : Classical.choose (⟨x, h⟩ : ∃ x, x < 2) =\n  Classical.choose (⟨x, Nat.lt_succ_of_lt h⟩ : ∃ x, x < 3) := by\n  generalize_proofs _ a\n  guard_hyp a : ∃ x, x < 3\n  guard_target = Classical.choose _ = Classical.choose a\n  exact test_sorry\nx : ℕ\nh : x < 2\n⊢ Classical.choose ⋯ = Classical.choose ⋯\n", "full_text": "example (x : ℕ) (h : x < 2) : Classical.choose (⟨x, h⟩ : ∃ x, x < 2) =\n  Classical.choose (⟨x, Nat.lt_succ_of_lt h⟩ : ∃ x, x < 3) := by\n  generalize_proofs _ a\n  guard_hyp a : ∃ x, x < 3\n  guard_target = Classical.choose _ = Classical.choose a\n  exact test_sorry\nx : ℕ\nh : x < 2\n⊢ Classical.choose ⋯ = Classical.choose ⋯\n/- x : ℕ\nh : x < 2\npf✝ : ∃ x, x < 2\na : ∃ x, x < 3\n⊢ Classical.choose pf✝ = Classical.choose a -/\n/- x : ℕ\nh : x < 2\npf✝ : ∃ x, x < 2\na : ∃ x, x < 3\n⊢ Classical.choose pf✝ = Classical.choose a -/\n/- x : ℕ\nh : x < 2\npf✝ : ∃ x, x < 2\na : ∃ x, x < 3\n⊢ Classical.choose pf✝ = Classical.choose a -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a : ∃ x, x < 2) : Classical.choose a < 2 := by\n  generalize_proofs\n  guard_target =ₛ Classical.choose a < 2\n  exact Classical.choose_spec a\na : ∃ x, x < 2\n⊢ Classical.choose a < 2\n", "full_text": "example (a : ∃ x, x < 2) : Classical.choose a < 2 := by\n  generalize_proofs\n  guard_target =ₛ Classical.choose a < 2\n  exact Classical.choose_spec a\na : ∃ x, x < 2\n⊢ Classical.choose a < 2\n/- a : ∃ x, x < 2\n⊢ Classical.choose a < 2 -/\n/- a : ∃ x, x < 2\n⊢ Classical.choose a < 2 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a : ∃ x, x < 2) : Classical.choose a < 2 := by\n  generalize_proofs t\n  guard_target =ₛ Classical.choose a < 2\n  exact Classical.choose_spec a\na : ∃ x, x < 2\n⊢ Classical.choose a < 2\n", "full_text": "example (a : ∃ x, x < 2) : Classical.choose a < 2 := by\n  generalize_proofs t\n  guard_target =ₛ Classical.choose a < 2\n  exact Classical.choose_spec a\na : ∃ x, x < 2\n⊢ Classical.choose a < 2\n/- a : ∃ x, x < 2\n⊢ Classical.choose a < 2 -/\n/- a : ∃ x, x < 2\n⊢ Classical.choose a < 2 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x : ℕ) (h : x < 2) (H : Classical.choose (⟨x, h⟩ : ∃ x, x < 2) < 2) :\n    Classical.choose (⟨x, h⟩ : ∃ x, x < 2) < 2 := by\n  generalize_proofs a at H ⊢\n  guard_hyp a :ₛ ∃ x, x < 2\n  guard_hyp H :ₛ Classical.choose a < 2\n  guard_target =ₛ Classical.choose a < 2\n  exact H\nx : ℕ\nh : x < 2\nH : Classical.choose ⋯ < 2\n⊢ Classical.choose ⋯ < 2\n", "full_text": "example (x : ℕ) (h : x < 2) (H : Classical.choose (⟨x, h⟩ : ∃ x, x < 2) < 2) :\n    Classical.choose (⟨x, h⟩ : ∃ x, x < 2) < 2 := by\n  generalize_proofs a at H ⊢\n  guard_hyp a :ₛ ∃ x, x < 2\n  guard_hyp H :ₛ Classical.choose a < 2\n  guard_target =ₛ Classical.choose a < 2\n  exact H\nx : ℕ\nh : x < 2\nH : Classical.choose ⋯ < 2\n⊢ Classical.choose ⋯ < 2\n/- x : ℕ\nh : x < 2\na : ∃ x, x < 2\nH : Classical.choose a < 2\n⊢ Classical.choose a < 2 -/\n/- x : ℕ\nh : x < 2\na : ∃ x, x < 2\nH : Classical.choose a < 2\n⊢ Classical.choose a < 2 -/\n/- x : ℕ\nh : x < 2\na : ∃ x, x < 2\nH : Classical.choose a < 2\n⊢ Classical.choose a < 2 -/\n/- x : ℕ\nh : x < 2\na : ∃ x, x < 2\nH : Classical.choose a < 2\n⊢ Classical.choose a < 2 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (H : ∀ y, ∃ (x : ℕ) (h : x < y), Classical.choose (⟨x, h⟩ : ∃ x, x < y) < y) :\n    ∀ y, ∃ (x : ℕ) (h : x < y), Classical.choose (⟨x, h⟩ : ∃ x, x < y) < y := by\n  generalize_proofs (config := { abstract := false })\n  guard_target =ₛ ∀ y, ∃ (x : ℕ) (h : x < y), Classical.choose (⟨x, h⟩ : ∃ x, x < y) < y\n  generalize_proofs a at H ⊢\n  guard_hyp a :ₛ ∀ (y w : ℕ), w < y → ∃ x, x < y\n  guard_hyp H :ₛ ∀ (y : ℕ), ∃ x h, Classical.choose (a y x h) < y\n  guard_target =ₛ ∀ (y : ℕ), ∃ x h, Classical.choose (a y x h) < y\n  exact H\nH : ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n⊢ ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n", "full_text": "example (H : ∀ y, ∃ (x : ℕ) (h : x < y), Classical.choose (⟨x, h⟩ : ∃ x, x < y) < y) :\n    ∀ y, ∃ (x : ℕ) (h : x < y), Classical.choose (⟨x, h⟩ : ∃ x, x < y) < y := by\n  generalize_proofs (config := { abstract := false })\n  guard_target =ₛ ∀ y, ∃ (x : ℕ) (h : x < y), Classical.choose (⟨x, h⟩ : ∃ x, x < y) < y\n  generalize_proofs a at H ⊢\n  guard_hyp a :ₛ ∀ (y w : ℕ), w < y → ∃ x, x < y\n  guard_hyp H :ₛ ∀ (y : ℕ), ∃ x h, Classical.choose (a y x h) < y\n  guard_target =ₛ ∀ (y : ℕ), ∃ x h, Classical.choose (a y x h) < y\n  exact H\nH : ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n⊢ ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n/- H : ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n⊢ ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y -/\n/- H : ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n⊢ ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y -/\n/- a : ∀ (y x : ℕ), x < y → ∃ x, x < y\nH : ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n⊢ ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y -/\n/- a : ∀ (y x : ℕ), x < y → ∃ x, x < y\nH : ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n⊢ ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y -/\n/- a : ∀ (y x : ℕ), x < y → ∃ x, x < y\nH : ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n⊢ ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y -/\n/- a : ∀ (y x : ℕ), x < y → ∃ x, x < y\nH : ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n⊢ ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (H : ∀ y, ∃ (x : ℕ) (h : x < y), Classical.choose (⟨x, h⟩ : ∃ x, x < y) < y) :\n    ∀ y, ∃ (x : ℕ) (h : x < y), Classical.choose (⟨x, h⟩ : ∃ x, x < y) < y := by\n  generalize_proofs a at *\n  guard_hyp a :ₛ ∀ (y w : ℕ), w < y → ∃ x, x < y\n  guard_hyp H :ₛ ∀ (y : ℕ), ∃ x h, Classical.choose (a y x h) < y\n  guard_target =ₛ ∀ (y : ℕ), ∃ x h, Classical.choose (a y x h) < y\n  exact H\nH : ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n⊢ ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n", "full_text": "example (H : ∀ y, ∃ (x : ℕ) (h : x < y), Classical.choose (⟨x, h⟩ : ∃ x, x < y) < y) :\n    ∀ y, ∃ (x : ℕ) (h : x < y), Classical.choose (⟨x, h⟩ : ∃ x, x < y) < y := by\n  generalize_proofs a at *\n  guard_hyp a :ₛ ∀ (y w : ℕ), w < y → ∃ x, x < y\n  guard_hyp H :ₛ ∀ (y : ℕ), ∃ x h, Classical.choose (a y x h) < y\n  guard_target =ₛ ∀ (y : ℕ), ∃ x h, Classical.choose (a y x h) < y\n  exact H\nH : ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n⊢ ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n/- a : ∀ (y x : ℕ), x < y → ∃ x, x < y\nH : ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n⊢ ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y -/\n/- a : ∀ (y x : ℕ), x < y → ∃ x, x < y\nH : ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n⊢ ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y -/\n/- a : ∀ (y x : ℕ), x < y → ∃ x, x < y\nH : ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n⊢ ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y -/\n/- a : ∀ (y x : ℕ), x < y → ∃ x, x < y\nH : ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y\n⊢ ∀ (y : ℕ), ∃ x, ∃ (h : x < y), Classical.choose ⋯ < y -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example [Ring R] (S : Subring R) (hx : x ∈ S) (hy : y ∈ S) (hz : z ∈ S) (n m : ℕ) :\n    n • x ^ 3 - 2 • y + z ^ m ∈ S := by\n  aesop\nM : Type u\ninst✝¹ : Monoid M\nS✝ S' : Submonoid M\nR : Type u_1\nx y z : R\ninst✝ : Ring R\nS : Subring R\nhx : x ∈ S\nhy : y ∈ S\nhz : z ∈ S\nn m : ℕ\n⊢ n • x ^ 3 - 2 • y + z ^ m ∈ S\n", "full_text": "example [Ring R] (S : Subring R) (hx : x ∈ S) (hy : y ∈ S) (hz : z ∈ S) (n m : ℕ) :\n    n • x ^ 3 - 2 • y + z ^ m ∈ S := by\n  aesop\nM : Type u\ninst✝¹ : Monoid M\nS✝ S' : Submonoid M\nR : Type u_1\nx y z : R\ninst✝ : Ring R\nS : Subring R\nhx : x ∈ S\nhy : y ∈ S\nhz : z ∈ S\nn m : ℕ\n⊢ n • x ^ 3 - 2 • y + z ^ m ∈ S\n/- Goals Accomplished! -/\n"}
{"prompt": "example [Ring R] (S : Set R) (hx : x ∈ S) (hy : y ∈ S) (hz : z ∈ S) (n m : ℕ) :\n    n • x ^ 3 - y + z ^ m ∈ Subring.closure S := by\n  aesop\nM : Type u\ninst✝¹ : Monoid M\nS✝ S' : Submonoid M\nR : Type u_1\nx y z : R\ninst✝ : Ring R\nS : Set R\nhx : x ∈ S\nhy : y ∈ S\nhz : z ∈ S\nn m : ℕ\n⊢ n • x ^ 3 - y + z ^ m ∈ Subring.closure S\n", "full_text": "example [Ring R] (S : Set R) (hx : x ∈ S) (hy : y ∈ S) (hz : z ∈ S) (n m : ℕ) :\n    n • x ^ 3 - y + z ^ m ∈ Subring.closure S := by\n  aesop\nM : Type u\ninst✝¹ : Monoid M\nS✝ S' : Submonoid M\nR : Type u_1\nx y z : R\ninst✝ : Ring R\nS : Set R\nhx : x ∈ S\nhy : y ∈ S\nhz : z ∈ S\nn m : ℕ\n⊢ n • x ^ 3 - y + z ^ m ∈ Subring.closure S\n/- Goals Accomplished! -/\n"}
{"prompt": "example [CommRing R] [Ring A] [Algebra R A] [StarRing R] [StarRing A] [StarModule R A]\n    (r : R) (a b c : A) (n : ℕ) :\n    -b + star (algebraMap R A r) + a ^ n * c ∈ StarAlgebra.adjoin R {a, b, c} := by\n  aesop\nM : Type u\ninst✝⁶ : Monoid M\nS S' : Submonoid M\nR : Type u_1\nA : Type u_2\ninst✝⁵ : CommRing R\ninst✝⁴ : Ring A\ninst✝³ : Algebra R A\ninst✝² : StarRing R\ninst✝¹ : StarRing A\ninst✝ : StarModule R A\nr : R\na b c : A\nn : ℕ\n⊢ -b + star ((algebraMap R A) r) + a ^ n * c ∈ StarAlgebra.adjoin R {a, b, c}\n", "full_text": "example [CommRing R] [Ring A] [Algebra R A] [StarRing R] [StarRing A] [StarModule R A]\n    (r : R) (a b c : A) (n : ℕ) :\n    -b + star (algebraMap R A r) + a ^ n * c ∈ StarAlgebra.adjoin R {a, b, c} := by\n  aesop\nM : Type u\ninst✝⁶ : Monoid M\nS S' : Submonoid M\nR : Type u_1\nA : Type u_2\ninst✝⁵ : CommRing R\ninst✝⁴ : Ring A\ninst✝³ : Algebra R A\ninst✝² : StarRing R\ninst✝¹ : StarRing A\ninst✝ : StarModule R A\nr : R\na b c : A\nn : ℕ\n⊢ -b + star ((algebraMap R A) r) + a ^ n * c ∈ StarAlgebra.adjoin R {a, b, c}\n/- Goals Accomplished! -/\n"}
{"prompt": "example [Monoid M] (x : M) (n : ℕ) : x ^ n ∈ Submonoid.closure {x} := by\n  aesop\nM : Type u\ninst✝¹ : Monoid M\nS S' : Submonoid M\ninst✝ : Monoid M\nx : M\nn : ℕ\n⊢ x ^ n ∈ Submonoid.closure {x}\n", "full_text": "example [Monoid M] (x : M) (n : ℕ) : x ^ n ∈ Submonoid.closure {x} := by\n  aesop\nM : Type u\ninst✝¹ : Monoid M\nS S' : Submonoid M\ninst✝ : Monoid M\nx : M\nn : ℕ\n⊢ x ^ n ∈ Submonoid.closure {x}\n/- Goals Accomplished! -/\n"}
{"prompt": "example [Monoid M] (x y z w : M) (n : ℕ) : (x * y) ^ n * w ∈ Submonoid.closure {x, y, z, w} := by\n  aesop\nM : Type u\ninst✝¹ : Monoid M\nS S' : Submonoid M\ninst✝ : Monoid M\nx y z w : M\nn : ℕ\n⊢ (x * y) ^ n * w ∈ Submonoid.closure {x, y, z, w}\n", "full_text": "example [Monoid M] (x y z w : M) (n : ℕ) : (x * y) ^ n * w ∈ Submonoid.closure {x, y, z, w} := by\n  aesop\nM : Type u\ninst✝¹ : Monoid M\nS S' : Submonoid M\ninst✝ : Monoid M\nx y z w : M\nn : ℕ\n⊢ (x * y) ^ n * w ∈ Submonoid.closure {x, y, z, w}\n/- Goals Accomplished! -/\n"}
{"prompt": "example [Group M] (x : M) (n : ℤ) : x ^ n ∈ Subgroup.closure {x} := by\n  aesop\nM : Type u\ninst✝¹ : Monoid M\nS S' : Submonoid M\ninst✝ : Group M\nx : M\nn : ℤ\n⊢ x ^ n ∈ Subgroup.closure {x}\n", "full_text": "example [Group M] (x : M) (n : ℤ) : x ^ n ∈ Subgroup.closure {x} := by\n  aesop\nM : Type u\ninst✝¹ : Monoid M\nS S' : Submonoid M\ninst✝ : Group M\nx : M\nn : ℤ\n⊢ x ^ n ∈ Subgroup.closure {x}\n/- Goals Accomplished! -/\n"}
{"prompt": "example [Monoid M] (x y z : M) (S₁ S₂ : Submonoid M) (h : S₁ ≤ S₂) (hx : x ∈ S₁)\n    (hy : y ∈ S₁) (hz : z ∈ S₂) :\n    x * y * z ∈ S₂ := by\n  aesop\nM : Type u\ninst✝¹ : Monoid M\nS S' : Submonoid M\ninst✝ : Monoid M\nx y z : M\nS₁ S₂ : Submonoid M\nh : S₁ ≤ S₂\nhx : x ∈ S₁\nhy : y ∈ S₁\nhz : z ∈ S₂\n⊢ x * y * z ∈ S₂\n", "full_text": "example [Monoid M] (x y z : M) (S₁ S₂ : Submonoid M) (h : S₁ ≤ S₂) (hx : x ∈ S₁)\n    (hy : y ∈ S₁) (hz : z ∈ S₂) :\n    x * y * z ∈ S₂ := by\n  aesop\nM : Type u\ninst✝¹ : Monoid M\nS S' : Submonoid M\ninst✝ : Monoid M\nx y z : M\nS₁ S₂ : Submonoid M\nh : S₁ ≤ S₂\nhx : x ∈ S₁\nhy : y ∈ S₁\nhz : z ∈ S₂\n⊢ x * y * z ∈ S₂\n/- Goals Accomplished! -/\n"}
{"prompt": "example [Monoid M] (x y z : M) (S₁ S₂ : Submonoid M) (h : S₁ ≤ S₂) (hx : x ∈ S₁)\n    (hy : y ∈ S₁) (hz : z ∈ S₂) :\n    x * y * z ∈ S₁ ⊔ S₂ := by\n  aesop\nM : Type u\ninst✝¹ : Monoid M\nS S' : Submonoid M\ninst✝ : Monoid M\nx y z : M\nS₁ S₂ : Submonoid M\nh : S₁ ≤ S₂\nhx : x ∈ S₁\nhy : y ∈ S₁\nhz : z ∈ S₂\n⊢ x * y * z ∈ S₁ ⊔ S₂\n", "full_text": "example [Monoid M] (x y z : M) (S₁ S₂ : Submonoid M) (h : S₁ ≤ S₂) (hx : x ∈ S₁)\n    (hy : y ∈ S₁) (hz : z ∈ S₂) :\n    x * y * z ∈ S₁ ⊔ S₂ := by\n  aesop\nM : Type u\ninst✝¹ : Monoid M\nS S' : Submonoid M\ninst✝ : Monoid M\nx y z : M\nS₁ S₂ : Submonoid M\nh : S₁ ≤ S₂\nhx : x ∈ S₁\nhy : y ∈ S₁\nhz : z ∈ S₂\n⊢ x * y * z ∈ S₁ ⊔ S₂\n/- Goals Accomplished! -/\n"}
{"prompt": "example [Monoid M] (x y z : M) (S : Submonoid M) (hxy : x * y ∈ S) (hz : z ∈ S) :\n    z * (x * y) ∈ S := by\n  aesop\nM : Type u\ninst✝¹ : Monoid M\nS✝ S' : Submonoid M\ninst✝ : Monoid M\nx y z : M\nS : Submonoid M\nhxy : x * y ∈ S\nhz : z ∈ S\n⊢ z * (x * y) ∈ S\n", "full_text": "example [Monoid M] (x y z : M) (S : Submonoid M) (hxy : x * y ∈ S) (hz : z ∈ S) :\n    z * (x * y) ∈ S := by\n  aesop\nM : Type u\ninst✝¹ : Monoid M\nS✝ S' : Submonoid M\ninst✝ : Monoid M\nx y z : M\nS : Submonoid M\nhxy : x * y ∈ S\nhz : z ∈ S\n⊢ z * (x * y) ∈ S\n/- Goals Accomplished! -/\n"}
{"prompt": "example [Field F] (S : Subfield F) (q : ℚ) : (q : F) ∈ S := by\n  aesop\nM : Type u\ninst✝¹ : Monoid M\nS✝ S' : Submonoid M\nF : Type u_1\ninst✝ : Field F\nS : Subfield F\nq : ℚ\n⊢ ↑q ∈ S\n", "full_text": "example [Field F] (S : Subfield F) (q : ℚ) : (q : F) ∈ S := by\n  aesop\nM : Type u\ninst✝¹ : Monoid M\nS✝ S' : Submonoid M\nF : Type u_1\ninst✝ : Field F\nS : Subfield F\nq : ℚ\n⊢ ↑q ∈ S\n/- Goals Accomplished! -/\n"}
{"prompt": "example [Field F] (S : Subfield F) : (1.2 : F) ∈ S := by\n  aesop\nM : Type u\ninst✝¹ : Monoid M\nS✝ S' : Submonoid M\nF : Type u_1\ninst✝ : Field F\nS : Subfield F\n⊢ 1.2 ∈ S\n", "full_text": "example [Field F] (S : Subfield F) : (1.2 : F) ∈ S := by\n  aesop\nM : Type u\ninst✝¹ : Monoid M\nS✝ S' : Submonoid M\nF : Type u_1\ninst✝ : Field F\nS : Subfield F\n⊢ 1.2 ∈ S\n/- Goals Accomplished! -/\n"}
{"prompt": "example [Field F] (S : Subfield F) (x : F) (hx : x ∈ S) : ((12e-100 : F) • x⁻¹) ∈ S := by\n  aesop\nM : Type u\ninst✝¹ : Monoid M\nS✝ S' : Submonoid M\nF : Type u_1\ninst✝ : Field F\nS : Subfield F\nx : F\nhx : x ∈ S\n⊢ 12e-100 • x⁻¹ ∈ S\n", "full_text": "example [Field F] (S : Subfield F) (x : F) (hx : x ∈ S) : ((12e-100 : F) • x⁻¹) ∈ S := by\n  aesop\nM : Type u\ninst✝¹ : Monoid M\nS✝ S' : Submonoid M\nF : Type u_1\ninst✝ : Field F\nS : Subfield F\nx : F\nhx : x ∈ S\n⊢ 12e-100 • x⁻¹ ∈ S\n/- Goals Accomplished! -/\n"}
{"prompt": "example [TopologicalSpace α] [inst : MeasurableSpace α] [BorelSpace α] :\n    MeasurableSet (∅ : Set α) := by\n  guard_target = @MeasurableSet α inst ∅\n  borelize α\n  guard_target = @MeasurableSet α (borel α) ∅\n  apply MeasurableSet.empty\nα : Type u_1\ninst✝¹ : TopologicalSpace α\ninst : MeasurableSpace α\ninst✝ : BorelSpace α\n⊢ MeasurableSet ∅\n", "full_text": "example [TopologicalSpace α] [inst : MeasurableSpace α] [BorelSpace α] :\n    MeasurableSet (∅ : Set α) := by\n  guard_target = @MeasurableSet α inst ∅\n  borelize α\n  guard_target = @MeasurableSet α (borel α) ∅\n  apply MeasurableSet.empty\nα : Type u_1\ninst✝¹ : TopologicalSpace α\ninst : MeasurableSpace α\ninst✝ : BorelSpace α\n⊢ MeasurableSet ∅\n/- α : Type u_1\ninst✝¹ : TopologicalSpace α\ninst : MeasurableSpace α\ninst✝ : BorelSpace α\n⊢ MeasurableSet ∅ -/\n/- α : Type u_1\ninst✝¹ : TopologicalSpace α\ninst✝ : BorelSpace α\nthis✝ : MeasurableSpace α := borel α\n⊢ MeasurableSet ∅ -/\n/- α : Type u_1\ninst✝¹ : TopologicalSpace α\ninst✝ : BorelSpace α\nthis✝ : MeasurableSpace α := borel α\n⊢ MeasurableSet ∅ -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example [TopologicalSpace α] : True := by\n  borelize α\n  have h : MeasurableSet (∅ : Set α) := MeasurableSet.empty\n  guard_hyp h : @MeasurableSet α (borel α) ∅\n  trivial\nα : Type u_1\ninst✝ : TopologicalSpace α\n⊢ True\n", "full_text": "example [TopologicalSpace α] : True := by\n  borelize α\n  have h : MeasurableSet (∅ : Set α) := MeasurableSet.empty\n  guard_hyp h : @MeasurableSet α (borel α) ∅\n  trivial\nα : Type u_1\ninst✝ : TopologicalSpace α\n⊢ True\n/- α : Type u_1\ninst✝ : TopologicalSpace α\nthis✝¹ : MeasurableSpace α := borel α\nthis✝ : BorelSpace α\n⊢ True -/\n/- α : Type u_1\ninst✝ : TopologicalSpace α\nthis✝¹ : MeasurableSpace α := borel α\nthis✝ : BorelSpace α\nh : MeasurableSet ∅\n⊢ True -/\n/- α : Type u_1\ninst✝ : TopologicalSpace α\nthis✝¹ : MeasurableSpace α := borel α\nthis✝ : BorelSpace α\nh : MeasurableSet ∅\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : True := by\n  obtain ⟨α, ⟨hα⟩⟩ : ∃ α : Type, Nonempty (TopologicalSpace α) := ⟨ℕ, ⟨inferInstance⟩⟩\n  borelize α\n  have h : MeasurableSet (∅ : Set α) := MeasurableSet.empty\n  guard_hyp h : @MeasurableSet α (borel α) ∅\n  trivial\n⊢ True\n", "full_text": "example : True := by\n  obtain ⟨α, ⟨hα⟩⟩ : ∃ α : Type, Nonempty (TopologicalSpace α) := ⟨ℕ, ⟨inferInstance⟩⟩\n  borelize α\n  have h : MeasurableSet (∅ : Set α) := MeasurableSet.empty\n  guard_hyp h : @MeasurableSet α (borel α) ∅\n  trivial\n⊢ True\n/- case intro.intro\nα : Type\nhα : TopologicalSpace α\n⊢ True -/\n/- case intro.intro\nα : Type\nhα : TopologicalSpace α\nthis✝¹ : MeasurableSpace α := borel α\nthis✝ : BorelSpace α\n⊢ True -/\n/- case intro.intro\nα : Type\nhα : TopologicalSpace α\nthis✝¹ : MeasurableSpace α := borel α\nthis✝ : BorelSpace α\nh : MeasurableSet ∅\n⊢ True -/\n/- case intro.intro\nα : Type\nhα : TopologicalSpace α\nthis✝¹ : MeasurableSpace α := borel α\nthis✝ : BorelSpace α\nh : MeasurableSet ∅\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : True := by\n  set α := ℕ\n  borelize α\n  have h : MeasurableSet (∅ : Set α) := MeasurableSet.empty\n  guard_hyp h : @MeasurableSet α (borel α) ∅\n  trivial\n⊢ True\n", "full_text": "example : True := by\n  set α := ℕ\n  borelize α\n  have h : MeasurableSet (∅ : Set α) := MeasurableSet.empty\n  guard_hyp h : @MeasurableSet α (borel α) ∅\n  trivial\n⊢ True\n/- α : Type := ℕ\n⊢ True -/\n/- α : Type := ℕ\nthis✝¹ : MeasurableSpace α := borel α\nthis✝ : BorelSpace α\n⊢ True -/\n/- α : Type := ℕ\nthis✝¹ : MeasurableSpace α := borel α\nthis✝ : BorelSpace α\nh : MeasurableSet ∅\n⊢ True -/\n/- α : Type := ℕ\nthis✝¹ : MeasurableSpace α := borel α\nthis✝ : BorelSpace α\nh : MeasurableSet ∅\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : True := by\n  have h1 : MeasurableSet (∅ : Set ℕ) := MeasurableSet.empty\n  guard_hyp h1 : @MeasurableSet ℕ Nat.instMeasurableSpace ∅\n  borelize ℕ\n  have h2 : MeasurableSet (∅ : Set ℕ) := MeasurableSet.empty\n  guard_hyp h2 : @MeasurableSet ℕ (borel ℕ) ∅\n  trivial\n⊢ True\n", "full_text": "example : True := by\n  have h1 : MeasurableSet (∅ : Set ℕ) := MeasurableSet.empty\n  guard_hyp h1 : @MeasurableSet ℕ Nat.instMeasurableSpace ∅\n  borelize ℕ\n  have h2 : MeasurableSet (∅ : Set ℕ) := MeasurableSet.empty\n  guard_hyp h2 : @MeasurableSet ℕ (borel ℕ) ∅\n  trivial\n⊢ True\n/- h1 : MeasurableSet ∅\n⊢ True -/\n/- h1 : MeasurableSet ∅\n⊢ True -/\n/- h1 : MeasurableSet ∅\nthis✝¹ : MeasurableSpace ℕ := borel ℕ\nthis✝ : BorelSpace ℕ\n⊢ True -/\n/- h1 : MeasurableSet ∅\nthis✝¹ : MeasurableSpace ℕ := borel ℕ\nthis✝ : BorelSpace ℕ\nh2 : MeasurableSet ∅\n⊢ True -/\n/- h1 : MeasurableSet ∅\nthis✝¹ : MeasurableSpace ℕ := borel ℕ\nthis✝ : BorelSpace ℕ\nh2 : MeasurableSet ∅\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : id (1 = 1) := by\n  with_reducible whnf\n  guard_target =ₛ id (1 = 1)\n  whnf\n  guard_target =ₛ 1 = 1\n  rfl\n⊢ id (1 = 1)\n", "full_text": "example : id (1 = 1) := by\n  with_reducible whnf\n  guard_target =ₛ id (1 = 1)\n  whnf\n  guard_target =ₛ 1 = 1\n  rfl\n⊢ id (1 = 1)\n/- ⊢ id (1 = 1) -/\n/- ⊢ id (1 = 1) -/\n/- ⊢ 1 = 1 -/\n/- ⊢ 1 = 1 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : (fun x => 1 + x) 1 = 2 := by\n  beta_reduce\n  guard_target =ₛ 1 + 1 = 2\n  rfl\n⊢ (fun x => 1 + x) 1 = 2\n", "full_text": "example : (fun x => 1 + x) 1 = 2 := by\n  beta_reduce\n  guard_target =ₛ 1 + 1 = 2\n  rfl\n⊢ (fun x => 1 + x) 1 = 2\n/- ⊢ 1 + 1 = 2 -/\n/- ⊢ 1 + 1 = 2 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : (fun x => 1 + x) 2 = (fun y => 2 + y) 3 := by\n  conv =>\n    lhs\n    beta_reduce\n    guard_target =ₛ 1 + 2\n  guard_target =ₛ 1 + 2 = (fun y => 2 + y) 3\n  exact test_sorry\n⊢ (fun x => 1 + x) 2 = (fun y => 2 + y) 3\n", "full_text": "example : (fun x => 1 + x) 2 = (fun y => 2 + y) 3 := by\n  conv =>\n    lhs\n    beta_reduce\n    guard_target =ₛ 1 + 2\n  guard_target =ₛ 1 + 2 = (fun y => 2 + y) 3\n  exact test_sorry\n⊢ (fun x => 1 + x) 2 = (fun y => 2 + y) 3\n/- ⊢ 1 + 2 = (fun y => 2 + y) 3 -/\n/- ⊢ 1 + 2 = (fun y => 2 + y) 3 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : 1 + 2 * 3 = 7 := by\n  reduce\n  guard_target =ₛ nat_lit 7 = nat_lit 7\n  rfl\n⊢ 1 + 2 * 3 = 7\n", "full_text": "example : 1 + 2 * 3 = 7 := by\n  reduce\n  guard_target =ₛ nat_lit 7 = nat_lit 7\n  rfl\n⊢ 1 + 2 * 3 = 7\n/- ⊢ 7 = 7 -/\n/- ⊢ 7 = 7 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : let x := 1; let y := 2 + x; 2 + 1 = 3 := by\n  intro x y\n  refold_let x\n  guard_target =ₛ 2 + x = 3\n  refold_let y\n  guard_target =ₛ y = 3\n  rfl\n⊢ let x := 1;\n  let y := 2 + x;\n  2 + 1 = 3\n", "full_text": "example : let x := 1; let y := 2 + x; 2 + 1 = 3 := by\n  intro x y\n  refold_let x\n  guard_target =ₛ 2 + x = 3\n  refold_let y\n  guard_target =ₛ y = 3\n  rfl\n⊢ let x := 1;\n  let y := 2 + x;\n  2 + 1 = 3\n/- x : ℕ := 1\ny : ℕ := 2 + x\n⊢ 2 + 1 = 3 -/\n/- x : ℕ := 1\ny : ℕ := 2 + x\n⊢ 2 + x = 3 -/\n/- x : ℕ := 1\ny : ℕ := 2 + x\n⊢ 2 + x = 3 -/\n/- x : ℕ := 1\ny : ℕ := 2 + x\n⊢ y = 3 -/\n/- x : ℕ := 1\ny : ℕ := 2 + x\n⊢ y = 3 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : 5 = 5 := by\n  let x := 5\n  refold_let x\n  guard_target =ₛ x = x\n  rfl\n⊢ 5 = 5\n", "full_text": "example : 5 = 5 := by\n  let x := 5\n  refold_let x\n  guard_target =ₛ x = x\n  rfl\n⊢ 5 = 5\n/- x : ℕ := 5\n⊢ 5 = 5 -/\n/- x : ℕ := 5\n⊢ x = x -/\n/- x : ℕ := 5\n⊢ x = x -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : 2 + 1 = 3 := by\n  let a : Fin 1 := 0\n  let x := 1\n  let b : Fin 1 := 0\n  refold_let x at *\n  guard_hyp a :ₛ Fin 1 := 0\n  guard_hyp b :ₛ Fin x := 0\n  rfl\n⊢ 2 + 1 = 3\n", "full_text": "example : 2 + 1 = 3 := by\n  let a : Fin 1 := 0\n  let x := 1\n  let b : Fin 1 := 0\n  refold_let x at *\n  guard_hyp a :ₛ Fin 1 := 0\n  guard_hyp b :ₛ Fin x := 0\n  rfl\n⊢ 2 + 1 = 3\n/- a : Fin 1 := 0\n⊢ 2 + 1 = 3 -/\n/- a : Fin 1 := 0\nx : ℕ := 1\n⊢ 2 + 1 = 3 -/\n/- a : Fin 1 := 0\nx : ℕ := 1\nb : Fin 1 := 0\n⊢ 2 + 1 = 3 -/\n/- a : Fin 1 := 0\nx : ℕ := 1\nb : Fin x := 0\n⊢ 2 + x = 3 -/\n/- a : Fin 1 := 0\nx : ℕ := 1\nb : Fin x := 0\n⊢ 2 + x = 3 -/\n/- a : Fin 1 := 0\nx : ℕ := 1\nb : Fin x := 0\n⊢ 2 + x = 3 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : 1 + 2 = 2 + 1 := by\n  unfold_projs\n  guard_target =ₛ Nat.add (nat_lit 1) (nat_lit 2) = Nat.add (nat_lit 2) (nat_lit 1)\n  rfl\n⊢ 1 + 2 = 2 + 1\n", "full_text": "example : 1 + 2 = 2 + 1 := by\n  unfold_projs\n  guard_target =ₛ Nat.add (nat_lit 1) (nat_lit 2) = Nat.add (nat_lit 2) (nat_lit 1)\n  rfl\n⊢ 1 + 2 = 2 + 1\n/- ⊢ Nat.add 1 2 = Nat.add 2 1 -/\n/- ⊢ Nat.add 1 2 = Nat.add 2 1 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (m n : Nat) : (m == n) = true := by\n  unfold_projs\n  guard_target =ₛ decide (m = n) = true\n  exact test_sorry\nm n : ℕ\n⊢ (m == n) = true\n", "full_text": "example (m n : Nat) : (m == n) = true := by\n  unfold_projs\n  guard_target =ₛ decide (m = n) = true\n  exact test_sorry\nm n : ℕ\n⊢ (m == n) = true\n/- m n : ℕ\n⊢ decide (m = n) = true -/\n/- m n : ℕ\n⊢ decide (m = n) = true -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {α : Type u} (f : α → α) (a : α) :\n    (fun x => (fun x => f x) x) a = f a := by\n  eta_reduce\n  guard_target =ₛ f a = f a\n  rfl\nα : Type u\nf : α → α\na : α\n⊢ (fun x => (fun x => f x) x) a = f a\n", "full_text": "example {α : Type u} (f : α → α) (a : α) :\n    (fun x => (fun x => f x) x) a = f a := by\n  eta_reduce\n  guard_target =ₛ f a = f a\n  rfl\nα : Type u\nf : α → α\na : α\n⊢ (fun x => (fun x => f x) x) a = f a\n/- α : Type u\nf : α → α\na : α\n⊢ f a = f a -/\n/- α : Type u\nf : α → α\na : α\n⊢ f a = f a -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (f : Nat → Nat) : (fun a => f a) = (fun a => f (f a)) := by\n  eta_expand\n  guard_target =ₛ (fun a => f a) = (fun a => f (f a))\n  eta_reduce\n  guard_target =ₛ f = fun a => f (f a)\n  eta_expand\n  guard_target =ₛ (fun a => f a) = (fun a => f (f a))\n  exact test_sorry\nf : ℕ → ℕ\n⊢ (fun a => f a) = fun a => f (f a)\n", "full_text": "example (f : Nat → Nat) : (fun a => f a) = (fun a => f (f a)) := by\n  eta_expand\n  guard_target =ₛ (fun a => f a) = (fun a => f (f a))\n  eta_reduce\n  guard_target =ₛ f = fun a => f (f a)\n  eta_expand\n  guard_target =ₛ (fun a => f a) = (fun a => f (f a))\n  exact test_sorry\nf : ℕ → ℕ\n⊢ (fun a => f a) = fun a => f (f a)\n/- f : ℕ → ℕ\n⊢ (fun a => f a) = fun a => f (f a) -/\n/- f : ℕ → ℕ\n⊢ (fun a => f a) = fun a => f (f a) -/\n/- f : ℕ → ℕ\n⊢ f = fun a => f (f a) -/\n/- f : ℕ → ℕ\n⊢ f = fun a => f (f a) -/\n/- f : ℕ → ℕ\n⊢ (fun a => f a) = fun a => f (f a) -/\n/- f : ℕ → ℕ\n⊢ (fun a => f a) = fun a => f (f a) -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : (fun (a b : Nat) => a + b) = (· + ·) := by\n  eta_reduce\n  guard_target =ₛ (HAdd.hAdd : Nat → Nat → Nat) = HAdd.hAdd\n  eta_expand\n  guard_target =ₛ (fun (a b : Nat) => a + b) = fun a b => a + b\n  rfl\n⊢ (fun a b => a + b) = fun x1 x2 => x1 + x2\n", "full_text": "example : (fun (a b : Nat) => a + b) = (· + ·) := by\n  eta_reduce\n  guard_target =ₛ (HAdd.hAdd : Nat → Nat → Nat) = HAdd.hAdd\n  eta_expand\n  guard_target =ₛ (fun (a b : Nat) => a + b) = fun a b => a + b\n  rfl\n⊢ (fun a b => a + b) = fun x1 x2 => x1 + x2\n/- ⊢ HAdd.hAdd = HAdd.hAdd -/\n/- ⊢ HAdd.hAdd = HAdd.hAdd -/\n/- ⊢ (fun a a_1 => a + a_1) = fun a a_1 => a + a_1 -/\n/- ⊢ (fun a a_1 => a + a_1) = fun a a_1 => a + a_1 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : (fun (a : Nat) => 1 + a) = (1 + ·) := by\n  eta_reduce\n  guard_target =ₛ (HAdd.hAdd 1) = HAdd.hAdd 1\n  eta_expand\n  guard_target =ₛ (fun a ↦ 1 + a) = fun a ↦ 1 + a\n  rfl\n⊢ (fun a => 1 + a) = fun x => 1 + x\n", "full_text": "example : (fun (a : Nat) => 1 + a) = (1 + ·) := by\n  eta_reduce\n  guard_target =ₛ (HAdd.hAdd 1) = HAdd.hAdd 1\n  eta_expand\n  guard_target =ₛ (fun a ↦ 1 + a) = fun a ↦ 1 + a\n  rfl\n⊢ (fun a => 1 + a) = fun x => 1 + x\n/- ⊢ HAdd.hAdd 1 = HAdd.hAdd 1 -/\n/- ⊢ HAdd.hAdd 1 = HAdd.hAdd 1 -/\n/- ⊢ (fun a => 1 + a) = fun a => 1 + a -/\n/- ⊢ (fun a => 1 + a) = fun a => 1 + a -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (f : Nat → Nat → Nat) : (fun x => f 1 x) 2 = 3 := by\n  eta_expand\n  guard_target =ₛ f 1 2 = 3\n  exact test_sorry\nf : ℕ → ℕ → ℕ\n⊢ (fun x => f 1 x) 2 = 3\n", "full_text": "example (f : Nat → Nat → Nat) : (fun x => f 1 x) 2 = 3 := by\n  eta_expand\n  guard_target =ₛ f 1 2 = 3\n  exact test_sorry\nf : ℕ → ℕ → ℕ\n⊢ (fun x => f 1 x) 2 = 3\n/- f : ℕ → ℕ → ℕ\n⊢ f 1 2 = 3 -/\n/- f : ℕ → ℕ → ℕ\n⊢ f 1 2 = 3 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : (fun (a : Nat) => 1 + a) 2 = (1 + ·) 2 := by\n  eta_expand\n  guard_target =ₛ 1 + 2 = 1 + 2\n  rfl\n⊢ (fun a => 1 + a) 2 = (fun x => 1 + x) 2\n", "full_text": "example : (fun (a : Nat) => 1 + a) 2 = (1 + ·) 2 := by\n  eta_expand\n  guard_target =ₛ 1 + 2 = 1 + 2\n  rfl\n⊢ (fun a => 1 + a) 2 = (fun x => 1 + x) 2\n/- ⊢ 1 + 2 = 1 + 2 -/\n/- ⊢ 1 + 2 = 1 + 2 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (p : Nat × Nat) : (p.1, p.2) = (p.2, p.1) := by\n  eta_struct\n  guard_target =ₛ p = (p.2, p.1)\n  exact test_sorry\np : ℕ × ℕ\n⊢ (p.1, p.2) = (p.2, p.1)\n", "full_text": "example (p : Nat × Nat) : (p.1, p.2) = (p.2, p.1) := by\n  eta_struct\n  guard_target =ₛ p = (p.2, p.1)\n  exact test_sorry\np : ℕ × ℕ\n⊢ (p.1, p.2) = (p.2, p.1)\n/- p : ℕ × ℕ\n⊢ p = (p.2, p.1) -/\n/- p : ℕ × ℕ\n⊢ p = (p.2, p.1) -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (p : Nat × Nat) : ((p.1, p.2).1, (p.1, p.2).2) = ((p.1, p.2).2, (p.1, p.2).1) := by\n  eta_struct\n  guard_target =ₛ p = (p.2, p.1)\n  exact test_sorry\np : ℕ × ℕ\n⊢ ((p.1, p.2).1, (p.1, p.2).2) = ((p.1, p.2).2, (p.1, p.2).1)\n", "full_text": "example (p : Nat × Nat) : ((p.1, p.2).1, (p.1, p.2).2) = ((p.1, p.2).2, (p.1, p.2).1) := by\n  eta_struct\n  guard_target =ₛ p = (p.2, p.1)\n  exact test_sorry\np : ℕ × ℕ\n⊢ ((p.1, p.2).1, (p.1, p.2).2) = ((p.1, p.2).2, (p.1, p.2).1)\n/- p : ℕ × ℕ\n⊢ p = (p.2, p.1) -/\n/- p : ℕ × ℕ\n⊢ p = (p.2, p.1) -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (n : Fin 5) : n = ⟨n.1, n.2⟩ := by\n  eta_struct\n  guard_target =ₛ n = n\n  rfl\nn : Fin 5\n⊢ n = ⟨↑n, ⋯⟩\n", "full_text": "example (n : Fin 5) : n = ⟨n.1, n.2⟩ := by\n  eta_struct\n  guard_target =ₛ n = n\n  rfl\nn : Fin 5\n⊢ n = ⟨↑n, ⋯⟩\n/- n : Fin 5\n⊢ n = n -/\n/- n : Fin 5\n⊢ n = n -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (n : Fin 5) : n = ⟨n.val2, n.prop2⟩ := by\n  eta_struct\n  guard_target =ₛ n = n\n  rfl\nn : Fin 5\n⊢ n = ⟨sorry, ⋯⟩\n", "full_text": "example (n : Fin 5) : n = ⟨n.val2, n.prop2⟩ := by\n  eta_struct\n  guard_target =ₛ n = n\n  rfl\nn : Fin 5\n⊢ n = ⟨sorry, ⋯⟩\n/- n : Fin 5\n⊢ n = ⟨sorry, ⋯⟩ -/\n/- n : Fin 5\n⊢ n = ⟨sorry, ⋯⟩ -/\n"}
{"prompt": "example : true ∧ true := by\n  constructor\n  guard_goal_nums 2\n  all_goals {constructor}\n⊢ true = true ∧ true = true\n", "full_text": "example : true ∧ true := by\n  constructor\n  guard_goal_nums 2\n  all_goals {constructor}\n⊢ true = true ∧ true = true\n/- case left\n⊢ true = true\n---\ncase right\n⊢ true = true -/\n/- case left\n⊢ true = true\n---\ncase right\n⊢ true = true -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : (true ∧ true) ∧ (true ∧ true) := by\n  constructor <;> constructor\n  guard_goal_nums 4\n  all_goals {constructor}\n⊢ (true = true ∧ true = true) ∧ true = true ∧ true = true\n", "full_text": "example : (true ∧ true) ∧ (true ∧ true) := by\n  constructor <;> constructor\n  guard_goal_nums 4\n  all_goals {constructor}\n⊢ (true = true ∧ true = true) ∧ true = true ∧ true = true\n/- case left.left\n⊢ true = true\n---\ncase left.right\n⊢ true = true\n---\ncase right.left\n⊢ true = true\n---\ncase right.right\n⊢ true = true -/\n/- case left.left\n⊢ true = true\n---\ncase left.right\n⊢ true = true\n---\ncase right.left\n⊢ true = true\n---\ncase right.right\n⊢ true = true -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b : ℕ) (foo : False)  : a < b := by\n  by_contra!\n  guard_hyp this : b ≤ a\n  exact foo\na b : ℕ\nfoo : False\n⊢ a < b\n", "full_text": "example (a b : ℕ) (foo : False)  : a < b := by\n  by_contra!\n  guard_hyp this : b ≤ a\n  exact foo\na b : ℕ\nfoo : False\n⊢ a < b\n/- a b : ℕ\nfoo : False\nthis : b ≤ a\n⊢ False -/\n/- a b : ℕ\nfoo : False\nthis : b ≤ a\n⊢ False -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b : ℕ) (h : False) : a < b := by\n  by_contra! foo\n  revert foo; change b ≤ a → False; intro;\n  exact h\na b : ℕ\nh : False\n⊢ a < b\n", "full_text": "example (a b : ℕ) (h : False) : a < b := by\n  by_contra! foo\n  revert foo; change b ≤ a → False; intro;\n  exact h\na b : ℕ\nh : False\n⊢ a < b\n/- a b : ℕ\nh : False\nfoo : b ≤ a\n⊢ False -/\n/- a b : ℕ\nh : False\n⊢ b ≤ a → False -/\n/- a b : ℕ\nh : False\n⊢ b ≤ a → False -/\n"}
{"prompt": "example (a b : ℕ) (h : False) : a < b := by\n  by_contra! foo : ¬ a < b -- can avoid push_neg\n  guard_hyp foo : ¬ a < b\n  exact h\na b : ℕ\nh : False\n⊢ a < b\n", "full_text": "example (a b : ℕ) (h : False) : a < b := by\n  by_contra! foo : ¬ a < b -- can avoid push_neg\n  guard_hyp foo : ¬ a < b\n  exact h\na b : ℕ\nh : False\n⊢ a < b\n/- a b : ℕ\nh : False\nfoo : ¬a < b\n⊢ False -/\n/- a b : ℕ\nh : False\nfoo : ¬a < b\n⊢ False -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : 1 < 2 := by\n  by_contra!\n  guard_hyp this : 2 ≤ 1\n  contradiction\n⊢ 1 < 2\n", "full_text": "example : 1 < 2 := by\n  by_contra!\n  guard_hyp this : 2 ≤ 1\n  contradiction\n⊢ 1 < 2\n/- this : 2 ≤ 1\n⊢ False -/\n/- this : 2 ≤ 1\n⊢ False -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (_p : Prop) (bar : False) : ¬ ¬ ¬ ¬ ¬ ¬ P := by\n  by_contra! foo : ¬ ¬ ¬ P -- normalises to ¬ P, as does ¬ (goal).\n  guard_hyp foo : ¬ ¬ ¬ P\n  exact bar\nP _p : Prop\nbar : False\n⊢ ¬¬¬¬¬¬P\n", "full_text": "example (_p : Prop) (bar : False) : ¬ ¬ ¬ ¬ ¬ ¬ P := by\n  by_contra! foo : ¬ ¬ ¬ P -- normalises to ¬ P, as does ¬ (goal).\n  guard_hyp foo : ¬ ¬ ¬ P\n  exact bar\nP _p : Prop\nbar : False\n⊢ ¬¬¬¬¬¬P\n/- P _p : Prop\nbar : False\nfoo : ¬¬¬P\n⊢ False -/\n/- P _p : Prop\nbar : False\nfoo : ¬¬¬P\n⊢ False -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (_p : Prop) (bar : False) : ¬ ¬ ¬ ¬ ¬ ¬ P := by\n  by_contra! : ¬ ¬ ¬ P\n  guard_hyp this : ¬ ¬ ¬ P\n  exact bar\nP _p : Prop\nbar : False\n⊢ ¬¬¬¬¬¬P\n", "full_text": "example (_p : Prop) (bar : False) : ¬ ¬ ¬ ¬ ¬ ¬ P := by\n  by_contra! : ¬ ¬ ¬ P\n  guard_hyp this : ¬ ¬ ¬ P\n  exact bar\nP _p : Prop\nbar : False\n⊢ ¬¬¬¬¬¬P\n/- P _p : Prop\nbar : False\nthis : ¬¬¬P\n⊢ False -/\n/- P _p : Prop\nbar : False\nthis : ¬¬¬P\n⊢ False -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x : α) (f : False) : x ≤ 1 := by\n  set a := x * x\n  by_contra! h\n  guard_hyp h : 1 < x\n  assumption\nα : Type u_1\ninst✝² : LinearOrder α\ninst✝¹ : One α\ninst✝ : Mul α\nx : α\nf : False\n⊢ x ≤ 1\n", "full_text": "example (x : α) (f : False) : x ≤ 1 := by\n  set a := x * x\n  by_contra! h\n  guard_hyp h : 1 < x\n  assumption\nα : Type u_1\ninst✝² : LinearOrder α\ninst✝¹ : One α\ninst✝ : Mul α\nx : α\nf : False\n⊢ x ≤ 1\n/- α : Type u_1\ninst✝² : LinearOrder α\ninst✝¹ : One α\ninst✝ : Mul α\nx : α\nf : False\na : α := x * x\n⊢ x ≤ 1 -/\n/- α : Type u_1\ninst✝² : LinearOrder α\ninst✝¹ : One α\ninst✝ : Mul α\nx : α\nf : False\na : α := x * x\nh : 1 < x\n⊢ False -/\n/- α : Type u_1\ninst✝² : LinearOrder α\ninst✝¹ : One α\ninst✝ : Mul α\nx : α\nf : False\na : α := x * x\nh : 1 < x\n⊢ False -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x : α) (f : False) : x ≤ 1 := by\n  let _a := x * x\n  by_contra! h\n  guard_hyp h : 1 < x\n  assumption\nα : Type u_1\ninst✝² : LinearOrder α\ninst✝¹ : One α\ninst✝ : Mul α\nx : α\nf : False\n⊢ x ≤ 1\n", "full_text": "example (x : α) (f : False) : x ≤ 1 := by\n  let _a := x * x\n  by_contra! h\n  guard_hyp h : 1 < x\n  assumption\nα : Type u_1\ninst✝² : LinearOrder α\ninst✝¹ : One α\ninst✝ : Mul α\nx : α\nf : False\n⊢ x ≤ 1\n/- α : Type u_1\ninst✝² : LinearOrder α\ninst✝¹ : One α\ninst✝ : Mul α\nx : α\nf : False\n_a : α := x * x\n⊢ x ≤ 1 -/\n/- α : Type u_1\ninst✝² : LinearOrder α\ninst✝¹ : One α\ninst✝ : Mul α\nx : α\nf : False\n_a : α := x * x\nh : 1 < x\n⊢ False -/\n/- α : Type u_1\ninst✝² : LinearOrder α\ninst✝¹ : One α\ninst✝ : Mul α\nx : α\nf : False\n_a : α := x * x\nh : 1 < x\n⊢ False -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x : α) (f : False) : x ≤ 1 := by\n  set a := x * x\n  have : a ≤ a := le_rfl\n  by_contra! h\n  guard_hyp h : 1 < x\n  assumption\nα : Type u_1\ninst✝² : LinearOrder α\ninst✝¹ : One α\ninst✝ : Mul α\nx : α\nf : False\n⊢ x ≤ 1\n", "full_text": "example (x : α) (f : False) : x ≤ 1 := by\n  set a := x * x\n  have : a ≤ a := le_rfl\n  by_contra! h\n  guard_hyp h : 1 < x\n  assumption\nα : Type u_1\ninst✝² : LinearOrder α\ninst✝¹ : One α\ninst✝ : Mul α\nx : α\nf : False\n⊢ x ≤ 1\n/- α : Type u_1\ninst✝² : LinearOrder α\ninst✝¹ : One α\ninst✝ : Mul α\nx : α\nf : False\na : α := x * x\n⊢ x ≤ 1 -/\n/- α : Type u_1\ninst✝² : LinearOrder α\ninst✝¹ : One α\ninst✝ : Mul α\nx : α\nf : False\na : α := x * x\nthis : a ≤ a\n⊢ x ≤ 1 -/\n/- α : Type u_1\ninst✝² : LinearOrder α\ninst✝¹ : One α\ninst✝ : Mul α\nx : α\nf : False\na : α := x * x\nthis : a ≤ a\nh : 1 < x\n⊢ False -/\n/- α : Type u_1\ninst✝² : LinearOrder α\ninst✝¹ : One α\ninst✝ : Mul α\nx : α\nf : False\na : α := x * x\nthis : a ≤ a\nh : 1 < x\n⊢ False -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : f 37 = 38 := by\n  erw? [f]\nx✝ : Sort u_1\nf : x✝\n⊢ sorry = 38\n", "full_text": "example : f 37 = 38 := by\n  erw? [f]\nx✝ : Sort u_1\nf : x✝\n⊢ sorry = 38\n/- x✝ : Sort u_1\nf : x✝\n⊢ sorry = 38 -/\n"}
{"prompt": "example (a b c : Nat) (h1 : a ≤ b) (h2 : b ≤ c) : a ≤ c := by\n  order\na b c : ℕ\nh1 : a ≤ b\nh2 : b ≤ c\n⊢ a ≤ c\n", "full_text": "example (a b c : Nat) (h1 : a ≤ b) (h2 : b ≤ c) : a ≤ c := by\n  order\na b c : ℕ\nh1 : a ≤ b\nh2 : b ≤ c\n⊢ a ≤ c\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c d e : Nat) (h1 : a ≤ b) (h2 : b ≤ c) (h3 : c ≤ d) (h4 : d ≤ e) (h5 : b ≠ d) :\n    a < e := by\n  order\na b c d e : ℕ\nh1 : a ≤ b\nh2 : b ≤ c\nh3 : c ≤ d\nh4 : d ≤ e\nh5 : b ≠ d\n⊢ a < e\n", "full_text": "example (a b c d e : Nat) (h1 : a ≤ b) (h2 : b ≤ c) (h3 : c ≤ d) (h4 : d ≤ e) (h5 : b ≠ d) :\n    a < e := by\n  order\na b c d e : ℕ\nh1 : a ≤ b\nh2 : b ≤ c\nh3 : c ≤ d\nh4 : d ≤ e\nh5 : b ≠ d\n⊢ a < e\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c : Nat) (h1 : a = b) (h2 : b = c) : a = c := by\n  order\na b c : ℕ\nh1 : a = b\nh2 : b = c\n⊢ a = c\n", "full_text": "example (a b c : Nat) (h1 : a = b) (h2 : b = c) : a = c := by\n  order\na b c : ℕ\nh1 : a = b\nh2 : b = c\n⊢ a = c\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b : Int) (h1 : ¬(a < b)) (h2 : ¬(b < a)) : a = b := by\n  order\na b : ℤ\nh1 : ¬a < b\nh2 : ¬b < a\n⊢ a = b\n", "full_text": "example (a b : Int) (h1 : ¬(a < b)) (h2 : ¬(b < a)) : a = b := by\n  order\na b : ℤ\nh1 : ¬a < b\nh2 : ¬b < a\n⊢ a = b\n/- Goals Accomplished! -/\n"}
{"prompt": "example {α : Type} [LinearOrder α] (a b : α) (h1 : ¬(a < b)) (h2 : ¬(b < a)) : a = b := by\n  order\nα : Type\ninst✝ : LinearOrder α\na b : α\nh1 : ¬a < b\nh2 : ¬b < a\n⊢ a = b\n", "full_text": "example {α : Type} [LinearOrder α] (a b : α) (h1 : ¬(a < b)) (h2 : ¬(b < a)) : a = b := by\n  order\nα : Type\ninst✝ : LinearOrder α\na b : α\nh1 : ¬a < b\nh2 : ¬b < a\n⊢ a = b\n/- Goals Accomplished! -/\n"}
{"prompt": "example {α : Type} [PartialOrder α] (a b c d e : α) (h1 : a ≤ b) (h2 : b ≤ c) (h3 : c ≤ d) (h4 : d ≤ e) (h5 : b ≠ d) :\n    a < e := by\n  order\nα : Type\ninst✝ : PartialOrder α\na b c d e : α\nh1 : a ≤ b\nh2 : b ≤ c\nh3 : c ≤ d\nh4 : d ≤ e\nh5 : b ≠ d\n⊢ a < e\n", "full_text": "example {α : Type} [PartialOrder α] (a b c d e : α) (h1 : a ≤ b) (h2 : b ≤ c) (h3 : c ≤ d) (h4 : d ≤ e) (h5 : b ≠ d) :\n    a < e := by\n  order\nα : Type\ninst✝ : PartialOrder α\na b c d e : α\nh1 : a ≤ b\nh2 : b ≤ c\nh3 : c ≤ d\nh4 : d ≤ e\nh5 : b ≠ d\n⊢ a < e\n/- Goals Accomplished! -/\n"}
{"prompt": "example {α : Type} [PartialOrder α] (s t x y : α) (h1 : s ≤ x) (h2 : x ≤ t) (h3 : s ≤ y)\n    (h4 : y ≤ t) (h5 : x ≠ y) :\n    s < t := by\n  order\nα : Type\ninst✝ : PartialOrder α\ns t x y : α\nh1 : s ≤ x\nh2 : x ≤ t\nh3 : s ≤ y\nh4 : y ≤ t\nh5 : x ≠ y\n⊢ s < t\n", "full_text": "example {α : Type} [PartialOrder α] (s t x y : α) (h1 : s ≤ x) (h2 : x ≤ t) (h3 : s ≤ y)\n    (h4 : y ≤ t) (h5 : x ≠ y) :\n    s < t := by\n  order\nα : Type\ninst✝ : PartialOrder α\ns t x y : α\nh1 : s ≤ x\nh2 : x ≤ t\nh3 : s ≤ y\nh4 : y ≤ t\nh5 : x ≠ y\n⊢ s < t\n/- Goals Accomplished! -/\n"}
{"prompt": "example {α : Type} [PartialOrder α] (a b c d : α) (h1 : a ≤ b) (h2 : b ≤ c) (h3 : ¬(a < c))\n    (h4 : a ≤ d) :\n    c ≤ d := by\n  order\nα : Type\ninst✝ : PartialOrder α\na b c d : α\nh1 : a ≤ b\nh2 : b ≤ c\nh3 : ¬a < c\nh4 : a ≤ d\n⊢ c ≤ d\n", "full_text": "example {α : Type} [PartialOrder α] (a b c d : α) (h1 : a ≤ b) (h2 : b ≤ c) (h3 : ¬(a < c))\n    (h4 : a ≤ d) :\n    c ≤ d := by\n  order\nα : Type\ninst✝ : PartialOrder α\na b c d : α\nh1 : a ≤ b\nh2 : b ≤ c\nh3 : ¬a < c\nh4 : a ≤ d\n⊢ c ≤ d\n/- Goals Accomplished! -/\n"}
{"prompt": "example {α : Type} [PartialOrder α] (a : α) :\n    ¬ (a < a) := by\n  order\nα : Type\ninst✝ : PartialOrder α\na : α\n⊢ ¬a < a\n", "full_text": "example {α : Type} [PartialOrder α] (a : α) :\n    ¬ (a < a) := by\n  order\nα : Type\ninst✝ : PartialOrder α\na : α\n⊢ ¬a < a\n/- Goals Accomplished! -/\n"}
{"prompt": "example {α : Type} [Preorder α] (a b c d : α) (h1 : a ≤ b) (h2 : b ≤ c) (h3 : ¬(a < c))\n    (h4 : a ≤ d) :\n    c ≤ d := by\n  order\nα : Type\ninst✝ : Preorder α\na b c d : α\nh1 : a ≤ b\nh2 : b ≤ c\nh3 : ¬a < c\nh4 : a ≤ d\n⊢ c ≤ d\n", "full_text": "example {α : Type} [Preorder α] (a b c d : α) (h1 : a ≤ b) (h2 : b ≤ c) (h3 : ¬(a < c))\n    (h4 : a ≤ d) :\n    c ≤ d := by\n  order\nα : Type\ninst✝ : Preorder α\na b c d : α\nh1 : a ≤ b\nh2 : b ≤ c\nh3 : ¬a < c\nh4 : a ≤ d\n⊢ c ≤ d\n/- Goals Accomplished! -/\n"}
{"prompt": "example {α : Type} [Preorder α] (a b : α) (h1 : a < b) : b > a := by\n  order\nα : Type\ninst✝ : Preorder α\na b : α\nh1 : a < b\n⊢ b > a\n", "full_text": "example {α : Type} [Preorder α] (a b : α) (h1 : a < b) : b > a := by\n  order\nα : Type\ninst✝ : Preorder α\na b : α\nh1 : a < b\n⊢ b > a\n/- Goals Accomplished! -/\n"}
{"prompt": "example {α : Type} [Preorder α] (a b : α) (h1 : a > b) : b < a := by\n  order\nα : Type\ninst✝ : Preorder α\na b : α\nh1 : a > b\n⊢ b < a\n", "full_text": "example {α : Type} [Preorder α] (a b : α) (h1 : a > b) : b < a := by\n  order\nα : Type\ninst✝ : Preorder α\na b : α\nh1 : a > b\n⊢ b < a\n/- Goals Accomplished! -/\n"}
{"prompt": "example {n : Nat} (A B C : Matrix (Fin n) (Fin n) ℚ) : (A * B * C).rank ≤ A.rank ⊓ C.rank := by\n  have h1 := Matrix.rank_mul_le A B\n  have h2 := Matrix.rank_mul_le (A * B) C\n  have h3 : A.rank ⊓ B.rank ≤ A.rank := inf_le_left\n  have h4 : (A * B).rank ⊓ C.rank ≤ (A * B).rank := inf_le_left\n  have h5 : (A * B).rank ⊓ C.rank ≤ C.rank := inf_le_right\n  simp\n  constructor\n  · order\n  · order\nn : ℕ\nA B C : Matrix (Fin n) (Fin n) ℚ\n⊢ (A * B * C).rank ≤ min A.rank C.rank\n", "full_text": "example {n : Nat} (A B C : Matrix (Fin n) (Fin n) ℚ) : (A * B * C).rank ≤ A.rank ⊓ C.rank := by\n  have h1 := Matrix.rank_mul_le A B\n  have h2 := Matrix.rank_mul_le (A * B) C\n  have h3 : A.rank ⊓ B.rank ≤ A.rank := inf_le_left\n  have h4 : (A * B).rank ⊓ C.rank ≤ (A * B).rank := inf_le_left\n  have h5 : (A * B).rank ⊓ C.rank ≤ C.rank := inf_le_right\n  simp\n  constructor\n  · order\n  · order\nn : ℕ\nA B C : Matrix (Fin n) (Fin n) ℚ\n⊢ (A * B * C).rank ≤ min A.rank C.rank\n/- n : ℕ\nA B C : Matrix (Fin n) (Fin n) ℚ\nh1 : (A * B).rank ≤ min A.rank B.rank\n⊢ (A * B * C).rank ≤ min A.rank C.rank -/\n/- n : ℕ\nA B C : Matrix (Fin n) (Fin n) ℚ\nh1 : (A * B).rank ≤ min A.rank B.rank\nh2 : (A * B * C).rank ≤ min (A * B).rank C.rank\n⊢ (A * B * C).rank ≤ min A.rank C.rank -/\n/- n : ℕ\nA B C : Matrix (Fin n) (Fin n) ℚ\nh1 : (A * B).rank ≤ min A.rank B.rank\nh2 : (A * B * C).rank ≤ min (A * B).rank C.rank\nh3 : min A.rank B.rank ≤ A.rank\n⊢ (A * B * C).rank ≤ min A.rank C.rank -/\n/- n : ℕ\nA B C : Matrix (Fin n) (Fin n) ℚ\nh1 : (A * B).rank ≤ min A.rank B.rank\nh2 : (A * B * C).rank ≤ min (A * B).rank C.rank\nh3 : min A.rank B.rank ≤ A.rank\nh4 : min (A * B).rank C.rank ≤ (A * B).rank\n⊢ (A * B * C).rank ≤ min A.rank C.rank -/\n/- n : ℕ\nA B C : Matrix (Fin n) (Fin n) ℚ\nh1 : (A * B).rank ≤ min A.rank B.rank\nh2 : (A * B * C).rank ≤ min (A * B).rank C.rank\nh3 : min A.rank B.rank ≤ A.rank\nh4 : min (A * B).rank C.rank ≤ (A * B).rank\nh5 : min (A * B).rank C.rank ≤ C.rank\n⊢ (A * B * C).rank ≤ min A.rank C.rank -/\n/- n : ℕ\nA B C : Matrix (Fin n) (Fin n) ℚ\nh1 : (A * B).rank ≤ min A.rank B.rank\nh2 : (A * B * C).rank ≤ min (A * B).rank C.rank\nh3 : min A.rank B.rank ≤ A.rank\nh4 : min (A * B).rank C.rank ≤ (A * B).rank\nh5 : min (A * B).rank C.rank ≤ C.rank\n⊢ (A * B * C).rank ≤ A.rank ∧ (A * B * C).rank ≤ C.rank -/\n/- case left\nn : ℕ\nA B C : Matrix (Fin n) (Fin n) ℚ\nh1 : (A * B).rank ≤ min A.rank B.rank\nh2 : (A * B * C).rank ≤ min (A * B).rank C.rank\nh3 : min A.rank B.rank ≤ A.rank\nh4 : min (A * B).rank C.rank ≤ (A * B).rank\nh5 : min (A * B).rank C.rank ≤ C.rank\n⊢ (A * B * C).rank ≤ A.rank\n---\ncase right\nn : ℕ\nA B C : Matrix (Fin n) (Fin n) ℚ\nh1 : (A * B).rank ≤ min A.rank B.rank\nh2 : (A * B * C).rank ≤ min (A * B).rank C.rank\nh3 : min A.rank B.rank ≤ A.rank\nh4 : min (A * B).rank C.rank ≤ (A * B).rank\nh5 : min (A * B).rank C.rank ≤ C.rank\n⊢ (A * B * C).rank ≤ C.rank -/\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {α : Type u} [PartialOrder α]\n    (x1 y1 : α)\n    (x2 y2 : α)\n    (x3 y3 : α)\n    (x4 y4 : α)\n    (x5 y5 : α)\n    (x6 y6 : α)\n    (x7 y7 : α)\n    (x8 y8 : α)\n    (x9 y9 : α)\n    (x10 y10 : α)\n    (x11 y11 : α)\n    (x12 y12 : α)\n    (x13 y13 : α)\n    (x14 y14 : α)\n    (x15 y15 : α)\n    (x16 y16 : α)\n    (x17 y17 : α)\n    (x18 y18 : α)\n    (x19 y19 : α)\n    (x20 y20 : α)\n    (x21 y21 : α)\n    (x22 y22 : α)\n    (x23 y23 : α)\n    (x24 y24 : α)\n    (x25 y25 : α)\n    (x26 y26 : α)\n    (x27 y27 : α)\n    (x28 y28 : α)\n    (x29 y29 : α)\n    (x30 y30 : α)\n    (h0 : y1 ≤ x1)\n    (h1 : ¬(y1 < x1)) (h2 : y2 ≤ x1) (h3 : y1 ≤ x2)\n    (h4 : ¬(y2 < x2)) (h5 : y3 ≤ x2) (h6 : y2 ≤ x3)\n    (h7 : ¬(y3 < x3)) (h8 : y4 ≤ x3) (h9 : y3 ≤ x4)\n    (h10 : ¬(y4 < x4)) (h11 : y5 ≤ x4) (h12 : y4 ≤ x5)\n    (h13 : ¬(y5 < x5)) (h14 : y6 ≤ x5) (h15 : y5 ≤ x6)\n    (h16 : ¬(y6 < x6)) (h17 : y7 ≤ x6) (h18 : y6 ≤ x7)\n    (h19 : ¬(y7 < x7)) (h20 : y8 ≤ x7) (h21 : y7 ≤ x8)\n    (h22 : ¬(y8 < x8)) (h23 : y9 ≤ x8) (h24 : y8 ≤ x9)\n    (h25 : ¬(y9 < x9)) (h26 : y10 ≤ x9) (h27 : y9 ≤ x10)\n    (h28 : ¬(y10 < x10)) (h29 : y11 ≤ x10) (h30 : y10 ≤ x11)\n    (h31 : ¬(y11 < x11)) (h32 : y12 ≤ x11) (h33 : y11 ≤ x12)\n    (h34 : ¬(y12 < x12)) (h35 : y13 ≤ x12) (h36 : y12 ≤ x13)\n    (h37 : ¬(y13 < x13)) (h38 : y14 ≤ x13) (h39 : y13 ≤ x14)\n    (h40 : ¬(y14 < x14)) (h41 : y15 ≤ x14) (h42 : y14 ≤ x15)\n    (h43 : ¬(y15 < x15)) (h44 : y16 ≤ x15) (h45 : y15 ≤ x16)\n    (h46 : ¬(y16 < x16)) (h47 : y17 ≤ x16) (h48 : y16 ≤ x17)\n    (h49 : ¬(y17 < x17)) (h50 : y18 ≤ x17) (h51 : y17 ≤ x18)\n    (h52 : ¬(y18 < x18)) (h53 : y19 ≤ x18) (h54 : y18 ≤ x19)\n    (h55 : ¬(y19 < x19)) (h56 : y20 ≤ x19) (h57 : y19 ≤ x20)\n    (h58 : ¬(y20 < x20)) (h59 : y21 ≤ x20) (h60 : y20 ≤ x21)\n    (h61 : ¬(y21 < x21)) (h62 : y22 ≤ x21) (h63 : y21 ≤ x22)\n    (h64 : ¬(y22 < x22)) (h65 : y23 ≤ x22) (h66 : y22 ≤ x23)\n    (h67 : ¬(y23 < x23)) (h68 : y24 ≤ x23) (h69 : y23 ≤ x24)\n    (h70 : ¬(y24 < x24)) (h71 : y25 ≤ x24) (h72 : y24 ≤ x25)\n    (h73 : ¬(y25 < x25)) (h74 : y26 ≤ x25) (h75 : y25 ≤ x26)\n    (h76 : ¬(y26 < x26)) (h77 : y27 ≤ x26) (h78 : y26 ≤ x27)\n    (h79 : ¬(y27 < x27)) (h80 : y28 ≤ x27) (h81 : y27 ≤ x28)\n    (h82 : ¬(y28 < x28)) (h83 : y29 ≤ x28) (h84 : y28 ≤ x29)\n    (h85 : ¬(y29 < x29)) (h86 : y30 ≤ x29) (h87 : y29 ≤ x30)\n    (h88 : ¬(y30 < x30)) : x30 = y30 := by\n  order\nα : Type u\ninst✝ : PartialOrder α\nx1 y1 x2 y2 x3 y3 x4 y4 x5 y5 x6 y6 x7 y7 x8 y8 x9 y9 x10 y10 x11 y11 x12 y12 x13 y13 x14 y14 x15 y15 x16 y16 x17 y17 x18 y18 x19 y19 x20 y20 x21 y21 x22 y22 x23 y23 x24 y24 x25 y25 x26 y26 x27 y27 x28 y28 x29 y29 x30 y30 :\n  α\nh0 : y1 ≤ x1\nh1 : ¬y1 < x1\nh2 : y2 ≤ x1\nh3 : y1 ≤ x2\nh4 : ¬y2 < x2\nh5 : y3 ≤ x2\nh6 : y2 ≤ x3\nh7 : ¬y3 < x3\nh8 : y4 ≤ x3\nh9 : y3 ≤ x4\nh10 : ¬y4 < x4\nh11 : y5 ≤ x4\nh12 : y4 ≤ x5\nh13 : ¬y5 < x5\nh14 : y6 ≤ x5\nh15 : y5 ≤ x6\nh16 : ¬y6 < x6\nh17 : y7 ≤ x6\nh18 : y6 ≤ x7\nh19 : ¬y7 < x7\nh20 : y8 ≤ x7\nh21 : y7 ≤ x8\nh22 : ¬y8 < x8\nh23 : y9 ≤ x8\nh24 : y8 ≤ x9\nh25 : ¬y9 < x9\nh26 : y10 ≤ x9\nh27 : y9 ≤ x10\nh28 : ¬y10 < x10\nh29 : y11 ≤ x10\nh30 : y10 ≤ x11\nh31 : ¬y11 < x11\nh32 : y12 ≤ x11\nh33 : y11 ≤ x12\nh34 : ¬y12 < x12\nh35 : y13 ≤ x12\nh36 : y12 ≤ x13\nh37 : ¬y13 < x13\nh38 : y14 ≤ x13\nh39 : y13 ≤ x14\nh40 : ¬y14 < x14\nh41 : y15 ≤ x14\nh42 : y14 ≤ x15\nh43 : ¬y15 < x15\nh44 : y16 ≤ x15\nh45 : y15 ≤ x16\nh46 : ¬y16 < x16\nh47 : y17 ≤ x16\nh48 : y16 ≤ x17\nh49 : ¬y17 < x17\nh50 : y18 ≤ x17\nh51 : y17 ≤ x18\nh52 : ¬y18 < x18\nh53 : y19 ≤ x18\nh54 : y18 ≤ x19\nh55 : ¬y19 < x19\nh56 : y20 ≤ x19\nh57 : y19 ≤ x20\nh58 : ¬y20 < x20\nh59 : y21 ≤ x20\nh60 : y20 ≤ x21\nh61 : ¬y21 < x21\nh62 : y22 ≤ x21\nh63 : y21 ≤ x22\nh64 : ¬y22 < x22\nh65 : y23 ≤ x22\nh66 : y22 ≤ x23\nh67 : ¬y23 < x23\nh68 : y24 ≤ x23\nh69 : y23 ≤ x24\nh70 : ¬y24 < x24\nh71 : y25 ≤ x24\nh72 : y24 ≤ x25\nh73 : ¬y25 < x25\nh74 : y26 ≤ x25\nh75 : y25 ≤ x26\nh76 : ¬y26 < x26\nh77 : y27 ≤ x26\nh78 : y26 ≤ x27\nh79 : ¬y27 < x27\nh80 : y28 ≤ x27\nh81 : y27 ≤ x28\nh82 : ¬y28 < x28\nh83 : y29 ≤ x28\nh84 : y28 ≤ x29\nh85 : ¬y29 < x29\nh86 : y30 ≤ x29\nh87 : y29 ≤ x30\nh88 : ¬y30 < x30\n⊢ x30 = y30\n", "full_text": "example {α : Type u} [PartialOrder α]\n    (x1 y1 : α)\n    (x2 y2 : α)\n    (x3 y3 : α)\n    (x4 y4 : α)\n    (x5 y5 : α)\n    (x6 y6 : α)\n    (x7 y7 : α)\n    (x8 y8 : α)\n    (x9 y9 : α)\n    (x10 y10 : α)\n    (x11 y11 : α)\n    (x12 y12 : α)\n    (x13 y13 : α)\n    (x14 y14 : α)\n    (x15 y15 : α)\n    (x16 y16 : α)\n    (x17 y17 : α)\n    (x18 y18 : α)\n    (x19 y19 : α)\n    (x20 y20 : α)\n    (x21 y21 : α)\n    (x22 y22 : α)\n    (x23 y23 : α)\n    (x24 y24 : α)\n    (x25 y25 : α)\n    (x26 y26 : α)\n    (x27 y27 : α)\n    (x28 y28 : α)\n    (x29 y29 : α)\n    (x30 y30 : α)\n    (h0 : y1 ≤ x1)\n    (h1 : ¬(y1 < x1)) (h2 : y2 ≤ x1) (h3 : y1 ≤ x2)\n    (h4 : ¬(y2 < x2)) (h5 : y3 ≤ x2) (h6 : y2 ≤ x3)\n    (h7 : ¬(y3 < x3)) (h8 : y4 ≤ x3) (h9 : y3 ≤ x4)\n    (h10 : ¬(y4 < x4)) (h11 : y5 ≤ x4) (h12 : y4 ≤ x5)\n    (h13 : ¬(y5 < x5)) (h14 : y6 ≤ x5) (h15 : y5 ≤ x6)\n    (h16 : ¬(y6 < x6)) (h17 : y7 ≤ x6) (h18 : y6 ≤ x7)\n    (h19 : ¬(y7 < x7)) (h20 : y8 ≤ x7) (h21 : y7 ≤ x8)\n    (h22 : ¬(y8 < x8)) (h23 : y9 ≤ x8) (h24 : y8 ≤ x9)\n    (h25 : ¬(y9 < x9)) (h26 : y10 ≤ x9) (h27 : y9 ≤ x10)\n    (h28 : ¬(y10 < x10)) (h29 : y11 ≤ x10) (h30 : y10 ≤ x11)\n    (h31 : ¬(y11 < x11)) (h32 : y12 ≤ x11) (h33 : y11 ≤ x12)\n    (h34 : ¬(y12 < x12)) (h35 : y13 ≤ x12) (h36 : y12 ≤ x13)\n    (h37 : ¬(y13 < x13)) (h38 : y14 ≤ x13) (h39 : y13 ≤ x14)\n    (h40 : ¬(y14 < x14)) (h41 : y15 ≤ x14) (h42 : y14 ≤ x15)\n    (h43 : ¬(y15 < x15)) (h44 : y16 ≤ x15) (h45 : y15 ≤ x16)\n    (h46 : ¬(y16 < x16)) (h47 : y17 ≤ x16) (h48 : y16 ≤ x17)\n    (h49 : ¬(y17 < x17)) (h50 : y18 ≤ x17) (h51 : y17 ≤ x18)\n    (h52 : ¬(y18 < x18)) (h53 : y19 ≤ x18) (h54 : y18 ≤ x19)\n    (h55 : ¬(y19 < x19)) (h56 : y20 ≤ x19) (h57 : y19 ≤ x20)\n    (h58 : ¬(y20 < x20)) (h59 : y21 ≤ x20) (h60 : y20 ≤ x21)\n    (h61 : ¬(y21 < x21)) (h62 : y22 ≤ x21) (h63 : y21 ≤ x22)\n    (h64 : ¬(y22 < x22)) (h65 : y23 ≤ x22) (h66 : y22 ≤ x23)\n    (h67 : ¬(y23 < x23)) (h68 : y24 ≤ x23) (h69 : y23 ≤ x24)\n    (h70 : ¬(y24 < x24)) (h71 : y25 ≤ x24) (h72 : y24 ≤ x25)\n    (h73 : ¬(y25 < x25)) (h74 : y26 ≤ x25) (h75 : y25 ≤ x26)\n    (h76 : ¬(y26 < x26)) (h77 : y27 ≤ x26) (h78 : y26 ≤ x27)\n    (h79 : ¬(y27 < x27)) (h80 : y28 ≤ x27) (h81 : y27 ≤ x28)\n    (h82 : ¬(y28 < x28)) (h83 : y29 ≤ x28) (h84 : y28 ≤ x29)\n    (h85 : ¬(y29 < x29)) (h86 : y30 ≤ x29) (h87 : y29 ≤ x30)\n    (h88 : ¬(y30 < x30)) : x30 = y30 := by\n  order\nα : Type u\ninst✝ : PartialOrder α\nx1 y1 x2 y2 x3 y3 x4 y4 x5 y5 x6 y6 x7 y7 x8 y8 x9 y9 x10 y10 x11 y11 x12 y12 x13 y13 x14 y14 x15 y15 x16 y16 x17 y17 x18 y18 x19 y19 x20 y20 x21 y21 x22 y22 x23 y23 x24 y24 x25 y25 x26 y26 x27 y27 x28 y28 x29 y29 x30 y30 :\n  α\nh0 : y1 ≤ x1\nh1 : ¬y1 < x1\nh2 : y2 ≤ x1\nh3 : y1 ≤ x2\nh4 : ¬y2 < x2\nh5 : y3 ≤ x2\nh6 : y2 ≤ x3\nh7 : ¬y3 < x3\nh8 : y4 ≤ x3\nh9 : y3 ≤ x4\nh10 : ¬y4 < x4\nh11 : y5 ≤ x4\nh12 : y4 ≤ x5\nh13 : ¬y5 < x5\nh14 : y6 ≤ x5\nh15 : y5 ≤ x6\nh16 : ¬y6 < x6\nh17 : y7 ≤ x6\nh18 : y6 ≤ x7\nh19 : ¬y7 < x7\nh20 : y8 ≤ x7\nh21 : y7 ≤ x8\nh22 : ¬y8 < x8\nh23 : y9 ≤ x8\nh24 : y8 ≤ x9\nh25 : ¬y9 < x9\nh26 : y10 ≤ x9\nh27 : y9 ≤ x10\nh28 : ¬y10 < x10\nh29 : y11 ≤ x10\nh30 : y10 ≤ x11\nh31 : ¬y11 < x11\nh32 : y12 ≤ x11\nh33 : y11 ≤ x12\nh34 : ¬y12 < x12\nh35 : y13 ≤ x12\nh36 : y12 ≤ x13\nh37 : ¬y13 < x13\nh38 : y14 ≤ x13\nh39 : y13 ≤ x14\nh40 : ¬y14 < x14\nh41 : y15 ≤ x14\nh42 : y14 ≤ x15\nh43 : ¬y15 < x15\nh44 : y16 ≤ x15\nh45 : y15 ≤ x16\nh46 : ¬y16 < x16\nh47 : y17 ≤ x16\nh48 : y16 ≤ x17\nh49 : ¬y17 < x17\nh50 : y18 ≤ x17\nh51 : y17 ≤ x18\nh52 : ¬y18 < x18\nh53 : y19 ≤ x18\nh54 : y18 ≤ x19\nh55 : ¬y19 < x19\nh56 : y20 ≤ x19\nh57 : y19 ≤ x20\nh58 : ¬y20 < x20\nh59 : y21 ≤ x20\nh60 : y20 ≤ x21\nh61 : ¬y21 < x21\nh62 : y22 ≤ x21\nh63 : y21 ≤ x22\nh64 : ¬y22 < x22\nh65 : y23 ≤ x22\nh66 : y22 ≤ x23\nh67 : ¬y23 < x23\nh68 : y24 ≤ x23\nh69 : y23 ≤ x24\nh70 : ¬y24 < x24\nh71 : y25 ≤ x24\nh72 : y24 ≤ x25\nh73 : ¬y25 < x25\nh74 : y26 ≤ x25\nh75 : y25 ≤ x26\nh76 : ¬y26 < x26\nh77 : y27 ≤ x26\nh78 : y26 ≤ x27\nh79 : ¬y27 < x27\nh80 : y28 ≤ x27\nh81 : y27 ≤ x28\nh82 : ¬y28 < x28\nh83 : y29 ≤ x28\nh84 : y28 ≤ x29\nh85 : ¬y29 < x29\nh86 : y30 ≤ x29\nh87 : y29 ≤ x30\nh88 : ¬y30 < x30\n⊢ x30 = y30\n/- Goals Accomplished! -/\n"}
{"prompt": "example [AddZeroClass G] {a : G} (h : a = a): a = (a + 0) := by\n  nth_rewrite 2 [← add_zero a] at h\n  exact h\nG : Type u_1\ninst✝ : AddZeroClass G\na : G\nh : a = a\n⊢ a = a + 0\n", "full_text": "example [AddZeroClass G] {a : G} (h : a = a): a = (a + 0) := by\n  nth_rewrite 2 [← add_zero a] at h\n  exact h\nG : Type u_1\ninst✝ : AddZeroClass G\na : G\nh : a = a\n⊢ a = a + 0\n/- G : Type u_1\ninst✝ : AddZeroClass G\na : G\nh : a = a + 0\n⊢ a = a + 0 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example [AddZeroClass G] {a : G} : a + a = a + (a + 0) := by\n  nth_rw 2 [← add_zero a]\nG : Type u_1\ninst✝ : AddZeroClass G\na : G\n⊢ a + a = a + (a + 0)\n", "full_text": "example [AddZeroClass G] {a : G} : a + a = a + (a + 0) := by\n  nth_rw 2 [← add_zero a]\nG : Type u_1\ninst✝ : AddZeroClass G\na : G\n⊢ a + a = a + (a + 0)\n/- Goals Accomplished! -/\n"}
{"prompt": "example (f : F) : f.v.val = [] := by\n  nth_rw 1 [f.p]\nF : Sort u_1\nf : F\n⊢ sorry = []\n", "full_text": "example (f : F) : f.v.val = [] := by\n  nth_rw 1 [f.p]\nF : Sort u_1\nf : F\n⊢ sorry = []\n/- F : Sort u_1\nf : F\n⊢ sorry = [] -/\n"}
{"prompt": "example (C : Cat) (W X Y Z : C.O) (f : C.H X Y) (g : C.H W X) (h _k : C.H Y Z) :\n    C.c (C.c g f) h = C.c g (C.c f h) := by\n  nth_rw 1 [C.a]\nCat : Sort u_1\nC : Cat\nW : sorry\nX : sorry\nY : sorry\nZ : sorry\nf : sorry\ng : sorry\nh : sorry\n_k : sorry\n⊢ sorry = sorry\n", "full_text": "example (C : Cat) (W X Y Z : C.O) (f : C.H X Y) (g : C.H W X) (h _k : C.H Y Z) :\n    C.c (C.c g f) h = C.c g (C.c f h) := by\n  nth_rw 1 [C.a]\nCat : Sort u_1\nC : Cat\nW : sorry\nX : sorry\nY : sorry\nZ : sorry\nf : sorry\ng : sorry\nh : sorry\n_k : sorry\n⊢ sorry = sorry\n/- Cat : Sort u_1\nC : Cat\nW : sorry\nX : sorry\nY : sorry\nZ : sorry\nf : sorry\ng : sorry\nh : sorry\n_k : sorry\n⊢ sorry = sorry -/\n"}
{"prompt": "example (C : Cat) (X Y : C.O) (f : C.H X Y) : C.c f (C.i Y) = f := by\n  nth_rw 1 [C.ri]\nCat : Sort u_1\nC : Cat\nX : sorry\nY : sorry\nf : sorry\n⊢ sorry = f\n", "full_text": "example (C : Cat) (X Y : C.O) (f : C.H X Y) : C.c f (C.i Y) = f := by\n  nth_rw 1 [C.ri]\nCat : Sort u_1\nC : Cat\nX : sorry\nY : sorry\nf : sorry\n⊢ sorry = f\n/- Cat : Sort u_1\nC : Cat\nX : sorry\nY : sorry\nf : sorry\n⊢ sorry = f -/\n"}
{"prompt": "example (x y z : ℕ) (h1 : x = y) (h2 : y = z) :\n    x + x + x + y = y + y + x + x := by\n  nth_rewrite 3 [h1, h2] -- h2 *is* used, this is different from mathlib3\n  nth_rewrite 3 [h2]\n  rw [h1]\n  rw [h2]\nx y z : ℕ\nh1 : x = y\nh2 : y = z\n⊢ x + x + x + y = y + y + x + x\n", "full_text": "example (x y z : ℕ) (h1 : x = y) (h2 : y = z) :\n    x + x + x + y = y + y + x + x := by\n  nth_rewrite 3 [h1, h2] -- h2 *is* used, this is different from mathlib3\n  nth_rewrite 3 [h2]\n  rw [h1]\n  rw [h2]\nx y z : ℕ\nh1 : x = y\nh2 : y = z\n⊢ x + x + x + y = y + y + x + x\n/- x y z : ℕ\nh1 : x = y\nh2 : y = z\n⊢ x + x + y + y = z + y + x + x -/\n/- x y z : ℕ\nh1 : x = y\nh2 : y = z\n⊢ x + x + y + y = z + z + x + x -/\n/- x y z : ℕ\nh1 : x = y\nh2 : y = z\n⊢ y + y + y + y = z + z + y + y -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : [[1], [1], [1]] = [[1], [2], [1]] := by\n  nth_rw 2 [foo]\n⊢ [[1], [1], [1]] = [[1], [2], [1]]\n", "full_text": "example : [[1], [1], [1]] = [[1], [2], [1]] := by\n  nth_rw 2 [foo]\n⊢ [[1], [1], [1]] = [[1], [2], [1]]\n/- ⊢ [[1], [1], [1]] = [[1], [2], [1]] -/\n"}
{"prompt": "example : [[7],[6]] = [[5],[5]] := by\n  nth_rewrite 1 [foo']\n  nth_rewrite 1 [bar']\n  nth_rewrite 1 [← foo']\n  nth_rewrite 1 [← foo']\n  rfl\n⊢ [[7], [6]] = [[5], [5]]\n", "full_text": "example : [[7],[6]] = [[5],[5]] := by\n  nth_rewrite 1 [foo']\n  nth_rewrite 1 [bar']\n  nth_rewrite 1 [← foo']\n  nth_rewrite 1 [← foo']\n  rfl\n⊢ [[7], [6]] = [[5], [5]]\n/- ⊢ [[7], [6]] = [[5], [5]] -/\n"}
{"prompt": "example (a b c : ℕ) : c + a + b = a + c + b := by\n  nth_rewrite 4 [add_comm]\n  rfl\na b c : ℕ\n⊢ c + a + b = a + c + b\n", "full_text": "example (a b c : ℕ) : c + a + b = a + c + b := by\n  nth_rewrite 4 [add_comm]\n  rfl\na b c : ℕ\n⊢ c + a + b = a + c + b\n/- a b c : ℕ\n⊢ c + a + b = c + a + b -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : [(3, 3), (5, 9), (5, 9)] = [(4, 5), (3, 6), (1, 1)] := by\n  nth_rewrite 1 [wowzer]\n  nth_rewrite 3 [← pchew]\n  nth_rewrite 1 [pchew]\n\n  nth_rewrite 1 [smash]\n  nth_rewrite 2 [smash]\n  nth_rewrite 3 [smash]\n  nth_rewrite 4 [smash]\n  nth_rewrite 5 [smash]\n  nth_rewrite 6 [smash]\n  rfl\n⊢ [(3, 3), (5, 9), (5, 9)] = [(4, 5), (3, 6), (1, 1)]\n", "full_text": "example : [(3, 3), (5, 9), (5, 9)] = [(4, 5), (3, 6), (1, 1)] := by\n  nth_rewrite 1 [wowzer]\n  nth_rewrite 3 [← pchew]\n  nth_rewrite 1 [pchew]\n\n  nth_rewrite 1 [smash]\n  nth_rewrite 2 [smash]\n  nth_rewrite 3 [smash]\n  nth_rewrite 4 [smash]\n  nth_rewrite 5 [smash]\n  nth_rewrite 6 [smash]\n  rfl\n⊢ [(3, 3), (5, 9), (5, 9)] = [(4, 5), (3, 6), (1, 1)]\n/- ⊢ [(3, 3), (5, 9), (5, 9)] = [(4, 5), (3, 6), (1, 1)] -/\n"}
{"prompt": "example (x y : Prop) (h₁ : x ↔ y) (h₂ : x ↔ x ∧ x) : x ∧ x ↔ x := by\n  nth_rewrite 3 [h₁] at h₂\n  nth_rewrite 1 [← h₁] at h₂\n  nth_rewrite 3 [h₂]\n  rfl\nx y : Prop\nh₁ : x ↔ y\nh₂ : x ↔ x ∧ x\n⊢ x ∧ x ↔ x\n", "full_text": "example (x y : Prop) (h₁ : x ↔ y) (h₂ : x ↔ x ∧ x) : x ∧ x ↔ x := by\n  nth_rewrite 3 [h₁] at h₂\n  nth_rewrite 1 [← h₁] at h₂\n  nth_rewrite 3 [h₂]\n  rfl\nx y : Prop\nh₁ : x ↔ y\nh₂ : x ↔ x ∧ x\n⊢ x ∧ x ↔ x\n/- x y : Prop\nh₁ : x ↔ y\nh₂ : x ↔ x ∧ y\n⊢ x ∧ x ↔ x -/\n/- x y : Prop\nh₁ : x ↔ y\nh₂ : x ↔ x ∧ x\n⊢ x ∧ x ↔ x -/\n/- x y : Prop\nh₁ : x ↔ y\nh₂ : x ↔ x ∧ x\n⊢ x ∧ x ↔ x ∧ x -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x y : ℕ) (h₁ : x = y) (h₂ : x = x + x) : x + x = x := by\n  nth_rewrite 3 [h₁] at h₂\n  nth_rewrite 1 [← h₁] at h₂\n  nth_rewrite 3 [h₂]\n  rfl\nx y : ℕ\nh₁ : x = y\nh₂ : x = x + x\n⊢ x + x = x\n", "full_text": "example (x y : ℕ) (h₁ : x = y) (h₂ : x = x + x) : x + x = x := by\n  nth_rewrite 3 [h₁] at h₂\n  nth_rewrite 1 [← h₁] at h₂\n  nth_rewrite 3 [h₂]\n  rfl\nx y : ℕ\nh₁ : x = y\nh₂ : x = x + x\n⊢ x + x = x\n/- x y : ℕ\nh₁ : x = y\nh₂ : x = x + y\n⊢ x + x = x -/\n/- x y : ℕ\nh₁ : x = y\nh₂ : x = x + x\n⊢ x + x = x -/\n/- x y : ℕ\nh₁ : x = y\nh₂ : x = x + x\n⊢ x + x = x + x -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x y : ℕ) (h : x = y) : x + x + x = x + y + y := by\n  nth_rw 2 3 [h]\nx y : ℕ\nh : x = y\n⊢ x + x + x = x + y + y\n", "full_text": "example (x y : ℕ) (h : x = y) : x + x + x = x + y + y := by\n  nth_rw 2 3 [h]\nx y : ℕ\nh : x = y\n⊢ x + x + x = x + y + y\n/- Goals Accomplished! -/\n"}
{"prompt": "example {f : α → β} (s t : Set β) (h : Surjective f) :\n    f '' (f ⁻¹' s) ⊆ t ↔ f '' (f ⁻¹' s) ⊆ t := by\n  conv =>\n    congr\n    · simp [h, -image_preimage_eq, -subset_range_of_surjective]\n    · simp [h, -image_subset_iff, -subset_range_of_surjective]\n  fail_if_success simp [h, -subset_range_of_surjective]\n  simp [h]\nα : Type u_1\nβ : Type u_2\nf : α → β\ns t : Set β\nh : Surjective f\n⊢ f '' (f ⁻¹' s) ⊆ t ↔ f '' (f ⁻¹' s) ⊆ t\n", "full_text": "example {f : α → β} (s t : Set β) (h : Surjective f) :\n    f '' (f ⁻¹' s) ⊆ t ↔ f '' (f ⁻¹' s) ⊆ t := by\n  conv =>\n    congr\n    · simp [h, -image_preimage_eq, -subset_range_of_surjective]\n    · simp [h, -image_subset_iff, -subset_range_of_surjective]\n  fail_if_success simp [h, -subset_range_of_surjective]\n  simp [h]\nα : Type u_1\nβ : Type u_2\nf : α → β\ns t : Set β\nh : Surjective f\n⊢ f '' (f ⁻¹' s) ⊆ t ↔ f '' (f ⁻¹' s) ⊆ t\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {s : Set α} (hs : Set.Nonempty s) (t : Set β) (a : β) :\n    (fun _ => a) '' s ⊆ t ↔ (fun _ => a) '' s ⊆ t := by\n  conv =>\n    congr\n    · simp [hs, -Nonempty.image_const, -Nonempty.subset_preimage_const]\n    · simp [hs, -image_subset_iff, -Nonempty.subset_preimage_const]\n  fail_if_success simp [hs, -Nonempty.subset_preimage_const]\n  simp [hs]\nα : Type u_1\nβ : Type u_2\ns : Set α\nhs : s.Nonempty\nt : Set β\na : β\n⊢ (fun x => a) '' s ⊆ t ↔ (fun x => a) '' s ⊆ t\n", "full_text": "example {s : Set α} (hs : Set.Nonempty s) (t : Set β) (a : β) :\n    (fun _ => a) '' s ⊆ t ↔ (fun _ => a) '' s ⊆ t := by\n  conv =>\n    congr\n    · simp [hs, -Nonempty.image_const, -Nonempty.subset_preimage_const]\n    · simp [hs, -image_subset_iff, -Nonempty.subset_preimage_const]\n  fail_if_success simp [hs, -Nonempty.subset_preimage_const]\n  simp [hs]\nα : Type u_1\nβ : Type u_2\ns : Set α\nhs : s.Nonempty\nt : Set β\na : β\n⊢ (fun x => a) '' s ⊆ t ↔ (fun x => a) '' s ⊆ t\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {f : α → β} (s) : f '' univ ⊆ s ↔ f '' univ ⊆ s := by\n  conv =>\n    congr\n    · simp [-image_univ, -preimage_eq_univ_iff]\n    · simp [-image_subset_iff, -preimage_eq_univ_iff]\n  fail_if_success simp [-preimage_eq_univ_iff]\n  simp\nα : Type u_1\nβ : Type u_2\nuniv : Set α\nf : α → β\ns : Set β\n⊢ f '' univ ⊆ s ↔ f '' univ ⊆ s\n", "full_text": "example {f : α → β} (s) : f '' univ ⊆ s ↔ f '' univ ⊆ s := by\n  conv =>\n    congr\n    · simp [-image_univ, -preimage_eq_univ_iff]\n    · simp [-image_subset_iff, -preimage_eq_univ_iff]\n  fail_if_success simp [-preimage_eq_univ_iff]\n  simp\nα : Type u_1\nβ : Type u_2\nuniv : Set α\nf : α → β\ns : Set β\n⊢ f '' univ ⊆ s ↔ f '' univ ⊆ s\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : (¬p ∧ ¬q) → ¬(p ∨ q) := by\n  intro h\n  push_neg\n  guard_target = ¬p ∧ ¬q\n  exact h\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\n⊢ ¬p ∧ ¬q → ¬(p ∨ q)\n", "full_text": "example : (¬p ∧ ¬q) → ¬(p ∨ q) := by\n  intro h\n  push_neg\n  guard_target = ¬p ∧ ¬q\n  exact h\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\n⊢ ¬p ∧ ¬q → ¬(p ∨ q)\n/- α β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : ¬p ∧ ¬q\n⊢ ¬(p ∨ q) -/\n/- α β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : ¬p ∧ ¬q\n⊢ ¬p ∧ ¬q -/\n/- α β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : ¬p ∧ ¬q\n⊢ ¬p ∧ ¬q -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : ¬(p ∧ q) → (p → ¬q) := by\n  intro h\n  push_neg at h\n  guard_hyp h : p → ¬q\n  exact h\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\n⊢ ¬(p ∧ q) → p → ¬q\n", "full_text": "example : ¬(p ∧ q) → (p → ¬q) := by\n  intro h\n  push_neg at h\n  guard_hyp h : p → ¬q\n  exact h\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\n⊢ ¬(p ∧ q) → p → ¬q\n/- α β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : ¬(p ∧ q)\n⊢ p → ¬q -/\n/- α β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : p → ¬q\n⊢ p → ¬q -/\n/- α β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : p → ¬q\n⊢ p → ¬q -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : (∀(x : α), ¬ p' x) → ¬ ∃(x : α), p' x := by\n  intro h\n  push_neg\n  guard_target = ∀ (x : α), ¬p' x\n  exact h\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\n⊢ (∀ (x : α), ¬p' x) → ¬∃ x, p' x\n", "full_text": "example : (∀(x : α), ¬ p' x) → ¬ ∃(x : α), p' x := by\n  intro h\n  push_neg\n  guard_target = ∀ (x : α), ¬p' x\n  exact h\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\n⊢ (∀ (x : α), ¬p' x) → ¬∃ x, p' x\n/- α β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : ∀ (x : α), ¬p' x\n⊢ ¬∃ x, p' x -/\n/- α β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : ∀ (x : α), ¬p' x\n⊢ ∀ (x : α), ¬p' x -/\n/- α β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : ∀ (x : α), ¬p' x\n⊢ ∀ (x : α), ¬p' x -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : (¬ ∀(x : α), p' x) → (∃(x : α), ¬ p' x) := by\n  intro h\n  push_neg at h\n  guard_hyp h : ∃ (x : α), ¬p' x\n  exact h\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\n⊢ (¬∀ (x : α), p' x) → ∃ x, ¬p' x\n", "full_text": "example : (¬ ∀(x : α), p' x) → (∃(x : α), ¬ p' x) := by\n  intro h\n  push_neg at h\n  guard_hyp h : ∃ (x : α), ¬p' x\n  exact h\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\n⊢ (¬∀ (x : α), p' x) → ∃ x, ¬p' x\n/- α β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : ¬∀ (x : α), p' x\n⊢ ∃ x, ¬p' x -/\n/- α β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : ∃ x, ¬p' x\n⊢ ∃ x, ¬p' x -/\n/- α β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : ∃ x, ¬p' x\n⊢ ∃ x, ¬p' x -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (p : Bool) : decide (¬ ¬ p) = p := by\n  push_neg\n  guard_target = decide p = p\n  cases p <;> rfl\nα β : Type\ninst✝ : LinearOrder β\np✝ q : Prop\np' q' : α → Prop\np : Bool\n⊢ (decide ¬¬p = true) = p\n", "full_text": "example (p : Bool) : decide (¬ ¬ p) = p := by\n  push_neg\n  guard_target = decide p = p\n  cases p <;> rfl\nα β : Type\ninst✝ : LinearOrder β\np✝ q : Prop\np' q' : α → Prop\np : Bool\n⊢ (decide ¬¬p = true) = p\n/- α β : Type\ninst✝ : LinearOrder β\np✝ q : Prop\np' q' : α → Prop\np : Bool\n⊢ decide (p = true) = p -/\n/- α β : Type\ninst✝ : LinearOrder β\np✝ q : Prop\np' q' : α → Prop\np : Bool\n⊢ decide (p = true) = p -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : ((fun x => x+x) 1) = 2 := by\n  push_neg\n  guard_target = 1 + 1 = 2\n  simp\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\n⊢ (fun x => x + x) 1 = 2\n", "full_text": "example : ((fun x => x+x) 1) = 2 := by\n  push_neg\n  guard_target = 1 + 1 = 2\n  simp\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\n⊢ (fun x => x + x) 1 = 2\n/- α β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\n⊢ 1 + 1 = 2 -/\n/- α β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\n⊢ 1 + 1 = 2 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : ¬ ¬ p = p := by\n  push_neg\n  guard_target = p = p\n  rfl\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\n⊢ ¬¬p = p\n", "full_text": "example : ¬ ¬ p = p := by\n  push_neg\n  guard_target = p = p\n  rfl\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\n⊢ ¬¬p = p\n/- α β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\n⊢ p = p -/\n/- α β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\n⊢ p = p -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x y : β) (h : y < x) : ¬(x ≤ y) := by\n  push_neg\n  guard_target = y < x\n  exact h\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : β\nh : y < x\n⊢ ¬x ≤ y\n", "full_text": "example (x y : β) (h : y < x) : ¬(x ≤ y) := by\n  push_neg\n  guard_target = y < x\n  exact h\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : β\nh : y < x\n⊢ ¬x ≤ y\n/- α β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : β\nh : y < x\n⊢ y < x -/\n/- α β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : β\nh : y < x\n⊢ y < x -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b : β) (h : a ≤ b) : ¬ a > b := by\n  push_neg\n  guard_target = a ≤ b\n  exact h\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\na b : β\nh : a ≤ b\n⊢ ¬a > b\n", "full_text": "example (a b : β) (h : a ≤ b) : ¬ a > b := by\n  push_neg\n  guard_target = a ≤ b\n  exact h\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\na b : β\nh : a ≤ b\n⊢ ¬a > b\n/- α β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\na b : β\nh : a ≤ b\n⊢ a ≤ b -/\n/- α β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\na b : β\nh : a ≤ b\n⊢ a ≤ b -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x y : α) (h : x = y) : ¬ (x ≠ y) := by\n  push_neg\n  guard_target = x = y\n  exact h\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : α\nh : x = y\n⊢ ¬x ≠ y\n", "full_text": "example (x y : α) (h : x = y) : ¬ (x ≠ y) := by\n  push_neg\n  guard_target = x = y\n  exact h\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : α\nh : x = y\n⊢ ¬x ≠ y\n/- α β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : α\nh : x = y\n⊢ x = y -/\n/- α β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : α\nh : x = y\n⊢ x = y -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : ¬∃ (y : Unit), (y ≠ ()) := by\n  push_neg\n  guard_target = ∀ (y : Unit), y = ()\n  simp\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\n⊢ ¬∃ y, y ≠ ()\n", "full_text": "example : ¬∃ (y : Unit), (y ≠ ()) := by\n  push_neg\n  guard_target = ∀ (y : Unit), y = ()\n  simp\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\n⊢ ¬∃ y, y ≠ ()\n/- α β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\n⊢ ∀ (y : Unit), y = () -/\n/- α β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\n⊢ ∀ (y : Unit), y = () -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : ∃ y : Nat, ¬(y=1)): ¬∀ (y : Nat), (y = 1) := by\n  push_neg\n  guard_target = ∃ (y : Nat), y ≠ 1\n  exact h\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : ∃ y, ¬y = 1\n⊢ ¬∀ (y : ℕ), y = 1\n", "full_text": "example (h : ∃ y : Nat, ¬(y=1)): ¬∀ (y : Nat), (y = 1) := by\n  push_neg\n  guard_target = ∃ (y : Nat), y ≠ 1\n  exact h\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : ∃ y, ¬y = 1\n⊢ ¬∀ (y : ℕ), y = 1\n/- α β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : ∃ y, ¬y = 1\n⊢ ∃ y, y ≠ 1 -/\n/- α β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : ∃ y, ¬y = 1\n⊢ ∃ y, y ≠ 1 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x y : β) (h : y < x) : ¬¬¬ (x ≤ y) := by\n  push_neg\n  guard_target = y < x\n  exact h\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : β\nh : y < x\n⊢ ¬¬¬x ≤ y\n", "full_text": "example (x y : β) (h : y < x) : ¬¬¬ (x ≤ y) := by\n  push_neg\n  guard_target = y < x\n  exact h\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : β\nh : y < x\n⊢ ¬¬¬x ≤ y\n/- α β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : β\nh : y < x\n⊢ y < x -/\n/- α β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : β\nh : y < x\n⊢ y < x -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x y : β) (h₁ : ¬¬¬(x < y)) (h₂ : ¬∃ (x y : Nat), x = y) : ¬ ∀(x y : Nat), x = y := by\n  push_neg at *\n  guard_target = ∃ (x y : Nat), x ≠ y\n  guard_hyp h₁ : y ≤ x\n  guard_hyp h₂ : ∀ (x y : Nat), x ≠ y\n  exact ⟨0, 1, by simp⟩\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : β\nh₁ : ¬¬¬x < y\nh₂ : ¬∃ x y, x = y\n⊢ ¬∀ (x y : ℕ), x = y\n", "full_text": "example (x y : β) (h₁ : ¬¬¬(x < y)) (h₂ : ¬∃ (x y : Nat), x = y) : ¬ ∀(x y : Nat), x = y := by\n  push_neg at *\n  guard_target = ∃ (x y : Nat), x ≠ y\n  guard_hyp h₁ : y ≤ x\n  guard_hyp h₂ : ∀ (x y : Nat), x ≠ y\n  exact ⟨0, 1, by simp⟩\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : β\nh₁ : ¬¬¬x < y\nh₂ : ¬∃ x y, x = y\n⊢ ¬∀ (x y : ℕ), x = y\n/- α β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : β\nh₂ : ∀ (x y : ℕ), x ≠ y\nh₁ : y ≤ x\n⊢ ∃ x y, x ≠ y -/\n/- α β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : β\nh₂ : ∀ (x y : ℕ), x ≠ y\nh₁ : y ≤ x\n⊢ ∃ x y, x ≠ y -/\n/- α β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : β\nh₂ : ∀ (x y : ℕ), x ≠ y\nh₁ : y ≤ x\n⊢ ∃ x y, x ≠ y -/\n/- α β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : β\nh₂ : ∀ (x y : ℕ), x ≠ y\nh₁ : y ≤ x\n⊢ ∃ x y, x ≠ y -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x y : β) (h₁ : ¬¬¬(x < y)) (h₂ : ¬∃ (x y : Nat), x = y) : ¬ ∀(x y : Nat), x = y := by\n  push_neg at h₁ h₂ ⊢\n  guard_target = ∃ (x y : Nat), x ≠ y\n  guard_hyp h₁ : y ≤ x\n  guard_hyp h₂ : ∀ (x y : Nat), x ≠ y\n  exact ⟨0, 1, by simp⟩\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : β\nh₁ : ¬¬¬x < y\nh₂ : ¬∃ x y, x = y\n⊢ ¬∀ (x y : ℕ), x = y\n", "full_text": "example (x y : β) (h₁ : ¬¬¬(x < y)) (h₂ : ¬∃ (x y : Nat), x = y) : ¬ ∀(x y : Nat), x = y := by\n  push_neg at h₁ h₂ ⊢\n  guard_target = ∃ (x y : Nat), x ≠ y\n  guard_hyp h₁ : y ≤ x\n  guard_hyp h₂ : ∀ (x y : Nat), x ≠ y\n  exact ⟨0, 1, by simp⟩\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : β\nh₁ : ¬¬¬x < y\nh₂ : ¬∃ x y, x = y\n⊢ ¬∀ (x y : ℕ), x = y\n/- α β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : β\nh₁ : y ≤ x\nh₂ : ∀ (x y : ℕ), x ≠ y\n⊢ ∃ x y, x ≠ y -/\n/- α β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : β\nh₁ : y ≤ x\nh₂ : ∀ (x y : ℕ), x ≠ y\n⊢ ∃ x y, x ≠ y -/\n/- α β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : β\nh₁ : y ≤ x\nh₂ : ∀ (x y : ℕ), x ≠ y\n⊢ ∃ x y, x ≠ y -/\n/- α β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : β\nh₁ : y ≤ x\nh₂ : ∀ (x y : ℕ), x ≠ y\n⊢ ∃ x y, x ≠ y -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : p → ¬ q) : ¬ (p ∧ q) := by\n  push_neg\n  guard_target = p → ¬q\n  exact h\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : p → ¬q\n⊢ ¬(p ∧ q)\n", "full_text": "example (h : p → ¬ q) : ¬ (p ∧ q) := by\n  push_neg\n  guard_target = p → ¬q\n  exact h\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : p → ¬q\n⊢ ¬(p ∧ q)\n/- α β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : p → ¬q\n⊢ p → ¬q -/\n/- α β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : p → ¬q\n⊢ p → ¬q -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a : β) : ¬ ∀ x : β, x < a → ∃ y : β, (y < a) ∧ ∀ z : β, x = z := by\n  push_neg\n  guard_target = ∃ x, x < a ∧ ∀ (y : β), y < a → ∃ z, x ≠ z\n  exact test_sorry\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\na : β\n⊢ ¬∀ x < a, ∃ y < a, ∀ (z : β), x = z\n", "full_text": "example (a : β) : ¬ ∀ x : β, x < a → ∃ y : β, (y < a) ∧ ∀ z : β, x = z := by\n  push_neg\n  guard_target = ∃ x, x < a ∧ ∀ (y : β), y < a → ∃ z, x ≠ z\n  exact test_sorry\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\na : β\n⊢ ¬∀ x < a, ∃ y < a, ∀ (z : β), x = z\n/- α β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\na : β\n⊢ ∃ x < a, ∀ y < a, ∃ z, x ≠ z -/\n/- α β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\na : β\n⊢ ∃ x < a, ∀ y < a, ∃ z, x ≠ z -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {α} [Preorder α] (m n : α) (h : ¬(∃ k : α, m ≤ k)) (h₂ : m ≤ n) : m ≤ n := by\n  push_neg at h\n  guard_hyp h : ∀ k, ¬(m ≤ k)\n  exact h₂\nα✝ β : Type\ninst✝¹ : LinearOrder β\np q : Prop\np' q' : α✝ → Prop\nα : Type u_1\ninst✝ : Preorder α\nm n : α\nh : ¬∃ k, m ≤ k\nh₂ : m ≤ n\n⊢ m ≤ n\n", "full_text": "example {α} [Preorder α] (m n : α) (h : ¬(∃ k : α, m ≤ k)) (h₂ : m ≤ n) : m ≤ n := by\n  push_neg at h\n  guard_hyp h : ∀ k, ¬(m ≤ k)\n  exact h₂\nα✝ β : Type\ninst✝¹ : LinearOrder β\np q : Prop\np' q' : α✝ → Prop\nα : Type u_1\ninst✝ : Preorder α\nm n : α\nh : ¬∃ k, m ≤ k\nh₂ : m ≤ n\n⊢ m ≤ n\n/- α✝ β : Type\ninst✝¹ : LinearOrder β\np q : Prop\np' q' : α✝ → Prop\nα : Type u_1\ninst✝ : Preorder α\nm n : α\nh₂ : m ≤ n\nh : ∀ (k : α), ¬m ≤ k\n⊢ m ≤ n -/\n/- α✝ β : Type\ninst✝¹ : LinearOrder β\np q : Prop\np' q' : α✝ → Prop\nα : Type u_1\ninst✝ : Preorder α\nm n : α\nh₂ : m ≤ n\nh : ∀ (k : α), ¬m ≤ k\n⊢ m ≤ n -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {α} [Preorder α] (m n : α) (h : ¬(∃ k : α, m < k)) (h₂ : m ≤ n) : m ≤ n := by\n  push_neg at h\n  guard_hyp h : ∀ k, ¬(m < k)\n  exact h₂\nα✝ β : Type\ninst✝¹ : LinearOrder β\np q : Prop\np' q' : α✝ → Prop\nα : Type u_1\ninst✝ : Preorder α\nm n : α\nh : ¬∃ k, m < k\nh₂ : m ≤ n\n⊢ m ≤ n\n", "full_text": "example {α} [Preorder α] (m n : α) (h : ¬(∃ k : α, m < k)) (h₂ : m ≤ n) : m ≤ n := by\n  push_neg at h\n  guard_hyp h : ∀ k, ¬(m < k)\n  exact h₂\nα✝ β : Type\ninst✝¹ : LinearOrder β\np q : Prop\np' q' : α✝ → Prop\nα : Type u_1\ninst✝ : Preorder α\nm n : α\nh : ¬∃ k, m < k\nh₂ : m ≤ n\n⊢ m ≤ n\n/- α✝ β : Type\ninst✝¹ : LinearOrder β\np q : Prop\np' q' : α✝ → Prop\nα : Type u_1\ninst✝ : Preorder α\nm n : α\nh₂ : m ≤ n\nh : ∀ (k : α), ¬m < k\n⊢ m ≤ n -/\n/- α✝ β : Type\ninst✝¹ : LinearOrder β\np q : Prop\np' q' : α✝ → Prop\nα : Type u_1\ninst✝ : Preorder α\nm n : α\nh₂ : m ≤ n\nh : ∀ (k : α), ¬m < k\n⊢ m ≤ n -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (r : LinearOrder α) (s : Preorder α) (a b : α) : ¬(s.lt a b → r.lt a b) := by\n  push_neg\n  guard_target = s.lt a b ∧ r.le b a\n  exact test_sorry\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nr : LinearOrder α\ns : Preorder α\na b : α\n⊢ ¬(a < b → a < b)\n", "full_text": "example (r : LinearOrder α) (s : Preorder α) (a b : α) : ¬(s.lt a b → r.lt a b) := by\n  push_neg\n  guard_target = s.lt a b ∧ r.le b a\n  exact test_sorry\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nr : LinearOrder α\ns : Preorder α\na b : α\n⊢ ¬(a < b → a < b)\n/- α β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nr : LinearOrder α\ns : Preorder α\na b : α\n⊢ a < b ∧ b ≤ a -/\n/- α β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nr : LinearOrder α\ns : Preorder α\na b : α\n⊢ a < b ∧ b ≤ a -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (r : LinearOrder α) (s : Preorder α) (a b : α) : ¬(r.lt a b → s.lt a b) := by\n  push_neg\n  guard_target = r.lt a b ∧ ¬ s.lt a b\n  exact test_sorry\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nr : LinearOrder α\ns : Preorder α\na b : α\n⊢ ¬(a < b → a < b)\n", "full_text": "example (r : LinearOrder α) (s : Preorder α) (a b : α) : ¬(r.lt a b → s.lt a b) := by\n  push_neg\n  guard_target = r.lt a b ∧ ¬ s.lt a b\n  exact test_sorry\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nr : LinearOrder α\ns : Preorder α\na b : α\n⊢ ¬(a < b → a < b)\n/- α β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nr : LinearOrder α\ns : Preorder α\na b : α\n⊢ a < b ∧ ¬a < b -/\n/- α β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nr : LinearOrder α\ns : Preorder α\na b : α\n⊢ a < b ∧ ¬a < b -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : p ∧ q) : ¬¬(p ∧ q) := by\n  let r := p ∧ q\n  change ¬¬r\n  push_neg\n  guard_target =ₛ r\n  exact h\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : p ∧ q\n⊢ ¬¬(p ∧ q)\n", "full_text": "example (h : p ∧ q) : ¬¬(p ∧ q) := by\n  let r := p ∧ q\n  change ¬¬r\n  push_neg\n  guard_target =ₛ r\n  exact h\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : p ∧ q\n⊢ ¬¬(p ∧ q)\n/- α β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : p ∧ q\nr : Prop := p ∧ q\n⊢ ¬¬(p ∧ q) -/\n/- α β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : p ∧ q\nr : Prop := p ∧ q\n⊢ ¬¬r -/\n/- α β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : p ∧ q\nr : Prop := p ∧ q\n⊢ r -/\n/- α β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : p ∧ q\nr : Prop := p ∧ q\n⊢ r -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : ¬ p ∨ ¬ q): ¬ (p ∧ q) := by\n  push_neg\n  guard_target = ¬p ∨ ¬q\n  exact h\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : ¬p ∨ ¬q\n⊢ ¬(p ∧ q)\n", "full_text": "example (h : ¬ p ∨ ¬ q): ¬ (p ∧ q) := by\n  push_neg\n  guard_target = ¬p ∨ ¬q\n  exact h\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : ¬p ∨ ¬q\n⊢ ¬(p ∧ q)\n/- α β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : ¬p ∨ ¬q\n⊢ p → ¬q -/\n/- α β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nh : ¬p ∨ ¬q\n⊢ p → ¬q -/\n"}
{"prompt": "example : p → ¬ ¬ ¬ ¬ ¬ ¬ p := by\n  push_neg\n  guard_target = p → p\n  exact id\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\n⊢ p → ¬¬¬¬¬¬p\n", "full_text": "example : p → ¬ ¬ ¬ ¬ ¬ ¬ p := by\n  push_neg\n  guard_target = p → p\n  exact id\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\n⊢ p → ¬¬¬¬¬¬p\n/- α β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\n⊢ p → p -/\n/- α β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\n⊢ p → p -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : x = 0 ∧ y ≠ 0) : ¬(x = 0 → y = 0) := by\n  push_neg\n  guard_target = x = 0 ∧ y ≠ 0\n  exact h\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : ℕ\nh : x = 0 ∧ y ≠ 0\n⊢ ¬(x = 0 → y = 0)\n", "full_text": "example (h : x = 0 ∧ y ≠ 0) : ¬(x = 0 → y = 0) := by\n  push_neg\n  guard_target = x = 0 ∧ y ≠ 0\n  exact h\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : ℕ\nh : x = 0 ∧ y ≠ 0\n⊢ ¬(x = 0 → y = 0)\n/- α β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : ℕ\nh : x = 0 ∧ y ≠ 0\n⊢ x = 0 ∧ y ≠ 0 -/\n/- α β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\nx y : ℕ\nh : x = 0 ∧ y ≠ 0\n⊢ x = 0 ∧ y ≠ 0 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a : α) (o : Option α) (h : ¬∀ hs, o.get hs ≠ a) : ∃ hs, o.get hs = a := by\n  push_neg at h\n  exact h\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\na : α\no : Option α\nh : ¬∀ (hs : o.isSome = true), o.get hs ≠ a\n⊢ ∃ (hs : o.isSome = true), o.get hs = a\n", "full_text": "example (a : α) (o : Option α) (h : ¬∀ hs, o.get hs ≠ a) : ∃ hs, o.get hs = a := by\n  push_neg at h\n  exact h\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\na : α\no : Option α\nh : ¬∀ (hs : o.isSome = true), o.get hs ≠ a\n⊢ ∃ (hs : o.isSome = true), o.get hs = a\n/- α β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\na : α\no : Option α\nh : ∃ (h : o.isSome = true), o.get ⋯ = a\n⊢ ∃ (hs : o.isSome = true), o.get hs = a -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (s : Set α) (h : ¬s.Nonempty) : s = ∅ := by\n  push_neg at h\n  exact h\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\ns : Set α\nh : ¬s.Nonempty\n⊢ s = ∅\n", "full_text": "example (s : Set α) (h : ¬s.Nonempty) : s = ∅ := by\n  push_neg at h\n  exact h\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\ns : Set α\nh : ¬s.Nonempty\n⊢ s = ∅\n/- α β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\ns : Set α\nh : s = ∅\n⊢ s = ∅ -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (s : Set α) (h : ¬ s = ∅) : s.Nonempty := by\n  push_neg at h\n  exact h\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\ns : Set α\nh : ¬s = ∅\n⊢ s.Nonempty\n", "full_text": "example (s : Set α) (h : ¬ s = ∅) : s.Nonempty := by\n  push_neg at h\n  exact h\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\ns : Set α\nh : ¬s = ∅\n⊢ s.Nonempty\n/- α β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\ns : Set α\nh : s.Nonempty\n⊢ s.Nonempty -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (s : Set α) (h : s ≠ ∅) : s.Nonempty := by\n  push_neg at h\n  exact h\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\ns : Set α\nh : s ≠ ∅\n⊢ s.Nonempty\n", "full_text": "example (s : Set α) (h : s ≠ ∅) : s.Nonempty := by\n  push_neg at h\n  exact h\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\ns : Set α\nh : s ≠ ∅\n⊢ s.Nonempty\n/- α β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\ns : Set α\nh : s.Nonempty\n⊢ s.Nonempty -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (s : Set α) (h : ∅ ≠ s) : s.Nonempty := by\n  push_neg at h\n  exact h\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\ns : Set α\nh : ∅ ≠ s\n⊢ s.Nonempty\n", "full_text": "example (s : Set α) (h : ∅ ≠ s) : s.Nonempty := by\n  push_neg at h\n  exact h\nα β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\ns : Set α\nh : ∅ ≠ s\n⊢ s.Nonempty\n/- α β : Type\ninst✝ : LinearOrder β\np q : Prop\np' q' : α → Prop\ns : Set α\nh : s.Nonempty\n⊢ s.Nonempty -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {p q : Nat} : ¬ g.Adj p q := by\n  rw [g]\n  guard_target =ₛ ¬ G.Adj { Adj := fun a b => (a ≠ b) ∧ ((a ∣ b) ∨ (b ∣ a)) } p q\n  fail_if_success push_neg\n  guard_target =ₛ ¬ G.Adj { Adj := fun a b => (a ≠ b) ∧ ((a ∣ b) ∨ (b ∣ a)) } p q\n  dsimp only\n  guard_target =ₛ ¬ ((p ≠ q) ∧ ((p ∣ q) ∨ (q ∣ p)))\n  push_neg\n  guard_target =ₛ p ≠ q → ¬p ∣ q ∧ ¬q ∣ p\n  exact test_sorry\nα β : Type\ninst✝ : LinearOrder β\np✝ q✝ : Prop\np' q' : α → Prop\np q : ℕ\n⊢ ¬sorry\n", "full_text": "example {p q : Nat} : ¬ g.Adj p q := by\n  rw [g]\n  guard_target =ₛ ¬ G.Adj { Adj := fun a b => (a ≠ b) ∧ ((a ∣ b) ∨ (b ∣ a)) } p q\n  fail_if_success push_neg\n  guard_target =ₛ ¬ G.Adj { Adj := fun a b => (a ≠ b) ∧ ((a ∣ b) ∨ (b ∣ a)) } p q\n  dsimp only\n  guard_target =ₛ ¬ ((p ≠ q) ∧ ((p ∣ q) ∨ (q ∣ p)))\n  push_neg\n  guard_target =ₛ p ≠ q → ¬p ∣ q ∧ ¬q ∣ p\n  exact test_sorry\nα β : Type\ninst✝ : LinearOrder β\np✝ q✝ : Prop\np' q' : α → Prop\np q : ℕ\n⊢ ¬sorry\n/- α β : Type\ninst✝ : LinearOrder β\np✝ q✝ : Prop\np' q' : α → Prop\np q : ℕ\n⊢ ¬sorry -/\n"}
{"prompt": "example : True := by\n  success_if_fail_with_msg \"no goals to be solved\" trivial; trivial\n  trivial\n⊢ True\n", "full_text": "example : True := by\n  success_if_fail_with_msg \"no goals to be solved\" trivial; trivial\n  trivial\n⊢ True\n/- ⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : Nat → Nat → True := by\n  success_if_fail_with_msg \"no goals to be solved\"\n    intro\n    intro\n    trivial\n    trivial\n  intros; trivial\n⊢ ℕ → ℕ → True\n", "full_text": "example : Nat → Nat → True := by\n  success_if_fail_with_msg \"no goals to be solved\"\n    intro\n    intro\n    trivial\n    trivial\n  intros; trivial\n⊢ ℕ → ℕ → True\n/- ⊢ ℕ → ℕ → True -/\n/- a✝¹ a✝ : ℕ\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : Nat → Nat → True := by\n  success_if_fail_with_msg \"no goals\"\n    intro\n    intro\n    trivial\n    trivial\n  intros; trivial\n⊢ ℕ → ℕ → True\n", "full_text": "example : Nat → Nat → True := by\n  success_if_fail_with_msg \"no goals\"\n    intro\n    intro\n    trivial\n    trivial\n  intros; trivial\n⊢ ℕ → ℕ → True\n/- ⊢ ℕ → ℕ → True -/\n"}
{"prompt": "example (n : Nat) : True := by\n  success_if_fail_with_msg (err true) rw [Nat.le_succ n]\n  trivial\nn : ℕ\n⊢ True\n", "full_text": "example (n : Nat) : True := by\n  success_if_fail_with_msg (err true) rw [Nat.le_succ n]\n  trivial\nn : ℕ\n⊢ True\n/- n : ℕ\n⊢ True -/\n"}
{"prompt": "example : True := by\n  success_if_fail_with_msg (err false) fail \"not that message\"\n  trivial\n⊢ True\n", "full_text": "example : True := by\n  success_if_fail_with_msg (err false) fail \"not that message\"\n  trivial\n⊢ True\n/- ⊢ True -/\n"}
{"prompt": "example : True := by\n  success_if_fail_with_msg \"tactic 'trivial' succeeded, but was expected to fail\"\n    success_if_fail_with_msg \"message\" trivial\n  trivial\n⊢ True\n", "full_text": "example : True := by\n  success_if_fail_with_msg \"tactic 'trivial' succeeded, but was expected to fail\"\n    success_if_fail_with_msg \"message\" trivial\n  trivial\n⊢ True\n/- ⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : True := by\n  success_if_fail_with_msg err₂\n    success_if_fail_with_msg \"message\" fail \"different message!\"\n  trivial\n⊢ True\n", "full_text": "example : True := by\n  success_if_fail_with_msg err₂\n    success_if_fail_with_msg \"message\" fail \"different message!\"\n  trivial\n⊢ True\n/- ⊢ True -/\n"}
{"prompt": "example (a b : PNat) (h : a < b) : 1 < b := by\n  pnat_to_nat\n  omega\na b : ℕ+\nh : a < b\n⊢ 1 < b\n", "full_text": "example (a b : PNat) (h : a < b) : 1 < b := by\n  pnat_to_nat\n  omega\na b : ℕ+\nh : a < b\n⊢ 1 < b\n/- a b : ℕ+\na✝¹ : 0 < ↑a\na✝ : 0 < ↑b\nh : ↑a < ↑b\n⊢ 1 < ↑b -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b : PNat) (h : a = b) : b = a := by\n  -- to test if the tactic works with inaccessible names\n  let a : ℤ := 42\n  pnat_to_nat\n  omega\na b : ℕ+\nh : a = b\n⊢ b = a\n", "full_text": "example (a b : PNat) (h : a = b) : b = a := by\n  -- to test if the tactic works with inaccessible names\n  let a : ℤ := 42\n  pnat_to_nat\n  omega\na b : ℕ+\nh : a = b\n⊢ b = a\n/- a✝ b : ℕ+\nh : a✝ = b\na : ℤ := 42\n⊢ b = a✝ -/\n/- a✝² b : ℕ+\na : ℤ := 42\na✝¹ : 0 < ↑a✝²\na✝ : 0 < ↑b\nh : ↑a✝² = ↑b\n⊢ ↑b = ↑a✝² -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b : PNat) (h : a < b) : 1 < b := by\n  have := a.pos\n  pnat_to_nat\n  omega\na b : ℕ+\nh : a < b\n⊢ 1 < b\n", "full_text": "example (a b : PNat) (h : a < b) : 1 < b := by\n  have := a.pos\n  pnat_to_nat\n  omega\na b : ℕ+\nh : a < b\n⊢ 1 < b\n/- a b : ℕ+\nh : a < b\nthis : 0 < ↑a\n⊢ 1 < b -/\n/- a b : ℕ+\nthis : 0 < ↑a\na✝ : 0 < ↑b\nh : ↑a < ↑b\n⊢ 1 < ↑b -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : a + -b = -b + a := by\n  -- This should print \"`noncomm_ring` simp lemmas don't apply; try `abel` instead\"\n  -- but I don't know how to test for this:\n  -- See https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/.60fail.60.20that.20doesn't.20print.20the.20goal.3F/near/382280010\n  fail_if_success noncomm_ring\n  abel\nR : Type u_1\ninst✝ : Ring R\na b c : R\n⊢ a + -b = -b + a\n", "full_text": "example : a + -b = -b + a := by\n  -- This should print \"`noncomm_ring` simp lemmas don't apply; try `abel` instead\"\n  -- but I don't know how to test for this:\n  -- See https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/.60fail.60.20that.20doesn't.20print.20the.20goal.3F/near/382280010\n  fail_if_success noncomm_ring\n  abel\nR : Type u_1\ninst✝ : Ring R\na b c : R\n⊢ a + -b = -b + a\n/- R : Type u_1\ninst✝ : Ring R\na b c : R\n⊢ a + -b = -b + a -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : ∀ a : R, (2 : ℤ) • a = 0) : (a + 1) ^ 2 = a ^ 2 + 1 := by\n  noncomm_ring [h]\nR : Type u_1\ninst✝ : Ring R\na b c : R\nh : ∀ (a : R), 2 • a = 0\n⊢ (a + 1) ^ 2 = a ^ 2 + 1\n", "full_text": "example (h : ∀ a : R, (2 : ℤ) • a = 0) : (a + 1) ^ 2 = a ^ 2 + 1 := by\n  noncomm_ring [h]\nR : Type u_1\ninst✝ : Ring R\na b c : R\nh : ∀ (a : R), 2 • a = 0\n⊢ (a + 1) ^ 2 = a ^ 2 + 1\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : a = b) (h2 : a = c) : a = c := by\n  fail_if_success noncomm_ring [h]\n  noncomm_ring [h2]\nR : Type u_1\ninst✝ : Ring R\na b c : R\nh : a = b\nh2 : a = c\n⊢ a = c\n", "full_text": "example (h : a = b) (h2 : a = c) : a = c := by\n  fail_if_success noncomm_ring [h]\n  noncomm_ring [h2]\nR : Type u_1\ninst✝ : Ring R\na b c : R\nh : a = b\nh2 : a = c\n⊢ a = c\n/- R : Type u_1\ninst✝ : Ring R\na b c : R\nh : a = b\nh2 : a = c\n⊢ a = c -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (delete_this : Nat) (_delete_this_dep : delete_this = delete_this) : Nat := by\n  clear! delete_this\n  fail_if_success assumption\n  exact 0\ndelete_this : ℕ\n_delete_this_dep : delete_this = delete_this\n⊢ ℕ\n", "full_text": "example (delete_this : Nat) (_delete_this_dep : delete_this = delete_this) : Nat := by\n  clear! delete_this\n  fail_if_success assumption\n  exact 0\ndelete_this : ℕ\n_delete_this_dep : delete_this = delete_this\n⊢ ℕ\n/- ⊢ ℕ -/\n/- ⊢ ℕ -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example [delete_this : Inhabited Nat] : Inhabited Nat := by\n  clear! delete_this\n  fail_if_success assumption\n  infer_instance\ndelete_this : Inhabited ℕ\n⊢ Inhabited ℕ\n", "full_text": "example [delete_this : Inhabited Nat] : Inhabited Nat := by\n  clear! delete_this\n  fail_if_success assumption\n  infer_instance\ndelete_this : Inhabited ℕ\n⊢ Inhabited ℕ\n/- ⊢ Inhabited ℕ -/\n/- ⊢ Inhabited ℕ -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (delete_this : Nat) (delete_this2 : Nat) (_delete_this_dep : delete_this = delete_this2) :\n    Nat := by\n  clear! delete_this delete_this2\n  fail_if_success assumption\n  exact 0\ndelete_this delete_this2 : ℕ\n_delete_this_dep : delete_this = delete_this2\n⊢ ℕ\n", "full_text": "example (delete_this : Nat) (delete_this2 : Nat) (_delete_this_dep : delete_this = delete_this2) :\n    Nat := by\n  clear! delete_this delete_this2\n  fail_if_success assumption\n  exact 0\ndelete_this delete_this2 : ℕ\n_delete_this_dep : delete_this = delete_this2\n⊢ ℕ\n/- ⊢ ℕ -/\n/- ⊢ ℕ -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (delete_this : Nat) (dont_delete_this : Int) : Nat := by\n  clear! delete_this\n  fail_if_success assumption\n  exact dont_delete_this.toNat\ndelete_this : ℕ\ndont_delete_this : ℤ\n⊢ ℕ\n", "full_text": "example (delete_this : Nat) (dont_delete_this : Int) : Nat := by\n  clear! delete_this\n  fail_if_success assumption\n  exact dont_delete_this.toNat\ndelete_this : ℕ\ndont_delete_this : ℤ\n⊢ ℕ\n/- dont_delete_this : ℤ\n⊢ ℕ -/\n/- dont_delete_this : ℤ\n⊢ ℕ -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (dont_delete_this : Nat) (delete_this : dont_delete_this = dont_delete_this) : Nat := by\n  clear! delete_this\n  assumption\ndont_delete_this : ℕ\ndelete_this : dont_delete_this = dont_delete_this\n⊢ ℕ\n", "full_text": "example (dont_delete_this : Nat) (delete_this : dont_delete_this = dont_delete_this) : Nat := by\n  clear! delete_this\n  assumption\ndont_delete_this : ℕ\ndelete_this : dont_delete_this = dont_delete_this\n⊢ ℕ\n/- dont_delete_this : ℕ\n⊢ ℕ -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : True := by\n  type_check Nat -- Type\n  type_check Bool.true -- Bool\n  type_check nat_lit 1 -- Nat\n  type_check (1 : Nat) -- Nat\n  type_check (True :) -- Prop\n  type_check ∀ x y : Nat, x = y -- Prop\n  type_check fun x : Nat => 2 * x + 1 -- Nat -> Nat\n  type_check [1]\n  fail_if_success type_check wrong\n  trivial\n⊢ True\n", "full_text": "example : True := by\n  type_check Nat -- Type\n  type_check Bool.true -- Bool\n  type_check nat_lit 1 -- Nat\n  type_check (1 : Nat) -- Nat\n  type_check (True :) -- Prop\n  type_check ∀ x y : Nat, x = y -- Prop\n  type_check fun x : Nat => 2 * x + 1 -- Nat -> Nat\n  type_check [1]\n  fail_if_success type_check wrong\n  trivial\n⊢ True\n/- ⊢ True -/\n/- ⊢ True -/\n/- ⊢ True -/\n/- ⊢ True -/\n/- ⊢ True -/\n/- ⊢ True -/\n/- ⊢ True -/\n/- ⊢ True -/\n/- ⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : True := by\n  run_tac\n    evalApplyLikeTactic MVarId.apply (← `(True.intro))\n⊢ True\n", "full_text": "example : True := by\n  run_tac\n    evalApplyLikeTactic MVarId.apply (← `(True.intro))\n⊢ True\n/- Goals Accomplished! -/\n"}
{"prompt": "example : (fun x : Nat => x) 0 = 1 := by\n  change? 0 = _  -- change 0 = 1\n  change?        -- change (fun x ↦ x) 0 = 1\n  change? _      -- change (fun x ↦ x) 0 = 1\n  change? 1 = 0\n    -- The term\n    --   1 = 0\n    -- is not defeq to the goal:\n    --   (fun x ↦ x) 0 = 1\n⊢ (fun x => x) 0 = 1\n", "full_text": "example : (fun x : Nat => x) 0 = 1 := by\n  change? 0 = _  -- change 0 = 1\n  change?        -- change (fun x ↦ x) 0 = 1\n  change? _      -- change (fun x ↦ x) 0 = 1\n  change? 1 = 0\n    -- The term\n    --   1 = 0\n    -- is not defeq to the goal:\n    --   (fun x ↦ x) 0 = 1\n⊢ (fun x => x) 0 = 1\n/- ⊢ (fun x => x) 0 = 1 -/\n/- ⊢ (fun x => x) 0 = 1 -/\n/- ⊢ (fun x => x) 0 = 1 -/\n/- ⊢ (fun x => x) 0 = 1 -/\n"}
{"prompt": "example (f : ∀ x : Nat, x = x → α) : α := by\n  apply (config := {}) f\n  apply rfl\n  apply 1\nα : Sort ?u.19\nf : (x : ℕ) → x = x → α\n⊢ α\n", "full_text": "example (f : ∀ x : Nat, x = x → α) : α := by\n  apply (config := {}) f\n  apply rfl\n  apply 1\nα : Sort ?u.19\nf : (x : ℕ) → x = x → α\n⊢ α\n/- case a\nα : Sort ?u.19\nf : (x : ℕ) → x = x → α\n⊢ ?x = ?x\n---\ncase x\nα : Sort ?u.19\nf : (x : ℕ) → x = x → α\n⊢ ℕ -/\n/- case x\nα : Sort ?u.19\nf : (x : ℕ) → x = x → α\n⊢ ℕ -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (f : ∀ x : Nat, x = x → α) : α := by\n  apply (config := { newGoals := .nonDependentOnly }) f\n  apply @rfl _ 1\nα : Sort ?u.19\nf : (x : ℕ) → x = x → α\n⊢ α\n", "full_text": "example (f : ∀ x : Nat, x = x → α) : α := by\n  apply (config := { newGoals := .nonDependentOnly }) f\n  apply @rfl _ 1\nα : Sort ?u.19\nf : (x : ℕ) → x = x → α\n⊢ α\n/- case a\nα : Sort ?u.19\nf : (x : ℕ) → x = x → α\n⊢ ?x = ?x -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (f : ∀ x : Nat, x = x → α) : α := by\n  apply (config := { newGoals := .all }) f\n  apply 1\n  apply rfl\nα : Sort ?u.19\nf : (x : ℕ) → x = x → α\n⊢ α\n", "full_text": "example (f : ∀ x : Nat, x = x → α) : α := by\n  apply (config := { newGoals := .all }) f\n  apply 1\n  apply rfl\nα : Sort ?u.19\nf : (x : ℕ) → x = x → α\n⊢ α\n/- case x\nα : Sort ?u.19\nf : (x : ℕ) → x = x → α\n⊢ ℕ\n---\ncase a\nα : Sort ?u.19\nf : (x : ℕ) → x = x → α\n⊢ ?x = ?x -/\n/- case a\nα : Sort ?u.19\nf : (x : ℕ) → x = x → α\n⊢ 1 = 1 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (hAB : A ⊆ B) (hBC : B ⊆ C) (hCD : C ⊆ D) (hDE : D = E) (hEA : E ⊆ A) :\n    (Aᶜ ∩ B ∪ (C ∩ Bᶜ)ᶜ ∩ (Eᶜ ∪ A))ᶜ ∩ (B ∪ Eᶜᶜ)ᶜ =\n    (Dᶜ ∩ C ∪ (B ∩ Aᶜ)ᶜ ∩ (Eᶜ ∪ E))ᶜ ∩ (D ∪ Cᶜᶜ)ᶜ := by tauto_set\nα : Type\nA B C D E : Set α\nhAB : A ⊆ B\nhBC : B ⊆ C\nhCD : C ⊆ D\nhDE : D = E\nhEA : E ⊆ A\n⊢ (Aᶜ ∩ B ∪ (C ∩ Bᶜ)ᶜ ∩ (Eᶜ ∪ A))ᶜ ∩ (B ∪ Eᶜᶜ)ᶜ = (Dᶜ ∩ C ∪ (B ∩ Aᶜ)ᶜ ∩ (Eᶜ ∪ E))ᶜ ∩ (D ∪ Cᶜᶜ)ᶜ\n", "full_text": "example (hAB : A ⊆ B) (hBC : B ⊆ C) (hCD : C ⊆ D) (hDE : D = E) (hEA : E ⊆ A) :\n    (Aᶜ ∩ B ∪ (C ∩ Bᶜ)ᶜ ∩ (Eᶜ ∪ A))ᶜ ∩ (B ∪ Eᶜᶜ)ᶜ =\n    (Dᶜ ∩ C ∪ (B ∩ Aᶜ)ᶜ ∩ (Eᶜ ∪ E))ᶜ ∩ (D ∪ Cᶜᶜ)ᶜ := by tauto_set\nα : Type\nA B C D E : Set α\nhAB : A ⊆ B\nhBC : B ⊆ C\nhCD : C ⊆ D\nhDE : D = E\nhEA : E ⊆ A\n⊢ (Aᶜ ∩ B ∪ (C ∩ Bᶜ)ᶜ ∩ (Eᶜ ∪ A))ᶜ ∩ (B ∪ Eᶜᶜ)ᶜ = (Dᶜ ∩ C ∪ (B ∩ Aᶜ)ᶜ ∩ (Eᶜ ∪ E))ᶜ ∩ (D ∪ Cᶜᶜ)ᶜ\n/- Goals Accomplished! -/\n"}
{"prompt": "example (hAC : Disjoint A C) (hBC : Disjoint B C) :\n    A ∪ C ⊆ B ∪ C ↔ A ⊆ B := by\n  constructor <;> (intro; tauto_set)\nα : Type\nA B C D E : Set α\nhAC : Disjoint A C\nhBC : Disjoint B C\n⊢ A ∪ C ⊆ B ∪ C ↔ A ⊆ B\n", "full_text": "example (hAC : Disjoint A C) (hBC : Disjoint B C) :\n    A ∪ C ⊆ B ∪ C ↔ A ⊆ B := by\n  constructor <;> (intro; tauto_set)\nα : Type\nA B C D E : Set α\nhAC : Disjoint A C\nhBC : Disjoint B C\n⊢ A ∪ C ⊆ B ∪ C ↔ A ⊆ B\n/- Goals Accomplished! -/\n"}
{"prompt": "example : (fun₀ | 1 => 3 : Π₀ i, Fin (i + 10)) 1 = 3 := by\n  simp\n⊢ (fun₀ | 1 => 3) 1 = 3\n", "full_text": "example : (fun₀ | 1 => 3 : Π₀ i, Fin (i + 10)) 1 = 3 := by\n  simp\n⊢ (fun₀ | 1 => 3) 1 = 3\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : ((an + bn : ℕ) : ℤ) = (an : ℤ) + (bn : ℤ)) : True := by\n  push_cast at h\n  guard_hyp h : (an : ℤ) + (bn : ℤ) = (an : ℤ) + (bn : ℤ)\n  trivial\nan bn cn dn : ℕ\naz bz cz dz : ℤ\naq bq cq dq : ℚ\nar br cr dr : ℝ\nac bc cc dc : ℂ\nh : ↑(an + bn) = ↑an + ↑bn\n⊢ True\n", "full_text": "example (h : ((an + bn : ℕ) : ℤ) = (an : ℤ) + (bn : ℤ)) : True := by\n  push_cast at h\n  guard_hyp h : (an : ℤ) + (bn : ℤ) = (an : ℤ) + (bn : ℤ)\n  trivial\nan bn cn dn : ℕ\naz bz cz dz : ℤ\naq bq cq dq : ℚ\nar br cr dr : ℝ\nac bc cc dc : ℂ\nh : ↑(an + bn) = ↑an + ↑bn\n⊢ True\n/- an bn cn dn : ℕ\naz bz cz dz : ℤ\naq bq cq dq : ℚ\nar br cr dr : ℝ\nac bc cc dc : ℂ\nh : ↑an + ↑bn = ↑an + ↑bn\n⊢ True -/\n/- an bn cn dn : ℕ\naz bz cz dz : ℤ\naq bq cq dq : ℚ\nar br cr dr : ℝ\nac bc cc dc : ℂ\nh : ↑an + ↑bn = ↑an + ↑bn\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : ((an * bn : ℕ) : ℤ) = (an : ℤ) * (bn : ℤ)) : True := by\n  push_cast at h\n  guard_hyp h : (an : ℤ) * (bn : ℤ) = (an : ℤ) * (bn : ℤ)\n  trivial\nan bn cn dn : ℕ\naz bz cz dz : ℤ\naq bq cq dq : ℚ\nar br cr dr : ℝ\nac bc cc dc : ℂ\nh : ↑(an * bn) = ↑an * ↑bn\n⊢ True\n", "full_text": "example (h : ((an * bn : ℕ) : ℤ) = (an : ℤ) * (bn : ℤ)) : True := by\n  push_cast at h\n  guard_hyp h : (an : ℤ) * (bn : ℤ) = (an : ℤ) * (bn : ℤ)\n  trivial\nan bn cn dn : ℕ\naz bz cz dz : ℤ\naq bq cq dq : ℚ\nar br cr dr : ℝ\nac bc cc dc : ℂ\nh : ↑(an * bn) = ↑an * ↑bn\n⊢ True\n/- an bn cn dn : ℕ\naz bz cz dz : ℤ\naq bq cq dq : ℚ\nar br cr dr : ℝ\nac bc cc dc : ℂ\nh : ↑an * ↑bn = ↑an * ↑bn\n⊢ True -/\n/- an bn cn dn : ℕ\naz bz cz dz : ℤ\naq bq cq dq : ℚ\nar br cr dr : ℝ\nac bc cc dc : ℂ\nh : ↑an * ↑bn = ↑an * ↑bn\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : (((((an : ℚ) : ℝ) * bq) + (cq : ℝ) ^ dn) : ℂ) = (an : ℂ) * (bq : ℝ) + cq ^ dn := by\n  norm_cast\nan bn cn dn : ℕ\naz bz cz dz : ℤ\naq bq cq dq : ℚ\nar br cr dr : ℝ\nac bc cc dc : ℂ\n⊢ ↑↑↑an * ↑bq + ↑↑cq ^ dn = ↑an * ↑↑bq + ↑cq ^ dn\n", "full_text": "example : (((((an : ℚ) : ℝ) * bq) + (cq : ℝ) ^ dn) : ℂ) = (an : ℂ) * (bq : ℝ) + cq ^ dn := by\n  norm_cast\nan bn cn dn : ℕ\naz bz cz dz : ℤ\naq bq cq dq : ℚ\nar br cr dr : ℝ\nac bc cc dc : ℂ\n⊢ ↑↑↑an * ↑bq + ↑↑cq ^ dn = ↑an * ↑↑bq + ↑cq ^ dn\n/- Goals Accomplished! -/\n"}
{"prompt": "example : ((an : ℤ) : ℝ) < bq ∧ (cr : ℂ) ^ 2 = dz ↔ (an : ℚ) < bq ∧ ((cr ^ 2) : ℂ) = dz := by\n  norm_cast\nan bn cn dn : ℕ\naz bz cz dz : ℤ\naq bq cq dq : ℚ\nar br cr dr : ℝ\nac bc cc dc : ℂ\n⊢ ↑↑an < ↑bq ∧ ↑cr ^ 2 = ↑dz ↔ ↑an < bq ∧ ↑cr ^ 2 = ↑dz\n", "full_text": "example : ((an : ℤ) : ℝ) < bq ∧ (cr : ℂ) ^ 2 = dz ↔ (an : ℚ) < bq ∧ ((cr ^ 2) : ℂ) = dz := by\n  norm_cast\nan bn cn dn : ℕ\naz bz cz dz : ℤ\naq bq cq dq : ℚ\nar br cr dr : ℝ\nac bc cc dc : ℂ\n⊢ ↑↑an < ↑bq ∧ ↑cr ^ 2 = ↑dz ↔ ↑an < bq ∧ ↑cr ^ 2 = ↑dz\n/- Goals Accomplished! -/\n"}
{"prompt": "example : p 42 := by\n  norm_cast\n  guard_target = p 42\n  exact ⟨⟩\nan bn cn dn : ℕ\naz bz cz dz : ℤ\naq bq cq dq : ℚ\nar br cr dr : ℝ\nac bc cc dc : ℂ\nx✝ : Sort ?u.122\np : x✝\n⊢ sorry\n", "full_text": "example : p 42 := by\n  norm_cast\n  guard_target = p 42\n  exact ⟨⟩\nan bn cn dn : ℕ\naz bz cz dz : ℤ\naq bq cq dq : ℚ\nar br cr dr : ℝ\nac bc cc dc : ℂ\nx✝ : Sort ?u.122\np : x✝\n⊢ sorry\n/- an bn cn dn : ℕ\naz bz cz dz : ℤ\naq bq cq dq : ℚ\nar br cr dr : ℝ\nac bc cc dc : ℂ\nx✝ : Sort ?u.122\np : x✝\n⊢ sorry -/\n/- an bn cn dn : ℕ\naz bz cz dz : ℤ\naq bq cq dq : ℚ\nar br cr dr : ℝ\nac bc cc dc : ℂ\nx✝ : Sort ?u.122\np : x✝\n⊢ sorry -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (k : ℕ) {x y : ℕ} :\n    (x * x + y * y : ℤ) - ↑((x * y + 1) * k) = ↑y * ↑y - ↑k * ↑x * ↑y + (↑x * ↑x - ↑k) := by\n  push_cast\n  ring\nan bn cn dn : ℕ\naz bz cz dz : ℤ\naq bq cq dq : ℚ\nar br cr dr : ℝ\nac bc cc dc : ℂ\nk x y : ℕ\n⊢ ↑x * ↑x + ↑y * ↑y - ↑((x * y + 1) * k) = ↑y * ↑y - ↑k * ↑x * ↑y + (↑x * ↑x - ↑k)\n", "full_text": "example (k : ℕ) {x y : ℕ} :\n    (x * x + y * y : ℤ) - ↑((x * y + 1) * k) = ↑y * ↑y - ↑k * ↑x * ↑y + (↑x * ↑x - ↑k) := by\n  push_cast\n  ring\nan bn cn dn : ℕ\naz bz cz dz : ℤ\naq bq cq dq : ℚ\nar br cr dr : ℝ\nac bc cc dc : ℂ\nk x y : ℕ\n⊢ ↑x * ↑x + ↑y * ↑y - ↑((x * y + 1) * k) = ↑y * ↑y - ↑k * ↑x * ↑y + (↑x * ↑x - ↑k)\n/- an bn cn dn : ℕ\naz bz cz dz : ℤ\naq bq cq dq : ℚ\nar br cr dr : ℝ\nac bc cc dc : ℂ\nk x y : ℕ\n⊢ ↑x * ↑x + ↑y * ↑y - (↑x * ↑y + 1) * ↑k = ↑y * ↑y - ↑k * ↑x * ↑y + (↑x * ↑x - ↑k) -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (k : ℕ) {x y : ℕ} (h : ((x + y + k : ℕ) : ℤ) = 0) : x + y + k = 0 := by\n  push_cast at h\n  guard_hyp h : (x : ℤ) + y + k = 0\n  assumption_mod_cast\nan bn cn dn : ℕ\naz bz cz dz : ℤ\naq bq cq dq : ℚ\nar br cr dr : ℝ\nac bc cc dc : ℂ\nk x y : ℕ\nh : ↑(x + y + k) = 0\n⊢ x + y + k = 0\n", "full_text": "example (k : ℕ) {x y : ℕ} (h : ((x + y + k : ℕ) : ℤ) = 0) : x + y + k = 0 := by\n  push_cast at h\n  guard_hyp h : (x : ℤ) + y + k = 0\n  assumption_mod_cast\nan bn cn dn : ℕ\naz bz cz dz : ℤ\naq bq cq dq : ℚ\nar br cr dr : ℝ\nac bc cc dc : ℂ\nk x y : ℕ\nh : ↑(x + y + k) = 0\n⊢ x + y + k = 0\n/- an bn cn dn : ℕ\naz bz cz dz : ℤ\naq bq cq dq : ℚ\nar br cr dr : ℝ\nac bc cc dc : ℂ\nk x y : ℕ\nh : ↑x + ↑y + ↑k = 0\n⊢ x + y + k = 0 -/\n/- an bn cn dn : ℕ\naz bz cz dz : ℤ\naq bq cq dq : ℚ\nar br cr dr : ℝ\nac bc cc dc : ℂ\nk x y : ℕ\nh : ↑x + ↑y + ↑k = 0\n⊢ x + y + k = 0 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b : ℕ) (h2 : ((a + b + 0 : ℕ) : ℤ) = 10) :\n    ((a + b : ℕ) : ℤ) = 10 := by\n  push_cast\n  push_cast [Int.add_zero] at h2\n  exact h2\nan bn cn dn : ℕ\naz bz cz dz : ℤ\naq bq cq dq : ℚ\nar br cr dr : ℝ\nac bc cc dc : ℂ\na b : ℕ\nh2 : ↑(a + b + 0) = 10\n⊢ ↑(a + b) = 10\n", "full_text": "example (a b : ℕ) (h2 : ((a + b + 0 : ℕ) : ℤ) = 10) :\n    ((a + b : ℕ) : ℤ) = 10 := by\n  push_cast\n  push_cast [Int.add_zero] at h2\n  exact h2\nan bn cn dn : ℕ\naz bz cz dz : ℤ\naq bq cq dq : ℚ\nar br cr dr : ℝ\nac bc cc dc : ℂ\na b : ℕ\nh2 : ↑(a + b + 0) = 10\n⊢ ↑(a + b) = 10\n/- an bn cn dn : ℕ\naz bz cz dz : ℤ\naq bq cq dq : ℚ\nar br cr dr : ℝ\nac bc cc dc : ℂ\na b : ℕ\nh2 : ↑(a + b + 0) = 10\n⊢ ↑a + ↑b = 10 -/\n/- an bn cn dn : ℕ\naz bz cz dz : ℤ\naq bq cq dq : ℚ\nar br cr dr : ℝ\nac bc cc dc : ℂ\na b : ℕ\nh2 : ↑a + ↑b = 10\n⊢ ↑a + ↑b = 10 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "lemma b (_h g : true) : true ∧ true := by\n  constructor\n  assumption_mod_cast\n  assumption_mod_cast\n_h g : true = true\n⊢ true = true ∧ true = true\n", "full_text": "lemma b (_h g : true) : true ∧ true := by\n  constructor\n  assumption_mod_cast\n  assumption_mod_cast\n_h g : true = true\n⊢ true = true ∧ true = true\n/- case left\n_h g : true = true\n⊢ true = true\n---\ncase right\n_h g : true = true\n⊢ true = true -/\n/- case right\n_h g : true = true\n⊢ true = true -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : ∀ x : ℕ, 2 ∣ x → x < 100 := by\n  plausible (config := { randomSeed := some 257, maxSize := 200 })\n⊢ ∀ (x : ℕ), 2 ∣ x → x < 100\n", "full_text": "example : ∀ x : ℕ, 2 ∣ x → x < 100 := by\n  plausible (config := { randomSeed := some 257, maxSize := 200 })\n⊢ ∀ (x : ℕ), 2 ∣ x → x < 100\n/- ⊢ ∀ (x : ℕ), 2 ∣ x → x < 100 -/\n"}
{"prompt": "example (x : ℕ) (_h : 2 ∣ x) : true := by\n  have : x < 100 := by\n    success_if_fail_with_msg\n    \"\nx : ℕ\n_h : 2 ∣ x\n⊢ true = true\n", "full_text": "example (x : ℕ) (_h : 2 ∣ x) : true := by\n  have : x < 100 := by\n    success_if_fail_with_msg\n    \"\nx : ℕ\n_h : 2 ∣ x\n⊢ true = true\n/- x : ℕ\n_h : 2 ∣ x\nthis : x < 100\n⊢ true = true -/\n"}
{"prompt": "example (f : ℤ → ℤ) (_h : Injective f) (g : ℤ → ℤ) (_h : Injective g) (i : ℤ) : f i = g i := by\n  plausible (config := { randomSeed := some 257 })\nf : ℤ → ℤ\n_h✝ : Injective f\ng : ℤ → ℤ\n_h : Injective g\ni : ℤ\n⊢ f i = g i\n", "full_text": "example (f : ℤ → ℤ) (_h : Injective f) (g : ℤ → ℤ) (_h : Injective g) (i : ℤ) : f i = g i := by\n  plausible (config := { randomSeed := some 257 })\nf : ℤ → ℤ\n_h✝ : Injective f\ng : ℤ → ℤ\n_h : Injective g\ni : ℤ\n⊢ f i = g i\n/- Goals Accomplished! -/\n"}
{"prompt": "example (f : ℤ → ℤ) (_h : Injective f) : Monotone f := by\n  plausible (config := { randomSeed := some 257 })\nf : ℤ → ℤ\n_h : Injective f\n⊢ Monotone f\n", "full_text": "example (f : ℤ → ℤ) (_h : Injective f) : Monotone f := by\n  plausible (config := { randomSeed := some 257 })\nf : ℤ → ℤ\n_h : Injective f\n⊢ Monotone f\n/- Goals Accomplished! -/\n"}
{"prompt": "example (f : ℤ → ℤ) : Injective f := by\n  plausible (config := { randomSeed := some 257 })\nf : ℤ → ℤ\n⊢ Injective f\n", "full_text": "example (f : ℤ → ℤ) : Injective f := by\n  plausible (config := { randomSeed := some 257 })\nf : ℤ → ℤ\n⊢ Injective f\n/- Goals Accomplished! -/\n"}
{"prompt": "example (f : ℤ → ℤ) : Monotone f := by\n  plausible (config := { randomSeed := some 257 })\nf : ℤ → ℤ\n⊢ Monotone f\n", "full_text": "example (f : ℤ → ℤ) : Monotone f := by\n  plausible (config := { randomSeed := some 257 })\nf : ℤ → ℤ\n⊢ Monotone f\n/- Goals Accomplished! -/\n"}
{"prompt": "example (f : ℕ →₀ ℕ) : true := by\n  have : f = 0 := by\n    success_if_fail_with_msg\n    \"\nf : ℕ →₀ ℕ\n⊢ true = true\n", "full_text": "example (f : ℕ →₀ ℕ) : true := by\n  have : f = 0 := by\n    success_if_fail_with_msg\n    \"\nf : ℕ →₀ ℕ\n⊢ true = true\n/- f : ℕ →₀ ℕ\nthis : f = 0\n⊢ true = true -/\n"}
{"prompt": "example (f : Π₀ _n : ℕ, ℕ) : true := by\n  have : f.update 0 0 = 0 := by\n    success_if_fail_with_msg\n    \"\nf : Π₀ (_n : ℕ), ℕ\n⊢ true = true\n", "full_text": "example (f : Π₀ _n : ℕ, ℕ) : true := by\n  have : f.update 0 0 = 0 := by\n    success_if_fail_with_msg\n    \"\nf : Π₀ (_n : ℕ), ℕ\n⊢ true = true\n/- f : Π₀ (_n : ℕ), ℕ\nthis : f.update 0 0 = 0\n⊢ true = true -/\n"}
{"prompt": "example (n : ℕ) : true := by\n  have : ∑ f : Unit → Fin (n + 1), f () = 0 := by\n    success_if_fail_with_msg \"\nn : ℕ\n⊢ true = true\n", "full_text": "example (n : ℕ) : true := by\n  have : ∑ f : Unit → Fin (n + 1), f () = 0 := by\n    success_if_fail_with_msg \"\nn : ℕ\n⊢ true = true\n/- n : ℕ\nthis : ∑ f, f () = 0\n⊢ true = true -/\n"}
{"prompt": "example (q : ℕ) : q = 0 ∨ q ≥ 2 ∨\n    8 = ∑ k ∈ Finset.range 2, 5 ^ k * Nat.choose (2 * q + 1) (2 * k + 1) := by\n  plausible\nq : ℕ\n⊢ q = 0 ∨ q ≥ 2 ∨ 8 = ∑ k ∈ Finset.range 2, 5 ^ k * (2 * q + 1).choose (2 * k + 1)\n", "full_text": "example (q : ℕ) : q = 0 ∨ q ≥ 2 ∨\n    8 = ∑ k ∈ Finset.range 2, 5 ^ k * Nat.choose (2 * q + 1) (2 * k + 1) := by\n  plausible\nq : ℕ\n⊢ q = 0 ∨ q ≥ 2 ∨ 8 = ∑ k ∈ Finset.range 2, 5 ^ k * (2 * q + 1).choose (2 * k + 1)\n/- Goals Accomplished! -/\n"}
{"prompt": "example {a : ℕ} [Fact a.Prime] : (a + 1).Prime ∨ (a + 2).Prime := by\n  plausible (config := { randomSeed := some 257 })\na : ℕ\ninst✝ : Fact (Nat.Prime a)\n⊢ Nat.Prime (a + 1) ∨ Nat.Prime (a + 2)\n", "full_text": "example {a : ℕ} [Fact a.Prime] : (a + 1).Prime ∨ (a + 2).Prime := by\n  plausible (config := { randomSeed := some 257 })\na : ℕ\ninst✝ : Fact (Nat.Prime a)\n⊢ Nat.Prime (a + 1) ∨ Nat.Prime (a + 2)\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x : PNat) : x^3 < 2*x^2 + 10:= by\n  plausible (config := { randomSeed := some 257 })\nx : ℕ+\n⊢ x ^ 3 < 2 * x ^ 2 + 10\n", "full_text": "example (x : PNat) : x^3 < 2*x^2 + 10:= by\n  plausible (config := { randomSeed := some 257 })\nx : ℕ+\n⊢ x ^ 3 < 2 * x ^ 2 + 10\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c d : Nat) (f : Nat → Nat → Nat) :\n    a = b → b = c → d + (if b > 0 then a else b) = 0 → f (b + b) b ≠ f (a + c) c → False := by\n  intro _ _ _ h\n  run_tac withMainContext do\n    let s ← CCState.mkUsingHs\n    logInfo (toMessageData s)\n    let some (_, t₁, t₂) ← liftM <| getFVarFromUserName `h >>= inferType >>= matchNe? | failure\n    let b ← getFVarFromUserName `b\n    let d ← getFVarFromUserName `d\n    guard s.inconsistent\n    guard (s.eqcSize b = 4)\n    guard !(s.inSingletonEqc b)\n    guard (s.inSingletonEqc d)\n    logInfo (m!\">>> Equivalence roots\" ++ .ofFormat .line ++ toMessageData s.roots)\n    logInfo (m!\">>> b's equivalence class\" ++ .ofFormat .line ++ toMessageData (s.eqcOf b))\n    let pr ← s.eqvProof t₁ t₂\n    let spr ← Term.exprToSyntax pr\n    evalTactic <| ← `(tactic| have h := $spr; contradiction)\na b c d : ℕ\nf : ℕ → ℕ → ℕ\n⊢ a = b → b = c → (d + if b > 0 then a else b) = 0 → f (b + b) b ≠ f (a + c) c → False\n", "full_text": "example (a b c d : Nat) (f : Nat → Nat → Nat) :\n    a = b → b = c → d + (if b > 0 then a else b) = 0 → f (b + b) b ≠ f (a + c) c → False := by\n  intro _ _ _ h\n  run_tac withMainContext do\n    let s ← CCState.mkUsingHs\n    logInfo (toMessageData s)\n    let some (_, t₁, t₂) ← liftM <| getFVarFromUserName `h >>= inferType >>= matchNe? | failure\n    let b ← getFVarFromUserName `b\n    let d ← getFVarFromUserName `d\n    guard s.inconsistent\n    guard (s.eqcSize b = 4)\n    guard !(s.inSingletonEqc b)\n    guard (s.inSingletonEqc d)\n    logInfo (m!\">>> Equivalence roots\" ++ .ofFormat .line ++ toMessageData s.roots)\n    logInfo (m!\">>> b's equivalence class\" ++ .ofFormat .line ++ toMessageData (s.eqcOf b))\n    let pr ← s.eqvProof t₁ t₂\n    let spr ← Term.exprToSyntax pr\n    evalTactic <| ← `(tactic| have h := $spr; contradiction)\na b c d : ℕ\nf : ℕ → ℕ → ℕ\n⊢ a = b → b = c → (d + if b > 0 then a else b) = 0 → f (b + b) b ≠ f (a + c) c → False\n/- a b c d : ℕ\nf : ℕ → ℕ → ℕ\na✝² : a = b\na✝¹ : b = c\na✝ : (d + if b > 0 then a else b) = 0\nh : f (b + b) b ≠ f (a + c) c\n⊢ False -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b : Nat) (f : Nat → Nat) : a = b → f a = f b := by\n  cc\na b : ℕ\nf : ℕ → ℕ\n⊢ a = b → f a = f b\n", "full_text": "example (a b : Nat) (f : Nat → Nat) : a = b → f a = f b := by\n  cc\na b : ℕ\nf : ℕ → ℕ\n⊢ a = b → f a = f b\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b : Nat) (f : Nat → Nat) : a = b → f a ≠ f b → False := by\n  cc\na b : ℕ\nf : ℕ → ℕ\n⊢ a = b → f a ≠ f b → False\n", "full_text": "example (a b : Nat) (f : Nat → Nat) : a = b → f a ≠ f b → False := by\n  cc\na b : ℕ\nf : ℕ → ℕ\n⊢ a = b → f a ≠ f b → False\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b : Nat) (f : Nat → Nat) : a = b → f (f a) ≠ f (f b) → False := by\n  cc\na b : ℕ\nf : ℕ → ℕ\n⊢ a = b → f (f a) ≠ f (f b) → False\n", "full_text": "example (a b : Nat) (f : Nat → Nat) : a = b → f (f a) ≠ f (f b) → False := by\n  cc\na b : ℕ\nf : ℕ → ℕ\n⊢ a = b → f (f a) ≠ f (f b) → False\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c : Nat) (f : Nat → Nat) : a = b → c = b → f (f a) ≠ f (f c) → False := by\n  cc\na b c : ℕ\nf : ℕ → ℕ\n⊢ a = b → c = b → f (f a) ≠ f (f c) → False\n", "full_text": "example (a b c : Nat) (f : Nat → Nat) : a = b → c = b → f (f a) ≠ f (f c) → False := by\n  cc\na b c : ℕ\nf : ℕ → ℕ\n⊢ a = b → c = b → f (f a) ≠ f (f c) → False\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c : Nat) (f : Nat → Nat → Nat) :\n    a = b → c = b → f (f a b) a ≠ f (f c c) c → False := by\n  cc\na b c : ℕ\nf : ℕ → ℕ → ℕ\n⊢ a = b → c = b → f (f a b) a ≠ f (f c c) c → False\n", "full_text": "example (a b c : Nat) (f : Nat → Nat → Nat) :\n    a = b → c = b → f (f a b) a ≠ f (f c c) c → False := by\n  cc\na b c : ℕ\nf : ℕ → ℕ → ℕ\n⊢ a = b → c = b → f (f a b) a ≠ f (f c c) c → False\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c : Nat) (f : Nat → Nat → Nat) : a = b → c = b → f (f a b) a = f (f c c) c := by\n  cc\na b c : ℕ\nf : ℕ → ℕ → ℕ\n⊢ a = b → c = b → f (f a b) a = f (f c c) c\n", "full_text": "example (a b c : Nat) (f : Nat → Nat → Nat) : a = b → c = b → f (f a b) a = f (f c c) c := by\n  cc\na b c : ℕ\nf : ℕ → ℕ → ℕ\n⊢ a = b → c = b → f (f a b) a = f (f c c) c\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c d : Nat) : HEq a b → b = c → HEq c d → HEq a d := by\n  cc\na b c d : ℕ\n⊢ HEq a b → b = c → HEq c d → HEq a d\n", "full_text": "example (a b c d : Nat) : HEq a b → b = c → HEq c d → HEq a d := by\n  cc\na b c d : ℕ\n⊢ HEq a b → b = c → HEq c d → HEq a d\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c d : Nat) : a = b → b = c → HEq c d → HEq a d := by\n  cc\na b c d : ℕ\n⊢ a = b → b = c → HEq c d → HEq a d\n", "full_text": "example (a b c d : Nat) : a = b → b = c → HEq c d → HEq a d := by\n  cc\na b c d : ℕ\n⊢ a = b → b = c → HEq c d → HEq a d\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c d : Nat) : a = b → HEq b c → HEq c d → HEq a d := by\n  cc\na b c d : ℕ\n⊢ a = b → HEq b c → HEq c d → HEq a d\n", "full_text": "example (a b c d : Nat) : a = b → HEq b c → HEq c d → HEq a d := by\n  cc\na b c d : ℕ\n⊢ a = b → HEq b c → HEq c d → HEq a d\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c d : Nat) : HEq a b → HEq b c → c = d → HEq a d := by\n  cc\na b c d : ℕ\n⊢ HEq a b → HEq b c → c = d → HEq a d\n", "full_text": "example (a b c d : Nat) : HEq a b → HEq b c → c = d → HEq a d := by\n  cc\na b c d : ℕ\n⊢ HEq a b → HEq b c → c = d → HEq a d\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c d : Nat) : HEq a b → b = c → c = d → HEq a d := by\n  cc\na b c d : ℕ\n⊢ HEq a b → b = c → c = d → HEq a d\n", "full_text": "example (a b c d : Nat) : HEq a b → b = c → c = d → HEq a d := by\n  cc\na b c d : ℕ\n⊢ HEq a b → b = c → c = d → HEq a d\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c d : Nat) : a = b → b = c → c = d → HEq a d := by\n  cc\na b c d : ℕ\n⊢ a = b → b = c → c = d → HEq a d\n", "full_text": "example (a b c d : Nat) : a = b → b = c → c = d → HEq a d := by\n  cc\na b c d : ℕ\n⊢ a = b → b = c → c = d → HEq a d\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c d : Nat) : a = b → HEq b c → c = d → HEq a d := by\n  cc\na b c d : ℕ\n⊢ a = b → HEq b c → c = d → HEq a d\n", "full_text": "example (a b c d : Nat) : a = b → HEq b c → c = d → HEq a d := by\n  cc\na b c d : ℕ\n⊢ a = b → HEq b c → c = d → HEq a d\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c : Nat) : a = b → HEq (g₁ a) (g₁ b) := by\n  cc\nx✝ : Sort u_1\ng₁ : x✝\na b c : ℕ\n⊢ a = b → HEq sorry sorry\n", "full_text": "example (a b c : Nat) : a = b → HEq (g₁ a) (g₁ b) := by\n  cc\nx✝ : Sort u_1\ng₁ : x✝\na b c : ℕ\n⊢ a = b → HEq sorry sorry\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c : Nat) : a = b → c = b → f₁ (f₁ a b) (g₁ c) = f₁ (f₁ c a) (g₁ b) := by\n  cc\nx✝ : Sort u_1\nf₁ : x✝\na b c : ℕ\n⊢ a = b → c = b → sorry = sorry\n", "full_text": "example (a b c : Nat) : a = b → c = b → f₁ (f₁ a b) (g₁ c) = f₁ (f₁ c a) (g₁ b) := by\n  cc\nx✝ : Sort u_1\nf₁ : x✝\na b c : ℕ\n⊢ a = b → c = b → sorry = sorry\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c d e x y : Nat) : a = b → a = x → b = y → c = d → c = e → c = b → a = e := by\n  cc\na b c d e x y : ℕ\n⊢ a = b → a = x → b = y → c = d → c = e → c = b → a = e\n", "full_text": "example (a b c d e x y : Nat) : a = b → a = x → b = y → c = d → c = e → c = b → a = e := by\n  cc\na b c d e x y : ℕ\n⊢ a = b → a = x → b = y → c = d → c = e → c = b → a = e\n/- Goals Accomplished! -/\n"}
{"prompt": "example (f : ℕ → ℕ) (x : ℕ) (H1 : f (f (f x)) = x) (H2 : f (f (f (f (f x)))) = x) : f x = x := by\n  cc\nf : ℕ → ℕ\nx : ℕ\nH1 : f (f (f x)) = x\nH2 : f (f (f (f (f x)))) = x\n⊢ f x = x\n", "full_text": "example (f : ℕ → ℕ) (x : ℕ) (H1 : f (f (f x)) = x) (H2 : f (f (f (f (f x)))) = x) : f x = x := by\n  cc\nf : ℕ → ℕ\nx : ℕ\nH1 : f (f (f x)) = x\nH2 : f (f (f (f (f x)))) = x\n⊢ f x = x\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a₁ a₂ b₁ b₂ c d : Nat)\n        (H₁ : a₁ > b₁)\n        (H₂ : a₂ > b₂) :\n        a₁ = c → a₂ = c →\n        b₁ = d → d  = b₂ →\n        g₂ (g₂ (f₂ a₁ b₁ H₁)) = g₂ (g₂ (f₂ a₂ b₂ H₂)) := by\n  cc\nx✝ : Sort u_1\ng₂ : x✝\na₁ a₂ b₁ b₂ c d : ℕ\nH₁ : a₁ > b₁\nH₂ : a₂ > b₂\n⊢ a₁ = c → a₂ = c → b₁ = d → d = b₂ → sorry = sorry\n", "full_text": "example (a₁ a₂ b₁ b₂ c d : Nat)\n        (H₁ : a₁ > b₁)\n        (H₂ : a₂ > b₂) :\n        a₁ = c → a₂ = c →\n        b₁ = d → d  = b₂ →\n        g₂ (g₂ (f₂ a₁ b₁ H₁)) = g₂ (g₂ (f₂ a₂ b₂ H₂)) := by\n  cc\nx✝ : Sort u_1\ng₂ : x✝\na₁ a₂ b₁ b₂ c d : ℕ\nH₁ : a₁ > b₁\nH₂ : a₂ > b₂\n⊢ a₁ = c → a₂ = c → b₁ = d → d = b₂ → sorry = sorry\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a₁ a₂ b₁ b₂ c d : Nat) :\n        a₁ = c → a₂ = c →\n        b₁ = d → d  = b₂ →\n        a₁ + b₁ + a₁ = a₂ + b₂ + c := by\n  cc\na₁ a₂ b₁ b₂ c d : ℕ\n⊢ a₁ = c → a₂ = c → b₁ = d → d = b₂ → a₁ + b₁ + a₁ = a₂ + b₂ + c\n", "full_text": "example (a₁ a₂ b₁ b₂ c d : Nat) :\n        a₁ = c → a₂ = c →\n        b₁ = d → d  = b₂ →\n        a₁ + b₁ + a₁ = a₂ + b₂ + c := by\n  cc\na₁ a₂ b₁ b₂ c d : ℕ\n⊢ a₁ = c → a₂ = c → b₁ = d → d = b₂ → a₁ + b₁ + a₁ = a₂ + b₂ + c\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c : Prop) : (a ↔ b) → ((a ∧ (c ∨ b)) ↔ (b ∧ (c ∨ a))) := by\n  cc\na b c : Prop\n⊢ (a ↔ b) → (a ∧ (c ∨ b) ↔ b ∧ (c ∨ a))\n", "full_text": "example (a b c : Prop) : (a ↔ b) → ((a ∧ (c ∨ b)) ↔ (b ∧ (c ∨ a))) := by\n  cc\na b c : Prop\n⊢ (a ↔ b) → (a ∧ (c ∨ b) ↔ b ∧ (c ∨ a))\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c d : Prop)\n    [d₁ : Decidable a] [d₂ : Decidable b] [d₃ : Decidable c] [d₄ : Decidable d] :\n    (a ↔ b) → (c ↔ d) →\n      ((if (a ∧ c) then True else False) ↔ (if (b ∧ d) then True else False)) := by\n  cc\na b c d : Prop\nd₁ : Decidable a\nd₂ : Decidable b\nd₃ : Decidable c\nd₄ : Decidable d\n⊢ (a ↔ b) → (c ↔ d) → ((if a ∧ c then True else False) ↔ if b ∧ d then True else False)\n", "full_text": "example (a b c d : Prop)\n    [d₁ : Decidable a] [d₂ : Decidable b] [d₃ : Decidable c] [d₄ : Decidable d] :\n    (a ↔ b) → (c ↔ d) →\n      ((if (a ∧ c) then True else False) ↔ (if (b ∧ d) then True else False)) := by\n  cc\na b c d : Prop\nd₁ : Decidable a\nd₂ : Decidable b\nd₃ : Decidable c\nd₄ : Decidable d\n⊢ (a ↔ b) → (c ↔ d) → ((if a ∧ c then True else False) ↔ if b ∧ d then True else False)\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c d : Prop) (x y z : Nat)\n    [d₁ : Decidable a] [d₂ : Decidable b] [d₃ : Decidable c] [d₄ : Decidable d] :\n    (a ↔ b) → (c ↔ d) → x = y →\n      ((if (a ∧ c ∧ a) then x else y) = (if (b ∧ d ∧ b) then y else x)) := by\n  cc\na b c d : Prop\nx y z : ℕ\nd₁ : Decidable a\nd₂ : Decidable b\nd₃ : Decidable c\nd₄ : Decidable d\n⊢ (a ↔ b) → (c ↔ d) → x = y → (if a ∧ c ∧ a then x else y) = if b ∧ d ∧ b then y else x\n", "full_text": "example (a b c d : Prop) (x y z : Nat)\n    [d₁ : Decidable a] [d₂ : Decidable b] [d₃ : Decidable c] [d₄ : Decidable d] :\n    (a ↔ b) → (c ↔ d) → x = y →\n      ((if (a ∧ c ∧ a) then x else y) = (if (b ∧ d ∧ b) then y else x)) := by\n  cc\na b c d : Prop\nx y z : ℕ\nd₁ : Decidable a\nd₂ : Decidable b\nd₃ : Decidable c\nd₄ : Decidable d\n⊢ (a ↔ b) → (c ↔ d) → x = y → (if a ∧ c ∧ a then x else y) = if b ∧ d ∧ b then y else x\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b : Nat) : (a = b ↔ a = b) := by\n  cc\na b : ℕ\n⊢ a = b ↔ a = b\n", "full_text": "example (a b : Nat) : (a = b ↔ a = b) := by\n  cc\na b : ℕ\n⊢ a = b ↔ a = b\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b : Nat) : (a = b) = (b = a) := by\n  cc\na b : ℕ\n⊢ (a = b) = (b = a)\n", "full_text": "example (a b : Nat) : (a = b) = (b = a) := by\n  cc\na b : ℕ\n⊢ (a = b) = (b = a)\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b : Nat) : HEq (a = b) (b = a) := by\n  cc\na b : ℕ\n⊢ HEq (a = b) (b = a)\n", "full_text": "example (a b : Nat) : HEq (a = b) (b = a) := by\n  cc\na b : ℕ\n⊢ HEq (a = b) (b = a)\n/- Goals Accomplished! -/\n"}
{"prompt": "example (p : Nat → Nat → Prop) (f : Nat → Nat) (a b c d : Nat) :\n    p (f a) (f b) → a = c → b = d → b = c → p (f c) (f c) := by\n  cc\np : ℕ → ℕ → Prop\nf : ℕ → ℕ\na b c d : ℕ\n⊢ p (f a) (f b) → a = c → b = d → b = c → p (f c) (f c)\n", "full_text": "example (p : Nat → Nat → Prop) (f : Nat → Nat) (a b c d : Nat) :\n    p (f a) (f b) → a = c → b = d → b = c → p (f c) (f c) := by\n  cc\np : ℕ → ℕ → Prop\nf : ℕ → ℕ\na b c d : ℕ\n⊢ p (f a) (f b) → a = c → b = d → b = c → p (f c) (f c)\n/- Goals Accomplished! -/\n"}
{"prompt": "example (p : Nat → Nat → Prop) (a b c d : Nat) :\n    p a b → a = c → b = d → p c d := by\n  cc\np : ℕ → ℕ → Prop\na b c d : ℕ\n⊢ p a b → a = c → b = d → p c d\n", "full_text": "example (p : Nat → Nat → Prop) (a b c d : Nat) :\n    p a b → a = c → b = d → p c d := by\n  cc\np : ℕ → ℕ → Prop\na b c d : ℕ\n⊢ p a b → a = c → b = d → p c d\n/- Goals Accomplished! -/\n"}
{"prompt": "example (p : Nat → Nat → Prop) (f : Nat → Nat) (a b c d : Nat) :\n    p (f (f (f (f (f (f a))))))\n      (f (f (f (f (f (f b)))))) →\n    a = c → b = d → b = c →\n    p (f (f (f (f (f (f c))))))\n      (f (f (f (f (f (f c)))))) := by\n  cc\np : ℕ → ℕ → Prop\nf : ℕ → ℕ\na b c d : ℕ\n⊢ p (f (f (f (f (f (f a)))))) (f (f (f (f (f (f b)))))) →\n    a = c → b = d → b = c → p (f (f (f (f (f (f c)))))) (f (f (f (f (f (f c))))))\n", "full_text": "example (p : Nat → Nat → Prop) (f : Nat → Nat) (a b c d : Nat) :\n    p (f (f (f (f (f (f a))))))\n      (f (f (f (f (f (f b)))))) →\n    a = c → b = d → b = c →\n    p (f (f (f (f (f (f c))))))\n      (f (f (f (f (f (f c)))))) := by\n  cc\np : ℕ → ℕ → Prop\nf : ℕ → ℕ\na b c d : ℕ\n⊢ p (f (f (f (f (f (f a)))))) (f (f (f (f (f (f b)))))) →\n    a = c → b = d → b = c → p (f (f (f (f (f (f c)))))) (f (f (f (f (f (f c))))))\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c : Nat) : a = b → R a b → R a a := by\n  cc\nx✝ : Sort ?u.13\nR : x✝\na b c : ℕ\n⊢ a = b → sorry → sorry\n", "full_text": "example (a b c : Nat) : a = b → R a b → R a a := by\n  cc\nx✝ : Sort ?u.13\nR : x✝\na b c : ℕ\n⊢ a = b → sorry → sorry\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c : Prop) : a = b → b = c → (a ↔ c) := by\n  cc\na b c : Prop\n⊢ a = b → b = c → (a ↔ c)\n", "full_text": "example (a b c : Prop) : a = b → b = c → (a ↔ c) := by\n  cc\na b c : Prop\n⊢ a = b → b = c → (a ↔ c)\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c : Prop) : a = b → HEq b c → (a ↔ c) := by\n  cc\na b c : Prop\n⊢ a = b → HEq b c → (a ↔ c)\n", "full_text": "example (a b c : Prop) : a = b → HEq b c → (a ↔ c) := by\n  cc\na b c : Prop\n⊢ a = b → HEq b c → (a ↔ c)\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c : Nat) : HEq a b → b = c → HEq a c := by\n  cc\na b c : ℕ\n⊢ HEq a b → b = c → HEq a c\n", "full_text": "example (a b c : Nat) : HEq a b → b = c → HEq a c := by\n  cc\na b c : ℕ\n⊢ HEq a b → b = c → HEq a c\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c : Nat) : HEq a b → b = c → a = c := by\n  cc\na b c : ℕ\n⊢ HEq a b → b = c → a = c\n", "full_text": "example (a b c : Nat) : HEq a b → b = c → a = c := by\n  cc\na b c : ℕ\n⊢ HEq a b → b = c → a = c\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c d : Nat) : HEq a b → HEq b c → HEq c d → a = d := by\n  cc\na b c d : ℕ\n⊢ HEq a b → HEq b c → HEq c d → a = d\n", "full_text": "example (a b c d : Nat) : HEq a b → HEq b c → HEq c d → a = d := by\n  cc\na b c d : ℕ\n⊢ HEq a b → HEq b c → HEq c d → a = d\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c d : Nat) : HEq a b → b = c → HEq c d → a = d := by\n  cc\na b c d : ℕ\n⊢ HEq a b → b = c → HEq c d → a = d\n", "full_text": "example (a b c d : Nat) : HEq a b → b = c → HEq c d → a = d := by\n  cc\na b c d : ℕ\n⊢ HEq a b → b = c → HEq c d → a = d\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c : Prop) : a = b → b = c → (a ↔ c) := by\n  cc\na b c : Prop\n⊢ a = b → b = c → (a ↔ c)\n", "full_text": "example (a b c : Prop) : a = b → b = c → (a ↔ c) := by\n  cc\na b c : Prop\n⊢ a = b → b = c → (a ↔ c)\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c : Prop) : HEq a b → b = c → (a ↔ c) := by\n  cc\na b c : Prop\n⊢ HEq a b → b = c → (a ↔ c)\n", "full_text": "example (a b c : Prop) : HEq a b → b = c → (a ↔ c) := by\n  cc\na b c : Prop\n⊢ HEq a b → b = c → (a ↔ c)\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c d : Prop) : HEq a b → HEq b c → HEq c d → (a ↔ d) := by\n  cc\na b c d : Prop\n⊢ HEq a b → HEq b c → HEq c d → (a ↔ d)\n", "full_text": "example (a b c d : Prop) : HEq a b → HEq b c → HEq c d → (a ↔ d) := by\n  cc\na b c d : Prop\n⊢ HEq a b → HEq b c → HEq c d → (a ↔ d)\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c : Nat) (f : Nat → Nat) : HEq a b → b = c → HEq (f a) (f c) := by\n  cc\na b c : ℕ\nf : ℕ → ℕ\n⊢ HEq a b → b = c → HEq (f a) (f c)\n", "full_text": "example (a b c : Nat) (f : Nat → Nat) : HEq a b → b = c → HEq (f a) (f c) := by\n  cc\na b c : ℕ\nf : ℕ → ℕ\n⊢ HEq a b → b = c → HEq (f a) (f c)\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c : Nat) (f : Nat → Nat) : HEq a b → b = c → f a = f c := by\n  cc\na b c : ℕ\nf : ℕ → ℕ\n⊢ HEq a b → b = c → f a = f c\n", "full_text": "example (a b c : Nat) (f : Nat → Nat) : HEq a b → b = c → f a = f c := by\n  cc\na b c : ℕ\nf : ℕ → ℕ\n⊢ HEq a b → b = c → f a = f c\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c d : Nat) (f : Nat → Nat) : HEq a b → b = c → HEq c (f d) → f a = f (f d) := by\n  cc\na b c d : ℕ\nf : ℕ → ℕ\n⊢ HEq a b → b = c → HEq c (f d) → f a = f (f d)\n", "full_text": "example (a b c d : Nat) (f : Nat → Nat) : HEq a b → b = c → HEq c (f d) → f a = f (f d) := by\n  cc\na b c d : ℕ\nf : ℕ → ℕ\n⊢ HEq a b → b = c → HEq c (f d) → f a = f (f d)\n/- Goals Accomplished! -/\n"}
{"prompt": "example (n1 n2 n3 : Nat)\n    (v1 w1 : List.Vector Nat n1) (w1' : List.Vector Nat n3) (v2 w2 : List.Vector Nat n2) :\n    n1 = n3 → v1 = w1 → HEq w1 w1' → v2 = w2 → HEq (app v1 v2) (app w1' w2) := by\n  cc\nx✝ : Sort u_1\napp : x✝\nn1 n2 n3 : ℕ\nv1 w1 : List.Vector ℕ n1\nw1' : List.Vector ℕ n3\nv2 w2 : List.Vector ℕ n2\n⊢ n1 = n3 → v1 = w1 → HEq w1 w1' → v2 = w2 → HEq sorry sorry\n", "full_text": "example (n1 n2 n3 : Nat)\n    (v1 w1 : List.Vector Nat n1) (w1' : List.Vector Nat n3) (v2 w2 : List.Vector Nat n2) :\n    n1 = n3 → v1 = w1 → HEq w1 w1' → v2 = w2 → HEq (app v1 v2) (app w1' w2) := by\n  cc\nx✝ : Sort u_1\napp : x✝\nn1 n2 n3 : ℕ\nv1 w1 : List.Vector ℕ n1\nw1' : List.Vector ℕ n3\nv2 w2 : List.Vector ℕ n2\n⊢ n1 = n3 → v1 = w1 → HEq w1 w1' → v2 = w2 → HEq sorry sorry\n/- Goals Accomplished! -/\n"}
{"prompt": "example (n1 n2 n3 : Nat)\n    (v1 w1 : List.Vector Nat n1) (w1' : List.Vector Nat n3) (v2 w2 : List.Vector Nat n2) :\n    HEq n1 n3 → v1 = w1 → HEq w1 w1' → HEq v2 w2 → HEq (app v1 v2) (app w1' w2) := by\n  cc\nx✝ : Sort u_1\napp : x✝\nn1 n2 n3 : ℕ\nv1 w1 : List.Vector ℕ n1\nw1' : List.Vector ℕ n3\nv2 w2 : List.Vector ℕ n2\n⊢ HEq n1 n3 → v1 = w1 → HEq w1 w1' → HEq v2 w2 → HEq sorry sorry\n", "full_text": "example (n1 n2 n3 : Nat)\n    (v1 w1 : List.Vector Nat n1) (w1' : List.Vector Nat n3) (v2 w2 : List.Vector Nat n2) :\n    HEq n1 n3 → v1 = w1 → HEq w1 w1' → HEq v2 w2 → HEq (app v1 v2) (app w1' w2) := by\n  cc\nx✝ : Sort u_1\napp : x✝\nn1 n2 n3 : ℕ\nv1 w1 : List.Vector ℕ n1\nw1' : List.Vector ℕ n3\nv2 w2 : List.Vector ℕ n2\n⊢ HEq n1 n3 → v1 = w1 → HEq w1 w1' → HEq v2 w2 → HEq sorry sorry\n/- Goals Accomplished! -/\n"}
{"prompt": "example (n1 n2 n3 : Nat)\n    (v1 w1 v : List.Vector Nat n1) (w1' : List.Vector Nat n3) (v2 w2 w : List.Vector Nat n2) :\n    HEq n1 n3 → v1 = w1 → HEq w1 w1' → HEq v2 w2 → HEq (app w1' w2) (app v w) →\n      app v1 v2 = app v w := by\n  cc\nx✝ : Sort u_1\napp : x✝\nn1 n2 n3 : ℕ\nv1 w1 v : List.Vector ℕ n1\nw1' : List.Vector ℕ n3\nv2 w2 w : List.Vector ℕ n2\n⊢ HEq n1 n3 → v1 = w1 → HEq w1 w1' → HEq v2 w2 → HEq sorry sorry → sorry = sorry\n", "full_text": "example (n1 n2 n3 : Nat)\n    (v1 w1 v : List.Vector Nat n1) (w1' : List.Vector Nat n3) (v2 w2 w : List.Vector Nat n2) :\n    HEq n1 n3 → v1 = w1 → HEq w1 w1' → HEq v2 w2 → HEq (app w1' w2) (app v w) →\n      app v1 v2 = app v w := by\n  cc\nx✝ : Sort u_1\napp : x✝\nn1 n2 n3 : ℕ\nv1 w1 v : List.Vector ℕ n1\nw1' : List.Vector ℕ n3\nv2 w2 w : List.Vector ℕ n2\n⊢ HEq n1 n3 → v1 = w1 → HEq w1 w1' → HEq v2 w2 → HEq sorry sorry → sorry = sorry\n/- Goals Accomplished! -/\n"}
{"prompt": "example : ∀ (a a' : A), HEq a a' → HEq (mk_B1 a) (mk_B1 a') := by\n  cc\nA : Sort u_1\nx✝ : Sort u_2\nmk_B1 : x✝\n⊢ ∀ (a a' : A), HEq a a' → HEq ?m.35 ?m.37\n", "full_text": "example : ∀ (a a' : A), HEq a a' → HEq (mk_B1 a) (mk_B1 a') := by\n  cc\nA : Sort u_1\nx✝ : Sort u_2\nmk_B1 : x✝\n⊢ ∀ (a a' : A), HEq a a' → HEq ?m.35 ?m.37\n/- Goals Accomplished! -/\n"}
{"prompt": "example : ∀ (a a' : A), HEq a a' → HEq (mk_B2 a) (mk_B2 a') := by\n  cc\nA : Sort u_1\nx✝ : Sort u_2\nmk_B2 : x✝\n⊢ ∀ (a a' : A), HEq a a' → HEq ?m.35 ?m.37\n", "full_text": "example : ∀ (a a' : A), HEq a a' → HEq (mk_B2 a) (mk_B2 a') := by\n  cc\nA : Sort u_1\nx✝ : Sort u_2\nmk_B2 : x✝\n⊢ ∀ (a a' : A), HEq a a' → HEq ?m.35 ?m.37\n/- Goals Accomplished! -/\n"}
{"prompt": "example : ∀ (a a' : A) (h : a = a') (b : B a), HEq (h ▸ b) b := by\n  cc\nA : Sort u_1\nx✝ : Sort u_2\nB : x✝\n⊢ ∀ (a a' : A) (h : a = a') (b : sorry), HEq ?m.34 b\n", "full_text": "example : ∀ (a a' : A) (h : a = a') (b : B a), HEq (h ▸ b) b := by\n  cc\nA : Sort u_1\nx✝ : Sort u_2\nB : x✝\n⊢ ∀ (a a' : A) (h : a = a') (b : sorry), HEq ?m.34 b\n/- Goals Accomplished! -/\n"}
{"prompt": "example : HEq a1 (y a2) → HEq (mk_B1 a1) (mk_B1 (y a2)) := by\n  cc\nα✝ : Sort u_1\na1 : α✝\nx✝¹ : Sort u_2\ny : x✝¹\nx✝ : Sort u_3\nmk_B1 : x✝\n⊢ HEq a1 sorry → HEq sorry sorry\n", "full_text": "example : HEq a1 (y a2) → HEq (mk_B1 a1) (mk_B1 (y a2)) := by\n  cc\nα✝ : Sort u_1\na1 : α✝\nx✝¹ : Sort u_2\ny : x✝¹\nx✝ : Sort u_3\nmk_B1 : x✝\n⊢ HEq a1 sorry → HEq sorry sorry\n/- Goals Accomplished! -/\n"}
{"prompt": "example : HEq a1 (x a2) → HEq a2 (y a1) → HEq (mk_B1 (x (y a1))) (mk_B1 (x (y (x a2)))) := by\n  cc\nα✝¹ : Sort u_1\na1 : α✝¹\nx✝² : Sort u_2\nx : x✝²\nα✝ : Sort u_3\na2 : α✝\nx✝¹ : Sort u_4\ny : x✝¹\nx✝ : Sort u_5\nmk_B1 : x✝\n⊢ HEq a1 sorry → HEq a2 sorry → HEq sorry sorry\n", "full_text": "example : HEq a1 (x a2) → HEq a2 (y a1) → HEq (mk_B1 (x (y a1))) (mk_B1 (x (y (x a2)))) := by\n  cc\nα✝¹ : Sort u_1\na1 : α✝¹\nx✝² : Sort u_2\nx : x✝²\nα✝ : Sort u_3\na2 : α✝\nx✝¹ : Sort u_4\ny : x✝¹\nx✝ : Sort u_5\nmk_B1 : x✝\n⊢ HEq a1 sorry → HEq a2 sorry → HEq sorry sorry\n/- Goals Accomplished! -/\n"}
{"prompt": "example : HEq a1 (y a2) → HEq (mk_B1 a1) (mk_B2 (y a2)) →\n    HEq (f (mk_C1 (mk_B2 a1))) (f (mk_C2 (mk_B1 (y a2)))) := by\n  cc\nα✝ : Sort u_1\na1 : α✝\nx✝³ : Sort u_2\ny : x✝³\nx✝² : Sort u_3\nmk_B1 : x✝²\nx✝¹ : Sort u_4\nmk_B2 : x✝¹\nx✝ : Sort u_5\nf : x✝\n⊢ HEq a1 sorry → HEq sorry sorry → HEq sorry sorry\n", "full_text": "example : HEq a1 (y a2) → HEq (mk_B1 a1) (mk_B2 (y a2)) →\n    HEq (f (mk_C1 (mk_B2 a1))) (f (mk_C2 (mk_B1 (y a2)))) := by\n  cc\nα✝ : Sort u_1\na1 : α✝\nx✝³ : Sort u_2\ny : x✝³\nx✝² : Sort u_3\nmk_B1 : x✝²\nx✝¹ : Sort u_4\nmk_B2 : x✝¹\nx✝ : Sort u_5\nf : x✝\n⊢ HEq a1 sorry → HEq sorry sorry → HEq sorry sorry\n/- Goals Accomplished! -/\n"}
{"prompt": "example : HEq a1 (y a2) → HEq (tr_B (mk_B1 a1)) (mk_B2 (y a2)) →\n    HEq (f (mk_C1 (mk_B2 a1))) (f (mk_C2 (tr_B (mk_B1 (y a2))))) := by\n  cc\nα✝ : Sort u_1\na1 : α✝\nx✝³ : Sort u_2\ny : x✝³\nx✝² : Sort u_3\ntr_B : x✝²\nx✝¹ : Sort u_4\nmk_B2 : x✝¹\nx✝ : Sort u_5\nf : x✝\n⊢ HEq a1 sorry → HEq sorry sorry → HEq sorry sorry\n", "full_text": "example : HEq a1 (y a2) → HEq (tr_B (mk_B1 a1)) (mk_B2 (y a2)) →\n    HEq (f (mk_C1 (mk_B2 a1))) (f (mk_C2 (tr_B (mk_B1 (y a2))))) := by\n  cc\nα✝ : Sort u_1\na1 : α✝\nx✝³ : Sort u_2\ny : x✝³\nx✝² : Sort u_3\ntr_B : x✝²\nx✝¹ : Sort u_4\nmk_B2 : x✝¹\nx✝ : Sort u_5\nf : x✝\n⊢ HEq a1 sorry → HEq sorry sorry → HEq sorry sorry\n/- Goals Accomplished! -/\n"}
{"prompt": "example : HEq a1 (y a2) → HEq (mk_B1 a1) (mk_B2 (y a2)) →\n    HEq (g (f (mk_C1 (mk_B2 a1)))) (g (f (mk_C2 (mk_B1 (y a2))))) := by\n  cc\nα✝ : Sort u_1\na1 : α✝\nx✝³ : Sort u_2\ny : x✝³\nx✝² : Sort u_3\nmk_B1 : x✝²\nx✝¹ : Sort u_4\nmk_B2 : x✝¹\nx✝ : Sort u_5\ng : x✝\n⊢ HEq a1 sorry → HEq sorry sorry → HEq sorry sorry\n", "full_text": "example : HEq a1 (y a2) → HEq (mk_B1 a1) (mk_B2 (y a2)) →\n    HEq (g (f (mk_C1 (mk_B2 a1)))) (g (f (mk_C2 (mk_B1 (y a2))))) := by\n  cc\nα✝ : Sort u_1\na1 : α✝\nx✝³ : Sort u_2\ny : x✝³\nx✝² : Sort u_3\nmk_B1 : x✝²\nx✝¹ : Sort u_4\nmk_B2 : x✝¹\nx✝ : Sort u_5\ng : x✝\n⊢ HEq a1 sorry → HEq sorry sorry → HEq sorry sorry\n/- Goals Accomplished! -/\n"}
{"prompt": "example : HEq a1 (y a2) → HEq (tr_B (mk_B1 a1)) (mk_B2 (y a2)) →\n    HEq (g (f (mk_C1 (mk_B2 a1)))) (g (f (mk_C2 (tr_B (mk_B1 (y a2)))))) := by\n  cc\nα✝ : Sort u_1\na1 : α✝\nx✝³ : Sort u_2\ny : x✝³\nx✝² : Sort u_3\ntr_B : x✝²\nx✝¹ : Sort u_4\nmk_B2 : x✝¹\nx✝ : Sort u_5\ng : x✝\n⊢ HEq a1 sorry → HEq sorry sorry → HEq sorry sorry\n", "full_text": "example : HEq a1 (y a2) → HEq (tr_B (mk_B1 a1)) (mk_B2 (y a2)) →\n    HEq (g (f (mk_C1 (mk_B2 a1)))) (g (f (mk_C2 (tr_B (mk_B1 (y a2)))))) := by\n  cc\nα✝ : Sort u_1\na1 : α✝\nx✝³ : Sort u_2\ny : x✝³\nx✝² : Sort u_3\ntr_B : x✝²\nx✝¹ : Sort u_4\nmk_B2 : x✝¹\nx✝ : Sort u_5\ng : x✝\n⊢ HEq a1 sorry → HEq sorry sorry → HEq sorry sorry\n/- Goals Accomplished! -/\n"}
{"prompt": "example : HEq a1 (y a2) → HEq a2 (z a3) → HEq a3 (x a1) → HEq (mk_B1 a1) (mk_B2 (y (z (x a1)))) →\n          HEq (f (mk_C1 (mk_B2 (y (z (x a1)))))) (f' (mk_C2 (mk_B1 a1))) →\n          HEq (g (f (mk_C1 (mk_B2 (y (z (x a1))))))) (g (f' (mk_C2 (mk_B1 a1)))) := by\n  cc\nα✝² : Sort u_1\na1 : α✝²\nx✝⁷ : Sort u_2\ny : x✝⁷\nα✝¹ : Sort u_3\na2 : α✝¹\nx✝⁶ : Sort u_4\nz : x✝⁶\nα✝ : Sort u_5\na3 : α✝\nx✝⁵ : Sort u_6\nx : x✝⁵\nx✝⁴ : Sort u_7\nmk_B1 : x✝⁴\nx✝³ : Sort u_8\nmk_B2 : x✝³\nx✝² : Sort u_9\nf : x✝²\nx✝¹ : Sort u_10\nf' : x✝¹\nx✝ : Sort u_11\ng : x✝\n⊢ HEq a1 sorry → HEq a2 sorry → HEq a3 sorry → HEq sorry sorry → HEq sorry sorry → HEq sorry sorry\n", "full_text": "example : HEq a1 (y a2) → HEq a2 (z a3) → HEq a3 (x a1) → HEq (mk_B1 a1) (mk_B2 (y (z (x a1)))) →\n          HEq (f (mk_C1 (mk_B2 (y (z (x a1)))))) (f' (mk_C2 (mk_B1 a1))) →\n          HEq (g (f (mk_C1 (mk_B2 (y (z (x a1))))))) (g (f' (mk_C2 (mk_B1 a1)))) := by\n  cc\nα✝² : Sort u_1\na1 : α✝²\nx✝⁷ : Sort u_2\ny : x✝⁷\nα✝¹ : Sort u_3\na2 : α✝¹\nx✝⁶ : Sort u_4\nz : x✝⁶\nα✝ : Sort u_5\na3 : α✝\nx✝⁵ : Sort u_6\nx : x✝⁵\nx✝⁴ : Sort u_7\nmk_B1 : x✝⁴\nx✝³ : Sort u_8\nmk_B2 : x✝³\nx✝² : Sort u_9\nf : x✝²\nx✝¹ : Sort u_10\nf' : x✝¹\nx✝ : Sort u_11\ng : x✝\n⊢ HEq a1 sorry → HEq a2 sorry → HEq a3 sorry → HEq sorry sorry → HEq sorry sorry → HEq sorry sorry\n/- Goals Accomplished! -/\n"}
{"prompt": "example : HEq a1 (y a2) → HEq a2 (z a3) → HEq a3 (x a1) → HEq (mk_B1 a1) (mk_B2 (y (z (x a1)))) →\n          HEq (f (mk_C1 (mk_B2 (y (z (x a1)))))) (f' (mk_C2 (mk_B1 a1))) →\n          HEq (f' (mk_C1 (mk_B1 a1))) (f (mk_C2 (mk_B2 (y (z (x a1)))))) →\n          HEq (g (f (mk_C1 (mk_B1 (y (z (x a1))))))) (g (f' (mk_C2 (mk_B2 a1)))) := by\n  cc\nα✝² : Sort u_1\na1 : α✝²\nx✝⁷ : Sort u_2\ny : x✝⁷\nα✝¹ : Sort u_3\na2 : α✝¹\nx✝⁶ : Sort u_4\nz : x✝⁶\nα✝ : Sort u_5\na3 : α✝\nx✝⁵ : Sort u_6\nx : x✝⁵\nx✝⁴ : Sort u_7\nmk_B1 : x✝⁴\nx✝³ : Sort u_8\nmk_B2 : x✝³\nx✝² : Sort u_9\nf : x✝²\nx✝¹ : Sort u_10\nf' : x✝¹\nx✝ : Sort u_11\ng : x✝\n⊢ HEq a1 sorry → HEq a2 sorry → HEq a3 sorry → HEq sorry sorry → HEq sorry sorry → HEq sorry sorry → HEq sorry sorry\n", "full_text": "example : HEq a1 (y a2) → HEq a2 (z a3) → HEq a3 (x a1) → HEq (mk_B1 a1) (mk_B2 (y (z (x a1)))) →\n          HEq (f (mk_C1 (mk_B2 (y (z (x a1)))))) (f' (mk_C2 (mk_B1 a1))) →\n          HEq (f' (mk_C1 (mk_B1 a1))) (f (mk_C2 (mk_B2 (y (z (x a1)))))) →\n          HEq (g (f (mk_C1 (mk_B1 (y (z (x a1))))))) (g (f' (mk_C2 (mk_B2 a1)))) := by\n  cc\nα✝² : Sort u_1\na1 : α✝²\nx✝⁷ : Sort u_2\ny : x✝⁷\nα✝¹ : Sort u_3\na2 : α✝¹\nx✝⁶ : Sort u_4\nz : x✝⁶\nα✝ : Sort u_5\na3 : α✝\nx✝⁵ : Sort u_6\nx : x✝⁵\nx✝⁴ : Sort u_7\nmk_B1 : x✝⁴\nx✝³ : Sort u_8\nmk_B2 : x✝³\nx✝² : Sort u_9\nf : x✝²\nx✝¹ : Sort u_10\nf' : x✝¹\nx✝ : Sort u_11\ng : x✝\n⊢ HEq a1 sorry → HEq a2 sorry → HEq a3 sorry → HEq sorry sorry → HEq sorry sorry → HEq sorry sorry → HEq sorry sorry\n/- Goals Accomplished! -/\n"}
{"prompt": "example : HEq a1 (y a2) → HEq a2 (z a3) → HEq a3 (x a1) →\n          HEq (tr_B (mk_B1 a1)) (mk_B2 (y (z (x a1)))) →\n          HEq (f (mk_C1 (mk_B2 (y (z (x a1)))))) (f' (mk_C2 (tr_B (mk_B1 a1)))) →\n          HEq (f' (mk_C1 (tr_B (mk_B1 a1)))) (f (mk_C2 (mk_B2 (y (z (x a1)))))) →\n          HEq (g (f (mk_C1 (tr_B (mk_B1 (y (z (x a1)))))))) (g (f' (mk_C2 (mk_B2 a1)))) := by\n  cc\nα✝² : Sort u_1\na1 : α✝²\nx✝⁷ : Sort u_2\ny : x✝⁷\nα✝¹ : Sort u_3\na2 : α✝¹\nx✝⁶ : Sort u_4\nz : x✝⁶\nα✝ : Sort u_5\na3 : α✝\nx✝⁵ : Sort u_6\nx : x✝⁵\nx✝⁴ : Sort u_7\ntr_B : x✝⁴\nx✝³ : Sort u_8\nmk_B2 : x✝³\nx✝² : Sort u_9\nf : x✝²\nx✝¹ : Sort u_10\nf' : x✝¹\nx✝ : Sort u_11\ng : x✝\n⊢ HEq a1 sorry → HEq a2 sorry → HEq a3 sorry → HEq sorry sorry → HEq sorry sorry → HEq sorry sorry → HEq sorry sorry\n", "full_text": "example : HEq a1 (y a2) → HEq a2 (z a3) → HEq a3 (x a1) →\n          HEq (tr_B (mk_B1 a1)) (mk_B2 (y (z (x a1)))) →\n          HEq (f (mk_C1 (mk_B2 (y (z (x a1)))))) (f' (mk_C2 (tr_B (mk_B1 a1)))) →\n          HEq (f' (mk_C1 (tr_B (mk_B1 a1)))) (f (mk_C2 (mk_B2 (y (z (x a1)))))) →\n          HEq (g (f (mk_C1 (tr_B (mk_B1 (y (z (x a1)))))))) (g (f' (mk_C2 (mk_B2 a1)))) := by\n  cc\nα✝² : Sort u_1\na1 : α✝²\nx✝⁷ : Sort u_2\ny : x✝⁷\nα✝¹ : Sort u_3\na2 : α✝¹\nx✝⁶ : Sort u_4\nz : x✝⁶\nα✝ : Sort u_5\na3 : α✝\nx✝⁵ : Sort u_6\nx : x✝⁵\nx✝⁴ : Sort u_7\ntr_B : x✝⁴\nx✝³ : Sort u_8\nmk_B2 : x✝³\nx✝² : Sort u_9\nf : x✝²\nx✝¹ : Sort u_10\nf' : x✝¹\nx✝ : Sort u_11\ng : x✝\n⊢ HEq a1 sorry → HEq a2 sorry → HEq a3 sorry → HEq sorry sorry → HEq sorry sorry → HEq sorry sorry → HEq sorry sorry\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c a' b' c' : Nat) : a = a' → b = b' → c = c' → a + b + c + a = a' + b' + c' + a' := by\n  cc\na b c a' b' c' : ℕ\n⊢ a = a' → b = b' → c = c' → a + b + c + a = a' + b' + c' + a'\n", "full_text": "example (a b c a' b' c' : Nat) : a = a' → b = b' → c = c' → a + b + c + a = a' + b' + c' + a' := by\n  cc\na b c a' b' c' : ℕ\n⊢ a = a' → b = b' → c = c' → a + b + c + a = a' + b' + c' + a'\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b : Unit) : a = b := by\n  cc\na b : Unit\n⊢ a = b\n", "full_text": "example (a b : Unit) : a = b := by\n  cc\na b : Unit\n⊢ a = b\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b : Nat) (h₁ : a = 0) (h₂ : b = 0) : a = b → HEq h₁ h₂ := by\n  cc\na b : ℕ\nh₁ : a = 0\nh₂ : b = 0\n⊢ a = b → HEq h₁ h₂\n", "full_text": "example (a b : Nat) (h₁ : a = 0) (h₂ : b = 0) : a = b → HEq h₁ h₂ := by\n  cc\na b : ℕ\nh₁ : a = 0\nh₂ : b = 0\n⊢ a = b → HEq h₁ h₂\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b : Nat) (h₁ : a ≠ 0) (h₂ : b ≠ 0) : a = b → inv' a h₁ = inv' b h₂ := by\n  cc\nx✝ : Sort u_1\ninv' : x✝\na b : ℕ\nh₁ : a ≠ 0\nh₂ : b ≠ 0\n⊢ a = b → sorry = sorry\n", "full_text": "example (a b : Nat) (h₁ : a ≠ 0) (h₂ : b ≠ 0) : a = b → inv' a h₁ = inv' b h₂ := by\n  cc\nx✝ : Sort u_1\ninv' : x✝\na b : ℕ\nh₁ : a ≠ 0\nh₂ : b ≠ 0\n⊢ a = b → sorry = sorry\n/- Goals Accomplished! -/\n"}
{"prompt": "example (C : Nat → Type) (f : (n : _) → C n → C n) (n m : Nat) (c : C n) (d : C m) :\n    HEq (f n) (f m) → HEq c d → HEq n m → HEq (f n c) (f m d) := by\n  cc\nC : ℕ → Type\nf : (n : ℕ) → C n → C n\nn m : ℕ\nc : C n\nd : C m\n⊢ HEq (f n) (f m) → HEq c d → HEq n m → HEq (f n c) (f m d)\n", "full_text": "example (C : Nat → Type) (f : (n : _) → C n → C n) (n m : Nat) (c : C n) (d : C m) :\n    HEq (f n) (f m) → HEq c d → HEq n m → HEq (f n c) (f m d) := by\n  cc\nC : ℕ → Type\nf : (n : ℕ) → C n → C n\nn m : ℕ\nc : C n\nd : C m\n⊢ HEq (f n) (f m) → HEq c d → HEq n m → HEq (f n c) (f m d)\n/- Goals Accomplished! -/\n"}
{"prompt": "example (f g : {α : Type} → α → α → α) (h : Nat → Nat) (a b : Nat) :\n    h = f a → h b = f a b := by\n  cc\nf g : {α : Type} → α → α → α\nh : ℕ → ℕ\na b : ℕ\n⊢ h = f a → h b = f a b\n", "full_text": "example (f g : {α : Type} → α → α → α) (h : Nat → Nat) (a b : Nat) :\n    h = f a → h b = f a b := by\n  cc\nf g : {α : Type} → α → α → α\nh : ℕ → ℕ\na b : ℕ\n⊢ h = f a → h b = f a b\n/- Goals Accomplished! -/\n"}
{"prompt": "example (f g : {α : Type} → (a b : α) → {x : α // x ≠ b})\n    (h : (b : Nat) → {x : Nat // x ≠ b}) (a b₁ b₂ : Nat) :\n    h = f a → b₁ = b₂ → HEq (h b₁) (f a b₂) := by\n  cc\nf g : {α : Type} → α → (b : α) → { x // x ≠ b }\nh : (b : ℕ) → { x // x ≠ b }\na b₁ b₂ : ℕ\n⊢ h = f a → b₁ = b₂ → HEq (h b₁) (f a b₂)\n", "full_text": "example (f g : {α : Type} → (a b : α) → {x : α // x ≠ b})\n    (h : (b : Nat) → {x : Nat // x ≠ b}) (a b₁ b₂ : Nat) :\n    h = f a → b₁ = b₂ → HEq (h b₁) (f a b₂) := by\n  cc\nf g : {α : Type} → α → (b : α) → { x // x ≠ b }\nh : (b : ℕ) → { x // x ≠ b }\na b₁ b₂ : ℕ\n⊢ h = f a → b₁ = b₂ → HEq (h b₁) (f a b₂)\n/- Goals Accomplished! -/\n"}
{"prompt": "example (f : Nat → Nat → Nat) (a b c d : Nat) :\n    c = d → f a = f b → f a c = f b d := by\n  cc\nf : ℕ → ℕ → ℕ\na b c d : ℕ\n⊢ c = d → f a = f b → f a c = f b d\n", "full_text": "example (f : Nat → Nat → Nat) (a b c d : Nat) :\n    c = d → f a = f b → f a c = f b d := by\n  cc\nf : ℕ → ℕ → ℕ\na b c d : ℕ\n⊢ c = d → f a = f b → f a c = f b d\n/- Goals Accomplished! -/\n"}
{"prompt": "example (f : Nat → Nat → Nat) (a b c d : Nat) :\n        HEq c d → HEq (f a) (f b) → HEq (f a c) (f b d) := by\n  cc\nf : ℕ → ℕ → ℕ\na b c d : ℕ\n⊢ HEq c d → HEq (f a) (f b) → HEq (f a c) (f b d)\n", "full_text": "example (f : Nat → Nat → Nat) (a b c d : Nat) :\n        HEq c d → HEq (f a) (f b) → HEq (f a c) (f b d) := by\n  cc\nf : ℕ → ℕ → ℕ\na b c d : ℕ\n⊢ HEq c d → HEq (f a) (f b) → HEq (f a c) (f b d)\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c : Nat) (f : Nat → Nat) : f (a + b + c) = f (c + b + a) := by\n  cc\na b c : ℕ\nf : ℕ → ℕ\n⊢ f (a + b + c) = f (c + b + a)\n", "full_text": "example (a b c : Nat) (f : Nat → Nat) : f (a + b + c) = f (c + b + a) := by\n  cc\na b c : ℕ\nf : ℕ → ℕ\n⊢ f (a + b + c) = f (c + b + a)\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c : Nat) (f : Nat → Nat) : a + b = c → f (c + c) = f (a + b + c) := by\n  cc\na b c : ℕ\nf : ℕ → ℕ\n⊢ a + b = c → f (c + c) = f (a + b + c)\n", "full_text": "example (a b c : Nat) (f : Nat → Nat) : a + b = c → f (c + c) = f (a + b + c) := by\n  cc\na b c : ℕ\nf : ℕ → ℕ\n⊢ a + b = c → f (c + c) = f (a + b + c)\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c d : Nat) (f : Nat → Nat → Nat) : b + a = d → f (a + b + c) a = f (c + d) a := by\n  cc\na b c d : ℕ\nf : ℕ → ℕ → ℕ\n⊢ b + a = d → f (a + b + c) a = f (c + d) a\n", "full_text": "example (a b c d : Nat) (f : Nat → Nat → Nat) : b + a = d → f (a + b + c) a = f (c + d) a := by\n  cc\na b c d : ℕ\nf : ℕ → ℕ → ℕ\n⊢ b + a = d → f (a + b + c) a = f (c + d) a\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c d e : Nat) (f : Nat → Nat → Nat) :\n    b + a = d → b + c = e → f (a + b + c) (a + b + c) = f (c + d) (a + e) := by\n  cc\na b c d e : ℕ\nf : ℕ → ℕ → ℕ\n⊢ b + a = d → b + c = e → f (a + b + c) (a + b + c) = f (c + d) (a + e)\n", "full_text": "example (a b c d e : Nat) (f : Nat → Nat → Nat) :\n    b + a = d → b + c = e → f (a + b + c) (a + b + c) = f (c + d) (a + e) := by\n  cc\na b c d e : ℕ\nf : ℕ → ℕ → ℕ\n⊢ b + a = d → b + c = e → f (a + b + c) (a + b + c) = f (c + d) (a + e)\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c d e : Nat) (f : Nat → Nat → Nat) :\n    b + a = d + d → b + c = e + e → f (a + b + c) (a + b + c) = f (c + d + d) (e + a + e) := by\n  cc\na b c d e : ℕ\nf : ℕ → ℕ → ℕ\n⊢ b + a = d + d → b + c = e + e → f (a + b + c) (a + b + c) = f (c + d + d) (e + a + e)\n", "full_text": "example (a b c d e : Nat) (f : Nat → Nat → Nat) :\n    b + a = d + d → b + c = e + e → f (a + b + c) (a + b + c) = f (c + d + d) (e + a + e) := by\n  cc\na b c d e : ℕ\nf : ℕ → ℕ → ℕ\n⊢ b + a = d + d → b + c = e + e → f (a + b + c) (a + b + c) = f (c + d + d) (e + a + e)\n/- Goals Accomplished! -/\n"}
{"prompt": "lemma ex₁ (a b c d e : α) (f : α → α → α) :\n    op b a = op d d → op b c = op e e →\n    f (op a (op b c)) (op (op a b) c) = f (op (op c d) d) (op e (op a e)) := by\n  cc\nα : Type u\nop : α → α → α\ninst✝¹ : Std.Associative op\ninst✝ : Std.Commutative op\na b c d e : α\nf : α → α → α\n⊢ op b a = op d d → op b c = op e e → f (op a (op b c)) (op (op a b) c) = f (op (op c d) d) (op e (op a e))\n", "full_text": "lemma ex₁ (a b c d e : α) (f : α → α → α) :\n    op b a = op d d → op b c = op e e →\n    f (op a (op b c)) (op (op a b) c) = f (op (op c d) d) (op e (op a e)) := by\n  cc\nα : Type u\nop : α → α → α\ninst✝¹ : Std.Associative op\ninst✝ : Std.Commutative op\na b c d e : α\nf : α → α → α\n⊢ op b a = op d d → op b c = op e e → f (op a (op b c)) (op (op a b) c) = f (op (op c d) d) (op e (op a e))\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c d₁ d₂ e₁ e₂ : Set α) (f : Set α → Set α → Set α) :\n    b ∪ a = d₁ ∪ d₂ → b ∪ c = e₂ ∪ e₁ →\n      f (a ∪ b ∪ c) (a ∪ b ∪ c) = f (c ∪ d₂ ∪ d₁) (e₂ ∪ a ∪ e₁) := by\n  cc\nα✝ : Type u\nop : α✝ → α✝ → α✝\ninst✝¹ : Std.Associative op\ninst✝ : Std.Commutative op\nα : Type u\na b c d₁ d₂ e₁ e₂ : Set α\nf : Set α → Set α → Set α\n⊢ b ∪ a = d₁ ∪ d₂ → b ∪ c = e₂ ∪ e₁ → f (a ∪ b ∪ c) (a ∪ b ∪ c) = f (c ∪ d₂ ∪ d₁) (e₂ ∪ a ∪ e₁)\n", "full_text": "example (a b c d₁ d₂ e₁ e₂ : Set α) (f : Set α → Set α → Set α) :\n    b ∪ a = d₁ ∪ d₂ → b ∪ c = e₂ ∪ e₁ →\n      f (a ∪ b ∪ c) (a ∪ b ∪ c) = f (c ∪ d₂ ∪ d₁) (e₂ ∪ a ∪ e₁) := by\n  cc\nα✝ : Type u\nop : α✝ → α✝ → α✝\ninst✝¹ : Std.Associative op\ninst✝ : Std.Commutative op\nα : Type u\na b c d₁ d₂ e₁ e₂ : Set α\nf : Set α → Set α → Set α\n⊢ b ∪ a = d₁ ∪ d₂ → b ∪ c = e₂ ∪ e₁ → f (a ∪ b ∪ c) (a ∪ b ∪ c) = f (c ∪ d₂ ∪ d₁) (e₂ ∪ a ∪ e₁)\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x1 x2 x3 x4 x5 x6 : α) :\n    x1*x4 = x1 → x3*x6 = x5*x5 → x5 = x4 → x6 = x2 → x1 = x1*(x6*x3) := by\n  cc\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\nx1 x2 x3 x4 x5 x6 : α\n⊢ x1 * x4 = x1 → x3 * x6 = x5 * x5 → x5 = x4 → x6 = x2 → x1 = x1 * (x6 * x3)\n", "full_text": "example (x1 x2 x3 x4 x5 x6 : α) :\n    x1*x4 = x1 → x3*x6 = x5*x5 → x5 = x4 → x6 = x2 → x1 = x1*(x6*x3) := by\n  cc\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\nx1 x2 x3 x4 x5 x6 : α\n⊢ x1 * x4 = x1 → x3 * x6 = x5 * x5 → x5 = x4 → x6 = x2 → x1 = x1 * (x6 * x3)\n/- Goals Accomplished! -/\n"}
{"prompt": "example (y1 y2 x2 x3 x4 x5 x6 : α) :\n    (y1 + y2)*x4 = (y2 + y1) → x3*x6 = x5*x5 → x5 = x4 → x6 = x2 →\n      (y2 + y1) = (y1 + y2)*(x6*x3) := by\n  cc\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\ny1 y2 x2 x3 x4 x5 x6 : α\n⊢ (y1 + y2) * x4 = y2 + y1 → x3 * x6 = x5 * x5 → x5 = x4 → x6 = x2 → y2 + y1 = (y1 + y2) * (x6 * x3)\n", "full_text": "example (y1 y2 x2 x3 x4 x5 x6 : α) :\n    (y1 + y2)*x4 = (y2 + y1) → x3*x6 = x5*x5 → x5 = x4 → x6 = x2 →\n      (y2 + y1) = (y1 + y2)*(x6*x3) := by\n  cc\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\ny1 y2 x2 x3 x4 x5 x6 : α\n⊢ (y1 + y2) * x4 = y2 + y1 → x3 * x6 = x5 * x5 → x5 = x4 → x6 = x2 → y2 + y1 = (y1 + y2) * (x6 * x3)\n/- Goals Accomplished! -/\n"}
{"prompt": "example (y1 y2 y3 x2 x3 x4 x5 x6 : α) :\n    (y1 + y2)*x4 = (y3 + y1) → x3*x6 = x5*x5 → x5 = x4 → x6 = x2 → y2 = y3 →\n      (y2 + y1) = (y1 + y3)*(x6*x3) := by\n  cc\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\ny1 y2 y3 x2 x3 x4 x5 x6 : α\n⊢ (y1 + y2) * x4 = y3 + y1 → x3 * x6 = x5 * x5 → x5 = x4 → x6 = x2 → y2 = y3 → y2 + y1 = (y1 + y3) * (x6 * x3)\n", "full_text": "example (y1 y2 y3 x2 x3 x4 x5 x6 : α) :\n    (y1 + y2)*x4 = (y3 + y1) → x3*x6 = x5*x5 → x5 = x4 → x6 = x2 → y2 = y3 →\n      (y2 + y1) = (y1 + y3)*(x6*x3) := by\n  cc\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\ny1 y2 y3 x2 x3 x4 x5 x6 : α\n⊢ (y1 + y2) * x4 = y3 + y1 → x3 * x6 = x5 * x5 → x5 = x4 → x6 = x2 → y2 = y3 → y2 + y1 = (y1 + y3) * (x6 * x3)\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b : Nat) (s t : List Nat) : a :: s = b :: t → a ≠ b → False := by\n  cc\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na b : ℕ\ns t : List ℕ\n⊢ a :: s = b :: t → a ≠ b → False\n", "full_text": "example (a b : Nat) (s t : List Nat) : a :: s = b :: t → a ≠ b → False := by\n  cc\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na b : ℕ\ns t : List ℕ\n⊢ a :: s = b :: t → a ≠ b → False\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b : Nat) (s t : List Nat) : a :: s = b :: t → t ≠ s → False := by\n  cc\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na b : ℕ\ns t : List ℕ\n⊢ a :: s = b :: t → t ≠ s → False\n", "full_text": "example (a b : Nat) (s t : List Nat) : a :: s = b :: t → t ≠ s → False := by\n  cc\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na b : ℕ\ns t : List ℕ\n⊢ a :: s = b :: t → t ≠ s → False\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a c b : Nat) (s t : List Nat) : a :: s = b :: t → a ≠ c → c = b → False := by\n  cc\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na c b : ℕ\ns t : List ℕ\n⊢ a :: s = b :: t → a ≠ c → c = b → False\n", "full_text": "example (a c b : Nat) (s t : List Nat) : a :: s = b :: t → a ≠ c → c = b → False := by\n  cc\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na c b : ℕ\ns t : List ℕ\n⊢ a :: s = b :: t → a ≠ c → c = b → False\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a c b : Nat) (s t : List Nat) : a :: a :: s = a :: b :: t → a ≠ c → c = b → False := by\n  cc\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na c b : ℕ\ns t : List ℕ\n⊢ a :: a :: s = a :: b :: t → a ≠ c → c = b → False\n", "full_text": "example (a c b : Nat) (s t : List Nat) : a :: a :: s = a :: b :: t → a ≠ c → c = b → False := by\n  cc\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na c b : ℕ\ns t : List ℕ\n⊢ a :: a :: s = a :: b :: t → a ≠ c → c = b → False\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b : Nat) (s t r : List Nat) : a :: s = r → r = b :: t → a ≠ b → False := by\n  cc\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na b : ℕ\ns t r : List ℕ\n⊢ a :: s = r → r = b :: t → a ≠ b → False\n", "full_text": "example (a b : Nat) (s t r : List Nat) : a :: s = r → r = b :: t → a ≠ b → False := by\n  cc\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na b : ℕ\ns t r : List ℕ\n⊢ a :: s = r → r = b :: t → a ≠ b → False\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b : Nat) (s t r : List Nat) : a :: s = r → r = b :: t → a = b := by\n  cc\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na b : ℕ\ns t r : List ℕ\n⊢ a :: s = r → r = b :: t → a = b\n", "full_text": "example (a b : Nat) (s t r : List Nat) : a :: s = r → r = b :: t → a = b := by\n  cc\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na b : ℕ\ns t r : List ℕ\n⊢ a :: s = r → r = b :: t → a = b\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b : Nat) (s t r : List Nat) : List.cons a = List.cons b → a = b := by\n  intro h1\n  /- In the current implementation, `cc` does not \"complete\" partially applied\n     constructor applications. So, the following one should fail. -/\n  try cc\n  /- Complete it manually. TODO(Leo): we can automate it for inhabited types. -/\n  have h := congr_fun h1 []\n  cc\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na b : ℕ\ns t r : List ℕ\n⊢ List.cons a = List.cons b → a = b\n", "full_text": "example (a b : Nat) (s t r : List Nat) : List.cons a = List.cons b → a = b := by\n  intro h1\n  /- In the current implementation, `cc` does not \"complete\" partially applied\n     constructor applications. So, the following one should fail. -/\n  try cc\n  /- Complete it manually. TODO(Leo): we can automate it for inhabited types. -/\n  have h := congr_fun h1 []\n  cc\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na b : ℕ\ns t r : List ℕ\n⊢ List.cons a = List.cons b → a = b\n/- α✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na b : ℕ\ns t r : List ℕ\nh1 : List.cons a = List.cons b\n⊢ a = b -/\n/- α✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na b : ℕ\ns t r : List ℕ\nh1 : List.cons a = List.cons b\n⊢ a = b -/\n/- α✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na b : ℕ\ns t r : List ℕ\nh1 : List.cons a = List.cons b\nh : [a] = [b]\n⊢ a = b -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b : Nat) : Foo.mk1 a = Foo.mk2 b → False := by\n  intro h1\n  /- In the current implementation, `cc` does not \"complete\" partially applied\n     constructor applications. So, the following one should fail. -/\n  try cc\n  have h := congr_fun h1 0\n  cc\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na b : ℕ\n⊢ sorry = sorry → False\n", "full_text": "example (a b : Nat) : Foo.mk1 a = Foo.mk2 b → False := by\n  intro h1\n  /- In the current implementation, `cc` does not \"complete\" partially applied\n     constructor applications. So, the following one should fail. -/\n  try cc\n  have h := congr_fun h1 0\n  cc\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na b : ℕ\n⊢ sorry = sorry → False\n/- α✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na b : ℕ\nh1 : sorry = sorry\n⊢ False -/\n/- α✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na b : ℕ\nh1 : sorry = sorry\n⊢ False -/\n/- α✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na b : ℕ\nh1 : sorry = sorry\n⊢ False -/\n"}
{"prompt": "example (α : Type u) (a b c d : α) (n : Nat) (s t : Vec α n) :\n    Vec.cons a s = Vec.cons b t → a ≠ b → False := by\n  cc\nα✝² : Type u\nop : α✝² → α✝² → α✝²\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝¹ α✝ : Type u\ninst✝ : CommRing α✝\nx✝ : Sort u_1\nVec : x✝\nα : Type u\na b c d : α\nn : ℕ\ns : sorry\nt : sorry\n⊢ sorry = sorry → a ≠ b → False\n", "full_text": "example (α : Type u) (a b c d : α) (n : Nat) (s t : Vec α n) :\n    Vec.cons a s = Vec.cons b t → a ≠ b → False := by\n  cc\nα✝² : Type u\nop : α✝² → α✝² → α✝²\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝¹ α✝ : Type u\ninst✝ : CommRing α✝\nx✝ : Sort u_1\nVec : x✝\nα : Type u\na b c d : α\nn : ℕ\ns : sorry\nt : sorry\n⊢ sorry = sorry → a ≠ b → False\n/- Goals Accomplished! -/\n"}
{"prompt": "example (α : Type u) (a b c d : α) (n : Nat) (s t : Vec α n) :\n    Vec.cons a s = Vec.cons b t → t ≠ s → False := by\n  cc\nα✝² : Type u\nop : α✝² → α✝² → α✝²\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝¹ α✝ : Type u\ninst✝ : CommRing α✝\nx✝ : Sort u_1\nVec : x✝\nα : Type u\na b c d : α\nn : ℕ\ns : sorry\nt : sorry\n⊢ sorry = sorry → t ≠ s → False\n", "full_text": "example (α : Type u) (a b c d : α) (n : Nat) (s t : Vec α n) :\n    Vec.cons a s = Vec.cons b t → t ≠ s → False := by\n  cc\nα✝² : Type u\nop : α✝² → α✝² → α✝²\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝¹ α✝ : Type u\ninst✝ : CommRing α✝\nx✝ : Sort u_1\nVec : x✝\nα : Type u\na b c d : α\nn : ℕ\ns : sorry\nt : sorry\n⊢ sorry = sorry → t ≠ s → False\n/- Goals Accomplished! -/\n"}
{"prompt": "example (α : Type u) (a b c d : α) (n : Nat) (s t : Vec α n) :\n    Vec.cons a (Vec.cons a s) = Vec.cons a (Vec.cons b t) → b ≠ c → c = a → False := by\n  cc\nα✝² : Type u\nop : α✝² → α✝² → α✝²\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝¹ α✝ : Type u\ninst✝ : CommRing α✝\nx✝ : Sort u_1\nVec : x✝\nα : Type u\na b c d : α\nn : ℕ\ns : sorry\nt : sorry\n⊢ sorry = sorry → b ≠ c → c = a → False\n", "full_text": "example (α : Type u) (a b c d : α) (n : Nat) (s t : Vec α n) :\n    Vec.cons a (Vec.cons a s) = Vec.cons a (Vec.cons b t) → b ≠ c → c = a → False := by\n  cc\nα✝² : Type u\nop : α✝² → α✝² → α✝²\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝¹ α✝ : Type u\ninst✝ : CommRing α✝\nx✝ : Sort u_1\nVec : x✝\nα : Type u\na b c d : α\nn : ℕ\ns : sorry\nt : sorry\n⊢ sorry = sorry → b ≠ c → c = a → False\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c d : Nat) (f : Nat → Nat × Nat) : (f d).1 ≠ a → f d = (b, c) → b = a → False := by\n  cc\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na b c d : ℕ\nf : ℕ → ℕ × ℕ\n⊢ (f d).1 ≠ a → f d = (b, c) → b = a → False\n", "full_text": "example (a b c d : Nat) (f : Nat → Nat × Nat) : (f d).1 ≠ a → f d = (b, c) → b = a → False := by\n  cc\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na b c d : ℕ\nf : ℕ → ℕ × ℕ\n⊢ (f d).1 ≠ a → f d = (b, c) → b = a → False\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c : Nat) (f : Nat → Nat) : (f b, c).1 ≠ f a → f b = f c → a = c → False := by\n  cc\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na b c : ℕ\nf : ℕ → ℕ\n⊢ (f b, c).1 ≠ f a → f b = f c → a = c → False\n", "full_text": "example (a b c : Nat) (f : Nat → Nat) : (f b, c).1 ≠ f a → f b = f c → a = c → False := by\n  cc\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na b c : ℕ\nf : ℕ → ℕ\n⊢ (f b, c).1 ≠ f a → f b = f c → a = c → False\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b : Nat) : a = 1 → b = 2 → a = b → False := by\n  cc\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na b : ℕ\n⊢ a = 1 → b = 2 → a = b → False\n", "full_text": "example (a b : Nat) : a = 1 → b = 2 → a = b → False := by\n  cc\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na b : ℕ\n⊢ a = 1 → b = 2 → a = b → False\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c : Int) : a = 1 → c = -2 → a = b → c = b → False := by\n  cc\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na b c : ℤ\n⊢ a = 1 → c = -2 → a = b → c = b → False\n", "full_text": "example (a b c : Int) : a = 1 → c = -2 → a = b → c = b → False := by\n  cc\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na b c : ℤ\n⊢ a = 1 → c = -2 → a = b → c = b → False\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b : Char) : a = 'h' → b = 'w' → a = b → False := by\n  cc\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na b : Char\n⊢ a = 'h' → b = 'w' → a = b → False\n", "full_text": "example (a b : Char) : a = 'h' → b = 'w' → a = b → False := by\n  cc\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na b : Char\n⊢ a = 'h' → b = 'w' → a = b → False\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b : String) : a = \"hello\" → b = \"world\" → a = b → False := by\n  cc\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na b : String\n⊢ a = \"hello\" → b = \"world\" → a = b → False\n", "full_text": "example (a b : String) : a = \"hello\" → b = \"world\" → a = b → False := by\n  cc\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na b : String\n⊢ a = \"hello\" → b = \"world\" → a = b → False\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c : String) : a = c → a = \"hello\" → c = \"world\" → c = b → False := by\n  cc\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na b c : String\n⊢ a = c → a = \"hello\" → c = \"world\" → c = b → False\n", "full_text": "example (a b c : String) : a = c → a = \"hello\" → c = \"world\" → c = b → False := by\n  cc\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\na b c : String\n⊢ a = c → a = \"hello\" → c = \"world\" → c = b → False\n/- Goals Accomplished! -/\n"}
{"prompt": "example : @OfNat.ofNat ℕ (nat_lit 0) (instOfNatNat _) =\n    @OfNat.ofNat ℕ (nat_lit 0) (instOfNatNat' _) := by\n  cc\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\nx✝ : Sort u_1\ninstOfNatNat' : x✝\n⊢ 0 = 0\n", "full_text": "example : @OfNat.ofNat ℕ (nat_lit 0) (instOfNatNat _) =\n    @OfNat.ofNat ℕ (nat_lit 0) (instOfNatNat' _) := by\n  cc\nα✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\nx✝ : Sort u_1\ninstOfNatNat' : x✝\n⊢ 0 = 0\n/- α✝¹ : Type u\nop : α✝¹ → α✝¹ → α✝¹\ninst✝² : Std.Associative op\ninst✝¹ : Std.Commutative op\nα✝ α : Type u\ninst✝ : CommRing α\nx✝ : Sort u_1\ninstOfNatNat' : x✝\n⊢ 0 = 0 -/\n"}
{"prompt": "theorem transpose_const {m n} (c : Nat) :\n    transpose (fun (_i : m) (_j : n) => c) = fun _j _i => c := by\n  fail_if_success {rw [transpose]}\n  fail_if_success {simp [transpose]}\n  funext i j -- the rw below does not work without this line\n  rw [transpose]\nx✝ : Sort u_1\ntranspose : x✝\nm : ?m.459\nn : ?m.460\nc : ℕ\n⊢ sorry = fun _j _i => c\n", "full_text": "theorem transpose_const {m n} (c : Nat) :\n    transpose (fun (_i : m) (_j : n) => c) = fun _j _i => c := by\n  fail_if_success {rw [transpose]}\n  fail_if_success {simp [transpose]}\n  funext i j -- the rw below does not work without this line\n  rw [transpose]\nx✝ : Sort u_1\ntranspose : x✝\nm : ?m.459\nn : ?m.460\nc : ℕ\n⊢ sorry = fun _j _i => c\n/- x✝ : Sort u_1\ntranspose : x✝\nm : ?m.459\nn : ?m.460\nc : ℕ\n⊢ sorry = fun _j _i => c -/\n/- x✝ : Sort u_1\ntranspose : x✝\nm : ?m.459\nn : ?m.460\nc : ℕ\n⊢ sorry = fun _j _i => c -/\n/- case h.h\nx✝ : Sort u_1\ntranspose : x✝\nm : ?m.459\nn : ?m.460\nc : ℕ\ni : ?m.461 c\nj : ?m.462 c i\n⊢ sorry i j = c -/\n/- case h.h\nx✝ : Sort u_1\ntranspose : x✝\nm : ?m.459\nn : ?m.460\nc : ℕ\ni : ?m.461 c\nj : ?m.462 c i\n⊢ sorry i j = c -/\n"}
{"prompt": "example (n : Nat) : t = n := by\n  rw [t]\n  admit\nt n : ℕ\n⊢ t = n\n", "full_text": "example (n : Nat) : t = n := by\n  rw [t]\n  admit\nt n : ℕ\n⊢ t = n\n/- t n : ℕ\n⊢ t = n -/\n"}
{"prompt": "example (x : α × β × γ) : True := by\n  cases' x with a b; cases' b with b c\n  guard_hyp a : α\n  guard_hyp b : β\n  guard_hyp c : γ\n  trivial\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nx : α × β × γ\n⊢ True\n", "full_text": "example (x : α × β × γ) : True := by\n  cases' x with a b; cases' b with b c\n  guard_hyp a : α\n  guard_hyp b : β\n  guard_hyp c : γ\n  trivial\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nx : α × β × γ\n⊢ True\n/- case mk\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\na : α\nb : β × γ\n⊢ True -/\n/- case mk.mk\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\na : α\nb : β\nc : γ\n⊢ True -/\n/- case mk.mk\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\na : α\nb : β\nc : γ\n⊢ True -/\n/- case mk.mk\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\na : α\nb : β\nc : γ\n⊢ True -/\n/- case mk.mk\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\na : α\nb : β\nc : γ\n⊢ True -/\n"}
{"prompt": "example {α β γ : Type u} (x : α × β × γ) : True := by\n  cases' h: x with a b\n  guard_hyp a : α\n  guard_hyp b : β × γ\n  guard_hyp x : α × β × γ\n  guard_hyp h : x = (a, b)\n  trivial\nα β γ : Type u\nx : α × β × γ\n⊢ True\n", "full_text": "example {α β γ : Type u} (x : α × β × γ) : True := by\n  cases' h: x with a b\n  guard_hyp a : α\n  guard_hyp b : β × γ\n  guard_hyp x : α × β × γ\n  guard_hyp h : x = (a, b)\n  trivial\nα β γ : Type u\nx : α × β × γ\n⊢ True\n/- case mk\nα β γ : Type u\nx : α × β × γ\na : α\nb : β × γ\nh : x = (a, b)\n⊢ True -/\n/- case mk\nα β γ : Type u\nx : α × β × γ\na : α\nb : β × γ\nh : x = (a, b)\n⊢ True -/\n/- case mk\nα β γ : Type u\nx : α × β × γ\na : α\nb : β × γ\nh : x = (a, b)\n⊢ True -/\n/- case mk\nα β γ : Type u\nx : α × β × γ\na : α\nb : β × γ\nh : x = (a, b)\n⊢ True -/\n/- case mk\nα β γ : Type u\nx : α × β × γ\na : α\nb : β × γ\nh : x = (a, b)\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x : ℕ) : True := by\n  cases' h: x using my_rec with y\n  case zee => guard_hyp h : x = 0; trivial\n  case soo => guard_hyp h : x = y + 1; trivial\nx : ℕ\n⊢ True\n", "full_text": "example (x : ℕ) : True := by\n  cases' h: x using my_rec with y\n  case zee => guard_hyp h : x = 0; trivial\n  case soo => guard_hyp h : x = y + 1; trivial\nx : ℕ\n⊢ True\n/- x x✝ : ℕ\nh : x = x✝\n⊢ True -/\n"}
{"prompt": "example (x : Foo α β) : True := by\n  cases' x with a₀ a₁ _ a₂ b₂ c₂\n  · guard_hyp a₀ : α; trivial\n  · guard_hyp a₁ : α; have : β := (by assumption); trivial\n  · guard_hyp a₂ : α; guard_hyp b₂ : β; guard_hyp c₂ : Foo α β; trivial\nx✝ : Sort u_1\nFoo : x✝\nx : sorry\n⊢ True\n", "full_text": "example (x : Foo α β) : True := by\n  cases' x with a₀ a₁ _ a₂ b₂ c₂\n  · guard_hyp a₀ : α; trivial\n  · guard_hyp a₁ : α; have : β := (by assumption); trivial\n  · guard_hyp a₂ : α; guard_hyp b₂ : β; guard_hyp c₂ : Foo α β; trivial\nx✝ : Sort u_1\nFoo : x✝\nx : sorry\n⊢ True\n/- x✝ : Sort u_1\nFoo : x✝\nx : sorry\n⊢ True -/\n"}
{"prompt": "example (x : Bar 0) : True := by\n  cases' x with a b c d h\n  · guard_hyp d : ℕ; guard_hyp h : Bar (0 + 1); trivial\nx✝ : Sort u_1\nBar : x✝\nx : sorry\n⊢ True\n", "full_text": "example (x : Bar 0) : True := by\n  cases' x with a b c d h\n  · guard_hyp d : ℕ; guard_hyp h : Bar (0 + 1); trivial\nx✝ : Sort u_1\nBar : x✝\nx : sorry\n⊢ True\n/- x✝ : Sort u_1\nBar : x✝\nx : sorry\n⊢ True -/\n"}
{"prompt": "example (n : Nat) : n = n := by\n  induction' n with n ih\n  · guard_target =ₛ 0 = 0; rfl\n  · guard_hyp n : Nat; guard_hyp ih : n = n\n    guard_target =ₛ n + 1 = n + 1; exact congr_arg (· + 1) ih\nn : ℕ\n⊢ n = n\n", "full_text": "example (n : Nat) : n = n := by\n  induction' n with n ih\n  · guard_target =ₛ 0 = 0; rfl\n  · guard_hyp n : Nat; guard_hyp ih : n = n\n    guard_target =ₛ n + 1 = n + 1; exact congr_arg (· + 1) ih\nn : ℕ\n⊢ n = n\n/- case zero\n⊢ 0 = 0\n---\ncase succ\nn : ℕ\nih : n = n\n⊢ n + 1 = n + 1 -/\n/- case zero\n⊢ 0 = 0 -/\n/- Goals Accomplished! -/\n/- case succ\nn : ℕ\nih : n = n\n⊢ n + 1 = n + 1 -/\n"}
{"prompt": "example (n : Nat) (h : n < 5) : n = n := by\n  induction' n with n ih\n  · guard_target =ₛ 0 = 0; rfl\n  · guard_hyp n : Nat; guard_hyp ih : n < 5 → n = n; guard_hyp h :ₛ n + 1 < 5\n    guard_target =ₛ n + 1 = n + 1; rfl\nn : ℕ\nh : n < 5\n⊢ n = n\n", "full_text": "example (n : Nat) (h : n < 5) : n = n := by\n  induction' n with n ih\n  · guard_target =ₛ 0 = 0; rfl\n  · guard_hyp n : Nat; guard_hyp ih : n < 5 → n = n; guard_hyp h :ₛ n + 1 < 5\n    guard_target =ₛ n + 1 = n + 1; rfl\nn : ℕ\nh : n < 5\n⊢ n = n\n/- case zero\nh : 0 < 5\n⊢ 0 = 0\n---\ncase succ\nn : ℕ\nih : n < 5 → n = n\nh : n + 1 < 5\n⊢ n + 1 = n + 1 -/\n/- case zero\nh : 0 < 5\n⊢ 0 = 0 -/\n/- Goals Accomplished! -/\n/- case succ\nn : ℕ\nih : n < 5 → n = n\nh : n + 1 < 5\n⊢ n + 1 = n + 1 -/\n"}
{"prompt": "example (n : Nat) {m} (h : m < 5) : n = n := by\n  induction' n with n ih\n  · guard_target = Nat.zero = Nat.zero; rfl\n  · guard_hyp n : Nat; guard_hyp ih : n = n; guard_hyp h : m < 5\n    guard_target = Nat.succ n = Nat.succ n; rfl\nn m : ℕ\nh : m < 5\n⊢ n = n\n", "full_text": "example (n : Nat) {m} (h : m < 5) : n = n := by\n  induction' n with n ih\n  · guard_target = Nat.zero = Nat.zero; rfl\n  · guard_hyp n : Nat; guard_hyp ih : n = n; guard_hyp h : m < 5\n    guard_target = Nat.succ n = Nat.succ n; rfl\nn m : ℕ\nh : m < 5\n⊢ n = n\n/- case zero\nm : ℕ\nh : m < 5\n⊢ 0 = 0\n---\ncase succ\nm : ℕ\nh : m < 5\nn : ℕ\nih : n = n\n⊢ n + 1 = n + 1 -/\n/- case zero\nm : ℕ\nh : m < 5\n⊢ 0 = 0 -/\n/- Goals Accomplished! -/\n/- case succ\nm : ℕ\nh : m < 5\nn : ℕ\nih : n = n\n⊢ n + 1 = n + 1 -/\n"}
{"prompt": "example (n : Nat) {m} (h : m < 5) : n = n := by\n  induction' n with n ih generalizing m\n  · guard_target = Nat.zero = Nat.zero; rfl\n  · guard_hyp n : Nat; guard_hyp ih : ∀ {m}, m < 5 → n = n; guard_hyp h : m < 5\n    guard_target = Nat.succ n = Nat.succ n; rfl\nn m : ℕ\nh : m < 5\n⊢ n = n\n", "full_text": "example (n : Nat) {m} (h : m < 5) : n = n := by\n  induction' n with n ih generalizing m\n  · guard_target = Nat.zero = Nat.zero; rfl\n  · guard_hyp n : Nat; guard_hyp ih : ∀ {m}, m < 5 → n = n; guard_hyp h : m < 5\n    guard_target = Nat.succ n = Nat.succ n; rfl\nn m : ℕ\nh : m < 5\n⊢ n = n\n/- case zero\nm : ℕ\nh : m < 5\n⊢ 0 = 0\n---\ncase succ\nn : ℕ\nih : ∀ {m : ℕ}, m < 5 → n = n\nm : ℕ\nh : m < 5\n⊢ n + 1 = n + 1 -/\n/- case zero\nm : ℕ\nh : m < 5\n⊢ 0 = 0 -/\n/- Goals Accomplished! -/\n/- case succ\nn : ℕ\nih : ∀ {m : ℕ}, m < 5 → n = n\nm : ℕ\nh : m < 5\n⊢ n + 1 = n + 1 -/\n"}
{"prompt": "example (n : Nat) : n = n := by\n  induction' e : n with m ih\n  · guard_hyp e : n = Nat.zero; guard_target = Nat.zero = Nat.zero; rfl\n  · guard_hyp m : Nat; guard_hyp ih : n = m → m = m\n    guard_hyp e : n = Nat.succ m; guard_target = Nat.succ m = Nat.succ m; rfl\nn : ℕ\n⊢ n = n\n", "full_text": "example (n : Nat) : n = n := by\n  induction' e : n with m ih\n  · guard_hyp e : n = Nat.zero; guard_target = Nat.zero = Nat.zero; rfl\n  · guard_hyp m : Nat; guard_hyp ih : n = m → m = m\n    guard_hyp e : n = Nat.succ m; guard_target = Nat.succ m = Nat.succ m; rfl\nn : ℕ\n⊢ n = n\n/- case zero\nn : ℕ\ne : n = 0\n⊢ 0 = 0\n---\ncase succ\nn m : ℕ\nih : n = m → m = m\ne : n = m + 1\n⊢ m + 1 = m + 1 -/\n/- case zero\nn : ℕ\ne : n = 0\n⊢ 0 = 0 -/\n/- case zero\nn : ℕ\ne : n = 0\n⊢ 0 = 0 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (n : Nat) : n = n := by\n  induction' e : n using my_rec with m ih\n  case zee =>\n    guard_hyp e : n = 0; guard_target = 0 = 0; rfl\n  case soo =>\n    guard_hyp m : Nat; guard_hyp ih : n = m → m = m\n    guard_hyp e : n = m + 1; guard_target = m + 1 = m + 1; rfl\nn : ℕ\n⊢ n = n\n", "full_text": "example (n : Nat) : n = n := by\n  induction' e : n using my_rec with m ih\n  case zee =>\n    guard_hyp e : n = 0; guard_target = 0 = 0; rfl\n  case soo =>\n    guard_hyp m : Nat; guard_hyp ih : n = m → m = m\n    guard_hyp e : n = m + 1; guard_target = m + 1 = m + 1; rfl\nn : ℕ\n⊢ n = n\n/- n x✝ : ℕ\ne : n = x✝\n⊢ x✝ = x✝ -/\n"}
{"prompt": "example (x : Foo α Nat) : True := by\n  induction' x with a a' b' a'' b'' c'' ih\n  case A => guard_hyp a : α; trivial\n  case B => guard_hyp a' : α; guard_hyp b' : Nat; trivial\n  case C => guard_hyp a'' : α; guard_hyp b'' : Nat; guard_hyp c'' : Foo α Nat\n            guard_hyp ih : True; trivial\nx✝ : Sort u_1\nFoo : x✝\nx : sorry\n⊢ True\n", "full_text": "example (x : Foo α Nat) : True := by\n  induction' x with a a' b' a'' b'' c'' ih\n  case A => guard_hyp a : α; trivial\n  case B => guard_hyp a' : α; guard_hyp b' : Nat; trivial\n  case C => guard_hyp a'' : α; guard_hyp b'' : Nat; guard_hyp c'' : Foo α Nat\n            guard_hyp ih : True; trivial\nx✝ : Sort u_1\nFoo : x✝\nx : sorry\n⊢ True\n/- x✝ : Sort u_1\nFoo : x✝\nx : sorry\n⊢ True -/\n"}
{"prompt": "example (x : Bar n) : x = x := by\n  induction' x with a b c d h ih\n  case A => guard_target = Bar.A a b = Bar.A a b; rfl\n  case B => guard_hyp h : Bar (c + 1); guard_hyp ih : h = h\n            guard_target = Bar.B c d h = Bar.B c d h; rfl\nx✝ : Sort u_1\nBar : x✝\nx : sorry\n⊢ x = x\n", "full_text": "example (x : Bar n) : x = x := by\n  induction' x with a b c d h ih\n  case A => guard_target = Bar.A a b = Bar.A a b; rfl\n  case B => guard_hyp h : Bar (c + 1); guard_hyp ih : h = h\n            guard_target = Bar.B c d h = Bar.B c d h; rfl\nx✝ : Sort u_1\nBar : x✝\nx : sorry\n⊢ x = x\n/- x✝ : Sort u_1\nBar : x✝\nx : sorry\n⊢ x = x -/\n"}
{"prompt": "example (p q : Prop) : (p → ¬ q) → ¬ (p ∧ q) := by\n  intro hpnq hpq\n  apply hpnq\n  cases' hpq with hp hq\n  assumption\n  exact hpq.2\np q : Prop\n⊢ (p → ¬q) → ¬(p ∧ q)\n", "full_text": "example (p q : Prop) : (p → ¬ q) → ¬ (p ∧ q) := by\n  intro hpnq hpq\n  apply hpnq\n  cases' hpq with hp hq\n  assumption\n  exact hpq.2\np q : Prop\n⊢ (p → ¬q) → ¬(p ∧ q)\n/- p q : Prop\nhpnq : p → ¬q\nhpq : p ∧ q\n⊢ False -/\n/- case a\np q : Prop\nhpnq : p → ¬q\nhpq : p ∧ q\n⊢ p\n---\ncase a\np q : Prop\nhpnq : p → ¬q\nhpq : p ∧ q\n⊢ q -/\n/- case a.intro\np q : Prop\nhpnq : p → ¬q\nhp : p\nhq : q\n⊢ p\n---\ncase a\np q : Prop\nhpnq : p → ¬q\nhpq : p ∧ q\n⊢ q -/\n/- case a\np q : Prop\nhpnq : p → ¬q\nhpq : p ∧ q\n⊢ q -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b : ℕ) (h : a + b = a) : b = 0 := by\n  induction' a with d hd\n  · -- Test the generalized vars have been removed\n    revert h\n    fail_if_success (guard_hyp a : Nat)\n    fail_if_success (guard_hyp h : a + b = a)\n    intro h\n    -- Sample proof\n    rw [Nat.zero_add] at h\n    assumption\n  · -- Test the generalized vars have been removed\n    revert h\n    fail_if_success (guard_hyp a : Nat)\n    fail_if_success (guard_hyp h : a + b = a)\n    intro h\n    -- Sample proof\n    rw [Nat.succ_add, Nat.succ.injEq] at h\n    apply hd\n    assumption\na b : ℕ\nh : a + b = a\n⊢ b = 0\n", "full_text": "example (a b : ℕ) (h : a + b = a) : b = 0 := by\n  induction' a with d hd\n  · -- Test the generalized vars have been removed\n    revert h\n    fail_if_success (guard_hyp a : Nat)\n    fail_if_success (guard_hyp h : a + b = a)\n    intro h\n    -- Sample proof\n    rw [Nat.zero_add] at h\n    assumption\n  · -- Test the generalized vars have been removed\n    revert h\n    fail_if_success (guard_hyp a : Nat)\n    fail_if_success (guard_hyp h : a + b = a)\n    intro h\n    -- Sample proof\n    rw [Nat.succ_add, Nat.succ.injEq] at h\n    apply hd\n    assumption\na b : ℕ\nh : a + b = a\n⊢ b = 0\n/- case zero\nb : ℕ\nh : 0 + b = 0\n⊢ b = 0\n---\ncase succ\nb d : ℕ\nhd : d + b = d → b = 0\nh : d + 1 + b = d + 1\n⊢ b = 0 -/\n/- case zero\nb : ℕ\n⊢ 0 + b = 0 → b = 0 -/\n/- case zero\nb : ℕ\n⊢ 0 + b = 0 → b = 0 -/\n/- case zero\nb : ℕ\n⊢ 0 + b = 0 → b = 0 -/\n/- case zero\nb : ℕ\nh : 0 + b = 0\n⊢ b = 0 -/\n/- case zero\nb : ℕ\nh : b = 0\n⊢ b = 0 -/\n/- Goals Accomplished! -/\n/- case succ\nb d : ℕ\nhd : d + b = d → b = 0\n⊢ d + 1 + b = d + 1 → b = 0 -/\n/- case succ\nb d : ℕ\nhd : d + b = d → b = 0\n⊢ d + 1 + b = d + 1 → b = 0 -/\n/- case succ\nb d : ℕ\nhd : d + b = d → b = 0\n⊢ d + 1 + b = d + 1 → b = 0 -/\n/- case succ\nb d : ℕ\nhd : d + b = d → b = 0\nh : d + 1 + b = d + 1\n⊢ b = 0 -/\n/- case succ\nb d : ℕ\nhd : d + b = d → b = 0\nh : d + b = d\n⊢ b = 0 -/\n/- case succ\nb d : ℕ\nhd : d + b = d → b = 0\nh : d + b = d\n⊢ d + b = d -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (n : ℕ) (a : Fin n) : True := by\n  induction' n generalizing a\nn : ℕ\na : Fin n\n⊢ True\n", "full_text": "example (n : ℕ) (a : Fin n) : True := by\n  induction' n generalizing a\nn : ℕ\na : Fin n\n⊢ True\n/- n : ℕ\na : Fin n\n⊢ True -/\n"}
{"prompt": "example (m : ℕ) : True := by\n  induction' m generalizing m\nm : ℕ\n⊢ True\n", "full_text": "example (m : ℕ) : True := by\n  induction' m generalizing m\nm : ℕ\n⊢ True\n/- m : ℕ\n⊢ True -/\n"}
{"prompt": "example : True := by\n  aesop (add safe (by simp))\n⊢ True\n", "full_text": "example : True := by\n  aesop (add safe (by simp))\n⊢ True\n/- Goals Accomplished! -/\n"}
{"prompt": "example {x y : ℕ} : True := by\n  wlog h : x ≤ y\n  · guard_hyp h : ¬x ≤ y\n    guard_hyp this : ∀ {x y : ℕ}, x ≤ y → True -- `wlog` generalizes by default\n    guard_target =ₛ True\n    trivial\n  · guard_hyp h : x ≤ y\n    guard_target =ₛ True\n    trivial\nx y : ℕ\n⊢ True\n", "full_text": "example {x y : ℕ} : True := by\n  wlog h : x ≤ y\n  · guard_hyp h : ¬x ≤ y\n    guard_hyp this : ∀ {x y : ℕ}, x ≤ y → True -- `wlog` generalizes by default\n    guard_target =ₛ True\n    trivial\n  · guard_hyp h : x ≤ y\n    guard_target =ₛ True\n    trivial\nx y : ℕ\n⊢ True\n/- case inr\nx y : ℕ\nthis : ∀ {x y : ℕ}, x ≤ y → True\nh : ¬x ≤ y\n⊢ True\n---\nx y : ℕ\nh : x ≤ y\n⊢ True -/\n/- case inr\nx y : ℕ\nthis : ∀ {x y : ℕ}, x ≤ y → True\nh : ¬x ≤ y\n⊢ True -/\n/- case inr\nx y : ℕ\nthis : ∀ {x y : ℕ}, x ≤ y → True\nh : ¬x ≤ y\n⊢ True -/\n/- case inr\nx y : ℕ\nthis : ∀ {x y : ℕ}, x ≤ y → True\nh : ¬x ≤ y\n⊢ True -/\n/- Goals Accomplished! -/\n/- x y : ℕ\nh : x ≤ y\n⊢ True -/\n/- x y : ℕ\nh : x ≤ y\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {x y : ℕ} : True := by\n  wlog h : x ≤ y generalizing x with H\n  · guard_hyp h : ¬x ≤ y\n    guard_hyp H : ∀ {x : ℕ}, x ≤ y → True -- only `x` was generalized\n    guard_target =ₛ True\n    trivial\n  · guard_hyp h : x ≤ y\n    guard_target =ₛ True\n    trivial\nx y : ℕ\n⊢ True\n", "full_text": "example {x y : ℕ} : True := by\n  wlog h : x ≤ y generalizing x with H\n  · guard_hyp h : ¬x ≤ y\n    guard_hyp H : ∀ {x : ℕ}, x ≤ y → True -- only `x` was generalized\n    guard_target =ₛ True\n    trivial\n  · guard_hyp h : x ≤ y\n    guard_target =ₛ True\n    trivial\nx y : ℕ\n⊢ True\n/- case inr\nx y : ℕ\nH : ∀ {x : ℕ}, x ≤ y → True\nh : ¬x ≤ y\n⊢ True\n---\ny x : ℕ\nh : x ≤ y\n⊢ True -/\n/- case inr\nx y : ℕ\nH : ∀ {x : ℕ}, x ≤ y → True\nh : ¬x ≤ y\n⊢ True -/\n/- case inr\nx y : ℕ\nH : ∀ {x : ℕ}, x ≤ y → True\nh : ¬x ≤ y\n⊢ True -/\n/- case inr\nx y : ℕ\nH : ∀ {x : ℕ}, x ≤ y → True\nh : ¬x ≤ y\n⊢ True -/\n/- Goals Accomplished! -/\n/- y x : ℕ\nh : x ≤ y\n⊢ True -/\n/- y x : ℕ\nh : x ≤ y\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {x y z : ℕ} : True := by\n  wlog h : x ≤ y + z with H\n  · guard_hyp h : ¬ x ≤ y + z\n    guard_hyp H : ∀ {x y z : ℕ}, x ≤ y + z → True -- wlog-claim is named `H` instead of `this`\n    guard_target =ₛ True\n    trivial\n  · guard_hyp h : x ≤ y + z\n    guard_target =ₛ True\n    trivial\nx y z : ℕ\n⊢ True\n", "full_text": "example {x y z : ℕ} : True := by\n  wlog h : x ≤ y + z with H\n  · guard_hyp h : ¬ x ≤ y + z\n    guard_hyp H : ∀ {x y z : ℕ}, x ≤ y + z → True -- wlog-claim is named `H` instead of `this`\n    guard_target =ₛ True\n    trivial\n  · guard_hyp h : x ≤ y + z\n    guard_target =ₛ True\n    trivial\nx y z : ℕ\n⊢ True\n/- case inr\nx y z : ℕ\nH : ∀ {x y z : ℕ}, x ≤ y + z → True\nh : ¬x ≤ y + z\n⊢ True\n---\nx y z : ℕ\nh : x ≤ y + z\n⊢ True -/\n/- case inr\nx y z : ℕ\nH : ∀ {x y z : ℕ}, x ≤ y + z → True\nh : ¬x ≤ y + z\n⊢ True -/\n/- case inr\nx y z : ℕ\nH : ∀ {x y z : ℕ}, x ≤ y + z → True\nh : ¬x ≤ y + z\n⊢ True -/\n/- case inr\nx y z : ℕ\nH : ∀ {x y z : ℕ}, x ≤ y + z → True\nh : ¬x ≤ y + z\n⊢ True -/\n/- Goals Accomplished! -/\n/- x y z : ℕ\nh : x ≤ y + z\n⊢ True -/\n/- x y z : ℕ\nh : x ≤ y + z\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : ∀ _ _ : ℕ, True := by\n  intro x y\n  wlog h : x ≤ y -- `wlog` finds new variables\n  · trivial\n  · trivial\n⊢ ℕ → ℕ → True\n", "full_text": "example : ∀ _ _ : ℕ, True := by\n  intro x y\n  wlog h : x ≤ y -- `wlog` finds new variables\n  · trivial\n  · trivial\n⊢ ℕ → ℕ → True\n/- x y : ℕ\n⊢ True -/\n/- case inr\nx y : ℕ\nthis : ∀ (x y : ℕ), x ≤ y → True\nh : ¬x ≤ y\n⊢ True\n---\nx y : ℕ\nh : x ≤ y\n⊢ True -/\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {x y : ℕ} : True := by\n  wlog h : x ≤ y generalizing y x with H\n  · guard_hyp h : ¬ x ≤ y\n    guard_hyp H : ∀ {x y : ℕ}, x ≤ y → True -- order of ids in `generalizing` is ignored\n    trivial\n  · trivial\nx y : ℕ\n⊢ True\n", "full_text": "example {x y : ℕ} : True := by\n  wlog h : x ≤ y generalizing y x with H\n  · guard_hyp h : ¬ x ≤ y\n    guard_hyp H : ∀ {x y : ℕ}, x ≤ y → True -- order of ids in `generalizing` is ignored\n    trivial\n  · trivial\nx y : ℕ\n⊢ True\n/- case inr\nx y : ℕ\nH : ∀ {x y : ℕ}, x ≤ y → True\nh : ¬x ≤ y\n⊢ True\n---\nx y : ℕ\nh : x ≤ y\n⊢ True -/\n/- case inr\nx y : ℕ\nH : ∀ {x y : ℕ}, x ≤ y → True\nh : ¬x ≤ y\n⊢ True -/\n/- case inr\nx y : ℕ\nH : ∀ {x y : ℕ}, x ≤ y → True\nh : ¬x ≤ y\n⊢ True -/\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (α : Type := ℕ) (x : Option α := none) (y : Option α := by exact 0) : True := by\n  wlog h : x = y with H\n  · guard_hyp h : ¬ x = y\n    guard_hyp H : ∀ α, ∀ {x y : Option α}, x = y → True\n    trivial\n  · guard_hyp h : x = y\n    guard_target =ₛ True\n    trivial\nα : optParam Type ℕ\nx : optParam (Option α) none\ny : autoParam (Option α) _auto✝\n⊢ True\n", "full_text": "example (α : Type := ℕ) (x : Option α := none) (y : Option α := by exact 0) : True := by\n  wlog h : x = y with H\n  · guard_hyp h : ¬ x = y\n    guard_hyp H : ∀ α, ∀ {x y : Option α}, x = y → True\n    trivial\n  · guard_hyp h : x = y\n    guard_target =ₛ True\n    trivial\nα : optParam Type ℕ\nx : optParam (Option α) none\ny : autoParam (Option α) _auto✝\n⊢ True\n/- case inr\nα : optParam Type ℕ\nx : optParam (Option α) none\ny : autoParam (Option α) _auto✝\nH : ∀ (α : optParam Type ℕ) (x : optParam (Option α) none) (y : autoParam (Option α) _auto✝), x = y → True\nh : ¬x = y\n⊢ True\n---\nα : optParam Type ℕ\nx : optParam (Option α) none\ny : autoParam (Option α) _auto✝\nh : x = y\n⊢ True -/\n/- case inr\nα : optParam Type ℕ\nx : optParam (Option α) none\ny : autoParam (Option α) _auto✝\nH : ∀ (α : optParam Type ℕ) (x : optParam (Option α) none) (y : autoParam (Option α) _auto✝), x = y → True\nh : ¬x = y\n⊢ True -/\n/- case inr\nα : optParam Type ℕ\nx : optParam (Option α) none\ny : autoParam (Option α) _auto✝\nH : ∀ (α : optParam Type ℕ) (x : optParam (Option α) none) (y : autoParam (Option α) _auto✝), x = y → True\nh : ¬x = y\n⊢ True -/\n/- Goals Accomplished! -/\n/- α : optParam Type ℕ\nx : optParam (Option α) none\ny : autoParam (Option α) _auto✝\nh : x = y\n⊢ True -/\n/- α : optParam Type ℕ\nx : optParam (Option α) none\ny : autoParam (Option α) _auto✝\nh : x = y\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {x y : ℕ} : True := by\n  wlog _ : x ≤ y\n  case _ h => -- if these hypotheses weren't inaccessible, they wouldn't be renamed by `case`\n    guard_hyp h : ¬x ≤ y\n    guard_hyp this : ∀ {x y : ℕ}, x ≤ y → True\n    guard_target =ₛ True\n    trivial\n  case _ h =>\n    guard_hyp h : x ≤ y\n    guard_target =ₛ True\n    trivial\nx y : ℕ\n⊢ True\n", "full_text": "example {x y : ℕ} : True := by\n  wlog _ : x ≤ y\n  case _ h => -- if these hypotheses weren't inaccessible, they wouldn't be renamed by `case`\n    guard_hyp h : ¬x ≤ y\n    guard_hyp this : ∀ {x y : ℕ}, x ≤ y → True\n    guard_target =ₛ True\n    trivial\n  case _ h =>\n    guard_hyp h : x ≤ y\n    guard_target =ₛ True\n    trivial\nx y : ℕ\n⊢ True\n/- case inr\nx y : ℕ\nthis : ∀ {x y : ℕ}, x ≤ y → True\nh✝ : ¬x ≤ y\n⊢ True\n---\nx y : ℕ\nh✝ : x ≤ y\n⊢ True -/\n/- x y : ℕ\nh✝ : x ≤ y\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x y : ℕ) : True := by\n  let z := 0\n  wlog hxy' : z ≤ y with H\n  · trivial\n  · trivial\nx y : ℕ\n⊢ True\n", "full_text": "example (x y : ℕ) : True := by\n  let z := 0\n  wlog hxy' : z ≤ y with H\n  · trivial\n  · trivial\nx y : ℕ\n⊢ True\n/- x y : ℕ\nz : ℕ := 0\n⊢ True -/\n/- case inr\nx y : ℕ\nz : ℕ := 0\nH :\n  ℕ →\n    ∀ (y : ℕ),\n      let z := 0;\n      z ≤ y → True\nhxy' : ¬z ≤ y\n⊢ True\n---\nx y : ℕ\nz : ℕ := 0\nhxy' : z ≤ y\n⊢ True -/\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (_h₁ : ((List.range 128).map (fun _ => 0)).sum = 0) : 0 ∣ 1 := by\n  apply Nat.dvd_of_mul_dvd_mul_left Nat.zero_lt_one\n  convert Nat.dvd_mul_left 0 1\n_h₁ : (List.map (fun x => 0) (List.range 128)).sum = 0\n⊢ 0 ∣ 1\n", "full_text": "example (_h₁ : ((List.range 128).map (fun _ => 0)).sum = 0) : 0 ∣ 1 := by\n  apply Nat.dvd_of_mul_dvd_mul_left Nat.zero_lt_one\n  convert Nat.dvd_mul_left 0 1\n_h₁ : (List.map (fun x => 0) (List.range 128)).sum = 0\n⊢ 0 ∣ 1\n/- _h₁ : (List.map (fun x => 0) (List.range 128)).sum = 0\n⊢ 1 * 0 ∣ 1 * 1 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {_ : MeasurableSpace α} (μ : Measure α) [IsFiniteMeasure μ] (s : Set α) : μ s ≠ ∞ := by\n  finiteness\nα : Type u_1\nx✝ : MeasurableSpace α\nμ : Measure α\ninst✝ : IsFiniteMeasure μ\ns : Set α\n⊢ μ s ≠ ⊤\n", "full_text": "example {_ : MeasurableSpace α} (μ : Measure α) [IsFiniteMeasure μ] (s : Set α) : μ s ≠ ∞ := by\n  finiteness\nα : Type u_1\nx✝ : MeasurableSpace α\nμ : Measure α\ninst✝ : IsFiniteMeasure μ\ns : Set α\n⊢ μ s ≠ ⊤\n/- Goals Accomplished! -/\n"}
{"prompt": "example : frobnicate a 0 = a := by\n  simp [frobnicate]\nx✝ : Sort u_1\nfrobnicate : x✝\nα✝ : Sort u_2\na : α✝\n⊢ sorry = a\n", "full_text": "example : frobnicate a 0 = a := by\n  simp [frobnicate]\nx✝ : Sort u_1\nfrobnicate : x✝\nα✝ : Sort u_2\na : α✝\n⊢ sorry = a\n/- x✝ : Sort u_1\nfrobnicate : x✝\nα✝ : Sort u_2\na : α✝\n⊢ sorry () = a -/\n"}
{"prompt": "example : True := by\n  trace 2 + 2 + 3\n  trivial\n⊢ True\n", "full_text": "example : True := by\n  trace 2 + 2 + 3\n  trivial\n⊢ True\n/- ⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : True := by\n  trace \"hello\" ++ \" world\"\n  trivial\n⊢ True\n", "full_text": "example : True := by\n  trace \"hello\" ++ \" world\"\n  trivial\n⊢ True\n/- ⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : Nat := by\n  (show_term exact 37) says\n⊢ ℕ\n", "full_text": "example : Nat := by\n  (show_term exact 37) says\n⊢ ℕ\n/- Goals Accomplished! -/\n"}
{"prompt": "example : Nat := by\n  (show_term exact 37) says exact 37\n⊢ ℕ\n", "full_text": "example : Nat := by\n  (show_term exact 37) says exact 37\n⊢ ℕ\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x y : List α) : (x ++ y).length = x.length + y.length := by\n  simp? says\nα : Type u_1\nx y : List α\n⊢ (x ++ y).length = x.length + y.length\n", "full_text": "example (x y : List α) : (x ++ y).length = x.length + y.length := by\n  simp? says\nα : Type u_1\nx y : List α\n⊢ (x ++ y).length = x.length + y.length\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x y : List α) : (x ++ y).length = x.length + y.length := by\n  simp? says simp only [List.length_append]\nα : Type u_1\nx y : List α\n⊢ (x ++ y).length = x.length + y.length\n", "full_text": "example (x y : List α) : (x ++ y).length = x.length + y.length := by\n  simp? says simp only [List.length_append]\nα : Type u_1\nx y : List α\n⊢ (x ++ y).length = x.length + y.length\n/- Goals Accomplished! -/\n"}
{"prompt": "example : true := by\n  have := 0 says\n⊢ true = true\n", "full_text": "example : true := by\n  have := 0 says\n⊢ true = true\n/- this : ℕ\n⊢ true = true -/\n"}
{"prompt": "example : true := by\n  (run_tac do Lean.logInfo \"hi!\") says\n⊢ true = true\n", "full_text": "example : true := by\n  (run_tac do Lean.logInfo \"hi!\") says\n⊢ true = true\n/- ⊢ true = true -/\n"}
{"prompt": "example (x y : List α) : (x ++ y).length = x.length + y.length := by\n  simp? says skip\n  simp\nα : Type u_1\nx y : List α\n⊢ (x ++ y).length = x.length + y.length\n", "full_text": "example (x y : List α) : (x ++ y).length = x.length + y.length := by\n  simp? says skip\n  simp\nα : Type u_1\nx y : List α\n⊢ (x ++ y).length = x.length + y.length\n/- α : Type u_1\nx y : List α\n⊢ (x ++ y).length = x.length + y.length -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x y : List α) : (x ++ y).length = x.length + y.length := by\n  simp? says simp only []\nα : Type u_1\nx y : List α\n⊢ (x ++ y).length = x.length + y.length\n", "full_text": "example (x y : List α) : (x ++ y).length = x.length + y.length := by\n  simp? says simp only []\nα : Type u_1\nx y : List α\n⊢ (x ++ y).length = x.length + y.length\n/- α : Type u_1\nx y : List α\n⊢ (x ++ y).length = x.length + y.length -/\n"}
{"prompt": "example : True := by\n  simp says\n  trivial\n⊢ True\n", "full_text": "example : True := by\n  simp says\n  trivial\n⊢ True\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x y : List α) : (x ++ y).length = x.length + y.length := by\n  simp? says simp only [List.length_append]\n  -- This is a comment to test that `says` ignores following comments.\nα : Type u_1\nx y : List α\n⊢ (x ++ y).length = x.length + y.length\n", "full_text": "example (x y : List α) : (x ++ y).length = x.length + y.length := by\n  simp? says simp only [List.length_append]\n  -- This is a comment to test that `says` ignores following comments.\nα : Type u_1\nx y : List α\n⊢ (x ++ y).length = x.length + y.length\n/- Goals Accomplished! -/\n"}
{"prompt": "example : True := by\n  simp says\n    trivial\n⊢ True\n", "full_text": "example : True := by\n  simp says\n    trivial\n⊢ True\n/- Goals Accomplished! -/\n"}
{"prompt": "example : True := by\n  simp says\n    trivial\n⊢ True\n", "full_text": "example : True := by\n  simp says\n    trivial\n⊢ True\n/- Goals Accomplished! -/\n"}
{"prompt": "example : True := by\n  fail_if_success\n    run_tac do guard (← IO.getEnv \"CI\").isSome\n    simp says trivial\n  trivial\n⊢ True\n", "full_text": "example : True := by\n  fail_if_success\n    run_tac do guard (← IO.getEnv \"CI\").isSome\n    simp says trivial\n  trivial\n⊢ True\n/- ⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : P := by\n  aesop? says\nP : Sort ?u.5\n⊢ P\n", "full_text": "example : P := by\n  aesop? says\nP : Sort ?u.5\n⊢ P\n/- P : Sort ?u.5\n⊢ P -/\n"}
{"prompt": "example (h : let x := 1; x = x) : True := by\n  extract_lets y at h\n  fail_if_success extract_lets a at h\n  extract_lets at h\n  guard_hyp y : Nat := 1\n  guard_hyp h :ₛ y = y\n  trivial\nh :\n  let x := 1;\n  x = x\n⊢ True\n", "full_text": "example (h : let x := 1; x = x) : True := by\n  extract_lets y at h\n  fail_if_success extract_lets a at h\n  extract_lets at h\n  guard_hyp y : Nat := 1\n  guard_hyp h :ₛ y = y\n  trivial\nh :\n  let x := 1;\n  x = x\n⊢ True\n/- y : ℕ := 1\nh : y = y\n⊢ True -/\n/- y : ℕ := 1\nh : y = y\n⊢ True -/\n/- y : ℕ := 1\nh : y = y\n⊢ True -/\n/- y : ℕ := 1\nh : y = y\n⊢ True -/\n/- y : ℕ := 1\nh : y = y\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : True := by\n  let h : (let x := 1; x = x) := rfl\n  extract_lets y at h\n  guard_hyp y : Nat := 1\n  guard_hyp h :ₛ y = y := rfl\n  trivial\n⊢ True\n", "full_text": "example : True := by\n  let h : (let x := 1; x = x) := rfl\n  extract_lets y at h\n  guard_hyp y : Nat := 1\n  guard_hyp h :ₛ y = y := rfl\n  trivial\n⊢ True\n/- h : let x := 1;\nx = x :=\n  rfl\n⊢ True -/\n/- y : ℕ := 1\nh : y = y := rfl\n⊢ True -/\n/- y : ℕ := 1\nh : y = y := rfl\n⊢ True -/\n/- y : ℕ := 1\nh : y = y := rfl\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : let x := 1; let y := 2; x + 1 = y) : True := by\n  extract_lets x y at h\n  guard_hyp x : Nat := 1\n  guard_hyp y : Nat := 2\n  guard_hyp h :ₛ x + 1 = y\n  trivial\nh :\n  let x := 1;\n  let y := 2;\n  x + 1 = y\n⊢ True\n", "full_text": "example (h : let x := 1; let y := 2; x + 1 = y) : True := by\n  extract_lets x y at h\n  guard_hyp x : Nat := 1\n  guard_hyp y : Nat := 2\n  guard_hyp h :ₛ x + 1 = y\n  trivial\nh :\n  let x := 1;\n  let y := 2;\n  x + 1 = y\n⊢ True\n/- x : ℕ := 1\ny : ℕ := 2\nh : x + 1 = y\n⊢ True -/\n/- x : ℕ := 1\ny : ℕ := 2\nh : x + 1 = y\n⊢ True -/\n/- x : ℕ := 1\ny : ℕ := 2\nh : x + 1 = y\n⊢ True -/\n/- x : ℕ := 1\ny : ℕ := 2\nh : x + 1 = y\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : let x := 1; let y := 2; x + 1 = y) : True := by\n  extract_lets at h\n  rename_i a b\n  guard_hyp a : Nat := 1\n  guard_hyp b : Nat := 2\n  guard_hyp h :ₛ a + 1 = b\n  trivial\nh :\n  let x := 1;\n  let y := 2;\n  x + 1 = y\n⊢ True\n", "full_text": "example (h : let x := 1; let y := 2; x + 1 = y) : True := by\n  extract_lets at h\n  rename_i a b\n  guard_hyp a : Nat := 1\n  guard_hyp b : Nat := 2\n  guard_hyp h :ₛ a + 1 = b\n  trivial\nh :\n  let x := 1;\n  let y := 2;\n  x + 1 = y\n⊢ True\n/- x✝ : ℕ := 1\ny✝ : ℕ := 2\nh : x✝ + 1 = y✝\n⊢ True -/\n/- a : ℕ := 1\nb : ℕ := 2\nh : a + 1 = b\n⊢ True -/\n/- a : ℕ := 1\nb : ℕ := 2\nh : a + 1 = b\n⊢ True -/\n/- a : ℕ := 1\nb : ℕ := 2\nh : a + 1 = b\n⊢ True -/\n/- a : ℕ := 1\nb : ℕ := 2\nh : a + 1 = b\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : let x := 1; let y := 2; x + 1 = y) : True := by\n  extract_lets x at h\n  guard_hyp x : Nat := 1\n  guard_hyp h :ₛ let y := 2; x + 1 = y\n  trivial\nh :\n  let x := 1;\n  let y := 2;\n  x + 1 = y\n⊢ True\n", "full_text": "example (h : let x := 1; let y := 2; x + 1 = y) : True := by\n  extract_lets x at h\n  guard_hyp x : Nat := 1\n  guard_hyp h :ₛ let y := 2; x + 1 = y\n  trivial\nh :\n  let x := 1;\n  let y := 2;\n  x + 1 = y\n⊢ True\n/- x : ℕ := 1\nh :\n  let y := 2;\n  x + 1 = y\n⊢ True -/\n/- x : ℕ := 1\nh :\n  let y := 2;\n  x + 1 = y\n⊢ True -/\n/- x : ℕ := 1\nh :\n  let y := 2;\n  x + 1 = y\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : let x := 1; let y := 2; x + 1 = y) : let _z := 3; ∀ (_ : Nat), True := by\n  extract_lets at *\n  guard_hyp h : _ + 1 = _\n  fail_if_success extract_lets x at h\n  guard_target =ₛ ∀ (_ : Nat), True\n  intro\n  trivial\nh :\n  let x := 1;\n  let y := 2;\n  x + 1 = y\n⊢ let _z := 3;\n  ℕ → True\n", "full_text": "example (h : let x := 1; let y := 2; x + 1 = y) : let _z := 3; ∀ (_ : Nat), True := by\n  extract_lets at *\n  guard_hyp h : _ + 1 = _\n  fail_if_success extract_lets x at h\n  guard_target =ₛ ∀ (_ : Nat), True\n  intro\n  trivial\nh :\n  let x := 1;\n  let y := 2;\n  x + 1 = y\n⊢ let _z := 3;\n  ℕ → True\n/- _z✝ : ℕ := 3\nx✝ : ℕ := 1\ny✝ : ℕ := 2\nh : x✝ + 1 = y✝\n⊢ ℕ → True -/\n/- _z✝ : ℕ := 3\nx✝ : ℕ := 1\ny✝ : ℕ := 2\nh : x✝ + 1 = y✝\n⊢ ℕ → True -/\n/- _z✝ : ℕ := 3\nx✝ : ℕ := 1\ny✝ : ℕ := 2\nh : x✝ + 1 = y✝\n⊢ ℕ → True -/\n/- _z✝ : ℕ := 3\nx✝ : ℕ := 1\ny✝ : ℕ := 2\nh : x✝ + 1 = y✝\n⊢ ℕ → True -/\n/- _z✝ : ℕ := 3\nx✝¹ : ℕ := 1\ny✝ : ℕ := 2\nh : x✝¹ + 1 = y✝\nx✝ : ℕ\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : let x := 1; let y := 2; x + 1 = y) :\n    let _z := 3\n    let _z₂ := 5\n    ∀ (_ : Nat), True := by\n  extract_lets at h ⊢\n  guard_hyp h : _ + 1 = _\n  fail_if_success extract_lets x at h\n  guard_target =ₛ ∀ (_ : Nat), True\n  intro\n  trivial\nh :\n  let x := 1;\n  let y := 2;\n  x + 1 = y\n⊢ let _z := 3;\n  let _z₂ := 5;\n  ℕ → True\n", "full_text": "example (h : let x := 1; let y := 2; x + 1 = y) :\n    let _z := 3\n    let _z₂ := 5\n    ∀ (_ : Nat), True := by\n  extract_lets at h ⊢\n  guard_hyp h : _ + 1 = _\n  fail_if_success extract_lets x at h\n  guard_target =ₛ ∀ (_ : Nat), True\n  intro\n  trivial\nh :\n  let x := 1;\n  let y := 2;\n  x + 1 = y\n⊢ let _z := 3;\n  let _z₂ := 5;\n  ℕ → True\n/- x✝ : ℕ := 1\ny✝ : ℕ := 2\nh : x✝ + 1 = y✝\n_z✝ : ℕ := 3\n_z₂✝ : ℕ := 5\n⊢ ℕ → True -/\n/- x✝ : ℕ := 1\ny✝ : ℕ := 2\nh : x✝ + 1 = y✝\n_z✝ : ℕ := 3\n_z₂✝ : ℕ := 5\n⊢ ℕ → True -/\n/- x✝ : ℕ := 1\ny✝ : ℕ := 2\nh : x✝ + 1 = y✝\n_z✝ : ℕ := 3\n_z₂✝ : ℕ := 5\n⊢ ℕ → True -/\n/- x✝ : ℕ := 1\ny✝ : ℕ := 2\nh : x✝ + 1 = y✝\n_z✝ : ℕ := 3\n_z₂✝ : ℕ := 5\n⊢ ℕ → True -/\n/- x✝¹ : ℕ := 1\ny✝ : ℕ := 2\nh : x✝¹ + 1 = y✝\n_z✝ : ℕ := 3\n_z₂✝ : ℕ := 5\nx✝ : ℕ\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : let x := 1; let y := 2; x + 1 = y) :\n    let _z := 3\n    let _z₂ := 5\n    ∀ (_ : Nat), True := by\n  extract_lets\n  fail_if_success extract_lets x\n  guard_hyp h : let x := 1; let y := 2; x + 1 = y\n  guard_target =ₛ ∀ (_ : Nat), True\n  intro\n  trivial\nh :\n  let x := 1;\n  let y := 2;\n  x + 1 = y\n⊢ let _z := 3;\n  let _z₂ := 5;\n  ℕ → True\n", "full_text": "example (h : let x := 1; let y := 2; x + 1 = y) :\n    let _z := 3\n    let _z₂ := 5\n    ∀ (_ : Nat), True := by\n  extract_lets\n  fail_if_success extract_lets x\n  guard_hyp h : let x := 1; let y := 2; x + 1 = y\n  guard_target =ₛ ∀ (_ : Nat), True\n  intro\n  trivial\nh :\n  let x := 1;\n  let y := 2;\n  x + 1 = y\n⊢ let _z := 3;\n  let _z₂ := 5;\n  ℕ → True\n/- h :\n  let x := 1;\n  let y := 2;\n  x + 1 = y\n_z✝ : ℕ := 3\n_z₂✝ : ℕ := 5\n⊢ ℕ → True -/\n/- h :\n  let x := 1;\n  let y := 2;\n  x + 1 = y\n_z✝ : ℕ := 3\n_z₂✝ : ℕ := 5\n⊢ ℕ → True -/\n/- h :\n  let x := 1;\n  let y := 2;\n  x + 1 = y\n_z✝ : ℕ := 3\n_z₂✝ : ℕ := 5\n⊢ ℕ → True -/\n/- h :\n  let x := 1;\n  let y := 2;\n  x + 1 = y\n_z✝ : ℕ := 3\n_z₂✝ : ℕ := 5\n⊢ ℕ → True -/\n/- h :\n  let x := 1;\n  let y := 2;\n  x + 1 = y\n_z✝ : ℕ := 3\n_z₂✝ : ℕ := 5\nx✝ : ℕ\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : let x := 1; let y := 2; x + 1 = y) : let _z := 3; ∀ (_ : Nat), True := by\n  extract_lets u\n  guard_hyp u : Nat := 3\n  fail_if_success extract_lets x\n  guard_target =ₛ ∀ (_ : Nat), True\n  guard_hyp h : let x := 1; let y := 2; x + 1 = y\n  intro\n  trivial\nh :\n  let x := 1;\n  let y := 2;\n  x + 1 = y\n⊢ let _z := 3;\n  ℕ → True\n", "full_text": "example (h : let x := 1; let y := 2; x + 1 = y) : let _z := 3; ∀ (_ : Nat), True := by\n  extract_lets u\n  guard_hyp u : Nat := 3\n  fail_if_success extract_lets x\n  guard_target =ₛ ∀ (_ : Nat), True\n  guard_hyp h : let x := 1; let y := 2; x + 1 = y\n  intro\n  trivial\nh :\n  let x := 1;\n  let y := 2;\n  x + 1 = y\n⊢ let _z := 3;\n  ℕ → True\n/- h :\n  let x := 1;\n  let y := 2;\n  x + 1 = y\nu : ℕ := 3\n⊢ ℕ → True -/\n/- h :\n  let x := 1;\n  let y := 2;\n  x + 1 = y\nu : ℕ := 3\n⊢ ℕ → True -/\n/- h :\n  let x := 1;\n  let y := 2;\n  x + 1 = y\nu : ℕ := 3\n⊢ ℕ → True -/\n/- h :\n  let x := 1;\n  let y := 2;\n  x + 1 = y\nu : ℕ := 3\n⊢ ℕ → True -/\n/- h :\n  let x := 1;\n  let y := 2;\n  x + 1 = y\nu : ℕ := 3\n⊢ ℕ → True -/\n/- h :\n  let x := 1;\n  let y := 2;\n  x + 1 = y\nu : ℕ := 3\nx✝ : ℕ\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (n : ℕ) : True := by\n  fail_if_success interval_cases n\n  trivial\nn : ℕ\n⊢ True\n", "full_text": "example (n : ℕ) : True := by\n  fail_if_success interval_cases n\n  trivial\nn : ℕ\n⊢ True\n/- n : ℕ\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (n : ℕ) (_ : 2 ≤ n) : True := by\n  fail_if_success interval_cases n\n  trivial\nn : ℕ\nx✝ : 2 ≤ n\n⊢ True\n", "full_text": "example (n : ℕ) (_ : 2 ≤ n) : True := by\n  fail_if_success interval_cases n\n  trivial\nn : ℕ\nx✝ : 2 ≤ n\n⊢ True\n/- n : ℕ\nx✝ : 2 ≤ n\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (n m : ℕ) (_ : n ≤ m) : True := by\n  fail_if_success interval_cases n\n  trivial\nn m : ℕ\nx✝ : n ≤ m\n⊢ True\n", "full_text": "example (n m : ℕ) (_ : n ≤ m) : True := by\n  fail_if_success interval_cases n\n  trivial\nn m : ℕ\nx✝ : n ≤ m\n⊢ True\n/- n m : ℕ\nx✝ : n ≤ m\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (n : ℕ) (w₂ : n < 1) : n = 0 := by\n  interval_cases n\n  rfl -- done for free in the mathlib3 version\nn : ℕ\nw₂ : n < 1\n⊢ n = 0\n", "full_text": "example (n : ℕ) (w₂ : n < 1) : n = 0 := by\n  interval_cases n\n  rfl -- done for free in the mathlib3 version\nn : ℕ\nw₂ : n < 1\n⊢ n = 0\n/- case «0»\nn : ℕ\nw₂ : 0 < 1\n⊢ 0 = 0 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (n : ℕ) (w₂ : n < 2) : n = 0 ∨ n = 1 := by\n  interval_cases n\n  · left; rfl\n  · right; rfl\nn : ℕ\nw₂ : n < 2\n⊢ n = 0 ∨ n = 1\n", "full_text": "example (n : ℕ) (w₂ : n < 2) : n = 0 ∨ n = 1 := by\n  interval_cases n\n  · left; rfl\n  · right; rfl\nn : ℕ\nw₂ : n < 2\n⊢ n = 0 ∨ n = 1\n/- case «0»\nn : ℕ\nw₂ : 0 < 2\n⊢ 0 = 0 ∨ 0 = 1\n---\ncase «1»\nn : ℕ\nw₂ : 1 < 2\n⊢ 1 = 0 ∨ 1 = 1 -/\n/- case «0».h\nn : ℕ\nw₂ : 0 < 2\n⊢ 0 = 0 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (n : ℕ) (w₁ : 1 ≤ n) (w₂ : n < 3) : n = 1 ∨ n = 2 := by\n  interval_cases n\n  · left; rfl\n  · right; rfl\nn : ℕ\nw₁ : 1 ≤ n\nw₂ : n < 3\n⊢ n = 1 ∨ n = 2\n", "full_text": "example (n : ℕ) (w₁ : 1 ≤ n) (w₂ : n < 3) : n = 1 ∨ n = 2 := by\n  interval_cases n\n  · left; rfl\n  · right; rfl\nn : ℕ\nw₁ : 1 ≤ n\nw₂ : n < 3\n⊢ n = 1 ∨ n = 2\n/- case «1»\nn : ℕ\nw₁ : 1 ≤ 1\nw₂ : 1 < 3\n⊢ 1 = 1 ∨ 1 = 2\n---\ncase «2»\nn : ℕ\nw₁ : 1 ≤ 2\nw₂ : 2 < 3\n⊢ 2 = 1 ∨ 2 = 2 -/\n/- case «1».h\nn : ℕ\nw₁ : 1 ≤ 1\nw₂ : 1 < 3\n⊢ 1 = 1 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (n : ℕ) (w₁ : 1 ≤ n) (w₂ : n < 3) : n = 1 ∨ n = 2 := by\n  interval_cases using w₁, w₂\n  · left; rfl\n  · right; rfl\nn : ℕ\nw₁ : 1 ≤ n\nw₂ : n < 3\n⊢ n = 1 ∨ n = 2\n", "full_text": "example (n : ℕ) (w₁ : 1 ≤ n) (w₂ : n < 3) : n = 1 ∨ n = 2 := by\n  interval_cases using w₁, w₂\n  · left; rfl\n  · right; rfl\nn : ℕ\nw₁ : 1 ≤ n\nw₂ : n < 3\n⊢ n = 1 ∨ n = 2\n/- case «1»\nn : ℕ\nw₁ : 1 ≤ 1\nw₂ : 1 < 3\n⊢ 1 = 1 ∨ 1 = 2\n---\ncase «2»\nn : ℕ\nw₁ : 1 ≤ 2\nw₂ : 2 < 3\n⊢ 2 = 1 ∨ 2 = 2 -/\n/- case «1».h\nn : ℕ\nw₁ : 1 ≤ 1\nw₂ : 1 < 3\n⊢ 1 = 1 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (n m : ℕ) (w₁ : 1 ≤ n) (w₂ : n < 3) (_ : m < 2) : n = 1 ∨ n = 2 := by\n  interval_cases n\n  · left; rfl\n  · right; rfl\nn m : ℕ\nw₁ : 1 ≤ n\nw₂ : n < 3\nx✝ : m < 2\n⊢ n = 1 ∨ n = 2\n", "full_text": "example (n m : ℕ) (w₁ : 1 ≤ n) (w₂ : n < 3) (_ : m < 2) : n = 1 ∨ n = 2 := by\n  interval_cases n\n  · left; rfl\n  · right; rfl\nn m : ℕ\nw₁ : 1 ≤ n\nw₂ : n < 3\nx✝ : m < 2\n⊢ n = 1 ∨ n = 2\n/- case «1»\nn m : ℕ\nx✝ : m < 2\nw₁ : 1 ≤ 1\nw₂ : 1 < 3\n⊢ 1 = 1 ∨ 1 = 2\n---\ncase «2»\nn m : ℕ\nx✝ : m < 2\nw₁ : 1 ≤ 2\nw₂ : 2 < 3\n⊢ 2 = 1 ∨ 2 = 2 -/\n/- case «1».h\nn m : ℕ\nx✝ : m < 2\nw₁ : 1 ≤ 1\nw₂ : 1 < 3\n⊢ 1 = 1 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (n : ℕ) (w₁ : 1 < n) (w₂ : n < 4) : n = 2 ∨ n = 3 := by\n  interval_cases n\n  · left; rfl\n  · right; rfl\nn : ℕ\nw₁ : 1 < n\nw₂ : n < 4\n⊢ n = 2 ∨ n = 3\n", "full_text": "example (n : ℕ) (w₁ : 1 < n) (w₂ : n < 4) : n = 2 ∨ n = 3 := by\n  interval_cases n\n  · left; rfl\n  · right; rfl\nn : ℕ\nw₁ : 1 < n\nw₂ : n < 4\n⊢ n = 2 ∨ n = 3\n/- case «2»\nn : ℕ\nw₁ : 1 < 2\nw₂ : 2 < 4\n⊢ 2 = 2 ∨ 2 = 3\n---\ncase «3»\nn : ℕ\nw₁ : 1 < 3\nw₂ : 3 < 4\n⊢ 3 = 2 ∨ 3 = 3 -/\n/- case «2».h\nn : ℕ\nw₁ : 1 < 2\nw₂ : 2 < 4\n⊢ 2 = 2 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (n : ℕ) (w₁ : n ≥ 3) (w₂ : n < 5) : n = 3 ∨ n = 4 := by\n  interval_cases n\n  · left; rfl\n  · right; rfl\nn : ℕ\nw₁ : n ≥ 3\nw₂ : n < 5\n⊢ n = 3 ∨ n = 4\n", "full_text": "example (n : ℕ) (w₁ : n ≥ 3) (w₂ : n < 5) : n = 3 ∨ n = 4 := by\n  interval_cases n\n  · left; rfl\n  · right; rfl\nn : ℕ\nw₁ : n ≥ 3\nw₂ : n < 5\n⊢ n = 3 ∨ n = 4\n/- case «3»\nn : ℕ\nw₁ : 3 ≥ 3\nw₂ : 3 < 5\n⊢ 3 = 3 ∨ 3 = 4\n---\ncase «4»\nn : ℕ\nw₁ : 4 ≥ 3\nw₂ : 4 < 5\n⊢ 4 = 3 ∨ 4 = 4 -/\n/- case «3».h\nn : ℕ\nw₁ : 3 ≥ 3\nw₂ : 3 < 5\n⊢ 3 = 3 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (n : ℕ) (w₀ : n ≥ 2) (w₁ : n ≥ 3) (w₂ : n < 5) : n = 3 ∨ n = 4 := by\n  interval_cases n\n  · left; rfl\n  · right; rfl\nn : ℕ\nw₀ : n ≥ 2\nw₁ : n ≥ 3\nw₂ : n < 5\n⊢ n = 3 ∨ n = 4\n", "full_text": "example (n : ℕ) (w₀ : n ≥ 2) (w₁ : n ≥ 3) (w₂ : n < 5) : n = 3 ∨ n = 4 := by\n  interval_cases n\n  · left; rfl\n  · right; rfl\nn : ℕ\nw₀ : n ≥ 2\nw₁ : n ≥ 3\nw₂ : n < 5\n⊢ n = 3 ∨ n = 4\n/- case «3»\nn : ℕ\nw₀ : 3 ≥ 2\nw₁ : 3 ≥ 3\nw₂ : 3 < 5\n⊢ 3 = 3 ∨ 3 = 4\n---\ncase «4»\nn : ℕ\nw₀ : 4 ≥ 2\nw₁ : 4 ≥ 3\nw₂ : 4 < 5\n⊢ 4 = 3 ∨ 4 = 4 -/\n/- case «3».h\nn : ℕ\nw₀ : 3 ≥ 2\nw₁ : 3 ≥ 3\nw₂ : 3 < 5\n⊢ 3 = 3 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (n : ℕ) (w₁ : n > 2) (w₂ : n < 5) : n = 3 ∨ n = 4 := by\n  interval_cases n\n  · left; rfl\n  · right; rfl\nn : ℕ\nw₁ : n > 2\nw₂ : n < 5\n⊢ n = 3 ∨ n = 4\n", "full_text": "example (n : ℕ) (w₁ : n > 2) (w₂ : n < 5) : n = 3 ∨ n = 4 := by\n  interval_cases n\n  · left; rfl\n  · right; rfl\nn : ℕ\nw₁ : n > 2\nw₂ : n < 5\n⊢ n = 3 ∨ n = 4\n/- case «3»\nn : ℕ\nw₁ : 3 > 2\nw₂ : 3 < 5\n⊢ 3 = 3 ∨ 3 = 4\n---\ncase «4»\nn : ℕ\nw₁ : 4 > 2\nw₂ : 4 < 5\n⊢ 4 = 3 ∨ 4 = 4 -/\n/- case «3».h\nn : ℕ\nw₁ : 3 > 2\nw₂ : 3 < 5\n⊢ 3 = 3 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (n : ℕ) (w₁ : n > 2) (w₂ : n ≤ 4) : n = 3 ∨ n = 4 := by\n  interval_cases n\n  · left; rfl\n  · right; rfl\nn : ℕ\nw₁ : n > 2\nw₂ : n ≤ 4\n⊢ n = 3 ∨ n = 4\n", "full_text": "example (n : ℕ) (w₁ : n > 2) (w₂ : n ≤ 4) : n = 3 ∨ n = 4 := by\n  interval_cases n\n  · left; rfl\n  · right; rfl\nn : ℕ\nw₁ : n > 2\nw₂ : n ≤ 4\n⊢ n = 3 ∨ n = 4\n/- case «3»\nn : ℕ\nw₁ : 3 > 2\nw₂ : 3 ≤ 4\n⊢ 3 = 3 ∨ 3 = 4\n---\ncase «4»\nn : ℕ\nw₁ : 4 > 2\nw₂ : 4 ≤ 4\n⊢ 4 = 3 ∨ 4 = 4 -/\n/- case «3».h\nn : ℕ\nw₁ : 3 > 2\nw₂ : 3 ≤ 4\n⊢ 3 = 3 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (n : ℕ) (w₁ : 2 < n) (w₂ : 4 ≥ n) : n = 3 ∨ n = 4 := by\n  interval_cases n\n  · left; rfl\n  · right; rfl\nn : ℕ\nw₁ : 2 < n\nw₂ : 4 ≥ n\n⊢ n = 3 ∨ n = 4\n", "full_text": "example (n : ℕ) (w₁ : 2 < n) (w₂ : 4 ≥ n) : n = 3 ∨ n = 4 := by\n  interval_cases n\n  · left; rfl\n  · right; rfl\nn : ℕ\nw₁ : 2 < n\nw₂ : 4 ≥ n\n⊢ n = 3 ∨ n = 4\n/- case «3»\nn : ℕ\nw₁ : 2 < 3\nw₂ : 4 ≥ 3\n⊢ 3 = 3 ∨ 3 = 4\n---\ncase «4»\nn : ℕ\nw₁ : 2 < 4\nw₂ : 4 ≥ 4\n⊢ 4 = 3 ∨ 4 = 4 -/\n/- case «3».h\nn : ℕ\nw₁ : 2 < 3\nw₂ : 4 ≥ 3\n⊢ 3 = 3 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (n : ℕ) (h1 : 4 < n) (h2 : n ≤ 6) : n < 20 := by\n  interval_cases n\n  · guard_target =ₛ 5 < 20; norm_num\n  · guard_target =ₛ 6 < 20; norm_num\nn : ℕ\nh1 : 4 < n\nh2 : n ≤ 6\n⊢ n < 20\n", "full_text": "example (n : ℕ) (h1 : 4 < n) (h2 : n ≤ 6) : n < 20 := by\n  interval_cases n\n  · guard_target =ₛ 5 < 20; norm_num\n  · guard_target =ₛ 6 < 20; norm_num\nn : ℕ\nh1 : 4 < n\nh2 : n ≤ 6\n⊢ n < 20\n/- case «5»\nn : ℕ\nh1 : 4 < 5\nh2 : 5 ≤ 6\n⊢ 5 < 20\n---\ncase «6»\nn : ℕ\nh1 : 4 < 6\nh2 : 6 ≤ 6\n⊢ 6 < 20 -/\n/- case «5»\nn : ℕ\nh1 : 4 < 5\nh2 : 5 ≤ 6\n⊢ 5 < 20 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (n : ℕ) (w₁ : n % 3 < 1) : n % 3 = 0 := by\n  interval_cases h : n % 3\n  · guard_hyp h : n % 3 = 0\n    rfl\nn : ℕ\nw₁ : n % 3 < 1\n⊢ n % 3 = 0\n", "full_text": "example (n : ℕ) (w₁ : n % 3 < 1) : n % 3 = 0 := by\n  interval_cases h : n % 3\n  · guard_hyp h : n % 3 = 0\n    rfl\nn : ℕ\nw₁ : n % 3 < 1\n⊢ n % 3 = 0\n/- case «0»\nn : ℕ\nh : n % 3 = 0\nw₁ : 0 < 1\n⊢ 0 = 0 -/\n/- case «0»\nn : ℕ\nh : n % 3 = 0\nw₁ : 0 < 1\n⊢ 0 = 0 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (n : ℕ) (w₁ : n % 3 < 1) : n % 3 = 0 := by\n  interval_cases n % 3\n  rfl\n  -- the Lean 3 version had a different goal state after the `interval_cases`\n  -- the `n % 3` was not substituted, instead there was a hypothesis `h : n % 3 = 0` provided\n  -- so the proof was:\n  -- assumption\nn : ℕ\nw₁ : n % 3 < 1\n⊢ n % 3 = 0\n", "full_text": "example (n : ℕ) (w₁ : n % 3 < 1) : n % 3 = 0 := by\n  interval_cases n % 3\n  rfl\n  -- the Lean 3 version had a different goal state after the `interval_cases`\n  -- the `n % 3` was not substituted, instead there was a hypothesis `h : n % 3 = 0` provided\n  -- so the proof was:\n  -- assumption\nn : ℕ\nw₁ : n % 3 < 1\n⊢ n % 3 = 0\n/- case «0»\nn : ℕ\nw₁ : 0 < 1\n⊢ 0 = 0 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (n : ℕ) (h1 : 4 ≤ n) (h2 : n < 10) : n < 20 := by\n  interval_cases using h1, h2\n  all_goals { norm_num }\nn : ℕ\nh1 : 4 ≤ n\nh2 : n < 10\n⊢ n < 20\n", "full_text": "example (n : ℕ) (h1 : 4 ≤ n) (h2 : n < 10) : n < 20 := by\n  interval_cases using h1, h2\n  all_goals { norm_num }\nn : ℕ\nh1 : 4 ≤ n\nh2 : n < 10\n⊢ n < 20\n/- case «4»\nn : ℕ\nh1 : 4 ≤ 4\nh2 : 4 < 10\n⊢ 4 < 20\n---\ncase «5»\nn : ℕ\nh1 : 4 ≤ 5\nh2 : 5 < 10\n⊢ 5 < 20\n---\ncase «6»\nn : ℕ\nh1 : 4 ≤ 6\nh2 : 6 < 10\n⊢ 6 < 20\n---\ncase «7»\nn : ℕ\nh1 : 4 ≤ 7\nh2 : 7 < 10\n⊢ 7 < 20\n---\ncase «8»\nn : ℕ\nh1 : 4 ≤ 8\nh2 : 8 < 10\n⊢ 8 < 20\n---\ncase «9»\nn : ℕ\nh1 : 4 ≤ 9\nh2 : 9 < 10\n⊢ 9 < 20 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (z : ℤ) (h1 : z ≥ -3) (h2 : z < 2) : z < 20 := by\n  interval_cases using h1, h2\n  all_goals { norm_num }\nz : ℤ\nh1 : z ≥ -3\nh2 : z < 2\n⊢ z < 20\n", "full_text": "example (z : ℤ) (h1 : z ≥ -3) (h2 : z < 2) : z < 20 := by\n  interval_cases using h1, h2\n  all_goals { norm_num }\nz : ℤ\nh1 : z ≥ -3\nh2 : z < 2\n⊢ z < 20\n/- case «-3»\nz : ℤ\nh1 : -3 ≥ -3\nh2 : -3 < 2\n⊢ -3 < 20\n---\ncase «-2»\nz : ℤ\nh1 : -2 ≥ -3\nh2 : -2 < 2\n⊢ -2 < 20\n---\ncase «-1»\nz : ℤ\nh1 : -1 ≥ -3\nh2 : -1 < 2\n⊢ -1 < 20\n---\ncase «0»\nz : ℤ\nh1 : 0 ≥ -3\nh2 : 0 < 2\n⊢ 0 < 20\n---\ncase «1»\nz : ℤ\nh1 : 1 ≥ -3\nh2 : 1 < 2\n⊢ 1 < 20 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (z : ℤ) (h1 : z ≥ -3) (h2 : z < 2) : z < 20 := by\n  interval_cases z\n  · guard_target =ₛ (-3 : ℤ) < 20\n    norm_num\n  · guard_target =ₛ (-2 : ℤ) < 20\n    norm_num\n  · guard_target =ₛ (-1 : ℤ) < 20\n    norm_num\n  · guard_target =ₛ (0 : ℤ) < 20\n    norm_num\n  · guard_target =ₛ (1 : ℤ) < 20\n    norm_num\nz : ℤ\nh1 : z ≥ -3\nh2 : z < 2\n⊢ z < 20\n", "full_text": "example (z : ℤ) (h1 : z ≥ -3) (h2 : z < 2) : z < 20 := by\n  interval_cases z\n  · guard_target =ₛ (-3 : ℤ) < 20\n    norm_num\n  · guard_target =ₛ (-2 : ℤ) < 20\n    norm_num\n  · guard_target =ₛ (-1 : ℤ) < 20\n    norm_num\n  · guard_target =ₛ (0 : ℤ) < 20\n    norm_num\n  · guard_target =ₛ (1 : ℤ) < 20\n    norm_num\nz : ℤ\nh1 : z ≥ -3\nh2 : z < 2\n⊢ z < 20\n/- case «-3»\nz : ℤ\nh1 : -3 ≥ -3\nh2 : -3 < 2\n⊢ -3 < 20\n---\ncase «-2»\nz : ℤ\nh1 : -2 ≥ -3\nh2 : -2 < 2\n⊢ -2 < 20\n---\ncase «-1»\nz : ℤ\nh1 : -1 ≥ -3\nh2 : -1 < 2\n⊢ -1 < 20\n---\ncase «0»\nz : ℤ\nh1 : 0 ≥ -3\nh2 : 0 < 2\n⊢ 0 < 20\n---\ncase «1»\nz : ℤ\nh1 : 1 ≥ -3\nh2 : 1 < 2\n⊢ 1 < 20 -/\n/- case «-3»\nz : ℤ\nh1 : -3 ≥ -3\nh2 : -3 < 2\n⊢ -3 < 20 -/\n/- Goals Accomplished! -/\n/- case «-2»\nz : ℤ\nh1 : -2 ≥ -3\nh2 : -2 < 2\n⊢ -2 < 20 -/\n/- Goals Accomplished! -/\n/- case «-1»\nz : ℤ\nh1 : -1 ≥ -3\nh2 : -1 < 2\n⊢ -1 < 20 -/\n/- Goals Accomplished! -/\n/- case «0»\nz : ℤ\nh1 : 0 ≥ -3\nh2 : 0 < 2\n⊢ 0 < 20 -/\n/- Goals Accomplished! -/\n/- case «1»\nz : ℤ\nh1 : 1 ≥ -3\nh2 : 1 < 2\n⊢ 1 < 20 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (n : ℕ) : n % 2 = 0 ∨ n % 2 = 1 := by\n  set r := n % 2 with hr\n  have h2 : r < 2 := by\n    exact Nat.mod_lt _ (by decide)\n  interval_cases hrv : r\n  · left; exact hrv.symm.trans hrv\n               --^ hover says `hrv : r = 0` and jumps to `hrv :` above\n  · right; exact hrv.symm.trans hrv\n               --^ hover says `hrv : r = 1` and jumps to `hrv :` above\nn : ℕ\n⊢ n % 2 = 0 ∨ n % 2 = 1\n", "full_text": "example (n : ℕ) : n % 2 = 0 ∨ n % 2 = 1 := by\n  set r := n % 2 with hr\n  have h2 : r < 2 := by\n    exact Nat.mod_lt _ (by decide)\n  interval_cases hrv : r\n  · left; exact hrv.symm.trans hrv\n               --^ hover says `hrv : r = 0` and jumps to `hrv :` above\n  · right; exact hrv.symm.trans hrv\n               --^ hover says `hrv : r = 1` and jumps to `hrv :` above\nn : ℕ\n⊢ n % 2 = 0 ∨ n % 2 = 1\n/- n : ℕ\nr : ℕ := n % 2\nhr : r = n % 2\n⊢ r = 0 ∨ r = 1 -/\n/- n : ℕ\nr : ℕ := n % 2\nhr : r = n % 2\nh2 : r < 2\n⊢ r = 0 ∨ r = 1 -/\n/- case «0»\nn : ℕ\nr : ℕ := n % 2\nhrv : r = 0\nhr : 0 = n % 2\nh2 : 0 < 2\n⊢ 0 = 0 ∨ 0 = 1\n---\ncase «1»\nn : ℕ\nr : ℕ := n % 2\nhrv : r = 1\nhr : 1 = n % 2\nh2 : 1 < 2\n⊢ 1 = 0 ∨ 1 = 1 -/\n/- case «0».h\nn : ℕ\nr : ℕ := n % 2\nhrv : r = 0\nhr : 0 = n % 2\nh2 : 0 < 2\n⊢ 0 = 0 -/\n/- Goals Accomplished! -/\n/- case «1».h\nn : ℕ\nr : ℕ := n % 2\nhrv : r = 1\nhr : 1 = n % 2\nh2 : 1 < 2\n⊢ 1 = 1 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {x : ℕ} (hx2 : x < 2) (h : False) : False := by\n  have _this : x ≤ 1 := by\n    -- `interval_cases` deliberately not focussed,\n    -- this is testing that the `interval_cases` only acts on `have` side goal, not on both\n    interval_cases x\n    · exact zero_le_one\n    · rfl -- done for free in the mathlib3 version\n  exact h\nx : ℕ\nhx2 : x < 2\nh : False\n⊢ False\n", "full_text": "example {x : ℕ} (hx2 : x < 2) (h : False) : False := by\n  have _this : x ≤ 1 := by\n    -- `interval_cases` deliberately not focussed,\n    -- this is testing that the `interval_cases` only acts on `have` side goal, not on both\n    interval_cases x\n    · exact zero_le_one\n    · rfl -- done for free in the mathlib3 version\n  exact h\nx : ℕ\nhx2 : x < 2\nh : False\n⊢ False\n/- x : ℕ\nhx2 : x < 2\nh : False\n_this : x ≤ 1\n⊢ False -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (n : ℕ) (w₁ : n > 1000000) (w₁ : n < 1000002) : n < 2000000 := by\n  interval_cases n\n  norm_num\nn : ℕ\nw₁✝ : n > 1000000\nw₁ : n < 1000002\n⊢ n < 2000000\n", "full_text": "example (n : ℕ) (w₁ : n > 1000000) (w₁ : n < 1000002) : n < 2000000 := by\n  interval_cases n\n  norm_num\nn : ℕ\nw₁✝ : n > 1000000\nw₁ : n < 1000002\n⊢ n < 2000000\n/- case «1000001»\nn : ℕ\nw₁✝ : 1000001 > 1000000\nw₁ : 1000001 < 1000002\n⊢ 1000001 < 2000000 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : d ≤ 0) : d = 0 := by\n  interval_cases d\n  rfl\nd : ℕ\nh : d ≤ 0\n⊢ d = 0\n", "full_text": "example (h : d ≤ 0) : d = 0 := by\n  interval_cases d\n  rfl\nd : ℕ\nh : d ≤ 0\n⊢ d = 0\n/- case «0»\nd : ℕ\nh : 0 ≤ 0\n⊢ 0 = 0 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : True := by\n  run_tac do\n    let f : Bool → Nat | false => 0 | true => 1\n    let e := toExpr <| Bar.func f\n    Meta.check e\n    guard <| ← Meta.isDefEq (← Meta.inferType e) (toTypeExpr Bar)\n  trivial\n⊢ True\n", "full_text": "example : True := by\n  run_tac do\n    let f : Bool → Nat | false => 0 | true => 1\n    let e := toExpr <| Bar.func f\n    Meta.check e\n    guard <| ← Meta.isDefEq (← Meta.inferType e) (toTypeExpr Bar)\n  trivial\n⊢ True\n/- ⊢ True -/\n"}
{"prompt": "example (_delete_this : Nat) : Nat := by\n  clear_\n  fail_if_success assumption\n  exact 0\n_delete_this : ℕ\n⊢ ℕ\n", "full_text": "example (_delete_this : Nat) : Nat := by\n  clear_\n  fail_if_success assumption\n  exact 0\n_delete_this : ℕ\n⊢ ℕ\n/- ⊢ ℕ -/\n/- ⊢ ℕ -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example [_dont_delete_this : Inhabited Nat] : Inhabited Nat := by\n  clear_\n  assumption\n_dont_delete_this : Inhabited ℕ\n⊢ Inhabited ℕ\n", "full_text": "example [_dont_delete_this : Inhabited Nat] : Inhabited Nat := by\n  clear_\n  assumption\n_dont_delete_this : Inhabited ℕ\n⊢ Inhabited ℕ\n/- _dont_delete_this : Inhabited ℕ\n⊢ Inhabited ℕ -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (_delete_this : Nat) (dont_delete_this : Int) : Nat := by\n  clear_\n  fail_if_success assumption\n  exact dont_delete_this.toNat\n_delete_this : ℕ\ndont_delete_this : ℤ\n⊢ ℕ\n", "full_text": "example (_delete_this : Nat) (dont_delete_this : Int) : Nat := by\n  clear_\n  fail_if_success assumption\n  exact dont_delete_this.toNat\n_delete_this : ℕ\ndont_delete_this : ℤ\n⊢ ℕ\n/- dont_delete_this : ℤ\n⊢ ℕ -/\n/- dont_delete_this : ℤ\n⊢ ℕ -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (_delete_this : Type) (_delete_this_dep : _delete_this)\n    (_delete_this_rw : _delete_this = Nat)\n    (_delete_this_dep_dep : _delete_this_dep = _delete_this_dep) : Nat := by\n  clear_\n  fail_if_success\n    rw [← _delete_this_rw]\n  exact 0\n_delete_this : Type\n_delete_this_dep : _delete_this\n_delete_this_rw : _delete_this = ℕ\n_delete_this_dep_dep : _delete_this_dep = _delete_this_dep\n⊢ ℕ\n", "full_text": "example (_delete_this : Type) (_delete_this_dep : _delete_this)\n    (_delete_this_rw : _delete_this = Nat)\n    (_delete_this_dep_dep : _delete_this_dep = _delete_this_dep) : Nat := by\n  clear_\n  fail_if_success\n    rw [← _delete_this_rw]\n  exact 0\n_delete_this : Type\n_delete_this_dep : _delete_this\n_delete_this_rw : _delete_this = ℕ\n_delete_this_dep_dep : _delete_this_dep = _delete_this_dep\n⊢ ℕ\n/- ⊢ ℕ -/\n/- ⊢ ℕ -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (_dont_delete_this : Type) (dep : _dont_delete_this) : _dont_delete_this := by\n  clear_\n  assumption\n_dont_delete_this : Type\ndep : _dont_delete_this\n⊢ _dont_delete_this\n", "full_text": "example (_dont_delete_this : Type) (dep : _dont_delete_this) : _dont_delete_this := by\n  clear_\n  assumption\n_dont_delete_this : Type\ndep : _dont_delete_this\n⊢ _dont_delete_this\n/- _dont_delete_this : Type\ndep : _dont_delete_this\n⊢ _dont_delete_this -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (_dont_delete_this : Type) : _dont_delete_this = _dont_delete_this := by\n  clear_\n  rfl\n_dont_delete_this : Type\n⊢ _dont_delete_this = _dont_delete_this\n", "full_text": "example (_dont_delete_this : Type) : _dont_delete_this = _dont_delete_this := by\n  clear_\n  rfl\n_dont_delete_this : Type\n⊢ _dont_delete_this = _dont_delete_this\n/- _dont_delete_this : Type\n⊢ _dont_delete_this = _dont_delete_this -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (_dont_delete_this : Type) (_delete_this : _dont_delete_this = _dont_delete_this) :\n  _dont_delete_this = _dont_delete_this := by\n  clear_\n  fail_if_success assumption\n  rfl\n_dont_delete_this : Type\n_delete_this : _dont_delete_this = _dont_delete_this\n⊢ _dont_delete_this = _dont_delete_this\n", "full_text": "example (_dont_delete_this : Type) (_delete_this : _dont_delete_this = _dont_delete_this) :\n  _dont_delete_this = _dont_delete_this := by\n  clear_\n  fail_if_success assumption\n  rfl\n_dont_delete_this : Type\n_delete_this : _dont_delete_this = _dont_delete_this\n⊢ _dont_delete_this = _dont_delete_this\n/- _dont_delete_this : Type\n⊢ _dont_delete_this = _dont_delete_this -/\n/- _dont_delete_this : Type\n⊢ _dont_delete_this = _dont_delete_this -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c x y z : ℕ) (h : ¬ x*y*z < 0) : c < a + 3*b := by\n  zify\n  guard_target =~ (c : ℤ) < (a : ℤ) + 3 * (b : ℤ)\n  zify at h\n  guard_hyp h :~ ¬(x : ℤ) * (y : ℤ) * (z : ℤ) < (0 : ℤ)\n  exact test_sorry\na b c x y z : ℕ\nh : ¬x * y * z < 0\n⊢ c < a + 3 * b\n", "full_text": "example (a b c x y z : ℕ) (h : ¬ x*y*z < 0) : c < a + 3*b := by\n  zify\n  guard_target =~ (c : ℤ) < (a : ℤ) + 3 * (b : ℤ)\n  zify at h\n  guard_hyp h :~ ¬(x : ℤ) * (y : ℤ) * (z : ℤ) < (0 : ℤ)\n  exact test_sorry\na b c x y z : ℕ\nh : ¬x * y * z < 0\n⊢ c < a + 3 * b\n/- a b c x y z : ℕ\nh : ¬x * y * z < 0\n⊢ ↑c < ↑a + 3 * ↑b -/\n/- a b c x y z : ℕ\nh : ¬x * y * z < 0\n⊢ ↑c < ↑a + 3 * ↑b -/\n/- a b c x y z : ℕ\nh : ¬↑x * ↑y * ↑z < 0\n⊢ ↑c < ↑a + 3 * ↑b -/\n/- a b c x y z : ℕ\nh : ¬↑x * ↑y * ↑z < 0\n⊢ ↑c < ↑a + 3 * ↑b -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c x y z : ℕ) (h : ¬ x*y*z < 0) (h2 : (c : ℤ) < a + 3 * b) : a + 3*b > c := by\n  zify at h ⊢\n  guard_hyp h :~ ¬↑x * ↑y * ↑z < (0 : ℤ) -- TODO: canonize instances?\n  guard_target =~ ↑c < (↑a : ℤ) + 3 * ↑b\n  exact h2\na b c x y z : ℕ\nh : ¬x * y * z < 0\nh2 : ↑c < ↑a + 3 * ↑b\n⊢ a + 3 * b > c\n", "full_text": "example (a b c x y z : ℕ) (h : ¬ x*y*z < 0) (h2 : (c : ℤ) < a + 3 * b) : a + 3*b > c := by\n  zify at h ⊢\n  guard_hyp h :~ ¬↑x * ↑y * ↑z < (0 : ℤ) -- TODO: canonize instances?\n  guard_target =~ ↑c < (↑a : ℤ) + 3 * ↑b\n  exact h2\na b c x y z : ℕ\nh : ¬x * y * z < 0\nh2 : ↑c < ↑a + 3 * ↑b\n⊢ a + 3 * b > c\n/- a b c x y z : ℕ\nh2 : ↑c < ↑a + 3 * ↑b\nh : ¬↑x * ↑y * ↑z < 0\n⊢ ↑c < ↑a + 3 * ↑b -/\n/- a b c x y z : ℕ\nh2 : ↑c < ↑a + 3 * ↑b\nh : ¬↑x * ↑y * ↑z < 0\n⊢ ↑c < ↑a + 3 * ↑b -/\n/- a b c x y z : ℕ\nh2 : ↑c < ↑a + 3 * ↑b\nh : ¬↑x * ↑y * ↑z < 0\n⊢ ↑c < ↑a + 3 * ↑b -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b : ℕ) (h : (a : ℤ) ≤ b) : a ≤ b := by\n  zify\n  guard_target = (a : ℤ) ≤ b\n  exact h\na b : ℕ\nh : ↑a ≤ ↑b\n⊢ a ≤ b\n", "full_text": "example (a b : ℕ) (h : (a : ℤ) ≤ b) : a ≤ b := by\n  zify\n  guard_target = (a : ℤ) ≤ b\n  exact h\na b : ℕ\nh : ↑a ≤ ↑b\n⊢ a ≤ b\n/- a b : ℕ\nh : ↑a ≤ ↑b\n⊢ ↑a ≤ ↑b -/\n/- a b : ℕ\nh : ↑a ≤ ↑b\n⊢ ↑a ≤ ↑b -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c : ℕ) (h : a - b < c) (hab : b ≤ a) : True := by\n  zify [hab] at h\n  guard_hyp h : (a : ℤ) - b < c\n  trivial\na b c : ℕ\nh : a - b < c\nhab : b ≤ a\n⊢ True\n", "full_text": "example (a b c : ℕ) (h : a - b < c) (hab : b ≤ a) : True := by\n  zify [hab] at h\n  guard_hyp h : (a : ℤ) - b < c\n  trivial\na b c : ℕ\nh : a - b < c\nhab : b ≤ a\n⊢ True\n/- a b c : ℕ\nhab : b ≤ a\nh : ↑a - ↑b < ↑c\n⊢ True -/\n/- a b c : ℕ\nhab : b ≤ a\nh : ↑a - ↑b < ↑c\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c : ℕ) (h : a + b ≠ c) : True := by\n  zify at h\n  guard_hyp h : (a + b : ℤ) ≠ c\n  trivial\na b c : ℕ\nh : a + b ≠ c\n⊢ True\n", "full_text": "example (a b c : ℕ) (h : a + b ≠ c) : True := by\n  zify at h\n  guard_hyp h : (a + b : ℤ) ≠ c\n  trivial\na b c : ℕ\nh : a + b ≠ c\n⊢ True\n/- a b c : ℕ\nh : ↑a + ↑b ≠ ↑c\n⊢ True -/\n/- a b c : ℕ\nh : ↑a + ↑b ≠ ↑c\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c : ℕ) (h : a - b ∣ c) (h2 : b ≤ a) : True := by\n  zify [h2] at h\n  guard_hyp h : (a : ℤ) - b ∣ c\n  trivial\na b c : ℕ\nh : a - b ∣ c\nh2 : b ≤ a\n⊢ True\n", "full_text": "example (a b c : ℕ) (h : a - b ∣ c) (h2 : b ≤ a) : True := by\n  zify [h2] at h\n  guard_hyp h : (a : ℤ) - b ∣ c\n  trivial\na b c : ℕ\nh : a - b ∣ c\nh2 : b ≤ a\n⊢ True\n/- a b c : ℕ\nh2 : b ≤ a\nh : ↑a - ↑b ∣ ↑c\n⊢ True -/\n/- a b c : ℕ\nh2 : b ≤ a\nh : ↑a - ↑b ∣ ↑c\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (_delete_this : Nat) (dont_delete_this : Int) : Nat := by\n  clear * - dont_delete_this\n  fail_if_success assumption\n  exact dont_delete_this.toNat\n_delete_this : ℕ\ndont_delete_this : ℤ\n⊢ ℕ\n", "full_text": "example (_delete_this : Nat) (dont_delete_this : Int) : Nat := by\n  clear * - dont_delete_this\n  fail_if_success assumption\n  exact dont_delete_this.toNat\n_delete_this : ℕ\ndont_delete_this : ℤ\n⊢ ℕ\n/- dont_delete_this : ℤ\n⊢ ℕ -/\n/- dont_delete_this : ℤ\n⊢ ℕ -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example [dont_delete_this : Inhabited Nat] (dont_delete_this2 : Prop) : Inhabited Nat := by\n  clear * - dont_delete_this2\n  assumption\ndont_delete_this : Inhabited ℕ\ndont_delete_this2 : Prop\n⊢ Inhabited ℕ\n", "full_text": "example [dont_delete_this : Inhabited Nat] (dont_delete_this2 : Prop) : Inhabited Nat := by\n  clear * - dont_delete_this2\n  assumption\ndont_delete_this : Inhabited ℕ\ndont_delete_this2 : Prop\n⊢ Inhabited ℕ\n/- dont_delete_this : Inhabited ℕ\ndont_delete_this2 : Prop\n⊢ Inhabited ℕ -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (delete_this : Nat) (_delete_this2 : delete_this = delete_this) (dont_delete_this : Int) :\n    Nat := by\n  clear * - dont_delete_this\n  fail_if_success assumption\n  exact dont_delete_this.toNat\ndelete_this : ℕ\n_delete_this2 : delete_this = delete_this\ndont_delete_this : ℤ\n⊢ ℕ\n", "full_text": "example (delete_this : Nat) (_delete_this2 : delete_this = delete_this) (dont_delete_this : Int) :\n    Nat := by\n  clear * - dont_delete_this\n  fail_if_success assumption\n  exact dont_delete_this.toNat\ndelete_this : ℕ\n_delete_this2 : delete_this = delete_this\ndont_delete_this : ℤ\n⊢ ℕ\n/- dont_delete_this : ℤ\n⊢ ℕ -/\n/- dont_delete_this : ℤ\n⊢ ℕ -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (dont_delete_this : Nat) (dont_delete_this2 : dont_delete_this = dont_delete_this) :\n    Nat := by\n  clear * - dont_delete_this2\n  exact dont_delete_this\ndont_delete_this : ℕ\ndont_delete_this2 : dont_delete_this = dont_delete_this\n⊢ ℕ\n", "full_text": "example (dont_delete_this : Nat) (dont_delete_this2 : dont_delete_this = dont_delete_this) :\n    Nat := by\n  clear * - dont_delete_this2\n  exact dont_delete_this\ndont_delete_this : ℕ\ndont_delete_this2 : dont_delete_this = dont_delete_this\n⊢ ℕ\n/- dont_delete_this : ℕ\ndont_delete_this2 : dont_delete_this = dont_delete_this\n⊢ ℕ -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (_delete_this : Nat) (dont_delete_this : Int) (dont_delete_this2 : Int) : Nat := by\n  clear * - dont_delete_this dont_delete_this2\n  fail_if_success assumption\n  exact dont_delete_this.toNat + dont_delete_this2.toNat\n_delete_this : ℕ\ndont_delete_this dont_delete_this2 : ℤ\n⊢ ℕ\n", "full_text": "example (_delete_this : Nat) (dont_delete_this : Int) (dont_delete_this2 : Int) : Nat := by\n  clear * - dont_delete_this dont_delete_this2\n  fail_if_success assumption\n  exact dont_delete_this.toNat + dont_delete_this2.toNat\n_delete_this : ℕ\ndont_delete_this dont_delete_this2 : ℤ\n⊢ ℕ\n/- dont_delete_this dont_delete_this2 : ℤ\n⊢ ℕ -/\n/- dont_delete_this dont_delete_this2 : ℤ\n⊢ ℕ -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : True := by\n  by_cases 0 = 0\n  exact .intro\n  exact .intro\n⊢ True\n", "full_text": "example : True := by\n  by_cases 0 = 0\n  exact .intro\n  exact .intro\n⊢ True\n/- case pos\nh✝ : 0 = 0\n⊢ True\n---\ncase neg\nh✝ : ¬0 = 0\n⊢ True -/\n/- case neg\nh✝ : ¬0 = 0\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : True := by\n  by_cases 0 = 0\n  exact .intro\n  exact .intro\n⊢ True\n", "full_text": "example : True := by\n  by_cases 0 = 0\n  exact .intro\n  exact .intro\n⊢ True\n/- case pos\nh✝ : 0 = 0\n⊢ True\n---\ncase neg\nh✝ : ¬0 = 0\n⊢ True -/\n/- case neg\nh✝ : ¬0 = 0\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {n : Nat} (hn : n = 0) : n + 0 = 0 := by\n  conv =>\n    congr\n    rw [← Nat.add_zero 0]\n  conv_lhs =>\n    congr\n    rw [← Nat.add_zero n]\n    rfl\n  conv_rhs =>\n    rw [← Nat.add_zero 0]\n    congr\n    rfl\n    rfl\n  by_cases 0 = 0\n  assumption\n  assumption\nn : ℕ\nhn : n = 0\n⊢ n + 0 = 0\n", "full_text": "example {n : Nat} (hn : n = 0) : n + 0 = 0 := by\n  conv =>\n    congr\n    rw [← Nat.add_zero 0]\n  conv_lhs =>\n    congr\n    rw [← Nat.add_zero n]\n    rfl\n  conv_rhs =>\n    rw [← Nat.add_zero 0]\n    congr\n    rfl\n    rfl\n  by_cases 0 = 0\n  assumption\n  assumption\nn : ℕ\nhn : n = 0\n⊢ n + 0 = 0\n/- n : ℕ\nhn : n = 0\n⊢ n + (0 + 0) = 0 -/\n/- n : ℕ\nhn : n = 0\n⊢ n + 0 + (0 + 0) = 0 -/\n/- n : ℕ\nhn : n = 0\n⊢ n + 0 + (0 + 0) = 0 + 0 -/\n/- case pos\nn : ℕ\nhn : n = 0\nh✝ : 0 = 0\n⊢ n + 0 + (0 + 0) = 0 + 0\n---\ncase neg\nn : ℕ\nhn : n = 0\nh✝ : ¬0 = 0\n⊢ n + 0 + (0 + 0) = 0 + 0 -/\n/- case neg\nn : ℕ\nhn : n = 0\nh✝ : ¬0 = 0\n⊢ n + 0 + (0 + 0) = 0 + 0 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (p : Prop) (hp : p) : (0 = 0 ∧ p) ∨ 0 = 0 := by\n  iterate left; decide\n  repeat' left; decide\n  refine Or.inl ⟨?_, ?_⟩\n  rfl\n  assumption\np : Prop\nhp : p\n⊢ 0 = 0 ∧ p ∨ 0 = 0\n", "full_text": "example (p : Prop) (hp : p) : (0 = 0 ∧ p) ∨ 0 = 0 := by\n  iterate left; decide\n  repeat' left; decide\n  refine Or.inl ⟨?_, ?_⟩\n  rfl\n  assumption\np : Prop\nhp : p\n⊢ 0 = 0 ∧ p ∨ 0 = 0\n/- p : Prop\nhp : p\n⊢ 0 = 0 ∧ p ∨ 0 = 0 -/\n/- p : Prop\nhp : p\n⊢ 0 = 0 ∧ p ∨ 0 = 0 -/\n/- case refine_1\np : Prop\nhp : p\n⊢ 0 = 0\n---\ncase refine_2\np : Prop\nhp : p\n⊢ p -/\n/- case refine_2\np : Prop\nhp : p\n⊢ p -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : 0 = 0 ∧ 0 = 0 ∧ 0 = 0 := by\n  refine ⟨?_, ?_, ?_⟩\n  rfl\n  trivial\n  rfl\n⊢ 0 = 0 ∧ 0 = 0 ∧ 0 = 0\n", "full_text": "example : 0 = 0 ∧ 0 = 0 ∧ 0 = 0 := by\n  refine ⟨?_, ?_, ?_⟩\n  rfl\n  trivial\n  rfl\n⊢ 0 = 0 ∧ 0 = 0 ∧ 0 = 0\n/- case refine_1\n⊢ 0 = 0\n---\ncase refine_2\n⊢ 0 = 0\n---\ncase refine_3\n⊢ 0 = 0 -/\n/- case refine_2\n⊢ 0 = 0\n---\ncase refine_3\n⊢ 0 = 0 -/\n/- case refine_3\n⊢ 0 = 0 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (p : Bool) : 0 = 0 := by\n  cases p\n  case' false => rfl\n  case' true => rfl\np : Bool\n⊢ 0 = 0\n", "full_text": "example (p : Bool) : 0 = 0 := by\n  cases p\n  case' false => rfl\n  case' true => rfl\np : Bool\n⊢ 0 = 0\n/- case false\n⊢ 0 = 0\n---\ncase true\n⊢ 0 = 0 -/\n/- case true\n⊢ 0 = 0 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (p : Bool) (f : False) {h : 0 = 0} : 0 = 0 ∧ 0 = 1 := by\n  cases p <;>\n  constructor\n  assumption'\n  any_goals cases f\np : Bool\nf : False\nh : 0 = 0\n⊢ 0 = 0 ∧ 0 = 1\n", "full_text": "example (p : Bool) (f : False) {h : 0 = 0} : 0 = 0 ∧ 0 = 1 := by\n  cases p <;>\n  constructor\n  assumption'\n  any_goals cases f\np : Bool\nf : False\nh : 0 = 0\n⊢ 0 = 0 ∧ 0 = 1\n/- case false.left\nf : False\nh : 0 = 0\n⊢ 0 = 0\n---\ncase false.right\nf : False\nh : 0 = 0\n⊢ 0 = 1\n---\ncase true.left\nf : False\nh : 0 = 0\n⊢ 0 = 0\n---\ncase true.right\nf : False\nh : 0 = 0\n⊢ 0 = 1 -/\n/- case false.right\nf : False\nh : 0 = 0\n⊢ 0 = 1\n---\ncase true.right\nf : False\nh : 0 = 0\n⊢ 0 = 1 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : True ∧ True := by\n  constructor\n  focus\n    exact .intro\n  focus\n    exact .intro\n⊢ True ∧ True\n", "full_text": "example : True ∧ True := by\n  constructor\n  focus\n    exact .intro\n  focus\n    exact .intro\n⊢ True ∧ True\n/- case left\n⊢ True\n---\ncase right\n⊢ True -/\n/- case right\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : 1 = 1 := by\n  sleep_heartbeats 1000\n  rfl\n⊢ 1 = 1\n", "full_text": "example : 1 = 1 := by\n  sleep_heartbeats 1000\n  rfl\n⊢ 1 = 1\n/- ⊢ 1 = 1 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : True ∧ True := by\n  constructor\n  bi_trivial\n⊢ True ∧ True\n", "full_text": "example : True ∧ True := by\n  constructor\n  bi_trivial\n⊢ True ∧ True\n/- case left\n⊢ True\n---\ncase right\n⊢ True -/\n/- case left\n⊢ True\n---\ncase right\n⊢ True -/\n"}
{"prompt": "example : True := by\n  fail_if_success done\n  success_if_fail_with_msg \"internal exception #5\" done\n  exact .intro\n⊢ True\n", "full_text": "example : True := by\n  fail_if_success done\n  success_if_fail_with_msg \"internal exception #5\" done\n  exact .intro\n⊢ True\n/- ⊢ True -/\n/- ⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : 0 ≤ 2 + 2 := by\n  fail_if_success infer_param\n  decide\n⊢ 0 ≤ 2 + 2\n", "full_text": "example : 0 ≤ 2 + 2 := by\n  fail_if_success infer_param\n  decide\n⊢ 0 ≤ 2 + 2\n/- ⊢ 0 ≤ 2 + 2 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : 0 ≤ 2 + 2 := by\n  apply zero_le_add\n  infer_param\n⊢ 0 ≤ 2 + 2\n", "full_text": "example : 0 ≤ 2 + 2 := by\n  apply zero_le_add\n  infer_param\n⊢ 0 ≤ 2 + 2\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : 0 ≤ 2 + 2 := by\n  apply zero_le_add'\n  infer_param\n⊢ 0 ≤ 2 + 2\n", "full_text": "example : 0 ≤ 2 + 2 := by\n  apply zero_le_add'\n  infer_param\n⊢ 0 ≤ 2 + 2\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : True := by\n  hint\n⊢ True\n", "full_text": "example : True := by\n  hint\n⊢ True\n/- Goals Accomplished! -/\n"}
{"prompt": "example {n : ℕ} {k : ℤ} (hn : 8 ≤ n) (hk : 2 * k ≤ n + 2) :\n    (0 : ℝ) < n - k - 1 := by\n  rify at hn hk\n  linarith\nn : ℕ\nk : ℤ\nhn : 8 ≤ n\nhk : 2 * k ≤ ↑n + 2\n⊢ 0 < ↑n - ↑k - 1\n", "full_text": "example {n : ℕ} {k : ℤ} (hn : 8 ≤ n) (hk : 2 * k ≤ n + 2) :\n    (0 : ℝ) < n - k - 1 := by\n  rify at hn hk\n  linarith\nn : ℕ\nk : ℤ\nhn : 8 ≤ n\nhk : 2 * k ≤ ↑n + 2\n⊢ 0 < ↑n - ↑k - 1\n/- n : ℕ\nk : ℤ\nhn : 8 ≤ ↑n\nhk : 2 * ↑k ≤ ↑n + 2\n⊢ 0 < ↑n - ↑k - 1 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {n : ℕ} {k : ℤ} (hn : 8 ≤ n) (hk : (2 : ℚ) * k ≤ n + 2) :\n    (0 : ℝ) < n - k - 1 := by\n  rify at hn hk\n  linarith\nn : ℕ\nk : ℤ\nhn : 8 ≤ n\nhk : 2 * ↑k ≤ ↑n + 2\n⊢ 0 < ↑n - ↑k - 1\n", "full_text": "example {n : ℕ} {k : ℤ} (hn : 8 ≤ n) (hk : (2 : ℚ) * k ≤ n + 2) :\n    (0 : ℝ) < n - k - 1 := by\n  rify at hn hk\n  linarith\nn : ℕ\nk : ℤ\nhn : 8 ≤ n\nhk : 2 * ↑k ≤ ↑n + 2\n⊢ 0 < ↑n - ↑k - 1\n/- n : ℕ\nk : ℤ\nhn : 8 ≤ ↑n\nhk : 2 * ↑k ≤ ↑n + 2\n⊢ 0 < ↑n - ↑k - 1 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c : ℕ) (h : a - b < c) (hab : b ≤ a) : a < b + c := by\n  rify [hab] at h ⊢\n  linarith\na b c : ℕ\nh : a - b < c\nhab : b ≤ a\n⊢ a < b + c\n", "full_text": "example (a b c : ℕ) (h : a - b < c) (hab : b ≤ a) : a < b + c := by\n  rify [hab] at h ⊢\n  linarith\na b c : ℕ\nh : a - b < c\nhab : b ≤ a\n⊢ a < b + c\n/- a b c : ℕ\nhab : b ≤ a\nh : ↑a - ↑b < ↑c\n⊢ ↑a < ↑b + ↑c -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {n : ℕ} (h : 8 ≤ n) : (0 : ℝ) < n - 1 := by\n  rify at h\n  linarith\nn : ℕ\nh : 8 ≤ n\n⊢ 0 < ↑n - 1\n", "full_text": "example {n : ℕ} (h : 8 ≤ n) : (0 : ℝ) < n - 1 := by\n  rify at h\n  linarith\nn : ℕ\nh : 8 ≤ n\n⊢ 0 < ↑n - 1\n/- n : ℕ\nh : 8 ≤ ↑n\n⊢ 0 < ↑n - 1 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {n k : ℕ} (h : 2 * k ≤ n + 2) (h' : 8 ≤ n) : (0 : ℝ) ≤ 3 * n - 4 - 4 * k := by\n  rify at *\n  linarith\nn k : ℕ\nh : 2 * k ≤ n + 2\nh' : 8 ≤ n\n⊢ 0 ≤ 3 * ↑n - 4 - 4 * ↑k\n", "full_text": "example {n k : ℕ} (h : 2 * k ≤ n + 2) (h' : 8 ≤ n) : (0 : ℝ) ≤ 3 * n - 4 - 4 * k := by\n  rify at *\n  linarith\nn k : ℕ\nh : 2 * k ≤ n + 2\nh' : 8 ≤ n\n⊢ 0 ≤ 3 * ↑n - 4 - 4 * ↑k\n/- n k : ℕ\nh : 2 * ↑k ≤ ↑n + 2\nh' : 8 ≤ ↑n\n⊢ 0 ≤ 3 * ↑n - 4 - 4 * ↑k -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {n k : ℕ} (h₁ : 8 ≤ n) (h₂ : 2 * k > n) (h₃ : k + 1 < n) :\n    n - (k + 1) + 3 ≤ n := by\n  rify [h₃] at *\n  linarith\nn k : ℕ\nh₁ : 8 ≤ n\nh₂ : 2 * k > n\nh₃ : k + 1 < n\n⊢ n - (k + 1) + 3 ≤ n\n", "full_text": "example {n k : ℕ} (h₁ : 8 ≤ n) (h₂ : 2 * k > n) (h₃ : k + 1 < n) :\n    n - (k + 1) + 3 ≤ n := by\n  rify [h₃] at *\n  linarith\nn k : ℕ\nh₁ : 8 ≤ n\nh₂ : 2 * k > n\nh₃ : k + 1 < n\n⊢ n - (k + 1) + 3 ≤ n\n/- n k : ℕ\nh₁ : 8 ≤ ↑n\nh₂ : ↑n < 2 * ↑k\nh₃ : True\n⊢ ↑n - (↑k + 1) + 3 ≤ ↑n -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {n k : ℕ} (h₁ : 8 ≤ n) (h₂ : 2 * k > n) (h₃ : k + 1 < n) :\n    n - (n - (k + 1)) = k + 1 := by\n  have f₁ : k + 1 ≤ n := by linarith\n  have f₂ : n - (k + 1) ≤ n := by rify [f₁]; linarith\n  rify [f₁, f₂] at *\n  linarith\nn k : ℕ\nh₁ : 8 ≤ n\nh₂ : 2 * k > n\nh₃ : k + 1 < n\n⊢ n - (n - (k + 1)) = k + 1\n", "full_text": "example {n k : ℕ} (h₁ : 8 ≤ n) (h₂ : 2 * k > n) (h₃ : k + 1 < n) :\n    n - (n - (k + 1)) = k + 1 := by\n  have f₁ : k + 1 ≤ n := by linarith\n  have f₂ : n - (k + 1) ≤ n := by rify [f₁]; linarith\n  rify [f₁, f₂] at *\n  linarith\nn k : ℕ\nh₁ : 8 ≤ n\nh₂ : 2 * k > n\nh₃ : k + 1 < n\n⊢ n - (n - (k + 1)) = k + 1\n/- n k : ℕ\nh₁ : 8 ≤ n\nh₂ : 2 * k > n\nh₃ : k + 1 < n\nf₁ : k + 1 ≤ n\n⊢ n - (n - (k + 1)) = k + 1 -/\n/- n k : ℕ\nh₁ : 8 ≤ n\nh₂ : 2 * k > n\nh₃ : k + 1 < n\nf₁ : k + 1 ≤ n\nf₂ : n - (k + 1) ≤ n\n⊢ n - (n - (k + 1)) = k + 1 -/\n/- n k : ℕ\nh₁ : 8 ≤ ↑n\nh₂ : ↑n < 2 * ↑k\nh₃ : ↑k + 1 < ↑n\nf₁ f₂ : True\n⊢ ↑n - (↑n - (↑k + 1)) = ↑k + 1 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c : Nat) : a + b + c = c + a + b := by\n  conv =>\n    conv in a + b =>\n      rw [Nat.add_comm]\n    guard_target = b + a + c = c + a + b\n    rw [Nat.add_comm, Nat.add_assoc]\n    conv in (occs := 4) _ + _ =>\n      guard_target = a + b\n      rw [Nat.add_comm]\na b c : ℕ\n⊢ a + b + c = c + a + b\n", "full_text": "example (a b c : Nat) : a + b + c = c + a + b := by\n  conv =>\n    conv in a + b =>\n      rw [Nat.add_comm]\n    guard_target = b + a + c = c + a + b\n    rw [Nat.add_comm, Nat.add_assoc]\n    conv in (occs := 4) _ + _ =>\n      guard_target = a + b\n      rw [Nat.add_comm]\na b c : ℕ\n⊢ a + b + c = c + a + b\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b : Nat) : (a + b) + (a + b) = (b + a) + (b + a) := by\n  conv =>\n    lhs\n    conv in (occs := *) a + b =>\n      rw [Nat.add_comm]\n    guard_target = b + a + (b + a)\na b : ℕ\n⊢ a + b + (a + b) = b + a + (b + a)\n", "full_text": "example (a b : Nat) : (a + b) + (a + b) = (b + a) + (b + a) := by\n  conv =>\n    lhs\n    conv in (occs := *) a + b =>\n      rw [Nat.add_comm]\n    guard_target = b + a + (b + a)\na b : ℕ\n⊢ a + b + (a + b) = b + a + (b + a)\n/- Goals Accomplished! -/\n"}
{"prompt": "example (i j k : ℕ) (h₀ : i ≤ j) (h₁ : j ≤ k) : i ≤ k := by\n  extract_goal\n  exact h₀.trans h₁\ni j k : ℕ\nh₀ : i ≤ j\nh₁ : j ≤ k\n⊢ i ≤ k\n", "full_text": "example (i j k : ℕ) (h₀ : i ≤ j) (h₁ : j ≤ k) : i ≤ k := by\n  extract_goal\n  exact h₀.trans h₁\ni j k : ℕ\nh₀ : i ≤ j\nh₁ : j ≤ k\n⊢ i ≤ k\n/- i j k : ℕ\nh₀ : i ≤ j\nh₁ : j ≤ k\n⊢ i ≤ k -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (i j k : ℕ) (h₀ : i ≤ j) (h₁ : j ≤ k) : i ≤ k := by\n  extract_goal h₁\n  exact h₀.trans h₁\ni j k : ℕ\nh₀ : i ≤ j\nh₁ : j ≤ k\n⊢ i ≤ k\n", "full_text": "example (i j k : ℕ) (h₀ : i ≤ j) (h₁ : j ≤ k) : i ≤ k := by\n  extract_goal h₁\n  exact h₀.trans h₁\ni j k : ℕ\nh₀ : i ≤ j\nh₁ : j ≤ k\n⊢ i ≤ k\n/- i j k : ℕ\nh₀ : i ≤ j\nh₁ : j ≤ k\n⊢ i ≤ k -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {α : Type u} {β : Type v} [Add α] [h : Sub β] (f : α → β) ⦃_g : ℤ⦄ (a : α) {b : β} :\n    f a - b = f a - b := by\n  extract_goal\n  rfl\nα : Type u\nβ : Type v\ninst✝ : Add α\nh : Sub β\nf : α → β\n_g : ℤ\na : α\nb : β\n⊢ f a - b = f a - b\n", "full_text": "example {α : Type u} {β : Type v} [Add α] [h : Sub β] (f : α → β) ⦃_g : ℤ⦄ (a : α) {b : β} :\n    f a - b = f a - b := by\n  extract_goal\n  rfl\nα : Type u\nβ : Type v\ninst✝ : Add α\nh : Sub β\nf : α → β\n_g : ℤ\na : α\nb : β\n⊢ f a - b = f a - b\n/- α : Type u\nβ : Type v\ninst✝ : Add α\nh : Sub β\nf : α → β\n_g : ℤ\na : α\nb : β\n⊢ f a - b = f a - b -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (n : ℕ) : n = n := by\n  cases n\n  rfl\n  extract_goal\n  rfl\nn : ℕ\n⊢ n = n\n", "full_text": "example (n : ℕ) : n = n := by\n  cases n\n  rfl\n  extract_goal\n  rfl\nn : ℕ\n⊢ n = n\n/- case zero\n⊢ 0 = 0\n---\ncase succ\nn✝ : ℕ\n⊢ n✝ + 1 = n✝ + 1 -/\n/- case succ\nn✝ : ℕ\n⊢ n✝ + 1 = n✝ + 1 -/\n/- case succ\nn✝ : ℕ\n⊢ n✝ + 1 = n✝ + 1 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : n = n := by\n  extract_goal\n  rfl\nα✝ : Sort u_1\nn : α✝\n⊢ n = n\n", "full_text": "example : n = n := by\n  extract_goal\n  rfl\nα✝ : Sort u_1\nn : α✝\n⊢ n = n\n/- α✝ : Sort u_1\nn : α✝\n⊢ n = n -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {z : Int} : ∃ n : Nat, ↑n = z := by\n  set_option pp.all true in\n  extract_goal\n  sorry\nz : ℤ\n⊢ ∃ n, ↑n = z\n", "full_text": "example {z : Int} : ∃ n : Nat, ↑n = z := by\n  set_option pp.all true in\n  extract_goal\n  sorry\nz : ℤ\n⊢ ∃ n, ↑n = z\n/- Goals Accomplished! -/\n"}
{"prompt": "example (n : ℕ) : True := by\n  extract_goal using foo\n  sorry\nn : ℕ\n⊢ True\n", "full_text": "example (n : ℕ) : True := by\n  extract_goal using foo\n  sorry\nn : ℕ\n⊢ True\n/- n : ℕ\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (n : ℕ) : True := by\n  extract_goal n using foo\n  sorry\nn : ℕ\n⊢ True\n", "full_text": "example (n : ℕ) : True := by\n  extract_goal n using foo\n  sorry\nn : ℕ\n⊢ True\n/- n : ℕ\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (n : ℕ) : True := by\n  extract_goal k\nn : ℕ\n⊢ True\n", "full_text": "example (n : ℕ) : True := by\n  extract_goal k\nn : ℕ\n⊢ True\n/- n : ℕ\n⊢ True -/\n"}
{"prompt": "example (n : ℕ) : True := by\n  extract_goal *\n  sorry\nn : ℕ\n⊢ True\n", "full_text": "example (n : ℕ) : True := by\n  extract_goal *\n  sorry\nn : ℕ\n⊢ True\n/- n : ℕ\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (n : ℕ) (i : Fin n) : True := by\n  extract_goal n\n  sorry\nn : ℕ\ni : Fin n\n⊢ True\n", "full_text": "example (n : ℕ) (i : Fin n) : True := by\n  extract_goal n\n  sorry\nn : ℕ\ni : Fin n\n⊢ True\n/- n : ℕ\ni : Fin n\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (n : ℕ) (i : Fin n) : True := by\n  extract_goal i\n  sorry\nn : ℕ\ni : Fin n\n⊢ True\n", "full_text": "example (n : ℕ) (i : Fin n) : True := by\n  extract_goal i\n  sorry\nn : ℕ\ni : Fin n\n⊢ True\n/- n : ℕ\ni : Fin n\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : 1 = 2) : False := by\n  extract_goal\n  sorry\nh : 1 = 2\n⊢ False\n", "full_text": "example (h : 1 = 2) : False := by\n  extract_goal\n  sorry\nh : 1 = 2\n⊢ False\n/- h : 1 = 2\n⊢ False -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : False := by\n  have h : 1 = 2 := sorry\n  extract_goal\n  sorry\n⊢ False\n", "full_text": "example : False := by\n  have h : 1 = 2 := sorry\n  extract_goal\n  sorry\n⊢ False\n/- h : 1 = 2\n⊢ False -/\n/- h : 1 = 2\n⊢ False -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : 1 = 2 → False := by\n  intro h\n  extract_goal h\n  sorry\n⊢ 1 = 2 → False\n", "full_text": "example : 1 = 2 → False := by\n  intro h\n  extract_goal h\n  sorry\n⊢ 1 = 2 → False\n/- h : 1 = 2\n⊢ False -/\n/- h : 1 = 2\n⊢ False -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : ∀ n, n < n + 1 := by\n  intro m\n  extract_goal\n  sorry\n⊢ ∀ (n : ℕ), n < n + 1\n", "full_text": "example : ∀ n, n < n + 1 := by\n  intro m\n  extract_goal\n  sorry\n⊢ ∀ (n : ℕ), n < n + 1\n/- m : ℕ\n⊢ m < m + 1 -/\n/- m : ℕ\n⊢ m < m + 1 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : ∀ n, n < n + 1 := by\n  intro m\n  show _\n  have : m < _ := Nat.lt.step (Nat.lt.base m)\n  extract_goal\n  sorry\n⊢ ∀ (n : ℕ), n < n + 1\n", "full_text": "example : ∀ n, n < n + 1 := by\n  intro m\n  show _\n  have : m < _ := Nat.lt.step (Nat.lt.base m)\n  extract_goal\n  sorry\n⊢ ∀ (n : ℕ), n < n + 1\n/- m : ℕ\n⊢ m < m + 1 -/\n/- m : ℕ\n⊢ m < m + 1 -/\n/- m : ℕ\nthis : m < m.succ.succ\n⊢ m < m + 1 -/\n/- m : ℕ\nthis : m < m.succ.succ\n⊢ m < m + 1 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (R : CommMonCat.{u}) : R ⟶ R := CommMonCat.ofHom\n  { toFun := fun x => by\n      match_target (R : Type u)\n      guard_hyp x : (R : Type u)\n      exact x * x\n    map_one' := by simp\n    map_mul' := fun x y => by\n      rw [mul_assoc x y (x * y), ← mul_assoc y x y, mul_comm y x, mul_assoc, mul_assoc] }\nR : CommMonCat\nx : ↑R\n⊢ ↑R\n", "full_text": "example (R : CommMonCat.{u}) : R ⟶ R := CommMonCat.ofHom\n  { toFun := fun x => by\n      match_target (R : Type u)\n      guard_hyp x : (R : Type u)\n      exact x * x\n    map_one' := by simp\n    map_mul' := fun x y => by\n      rw [mul_assoc x y (x * y), ← mul_assoc y x y, mul_comm y x, mul_assoc, mul_assoc] }\nR : CommMonCat\nx : ↑R\n⊢ ↑R\n/- R : CommMonCat\nx : ↑R\n⊢ ↑R -/\n/- R : CommMonCat\nx : ↑R\n⊢ ↑R -/\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (p q : Prop) (h : ¬q → ¬p) : p → q := by\n  contrapose\n  guard_target = ¬q → ¬p\n  exact h\np q : Prop\nh : ¬q → ¬p\n⊢ p → q\n", "full_text": "example (p q : Prop) (h : ¬q → ¬p) : p → q := by\n  contrapose\n  guard_target = ¬q → ¬p\n  exact h\np q : Prop\nh : ¬q → ¬p\n⊢ p → q\n/- p q : Prop\nh : ¬q → ¬p\n⊢ ¬q → ¬p -/\n/- p q : Prop\nh : ¬q → ¬p\n⊢ ¬q → ¬p -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (p q : Prop) (h : p) (hpq : ¬q → ¬p) : q := by\n  contrapose h\n  guard_target = ¬p\n  exact hpq h\np q : Prop\nh : p\nhpq : ¬q → ¬p\n⊢ q\n", "full_text": "example (p q : Prop) (h : p) (hpq : ¬q → ¬p) : q := by\n  contrapose h\n  guard_target = ¬p\n  exact hpq h\np q : Prop\nh : p\nhpq : ¬q → ¬p\n⊢ q\n/- p q : Prop\nhpq : ¬q → ¬p\nh : ¬q\n⊢ ¬p -/\n/- p q : Prop\nhpq : ¬q → ¬p\nh : ¬q\n⊢ ¬p -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (p q : Prop) (h : p) (hpq : ¬q → ¬p) : q := by\n  contrapose h with h'\n  guard_target = ¬p\n  exact hpq h'\np q : Prop\nh : p\nhpq : ¬q → ¬p\n⊢ q\n", "full_text": "example (p q : Prop) (h : p) (hpq : ¬q → ¬p) : q := by\n  contrapose h with h'\n  guard_target = ¬p\n  exact hpq h'\np q : Prop\nh : p\nhpq : ¬q → ¬p\n⊢ q\n/- p q : Prop\nhpq : ¬q → ¬p\nh' : ¬q\n⊢ ¬p -/\n/- p q : Prop\nhpq : ¬q → ¬p\nh' : ¬q\n⊢ ¬p -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (p q : Prop) (h : q → p) : ¬p → ¬q := by\n  contrapose!\n  guard_target = q → p\n  exact h\np q : Prop\nh : q → p\n⊢ ¬p → ¬q\n", "full_text": "example (p q : Prop) (h : q → p) : ¬p → ¬q := by\n  contrapose!\n  guard_target = q → p\n  exact h\np q : Prop\nh : q → p\n⊢ ¬p → ¬q\n/- p q : Prop\nh : q → p\n⊢ q → p -/\n/- p q : Prop\nh : q → p\n⊢ q → p -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (p q : Prop) (h : ¬p) (hpq : q → p) : ¬q := by\n  contrapose! h\n  guard_target = p\n  exact hpq h\np q : Prop\nh : ¬p\nhpq : q → p\n⊢ ¬q\n", "full_text": "example (p q : Prop) (h : ¬p) (hpq : q → p) : ¬q := by\n  contrapose! h\n  guard_target = p\n  exact hpq h\np q : Prop\nh : ¬p\nhpq : q → p\n⊢ ¬q\n/- p q : Prop\nhpq : q → p\nh : q\n⊢ p -/\n/- p q : Prop\nhpq : q → p\nh : q\n⊢ p -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (p q : Prop) (h : ¬p) (hpq : q → p) : ¬q := by\n  contrapose! h with h'\n  guard_target = p\n  exact hpq h'\np q : Prop\nh : ¬p\nhpq : q → p\n⊢ ¬q\n", "full_text": "example (p q : Prop) (h : ¬p) (hpq : q → p) : ¬q := by\n  contrapose! h with h'\n  guard_target = p\n  exact hpq h'\np q : Prop\nh : ¬p\nhpq : q → p\n⊢ ¬q\n/- p q : Prop\nhpq : q → p\nh' : q\n⊢ p -/\n/- p q : Prop\nhpq : q → p\nh' : q\n⊢ p -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (p : Prop) (h : p) : p := by\n  fail_if_success { contrapose }\n  exact h\np : Prop\nh : p\n⊢ p\n", "full_text": "example (p : Prop) (h : p) : p := by\n  fail_if_success { contrapose }\n  exact h\np : Prop\nh : p\n⊢ p\n/- p : Prop\nh : p\n⊢ p -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (p q : Type) (h : p → q) : p → q := by\n  fail_if_success { contrapose }\n  exact h\np q : Type\nh : p → q\n⊢ p → q\n", "full_text": "example (p q : Type) (h : p → q) : p → q := by\n  fail_if_success { contrapose }\n  exact h\np q : Type\nh : p → q\n⊢ p → q\n/- p q : Type\nh : p → q\n⊢ p → q -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x y z k : ℕ)\n    (h : 3 ≤ (4 : ℕ))\n    (h' : z ≤ y) :\n    (k + 3 + x) - y ≤ (k + 4 + x) - z := by\n  mono\n  -- norm_num\nx y z k : ℕ\nh : 3 ≤ 4\nh' : z ≤ y\n⊢ k + 3 + x - y ≤ k + 4 + x - z\n", "full_text": "example (x y z k : ℕ)\n    (h : 3 ≤ (4 : ℕ))\n    (h' : z ≤ y) :\n    (k + 3 + x) - y ≤ (k + 4 + x) - z := by\n  mono\n  -- norm_num\nx y z k : ℕ\nh : 3 ≤ 4\nh' : z ≤ y\n⊢ k + 3 + x - y ≤ k + 4 + x - z\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x y z k : ℤ)\n    (h : 3 ≤ (4 : ℤ))\n    (h' : z ≤ y) :\n    (k + 3 + x) - y ≤ (k + 4 + x) - z := by\n  mono\n  -- norm_num\nx y z k : ℤ\nh : 3 ≤ 4\nh' : z ≤ y\n⊢ k + 3 + x - y ≤ k + 4 + x - z\n", "full_text": "example (x y z k : ℤ)\n    (h : 3 ≤ (4 : ℤ))\n    (h' : z ≤ y) :\n    (k + 3 + x) - y ≤ (k + 4 + x) - z := by\n  mono\n  -- norm_num\nx y z k : ℤ\nh : 3 ≤ 4\nh' : z ≤ y\n⊢ k + 3 + x - y ≤ k + 4 + x - z\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x y z a b : ℕ)\n    (h : a ≤ (b : ℕ))\n    (h' : z ≤ y) :\n    (1 + a + x) - y ≤ (1 + b + x) - z := by\n  transitivity (1 + a + x - z)\n  · mono\n  · mono\n    -- mono\n    -- mono\nx y z a b : ℕ\nh : a ≤ b\nh' : z ≤ y\n⊢ 1 + a + x - y ≤ 1 + b + x - z\n", "full_text": "example (x y z a b : ℕ)\n    (h : a ≤ (b : ℕ))\n    (h' : z ≤ y) :\n    (1 + a + x) - y ≤ (1 + b + x) - z := by\n  transitivity (1 + a + x - z)\n  · mono\n  · mono\n    -- mono\n    -- mono\nx y z a b : ℕ\nh : a ≤ b\nh' : z ≤ y\n⊢ 1 + a + x - y ≤ 1 + b + x - z\n/- x y z a b : ℕ\nh : a ≤ b\nh' : z ≤ y\n⊢ 1 + a + x - y ≤ 1 + a + x - z\n---\nx y z a b : ℕ\nh : a ≤ b\nh' : z ≤ y\n⊢ 1 + a + x - z ≤ 1 + b + x - z -/\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x y z a b : ℤ)\n    (h : a ≤ (b : ℤ))\n    (h' : z ≤ y) :\n    (1 + a + x) - y ≤ (1 + b + x) - z := by\n  apply @le_trans ℤ _ _ (1 + a + x - z)\n  -- transitivity (1 + a + x - z)\n  · mono\n  · mono\n    -- mono\n    -- mono\nx y z a b : ℤ\nh : a ≤ b\nh' : z ≤ y\n⊢ 1 + a + x - y ≤ 1 + b + x - z\n", "full_text": "example (x y z a b : ℤ)\n    (h : a ≤ (b : ℤ))\n    (h' : z ≤ y) :\n    (1 + a + x) - y ≤ (1 + b + x) - z := by\n  apply @le_trans ℤ _ _ (1 + a + x - z)\n  -- transitivity (1 + a + x - z)\n  · mono\n  · mono\n    -- mono\n    -- mono\nx y z a b : ℤ\nh : a ≤ b\nh' : z ≤ y\n⊢ 1 + a + x - y ≤ 1 + b + x - z\n/- case a\nx y z a b : ℤ\nh : a ≤ b\nh' : z ≤ y\n⊢ 1 + a + x - y ≤ 1 + a + x - z\n---\ncase a\nx y z a b : ℤ\nh : a ≤ b\nh' : z ≤ y\n⊢ 1 + a + x - z ≤ 1 + b + x - z -/\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x y z : ℤ)\n    (h' : z ≤ y) :\n    (1 + 3 + x) - y ≤ (1 + 4 + x) - z := by\n  apply @le_trans ℤ _ _ (1 + 3 + x - z)\n  -- transitivity (1 + 3 + x - z)\n  · mono\n  · mono\n    -- mono\n    norm_num\nx y z : ℤ\nh' : z ≤ y\n⊢ 1 + 3 + x - y ≤ 1 + 4 + x - z\n", "full_text": "example (x y z : ℤ)\n    (h' : z ≤ y) :\n    (1 + 3 + x) - y ≤ (1 + 4 + x) - z := by\n  apply @le_trans ℤ _ _ (1 + 3 + x - z)\n  -- transitivity (1 + 3 + x - z)\n  · mono\n  · mono\n    -- mono\n    norm_num\nx y z : ℤ\nh' : z ≤ y\n⊢ 1 + 3 + x - y ≤ 1 + 4 + x - z\n/- case a\nx y z : ℤ\nh' : z ≤ y\n⊢ 1 + 3 + x - y ≤ 1 + 3 + x - z\n---\ncase a\nx y z : ℤ\nh' : z ≤ y\n⊢ 1 + 3 + x - z ≤ 1 + 4 + x - z -/\n/- Goals Accomplished! -/\n/- case a.hab.h₁.h₂\nx y z : ℤ\nh' : z ≤ y\n⊢ 3 ≤ 4 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {x y z : ℕ} : true := by\n  have : y + x ≤ y + z := by\n    mono\n    guard_target = x ≤ z\n    exact test_sorry\n  trivial\nx y z : ℕ\n⊢ true = true\n", "full_text": "example {x y z : ℕ} : true := by\n  have : y + x ≤ y + z := by\n    mono\n    guard_target = x ≤ z\n    exact test_sorry\n  trivial\nx y z : ℕ\n⊢ true = true\n/- x y z : ℕ\nthis : y + x ≤ y + z\n⊢ true = true -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {x y z : ℕ} : true := by\n  suffices _this : x + y ≤ z + y by trivial\n  mono\n  guard_target = x ≤ z\n  exact test_sorry\nx y z : ℕ\n⊢ true = true\n", "full_text": "example {x y z : ℕ} : true := by\n  suffices _this : x + y ≤ z + y by trivial\n  mono\n  guard_target = x ≤ z\n  exact test_sorry\nx y z : ℕ\n⊢ true = true\n/- x y z : ℕ\n⊢ x + y ≤ z + y -/\n/- case h₁\nx y z : ℕ\n⊢ x ≤ z -/\n/- case h₁\nx y z : ℕ\n⊢ x ≤ z -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {x y z w : ℕ} : true := by\n  have : x + y ≤ z + w := by\n    mono\n    guard_target = x ≤ z; exact test_sorry\n    guard_target = y ≤ w; exact test_sorry\n  trivial\nx y z w : ℕ\n⊢ true = true\n", "full_text": "example {x y z w : ℕ} : true := by\n  have : x + y ≤ z + w := by\n    mono\n    guard_target = x ≤ z; exact test_sorry\n    guard_target = y ≤ w; exact test_sorry\n  trivial\nx y z w : ℕ\n⊢ true = true\n/- x y z w : ℕ\nthis : x + y ≤ z + w\n⊢ true = true -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : ∀ a b : Nat, a = b → b = a := by\n  introv h\n  exact h.symm\n⊢ ∀ (a b : ℕ), a = b → b = a\n", "full_text": "example : ∀ a b : Nat, a = b → b = a := by\n  introv h\n  exact h.symm\n⊢ ∀ (a b : ℕ), a = b → b = a\n/- a b : ℕ\nh : a = b\n⊢ b = a -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (n : Nat) : n = n := by\n  induction n\n  exacts [rfl, rfl]\n  exacts []\nn : ℕ\n⊢ n = n\n", "full_text": "example (n : Nat) : n = n := by\n  induction n\n  exacts [rfl, rfl]\n  exacts []\nn : ℕ\n⊢ n = n\n/- case zero\n⊢ 0 = 0\n---\ncase succ\nn✝ : ℕ\na✝ : n✝ = n✝\n⊢ n✝ + 1 = n✝ + 1 -/\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (n : Nat) : Nat := by\n  guard_hyp n : Nat\n  let m : Nat := 1\n  guard_hyp m := 1\n  guard_hyp m : Nat := 1\n  guard_target = Nat\n  exact 0\nn : ℕ\n⊢ ℕ\n", "full_text": "example (n : Nat) : Nat := by\n  guard_hyp n : Nat\n  let m : Nat := 1\n  guard_hyp m := 1\n  guard_hyp m : Nat := 1\n  guard_target = Nat\n  exact 0\nn : ℕ\n⊢ ℕ\n/- n : ℕ\n⊢ ℕ -/\n/- n : ℕ\nm : ℕ := 1\n⊢ ℕ -/\n/- n : ℕ\nm : ℕ := 1\n⊢ ℕ -/\n/- n : ℕ\nm : ℕ := 1\n⊢ ℕ -/\n/- n : ℕ\nm : ℕ := 1\n⊢ ℕ -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b : Nat) : a ≠ b → ¬ a = b := by\n  intros\n  by_contra H\n  contradiction\na b : ℕ\n⊢ a ≠ b → ¬a = b\n", "full_text": "example (a b : Nat) : a ≠ b → ¬ a = b := by\n  intros\n  by_contra H\n  contradiction\na b : ℕ\n⊢ a ≠ b → ¬a = b\n/- a b : ℕ\na✝ : a ≠ b\n⊢ ¬a = b -/\n/- a b : ℕ\na✝ : a ≠ b\nH : a = b\n⊢ False -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b : Nat) : ¬¬ a = b → a = b := by\n  intros\n  by_contra H\n  contradiction\na b : ℕ\n⊢ ¬¬a = b → a = b\n", "full_text": "example (a b : Nat) : ¬¬ a = b → a = b := by\n  intros\n  by_contra H\n  contradiction\na b : ℕ\n⊢ ¬¬a = b → a = b\n/- a b : ℕ\na✝ : ¬¬a = b\n⊢ a = b -/\n/- a b : ℕ\na✝ : ¬¬a = b\nH : ¬a = b\n⊢ False -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (p _q : Prop) : ¬¬ p → p := by\n  intros\n  by_contra H\n  contradiction\np _q : Prop\n⊢ ¬¬p → p\n", "full_text": "example (p _q : Prop) : ¬¬ p → p := by\n  intros\n  by_contra H\n  contradiction\np _q : Prop\n⊢ ¬¬p → p\n/- p _q : Prop\na✝ : ¬¬p\n⊢ p -/\n/- p _q : Prop\na✝ : ¬¬p\nH : ¬p\n⊢ False -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (n m : Nat) : Unit := by\n  cases n\n  cases m\n  iterate 3 exact ()\nn m : ℕ\n⊢ Unit\n", "full_text": "example (n m : Nat) : Unit := by\n  cases n\n  cases m\n  iterate 3 exact ()\nn m : ℕ\n⊢ Unit\n/- case zero\nm : ℕ\n⊢ Unit\n---\ncase succ\nm n✝ : ℕ\n⊢ Unit -/\n/- case zero.zero\n⊢ Unit\n---\ncase zero.succ\nn✝ : ℕ\n⊢ Unit\n---\ncase succ\nm n✝ : ℕ\n⊢ Unit -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (n m : Nat) : Unit := by\n  cases n\n  cases m\n  iterate exact ()\nn m : ℕ\n⊢ Unit\n", "full_text": "example (n m : Nat) : Unit := by\n  cases n\n  cases m\n  iterate exact ()\nn m : ℕ\n⊢ Unit\n/- case zero\nm : ℕ\n⊢ Unit\n---\ncase succ\nm n✝ : ℕ\n⊢ Unit -/\n/- case zero.zero\n⊢ Unit\n---\ncase zero.succ\nn✝ : ℕ\n⊢ Unit\n---\ncase succ\nm n✝ : ℕ\n⊢ Unit -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (n : Nat) : Nat := by\n  iterate exact () -- silently succeeds, after iterating 0 times\n  iterate exact n\nn : ℕ\n⊢ ℕ\n", "full_text": "example (n : Nat) : Nat := by\n  iterate exact () -- silently succeeds, after iterating 0 times\n  iterate exact n\nn : ℕ\n⊢ ℕ\n/- n : ℕ\n⊢ ℕ -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (p q r s : Prop) : p → q → r → s → (p ∧ q) ∧ (r ∧ s ∧ p) ∧ (p ∧ r ∧ q) := by\n  intros\n  repeat' constructor\n  repeat' assumption\np q r s : Prop\n⊢ p → q → r → s → (p ∧ q) ∧ (r ∧ s ∧ p) ∧ p ∧ r ∧ q\n", "full_text": "example (p q r s : Prop) : p → q → r → s → (p ∧ q) ∧ (r ∧ s ∧ p) ∧ (p ∧ r ∧ q) := by\n  intros\n  repeat' constructor\n  repeat' assumption\np q r s : Prop\n⊢ p → q → r → s → (p ∧ q) ∧ (r ∧ s ∧ p) ∧ p ∧ r ∧ q\n/- p q r s : Prop\na✝³ : p\na✝² : q\na✝¹ : r\na✝ : s\n⊢ (p ∧ q) ∧ (r ∧ s ∧ p) ∧ p ∧ r ∧ q -/\n/- case left.left\np q r s : Prop\na✝³ : p\na✝² : q\na✝¹ : r\na✝ : s\n⊢ p\n---\ncase left.right\np q r s : Prop\na✝³ : p\na✝² : q\na✝¹ : r\na✝ : s\n⊢ q\n---\ncase right.left.left\np q r s : Prop\na✝³ : p\na✝² : q\na✝¹ : r\na✝ : s\n⊢ r\n---\ncase right.left.right.left\np q r s : Prop\na✝³ : p\na✝² : q\na✝¹ : r\na✝ : s\n⊢ s\n---\ncase right.left.right.right\np q r s : Prop\na✝³ : p\na✝² : q\na✝¹ : r\na✝ : s\n⊢ p\n---\ncase right.right.left\np q r s : Prop\na✝³ : p\na✝² : q\na✝¹ : r\na✝ : s\n⊢ p\n---\ncase right.right.right.left\np q r s : Prop\na✝³ : p\na✝² : q\na✝¹ : r\na✝ : s\n⊢ r\n---\ncase right.right.right.right\np q r s : Prop\na✝³ : p\na✝² : q\na✝¹ : r\na✝ : s\n⊢ q -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (p q : Prop) : p → q → (p ∧ q) ∧ (p ∧ q ∧ p) := by\n  intros\n  constructor\n  fail_if_success any_goals assumption\n  all_goals constructor\n  any_goals assumption\n  constructor\n  any_goals assumption\np q : Prop\n⊢ p → q → (p ∧ q) ∧ p ∧ q ∧ p\n", "full_text": "example (p q : Prop) : p → q → (p ∧ q) ∧ (p ∧ q ∧ p) := by\n  intros\n  constructor\n  fail_if_success any_goals assumption\n  all_goals constructor\n  any_goals assumption\n  constructor\n  any_goals assumption\np q : Prop\n⊢ p → q → (p ∧ q) ∧ p ∧ q ∧ p\n/- p q : Prop\na✝¹ : p\na✝ : q\n⊢ (p ∧ q) ∧ p ∧ q ∧ p -/\n/- case left\np q : Prop\na✝¹ : p\na✝ : q\n⊢ p ∧ q\n---\ncase right\np q : Prop\na✝¹ : p\na✝ : q\n⊢ p ∧ q ∧ p -/\n/- case left\np q : Prop\na✝¹ : p\na✝ : q\n⊢ p ∧ q\n---\ncase right\np q : Prop\na✝¹ : p\na✝ : q\n⊢ p ∧ q ∧ p -/\n/- case left.left\np q : Prop\na✝¹ : p\na✝ : q\n⊢ p\n---\ncase left.right\np q : Prop\na✝¹ : p\na✝ : q\n⊢ q\n---\ncase right.left\np q : Prop\na✝¹ : p\na✝ : q\n⊢ p\n---\ncase right.right\np q : Prop\na✝¹ : p\na✝ : q\n⊢ q ∧ p -/\n/- case right.right\np q : Prop\na✝¹ : p\na✝ : q\n⊢ q ∧ p -/\n/- case right.right.left\np q : Prop\na✝¹ : p\na✝ : q\n⊢ q\n---\ncase right.right.right\np q : Prop\na✝¹ : p\na✝ : q\n⊢ p -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {P Q : Prop} (q : P) (p : Q) : P ∧ Q := by\n  swap_var p ↔ q\n  exact ⟨p, q⟩\nP Q : Prop\nq : P\np : Q\n⊢ P ∧ Q\n", "full_text": "example {P Q : Prop} (q : P) (p : Q) : P ∧ Q := by\n  swap_var p ↔ q\n  exact ⟨p, q⟩\nP Q : Prop\nq : P\np : Q\n⊢ P ∧ Q\n/- P Q : Prop\np : P\nq : Q\n⊢ P ∧ Q -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {a b : Nat} (h : a = b) : a = b ∧ a = a := by\n  swap_var a ↔ b\n  guard_hyp h : b = a\n  guard_target = b = a ∧ b = b\n  exact ⟨h, Eq.refl b⟩\na b : ℕ\nh : a = b\n⊢ a = b ∧ a = a\n", "full_text": "example {a b : Nat} (h : a = b) : a = b ∧ a = a := by\n  swap_var a ↔ b\n  guard_hyp h : b = a\n  guard_target = b = a ∧ b = b\n  exact ⟨h, Eq.refl b⟩\na b : ℕ\nh : a = b\n⊢ a = b ∧ a = a\n/- b a : ℕ\nh : b = a\n⊢ b = a ∧ b = b -/\n/- b a : ℕ\nh : b = a\n⊢ b = a ∧ b = b -/\n/- b a : ℕ\nh : b = a\n⊢ b = a ∧ b = b -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {a b c d : Nat} (h : a = b ∧ c = d) : a = b ∧ c = d := by\n  swap_var a ↔ b, b c\n  guard_target = c = a ∧ b = d\n  exact h\na b c d : ℕ\nh : a = b ∧ c = d\n⊢ a = b ∧ c = d\n", "full_text": "example {a b c d : Nat} (h : a = b ∧ c = d) : a = b ∧ c = d := by\n  swap_var a ↔ b, b c\n  guard_target = c = a ∧ b = d\n  exact h\na b c d : ℕ\nh : a = b ∧ c = d\n⊢ a = b ∧ c = d\n/- c a b d : ℕ\nh : c = a ∧ b = d\n⊢ c = a ∧ b = d -/\n/- c a b d : ℕ\nh : c = a ∧ b = d\n⊢ c = a ∧ b = d -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : a / 5 + b / 4 < c) : 4*a + 5*b < 20*c := by\n  cancel_denoms at h\n  exact h\nα : Type u\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : a / 5 + b / 4 < c\n⊢ 4 * a + 5 * b < 20 * c\n", "full_text": "example (h : a / 5 + b / 4 < c) : 4*a + 5*b < 20*c := by\n  cancel_denoms at h\n  exact h\nα : Type u\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : a / 5 + b / 4 < c\n⊢ 4 * a + 5 * b < 20 * c\n/- α : Type u\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : 4 * a + 5 * b < 20 * c\n⊢ 4 * a + 5 * b < 20 * c -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : a > 0) : a / 5 > 0 := by\n  cancel_denoms\n  exact h\nα : Type u\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : a > 0\n⊢ a / 5 > 0\n", "full_text": "example (h : a > 0) : a / 5 > 0 := by\n  cancel_denoms\n  exact h\nα : Type u\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : a > 0\n⊢ a / 5 > 0\n/- α : Type u\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : a > 0\n⊢ 0 < a -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : a + b = c) : a/5 + d*(b/4) = c - 4*a/5 + b*2*d/8 - b := by\n  cancel_denoms\n  rw [← h]\n  ring\nα : Type u\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : a + b = c\n⊢ a / 5 + d * (b / 4) = c - 4 * a / 5 + b * 2 * d / 8 - b\n", "full_text": "example (h : a + b = c) : a/5 + d*(b/4) = c - 4*a/5 + b*2*d/8 - b := by\n  cancel_denoms\n  rw [← h]\n  ring\nα : Type u\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : a + b = c\n⊢ a / 5 + d * (b / 4) = c - 4 * a / 5 + b * 2 * d / 8 - b\n/- α : Type u\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : a + b = c\n⊢ 2 * (4 * a + d * 5 * b) = 40 * c - 32 * a + b * 2 * 5 * d - 40 * b -/\n/- α : Type u\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : a + b = c\n⊢ 2 * (4 * a + d * 5 * b) = 40 * (a + b) - 32 * a + b * 2 * 5 * d - 40 * b -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : 0 < a) : a / (3/2) > 0 := by\n  cancel_denoms\n  exact h\nα : Type u\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : 0 < a\n⊢ a / (3 / 2) > 0\n", "full_text": "example (h : 0 < a) : a / (3/2) > 0 := by\n  cancel_denoms\n  exact h\nα : Type u\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : 0 < a\n⊢ a / (3 / 2) > 0\n/- α : Type u\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : 0 < a\n⊢ 0 < a -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : 0 < a): 0 < a / 1 := by\n  cancel_denoms\n  exact h\nα : Type u\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : 0 < a\n⊢ 0 < a / 1\n", "full_text": "example (h : 0 < a): 0 < a / 1 := by\n  cancel_denoms\n  exact h\nα : Type u\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : 0 < a\n⊢ 0 < a / 1\n/- α : Type u\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : 0 < a\n⊢ 0 < a -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : a < 0): 0 < a / -1 := by\n  cancel_denoms\n  exact h\nα : Type u\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : a < 0\n⊢ 0 < a / -1\n", "full_text": "example (h : a < 0): 0 < a / -1 := by\n  cancel_denoms\n  exact h\nα : Type u\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : a < 0\n⊢ 0 < a / -1\n/- α : Type u\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : a < 0\n⊢ a < 0 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : -a < 2 * b): a / -2 < b := by\n  cancel_denoms\n  exact h\nα : Type u\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : -a < 2 * b\n⊢ a / -2 < b\n", "full_text": "example (h : -a < 2 * b): a / -2 < b := by\n  cancel_denoms\n  exact h\nα : Type u\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : -a < 2 * b\n⊢ a / -2 < b\n/- α : Type u\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : -a < 2 * b\n⊢ -a < 2 * b -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : a < 6 * a) : a / 2 / 3 < a := by\n  cancel_denoms\n  exact h\nα : Type u\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : a < 6 * a\n⊢ a / 2 / 3 < a\n", "full_text": "example (h : a < 6 * a) : a / 2 / 3 < a := by\n  cancel_denoms\n  exact h\nα : Type u\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : a < 6 * a\n⊢ a / 2 / 3 < a\n/- α : Type u\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : a < 6 * a\n⊢ a < 6 * a -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : a < 9 * a) : a / 3 / 3 < a := by\n  cancel_denoms\n  exact h\nα : Type u\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : a < 9 * a\n⊢ a / 3 / 3 < a\n", "full_text": "example (h : a < 9 * a) : a / 3 / 3 < a := by\n  cancel_denoms\n  exact h\nα : Type u\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : a < 9 * a\n⊢ a / 3 / 3 < a\n/- α : Type u\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : a < 9 * a\n⊢ a < 9 * a -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : a / 5 + b / 4 < c) : 4*a + 5*b < 20*c := by\n  cancel_denoms at h\n  exact h\nα✝ : Type u\ninst✝⁵ : Field α✝\ninst✝⁴ : LinearOrder α✝\ninst✝³ : IsStrictOrderedRing α✝\na✝ b✝ c✝ d✝ : α✝\nα : Type\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : a / 5 + b / 4 < c\n⊢ 4 * a + 5 * b < 20 * c\n", "full_text": "example (h : a / 5 + b / 4 < c) : 4*a + 5*b < 20*c := by\n  cancel_denoms at h\n  exact h\nα✝ : Type u\ninst✝⁵ : Field α✝\ninst✝⁴ : LinearOrder α✝\ninst✝³ : IsStrictOrderedRing α✝\na✝ b✝ c✝ d✝ : α✝\nα : Type\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : a / 5 + b / 4 < c\n⊢ 4 * a + 5 * b < 20 * c\n/- α✝ : Type u\ninst✝⁵ : Field α✝\ninst✝⁴ : LinearOrder α✝\ninst✝³ : IsStrictOrderedRing α✝\na✝ b✝ c✝ d✝ : α✝\nα : Type\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : 4 * a + 5 * b < 20 * c\n⊢ 4 * a + 5 * b < 20 * c -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : a > 0) : a / 5 > 0 := by\n  cancel_denoms\n  exact h\nα✝ : Type u\ninst✝⁵ : Field α✝\ninst✝⁴ : LinearOrder α✝\ninst✝³ : IsStrictOrderedRing α✝\na✝ b✝ c✝ d✝ : α✝\nα : Type\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : a > 0\n⊢ a / 5 > 0\n", "full_text": "example (h : a > 0) : a / 5 > 0 := by\n  cancel_denoms\n  exact h\nα✝ : Type u\ninst✝⁵ : Field α✝\ninst✝⁴ : LinearOrder α✝\ninst✝³ : IsStrictOrderedRing α✝\na✝ b✝ c✝ d✝ : α✝\nα : Type\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : a > 0\n⊢ a / 5 > 0\n/- α✝ : Type u\ninst✝⁵ : Field α✝\ninst✝⁴ : LinearOrder α✝\ninst✝³ : IsStrictOrderedRing α✝\na✝ b✝ c✝ d✝ : α✝\nα : Type\ninst✝² : Field α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c d : α\nh : a > 0\n⊢ 0 < a -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : a + b = c) : a/5 + d*(b/4) = c - 4*a/5 + b*2*d/8 - b := by\n  cancel_denoms\n  rw [← h]\n  ring\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝¹ b✝¹ c✝¹ d✝¹ : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝ b✝ c✝ d✝ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na b c d : α\nh : a + b = c\n⊢ a / 5 + d * (b / 4) = c - 4 * a / 5 + b * 2 * d / 8 - b\n", "full_text": "example (h : a + b = c) : a/5 + d*(b/4) = c - 4*a/5 + b*2*d/8 - b := by\n  cancel_denoms\n  rw [← h]\n  ring\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝¹ b✝¹ c✝¹ d✝¹ : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝ b✝ c✝ d✝ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na b c d : α\nh : a + b = c\n⊢ a / 5 + d * (b / 4) = c - 4 * a / 5 + b * 2 * d / 8 - b\n/- α✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝¹ b✝¹ c✝¹ d✝¹ : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝ b✝ c✝ d✝ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na b c d : α\nh : a + b = c\n⊢ 2 * (4 * a + d * 5 * b) = 40 * c - 32 * a + b * 2 * 5 * d - 40 * b -/\n/- α✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝¹ b✝¹ c✝¹ d✝¹ : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝ b✝ c✝ d✝ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na b c d : α\nh : a + b = c\n⊢ 2 * (4 * a + d * 5 * b) = 40 * (a + b) - 32 * a + b * 2 * 5 * d - 40 * b -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : (1 : ℚ) > 0 := by\n  have := 0\n  cancel_denoms\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\n⊢ 1 > 0\n", "full_text": "example : (1 : ℚ) > 0 := by\n  have := 0\n  cancel_denoms\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\n⊢ 1 > 0\n/- α✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nthis : ℕ\n⊢ 1 > 0 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : a / 5 + b / 4 < c) : 4*a + 5*b < 20*c := by\n  cancel_denoms at h\n  exact h\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : a / 5 + b / 4 < c\n⊢ 4 * a + 5 * b < 20 * c\n", "full_text": "example (h : a / 5 + b / 4 < c) : 4*a + 5*b < 20*c := by\n  cancel_denoms at h\n  exact h\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : a / 5 + b / 4 < c\n⊢ 4 * a + 5 * b < 20 * c\n/- α✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : 4 * a + 5 * b < 20 * c\n⊢ 4 * a + 5 * b < 20 * c -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : a > 0) : a / 5 > 0 := by\n  cancel_denoms\n  exact h\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : a > 0\n⊢ a / 5 > 0\n", "full_text": "example (h : a > 0) : a / 5 > 0 := by\n  cancel_denoms\n  exact h\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : a > 0\n⊢ a / 5 > 0\n/- α✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : a > 0\n⊢ 0 < a -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : a + b = c) : a/5 + d*(b/4) = c - 4*a/5 + b*2*d/8 - b := by\n  cancel_denoms\n  rw [← h]\n  ring\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : a + b = c\n⊢ a / 5 + d * (b / 4) = c - 4 * a / 5 + b * 2 * d / 8 - b\n", "full_text": "example (h : a + b = c) : a/5 + d*(b/4) = c - 4*a/5 + b*2*d/8 - b := by\n  cancel_denoms\n  rw [← h]\n  ring\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : a + b = c\n⊢ a / 5 + d * (b / 4) = c - 4 * a / 5 + b * 2 * d / 8 - b\n/- α✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : a + b = c\n⊢ 2 * (4 * a + d * 5 * b) = 40 * c - 32 * a + b * 2 * 5 * d - 40 * b -/\n/- α✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : a + b = c\n⊢ 2 * (4 * a + d * 5 * b) = 40 * (a + b) - 32 * a + b * 2 * 5 * d - 40 * b -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : 2 * (4 * a + d * 5 * b) ≠ (40 * c - 32 * a + b * 2 * 5 * d - 40 * b)) :\n    a/5 + d*(b/4) ≠ c - 4*a/5 + b*2*d/8 - b := by\n  cancel_denoms\n  assumption\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : 2 * (4 * a + d * 5 * b) ≠ 40 * c - 32 * a + b * 2 * 5 * d - 40 * b\n⊢ a / 5 + d * (b / 4) ≠ c - 4 * a / 5 + b * 2 * d / 8 - b\n", "full_text": "example (h : 2 * (4 * a + d * 5 * b) ≠ (40 * c - 32 * a + b * 2 * 5 * d - 40 * b)) :\n    a/5 + d*(b/4) ≠ c - 4*a/5 + b*2*d/8 - b := by\n  cancel_denoms\n  assumption\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : 2 * (4 * a + d * 5 * b) ≠ 40 * c - 32 * a + b * 2 * 5 * d - 40 * b\n⊢ a / 5 + d * (b / 4) ≠ c - 4 * a / 5 + b * 2 * d / 8 - b\n/- α✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : 2 * (4 * a + d * 5 * b) ≠ 40 * c - 32 * a + b * 2 * 5 * d - 40 * b\n⊢ ¬2 * (4 * a + d * 5 * b) = 40 * c - 32 * a + b * 2 * 5 * d - 40 * b -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : 27 ≤ (a + 3) ^ 3) : 1 ≤ (a / 3 + 1) ^ 3 := by\n  cancel_denoms\n  assumption\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : 27 ≤ (a + 3) ^ 3\n⊢ 1 ≤ (a / 3 + 1) ^ 3\n", "full_text": "example (h : 27 ≤ (a + 3) ^ 3) : 1 ≤ (a / 3 + 1) ^ 3 := by\n  cancel_denoms\n  assumption\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : 27 ≤ (a + 3) ^ 3\n⊢ 1 ≤ (a / 3 + 1) ^ 3\n/- α✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : 27 ≤ (a + 3) ^ 3\n⊢ 27 ≤ (a + 3) ^ 3 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : a > 2) : 1 < 2⁻¹ * a := by\n  cancel_denoms\n  assumption\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : a > 2\n⊢ 1 < 2⁻¹ * a\n", "full_text": "example (h : a > 2) : 1 < 2⁻¹ * a := by\n  cancel_denoms\n  assumption\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : a > 2\n⊢ 1 < 2⁻¹ * a\n/- α✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : a > 2\n⊢ 2 < a -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : 6 * b = a⁻¹ * 3 + c * 2): b = a⁻¹ * 2⁻¹ + c * 3⁻¹ := by\n  cancel_denoms\n  assumption\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : 6 * b = a⁻¹ * 3 + c * 2\n⊢ b = a⁻¹ * 2⁻¹ + c * 3⁻¹\n", "full_text": "example (h : 6 * b = a⁻¹ * 3 + c * 2): b = a⁻¹ * 2⁻¹ + c * 3⁻¹ := by\n  cancel_denoms\n  assumption\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : 6 * b = a⁻¹ * 3 + c * 2\n⊢ b = a⁻¹ * 2⁻¹ + c * 3⁻¹\n/- α✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : 6 * b = a⁻¹ * 3 + c * 2\n⊢ 6 * b = a⁻¹ * 3 + c * 2 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : a * 5 + b * 6 = 30 * c) : a * 2⁻¹ * 3⁻¹ + b * 5⁻¹ = c := by\n  cancel_denoms\n  assumption\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : a * 5 + b * 6 = 30 * c\n⊢ a * 2⁻¹ * 3⁻¹ + b * 5⁻¹ = c\n", "full_text": "example (h : a * 5 + b * 6 = 30 * c) : a * 2⁻¹ * 3⁻¹ + b * 5⁻¹ = c := by\n  cancel_denoms\n  assumption\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : a * 5 + b * 6 = 30 * c\n⊢ a * 2⁻¹ * 3⁻¹ + b * 5⁻¹ = c\n/- α✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : a * 5 + b * 6 = 30 * c\n⊢ a * 5 + b * 6 = 30 * c -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : 5 * a ^ 2 + 4 * b ^ 3 = 0) : a ^ 2 / 4 + b ^ 3 / 5 = 0 := by\n  cancel_denoms\n  assumption\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : 5 * a ^ 2 + 4 * b ^ 3 = 0\n⊢ a ^ 2 / 4 + b ^ 3 / 5 = 0\n", "full_text": "example (h : 5 * a ^ 2 + 4 * b ^ 3 = 0) : a ^ 2 / 4 + b ^ 3 / 5 = 0 := by\n  cancel_denoms\n  assumption\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : 5 * a ^ 2 + 4 * b ^ 3 = 0\n⊢ a ^ 2 / 4 + b ^ 3 / 5 = 0\n/- α✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : 5 * a ^ 2 + 4 * b ^ 3 = 0\n⊢ 5 * a ^ 2 + 4 * b ^ 3 = 0 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : 5 * a ^ 3 * b ^ 2 = 72 * c) : (a / 2) ^ 3 * (b / 3) ^ 2 = c / 5 := by\n  cancel_denoms\n  assumption\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : 5 * a ^ 3 * b ^ 2 = 72 * c\n⊢ (a / 2) ^ 3 * (b / 3) ^ 2 = c / 5\n", "full_text": "example (h : 5 * a ^ 3 * b ^ 2 = 72 * c) : (a / 2) ^ 3 * (b / 3) ^ 2 = c / 5 := by\n  cancel_denoms\n  assumption\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : 5 * a ^ 3 * b ^ 2 = 72 * c\n⊢ (a / 2) ^ 3 * (b / 3) ^ 2 = c / 5\n/- α✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : 5 * a ^ 3 * b ^ 2 = 72 * c\n⊢ 5 * a ^ 3 * b ^ 2 = 72 * c -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : (5 * a ^ 3 + 8) ^ 2 = 1600 * c) : ((a / 2) ^ 3 + 1 / 5) ^ 2 = c := by\n  cancel_denoms\n  assumption\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : (5 * a ^ 3 + 8) ^ 2 = 1600 * c\n⊢ ((a / 2) ^ 3 + 1 / 5) ^ 2 = c\n", "full_text": "example (h : (5 * a ^ 3 + 8) ^ 2 = 1600 * c) : ((a / 2) ^ 3 + 1 / 5) ^ 2 = c := by\n  cancel_denoms\n  assumption\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : (5 * a ^ 3 + 8) ^ 2 = 1600 * c\n⊢ ((a / 2) ^ 3 + 1 / 5) ^ 2 = c\n/- α✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝² b✝² c✝² d✝² : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝¹ b✝¹ c✝¹ d✝¹ : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝ b✝ c✝ d✝ : α\na b c d : ℚ\nh : (5 * a ^ 3 + 8) ^ 2 = 1600 * c\n⊢ (5 * a ^ 3 + 8) ^ 2 = 1600 * c -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : a + b = c) : a/5 + d*(b/4) = c - 4*a/5 + b*2*d/8 - b := by\n  cancel_denoms\n  rw [← h]\n  ring\nC : Type u_5\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝³ b✝³ c✝³ d✝³ : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝² b✝² c✝² d✝² : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝¹ b✝¹ c✝¹ d✝¹ : α\na✝ b✝ c✝ d✝ : ℚ\na b c d : C\nh : sorry\n⊢ a / 5 + d * (b / 4) = c - 4 * a / 5 + b * 2 * d / 8 - b\n", "full_text": "example (h : a + b = c) : a/5 + d*(b/4) = c - 4*a/5 + b*2*d/8 - b := by\n  cancel_denoms\n  rw [← h]\n  ring\nC : Type u_5\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝³ b✝³ c✝³ d✝³ : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝² b✝² c✝² d✝² : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝¹ b✝¹ c✝¹ d✝¹ : α\na✝ b✝ c✝ d✝ : ℚ\na b c d : C\nh : sorry\n⊢ a / 5 + d * (b / 4) = c - 4 * a / 5 + b * 2 * d / 8 - b\n/- C : Type u_5\nα✝¹ : Type u\ninst✝⁷ : Field α✝¹\ninst✝⁶ : LinearOrder α✝¹\ninst✝⁵ : IsStrictOrderedRing α✝¹\na✝³ b✝³ c✝³ d✝³ : α✝¹\nα✝ : Type\ninst✝⁴ : Field α✝\ninst✝³ : LinearOrder α✝\ninst✝² : IsStrictOrderedRing α✝\na✝² b✝² c✝² d✝² : α✝\nα : Type\ninst✝¹ : Field α\ninst✝ : CharZero α\na✝¹ b✝¹ c✝¹ d✝¹ : α\na✝ b✝ c✝ d✝ : ℚ\na b c d : C\nh : sorry\n⊢ a / 5 + d * (b / 4) = c - 4 * a / 5 + b * 2 * d / 8 - b -/\n"}
{"prompt": "example {α β : Type*} (f : α → β) (a : α) : β := by\n  apply f at a\n  guard_hyp a :ₛ β\n  exact a\nα : Type u_1\nβ : Type u_2\nf : α → β\na : α\n⊢ β\n", "full_text": "example {α β : Type*} (f : α → β) (a : α) : β := by\n  apply f at a\n  guard_hyp a :ₛ β\n  exact a\nα : Type u_1\nβ : Type u_2\nf : α → β\na : α\n⊢ β\n/- α : Type u_1\nβ : Type u_2\nf : α → β\na : β\n⊢ β -/\n/- α : Type u_1\nβ : Type u_2\nf : α → β\na : β\n⊢ β -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {α : Type} (γ : α → Type) (a : α) (f : α → γ a) : γ a := by\n  apply f at a\n  rename_i a₂\n  guard_hyp a :ₛ γ a₂\n  exact a\nα : Type\nγ : α → Type\na : α\nf : α → γ a\n⊢ γ a\n", "full_text": "example {α : Type} (γ : α → Type) (a : α) (f : α → γ a) : γ a := by\n  apply f at a\n  rename_i a₂\n  guard_hyp a :ₛ γ a₂\n  exact a\nα : Type\nγ : α → Type\na : α\nf : α → γ a\n⊢ γ a\n/- α : Type\nγ : α → Type\na✝ : α\nf : α → γ a✝\na : γ a✝\n⊢ γ a✝ -/\n/- α : Type\nγ : α → Type\na₂ : α\nf : α → γ a₂\na : γ a₂\n⊢ γ a₂ -/\n/- α : Type\nγ : α → Type\na₂ : α\nf : α → γ a₂\na : γ a₂\n⊢ γ a₂ -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {α β : Type*} (f : α → β) (a b : α) (h : a = b) : f a = f b := by\n  apply congr_arg f at h\n  guard_hyp h :ₛ f a = f b\n  exact h\nα : Type u_1\nβ : Type u_2\nf : α → β\na b : α\nh : a = b\n⊢ f a = f b\n", "full_text": "example {α β : Type*} (f : α → β) (a b : α) (h : a = b) : f a = f b := by\n  apply congr_arg f at h\n  guard_hyp h :ₛ f a = f b\n  exact h\nα : Type u_1\nβ : Type u_2\nf : α → β\na b : α\nh : a = b\n⊢ f a = f b\n/- α : Type u_1\nβ : Type u_2\nf : α → β\na b : α\nh : f a = f b\n⊢ f a = f b -/\n/- α : Type u_1\nβ : Type u_2\nf : α → β\na b : α\nh : f a = f b\n⊢ f a = f b -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b : ℕ) (h : a + 1 = b + 1) : a = b := by\n  apply Nat.succ.inj at h\n  guard_hyp h :ₛ a = b\n  exact h\na b : ℕ\nh : a + 1 = b + 1\n⊢ a = b\n", "full_text": "example (a b : ℕ) (h : a + 1 = b + 1) : a = b := by\n  apply Nat.succ.inj at h\n  guard_hyp h :ₛ a = b\n  exact h\na b : ℕ\nh : a + 1 = b + 1\n⊢ a = b\n/- a b : ℕ\nh : a = b\n⊢ a = b -/\n/- a b : ℕ\nh : a = b\n⊢ a = b -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {G : Type*} [Group G] (a b c : G) (h : a * c = b * c) : a = b := by\n  apply mul_right_cancel at h\n  guard_hyp h :ₛ a = b\n  exact h\nG : Type u_1\ninst✝ : Group G\na b c : G\nh : a * c = b * c\n⊢ a = b\n", "full_text": "example {G : Type*} [Group G] (a b c : G) (h : a * c = b * c) : a = b := by\n  apply mul_right_cancel at h\n  guard_hyp h :ₛ a = b\n  exact h\nG : Type u_1\ninst✝ : Group G\na b c : G\nh : a * c = b * c\n⊢ a = b\n/- G : Type u_1\ninst✝ : Group G\na b c : G\nh : a = b\n⊢ a = b -/\n/- G : Type u_1\ninst✝ : Group G\na b c : G\nh : a = b\n⊢ a = b -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {G : Type*} [Monoid G] (a b c : G) (h : a * c = b * c)\n    (hh : ∀ x y z : G, x * z = y * z → x = y): a = b := by\n  apply mul_right_cancel at h\n  guard_hyp h :ₛ a = b\n  · exact h\n  · guard_target = IsRightCancelMul G\n    constructor\n    intros a b c\n    apply hh\nG : Type u_1\ninst✝ : Monoid G\na b c : G\nh : a * c = b * c\nhh : ∀ (x y z : G), x * z = y * z → x = y\n⊢ a = b\n", "full_text": "example {G : Type*} [Monoid G] (a b c : G) (h : a * c = b * c)\n    (hh : ∀ x y z : G, x * z = y * z → x = y): a = b := by\n  apply mul_right_cancel at h\n  guard_hyp h :ₛ a = b\n  · exact h\n  · guard_target = IsRightCancelMul G\n    constructor\n    intros a b c\n    apply hh\nG : Type u_1\ninst✝ : Monoid G\na b c : G\nh : a * c = b * c\nhh : ∀ (x y z : G), x * z = y * z → x = y\n⊢ a = b\n/- G : Type u_1\ninst✝ : Monoid G\na b c : G\nhh : ∀ (x y z : G), x * z = y * z → x = y\nh : a = b\n⊢ a = b\n---\ncase inst\nG : Type u_1\ninst✝ : Monoid G\na b c : G\nh : a * c = b * c\nhh : ∀ (x y z : G), x * z = y * z → x = y\n⊢ IsRightCancelMul G -/\n/- G : Type u_1\ninst✝ : Monoid G\na b c : G\nhh : ∀ (x y z : G), x * z = y * z → x = y\nh : a = b\n⊢ a = b\n---\ncase inst\nG : Type u_1\ninst✝ : Monoid G\na b c : G\nh : a * c = b * c\nhh : ∀ (x y z : G), x * z = y * z → x = y\n⊢ IsRightCancelMul G -/\n/- Goals Accomplished! -/\n/- case inst\nG : Type u_1\ninst✝ : Monoid G\na b c : G\nh : a * c = b * c\nhh : ∀ (x y z : G), x * z = y * z → x = y\n⊢ IsRightCancelMul G -/\n/- case inst.mul_right_cancel\nG : Type u_1\ninst✝ : Monoid G\na b c : G\nh : a * c = b * c\nhh : ∀ (x y z : G), x * z = y * z → x = y\n⊢ ∀ (a b c : G), a * b = c * b → a = c -/\n/- case inst.mul_right_cancel\nG : Type u_1\ninst✝ : Monoid G\na✝ b✝ c✝ : G\nh : a✝ * c✝ = b✝ * c✝\nhh : ∀ (x y z : G), x * z = y * z → x = y\na b c : G\n⊢ a * b = c * b → a = c -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {α β γ δ : Type*} (f : α → β → γ → δ) (a : α) (b : β) (g : γ) : δ := by\n  apply f at g\n  guard_hyp g :ₛ δ\n  assumption'\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : α → β → γ → δ\na : α\nb : β\ng : γ\n⊢ δ\n", "full_text": "example {α β γ δ : Type*} (f : α → β → γ → δ) (a : α) (b : β) (g : γ) : δ := by\n  apply f at g\n  guard_hyp g :ₛ δ\n  assumption'\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : α → β → γ → δ\na : α\nb : β\ng : γ\n⊢ δ\n/- α : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : α → β → γ → δ\na : α\nb : β\ng : δ\n⊢ δ\n---\ncase a\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : α → β → γ → δ\na : α\nb : β\ng : γ\n⊢ α\n---\ncase a\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : α → β → γ → δ\na : α\nb : β\ng : γ\n⊢ β -/\n/- α : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : α → β → γ → δ\na : α\nb : β\ng : δ\n⊢ δ\n---\ncase a\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : α → β → γ → δ\na : α\nb : β\ng : γ\n⊢ α\n---\ncase a\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : α → β → γ → δ\na : α\nb : β\ng : γ\n⊢ β -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {α γ : Type*} {β : α → Type*} {a : α}\n    (f : {a : α} → β a → γ) (b : β a) : γ := by\n  apply f at b\n  guard_hyp b :ₛ γ\n  exact b\nα : Type u_1\nγ : Type u_2\nβ : α → Type u_3\na : α\nf : {a : α} → β a → γ\nb : β a\n⊢ γ\n", "full_text": "example {α γ : Type*} {β : α → Type*} {a : α}\n    (f : {a : α} → β a → γ) (b : β a) : γ := by\n  apply f at b\n  guard_hyp b :ₛ γ\n  exact b\nα : Type u_1\nγ : Type u_2\nβ : α → Type u_3\na : α\nf : {a : α} → β a → γ\nb : β a\n⊢ γ\n/- α : Type u_1\nγ : Type u_2\nβ : α → Type u_3\na : α\nf : {a : α} → β a → γ\nb : γ\n⊢ γ -/\n/- α : Type u_1\nγ : Type u_2\nβ : α → Type u_3\na : α\nf : {a : α} → β a → γ\nb : γ\n⊢ γ -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {α β γ δ : Type*} (f : {_ : α} → β → {_ : γ} → δ) (g : γ) (a : α) (b : β) :\n    δ := by\n  apply f at g\n  guard_hyp g :ₛ δ\n  assumption'\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : {x : α} → β → {x : γ} → δ\ng : γ\na : α\nb : β\n⊢ δ\n", "full_text": "example {α β γ δ : Type*} (f : {_ : α} → β → {_ : γ} → δ) (g : γ) (a : α) (b : β) :\n    δ := by\n  apply f at g\n  guard_hyp g :ₛ δ\n  assumption'\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : {x : α} → β → {x : γ} → δ\ng : γ\na : α\nb : β\n⊢ δ\n/- α : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : {x : α} → β → {x : γ} → δ\na : α\nb : β\ng : δ\n⊢ δ\n---\ncase x\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : {x : α} → β → {x : γ} → δ\ng : γ\na : α\nb : β\n⊢ α\n---\ncase a\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : {x : α} → β → {x : γ} → δ\ng : γ\na : α\nb : β\n⊢ β -/\n/- α : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : {x : α} → β → {x : γ} → δ\na : α\nb : β\ng : δ\n⊢ δ\n---\ncase x\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : {x : α} → β → {x : γ} → δ\ng : γ\na : α\nb : β\n⊢ α\n---\ncase a\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : {x : α} → β → {x : γ} → δ\ng : γ\na : α\nb : β\n⊢ β -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {α β γ δ : Type*} (f : {_ : α} → {_ : β} → (g : γ) → δ) (g : γ) (a : α) (b : β) :\n    δ := by\n  apply f at g\n  guard_hyp g :ₛ δ\n  assumption'\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : {x : α} → {x : β} → γ → δ\ng : γ\na : α\nb : β\n⊢ δ\n", "full_text": "example {α β γ δ : Type*} (f : {_ : α} → {_ : β} → (g : γ) → δ) (g : γ) (a : α) (b : β) :\n    δ := by\n  apply f at g\n  guard_hyp g :ₛ δ\n  assumption'\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : {x : α} → {x : β} → γ → δ\ng : γ\na : α\nb : β\n⊢ δ\n/- α : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : {x : α} → {x : β} → γ → δ\na : α\nb : β\ng : δ\n⊢ δ\n---\ncase x\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : {x : α} → {x : β} → γ → δ\ng : γ\na : α\nb : β\n⊢ α\n---\ncase x\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : {x : α} → {x : β} → γ → δ\ng : γ\na : α\nb : β\n⊢ β -/\n/- α : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : {x : α} → {x : β} → γ → δ\na : α\nb : β\ng : δ\n⊢ δ\n---\ncase x\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : {x : α} → {x : β} → γ → δ\ng : γ\na : α\nb : β\n⊢ α\n---\ncase x\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\nf : {x : α} → {x : β} → γ → δ\ng : γ\na : α\nb : β\n⊢ β -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {α β γ : Type*} (f : α → β) (_g : γ) : β × γ  := by\n  apply f at _g\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nf : α → β\n_g : γ\n⊢ β × γ\n", "full_text": "example {α β γ : Type*} (f : α → β) (_g : γ) : β × γ  := by\n  apply f at _g\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nf : α → β\n_g : γ\n⊢ β × γ\n/- α : Type u_1\nβ : Type u_2\nγ : Type u_3\nf : α → β\n_g : γ\n⊢ β × γ -/\n"}
{"prompt": "example {α β : Type*} (a : α) (_b : β) : α × β := by\n  apply a at _b\nα : Type u_1\nβ : Type u_2\na : α\n_b : β\n⊢ α × β\n", "full_text": "example {α β : Type*} (a : α) (_b : β) : α × β := by\n  apply a at _b\nα : Type u_1\nβ : Type u_2\na : α\n_b : β\n⊢ α × β\n/- α : Type u_1\nβ : Type u_2\na : α\n_b : β\n⊢ α × β -/\n"}
{"prompt": "example {α β γ : Type*} (f : α → β) (g : γ) (a : α) : β × γ  := by\n  fail_if_success apply f at g\n  apply f at a\n  guard_hyp a :ₛ β\n  exact (a, g)\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nf : α → β\ng : γ\na : α\n⊢ β × γ\n", "full_text": "example {α β γ : Type*} (f : α → β) (g : γ) (a : α) : β × γ  := by\n  fail_if_success apply f at g\n  apply f at a\n  guard_hyp a :ₛ β\n  exact (a, g)\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nf : α → β\ng : γ\na : α\n⊢ β × γ\n/- α : Type u_1\nβ : Type u_2\nγ : Type u_3\nf : α → β\ng : γ\na : α\n⊢ β × γ -/\n/- α : Type u_1\nβ : Type u_2\nγ : Type u_3\nf : α → β\ng : γ\na : β\n⊢ β × γ -/\n/- α : Type u_1\nβ : Type u_2\nγ : Type u_3\nf : α → β\ng : γ\na : β\n⊢ β × γ -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {α β : Type*} (a : α) (b : β) : α × β := by\n  fail_if_success apply a at b\n  exact (a, b)\nα : Type u_1\nβ : Type u_2\na : α\nb : β\n⊢ α × β\n", "full_text": "example {α β : Type*} (a : α) (b : β) : α × β := by\n  fail_if_success apply a at b\n  exact (a, b)\nα : Type u_1\nβ : Type u_2\na : α\nb : β\n⊢ α × β\n/- α : Type u_1\nβ : Type u_2\na : α\nb : β\n⊢ α × β -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {α β : Type*} (a : α) (b : β) : α × β := by\n  fail_if_success apply a at b\n  exact (a, b)\nα : Type u_1\nβ : Type u_2\na : α\nb : β\n⊢ α × β\n", "full_text": "example {α β : Type*} (a : α) (b : β) : α × β := by\n  fail_if_success apply a at b\n  exact (a, b)\nα : Type u_1\nβ : Type u_2\na : α\nb : β\n⊢ α × β\n/- α : Type u_1\nβ : Type u_2\na : α\nb : β\n⊢ α × β -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {A B : Prop} (h : A ↔ B) : A → B := by\n  intro hA\n  apply h.mp at hA\n  assumption\nA B : Prop\nh : A ↔ B\n⊢ A → B\n", "full_text": "example {A B : Prop} (h : A ↔ B) : A → B := by\n  intro hA\n  apply h.mp at hA\n  assumption\nA B : Prop\nh : A ↔ B\n⊢ A → B\n/- A B : Prop\nh : A ↔ B\nhA : A\n⊢ B -/\n/- A B : Prop\nh : A ↔ B\nhA : B\n⊢ B -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a : ℝ) (h3 : a + 1 = 0) : a = -1 := by\n  apply (congrArg (fun x => x - 1)) at h3\n  simp at h3\n  assumption\na : ℝ\nh3 : a + 1 = 0\n⊢ a = -1\n", "full_text": "example (a : ℝ) (h3 : a + 1 = 0) : a = -1 := by\n  apply (congrArg (fun x => x - 1)) at h3\n  simp at h3\n  assumption\na : ℝ\nh3 : a + 1 = 0\n⊢ a = -1\n/- a : ℝ\nh3✝ : a + 1 = 0\nh3 : a + 1 - 1 = 0 - 1\n⊢ a = -1 -/\n/- a : ℝ\nh3✝ : a + 1 = 0\nh3 : a = -1\n⊢ a = -1 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b : ℝ) (h : -a * b = 0) : a = 0 ∨ b = 0 := by\n  apply (congrArg (fun x => x / 1)) at h\n  simp at h\n  assumption\na b : ℝ\nh : -a * b = 0\n⊢ a = 0 ∨ b = 0\n", "full_text": "example (a b : ℝ) (h : -a * b = 0) : a = 0 ∨ b = 0 := by\n  apply (congrArg (fun x => x / 1)) at h\n  simp at h\n  assumption\na b : ℝ\nh : -a * b = 0\n⊢ a = 0 ∨ b = 0\n/- a b : ℝ\nh✝ : -a * b = 0\nh : -a * b / 1 = 0 / 1\n⊢ a = 0 ∨ b = 0 -/\n/- a b : ℝ\nh✝ : -a * b = 0\nh : a = 0 ∨ b = 0\n⊢ a = 0 ∨ b = 0 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : True) : True := by\n  have H (h : True) : h = h := rfl\n  apply H at h\n  simp at h\n  exact h\nh : True\n⊢ True\n", "full_text": "example (h : True) : True := by\n  have H (h : True) : h = h := rfl\n  apply H at h\n  simp at h\n  exact h\nh : True\n⊢ True\n/- h : True\nH : ∀ (h : True), h = h\n⊢ True -/\n/- h✝ : True\nH : ∀ (h : True), h = h\nh : h✝ = h✝\n⊢ True -/\n/- h✝ : True\nH : ∀ (h : True), h = h\nh : True\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a : List Nat) (k : Nat) (hk : k < a.length) : True := by\n  have H (k : Nat) {xs ys : List Nat} (hk: k < xs.length)\n    (h : xs = ys) : xs[k] = ys[k]'(h ▸ hk) := h ▸ rfl\n  have h : a = a.map id := by simp\n  apply H k hk at h\n  simp at h\n  exact h\na : List ℕ\nk : ℕ\nhk : k < a.length\n⊢ True\n", "full_text": "example (a : List Nat) (k : Nat) (hk : k < a.length) : True := by\n  have H (k : Nat) {xs ys : List Nat} (hk: k < xs.length)\n    (h : xs = ys) : xs[k] = ys[k]'(h ▸ hk) := h ▸ rfl\n  have h : a = a.map id := by simp\n  apply H k hk at h\n  simp at h\n  exact h\na : List ℕ\nk : ℕ\nhk : k < a.length\n⊢ True\n/- a : List ℕ\nk : ℕ\nhk : k < a.length\nH : ∀ (k : ℕ) {xs ys : List ℕ} (hk : k < xs.length) (h : xs = ys), xs[k] = ys[k]\n⊢ True -/\n/- a : List ℕ\nk : ℕ\nhk : k < a.length\nH : ∀ (k : ℕ) {xs ys : List ℕ} (hk : k < xs.length) (h : xs = ys), xs[k] = ys[k]\nh : a = List.map id a\n⊢ True -/\n/- a : List ℕ\nk : ℕ\nhk : k < a.length\nH : ∀ (k : ℕ) {xs ys : List ℕ} (hk : k < xs.length) (h : xs = ys), xs[k] = ys[k]\nh✝ : a = List.map id a\nh : a[k] = (List.map id a)[k]\n⊢ True -/\n/- a : List ℕ\nk : ℕ\nhk : k < a.length\nH : ∀ (k : ℕ) {xs ys : List ℕ} (hk : k < xs.length) (h : xs = ys), xs[k] = ys[k]\nh✝ : a = List.map id a\nh : True\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : Foo := by\n  fconstructor\n  exact Nat\n  exact [0,1,2]\nFoo : Sort ?u.5\n⊢ Foo\n", "full_text": "example : Foo := by\n  fconstructor\n  exact Nat\n  exact [0,1,2]\nFoo : Sort ?u.5\n⊢ Foo\n/- Foo : Sort ?u.5\n⊢ Foo -/\n"}
{"prompt": "example : Foo := by\n  econstructor\n  exact [0,1,2]\nFoo : Sort ?u.5\n⊢ Foo\n", "full_text": "example : Foo := by\n  econstructor\n  exact [0,1,2]\nFoo : Sort ?u.5\n⊢ Foo\n/- Foo : Sort ?u.5\n⊢ Foo -/\n"}
{"prompt": "example : (let x := 1; x) = 1 := by\n  lift_lets\n  guard_target =ₛ let x := 1; x = 1\n  intro _x\n  rfl\n⊢ (let x := 1;\n    x) =\n    1\n", "full_text": "example : (let x := 1; x) = 1 := by\n  lift_lets\n  guard_target =ₛ let x := 1; x = 1\n  intro _x\n  rfl\n⊢ (let x := 1;\n    x) =\n    1\n/- ⊢ let x := 1;\n  x = 1 -/\n/- ⊢ let x := 1;\n  x = 1 -/\n/- _x : ℕ := 1\n⊢ _x = 1 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : (let x := 1; x) = (let y := 1; y) := by\n  lift_lets\n  guard_target =ₛ let x := 1; x = x\n  intro _x\n  rfl\n⊢ (let x := 1;\n    x) =\n    let y := 1;\n    y\n", "full_text": "example : (let x := 1; x) = (let y := 1; y) := by\n  lift_lets\n  guard_target =ₛ let x := 1; x = x\n  intro _x\n  rfl\n⊢ (let x := 1;\n    x) =\n    let y := 1;\n    y\n/- ⊢ let x := 1;\n  x = x -/\n/- ⊢ let x := 1;\n  x = x -/\n/- _x : ℕ := 1\n⊢ _x = _x -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : (let x := 1; x) = (let y := 1; y) := by\n  lift_lets (config := {merge := false})\n  guard_target =ₛ let x := 1; let y := 1; x = y\n  intros _x _y\n  rfl\n⊢ (let x := 1;\n    x) =\n    let y := 1;\n    y\n", "full_text": "example : (let x := 1; x) = (let y := 1; y) := by\n  lift_lets (config := {merge := false})\n  guard_target =ₛ let x := 1; let y := 1; x = y\n  intros _x _y\n  rfl\n⊢ (let x := 1;\n    x) =\n    let y := 1;\n    y\n/- ⊢ let x := 1;\n  let y := 1;\n  x = y -/\n/- ⊢ let x := 1;\n  let y := 1;\n  x = y -/\n/- _x : ℕ := 1\n_y : ℕ := 1\n⊢ _x = _y -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : (let x := (let y := 1; y + 1); x + 1) = 3 := by\n  lift_lets\n  guard_target =ₛ let y := 1; let x := y + 1; x + 1 = 3\n  intros _y _x\n  rfl\n⊢ (let x :=\n      let y := 1;\n      y + 1;\n    x + 1) =\n    3\n", "full_text": "example : (let x := (let y := 1; y + 1); x + 1) = 3 := by\n  lift_lets\n  guard_target =ₛ let y := 1; let x := y + 1; x + 1 = 3\n  intros _y _x\n  rfl\n⊢ (let x :=\n      let y := 1;\n      y + 1;\n    x + 1) =\n    3\n/- ⊢ let y := 1;\n  let x := y + 1;\n  x + 1 = 3 -/\n/- ⊢ let y := 1;\n  let x := y + 1;\n  x + 1 = 3 -/\n/- _y : ℕ := 1\n_x : ℕ := _y + 1\n⊢ _x + 1 = 3 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : (fun x => let a := x; let y := 1; a + y) 2 = 2 + 1 := by\n  lift_lets\n  guard_target =ₛ let y := 1; (fun x ↦ let a := x; a + y) 2 = 2 + 1\n  intro _y\n  rfl\n⊢ (fun x =>\n        let a := x;\n        let y := 1;\n        a + y)\n      2 =\n    2 + 1\n", "full_text": "example : (fun x => let a := x; let y := 1; a + y) 2 = 2 + 1 := by\n  lift_lets\n  guard_target =ₛ let y := 1; (fun x ↦ let a := x; a + y) 2 = 2 + 1\n  intro _y\n  rfl\n⊢ (fun x =>\n        let a := x;\n        let y := 1;\n        a + y)\n      2 =\n    2 + 1\n/- ⊢ let y := 1;\n  (fun x =>\n        let a := x;\n        a + y)\n      2 =\n    2 + 1 -/\n/- ⊢ let y := 1;\n  (fun x =>\n        let a := x;\n        a + y)\n      2 =\n    2 + 1 -/\n/- _y : ℕ := 1\n⊢ (fun x =>\n        let a := x;\n        a + _y)\n      2 =\n    2 + 1 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : (fun (_ : let ty := Nat; ty) => Nat) (2 : Nat) := by\n  lift_lets\n  guard_target =ₛ let ty := Nat; (fun (_ : ty) ↦ Nat) (2 : Nat)\n  exact 0\n⊢ (fun x => ℕ) 2\n", "full_text": "example : (fun (_ : let ty := Nat; ty) => Nat) (2 : Nat) := by\n  lift_lets\n  guard_target =ₛ let ty := Nat; (fun (_ : ty) ↦ Nat) (2 : Nat)\n  exact 0\n⊢ (fun x => ℕ) 2\n/- ⊢ let ty := ℕ;\n  (fun x => ℕ) 2 -/\n/- ⊢ let ty := ℕ;\n  (fun x => ℕ) 2 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : (fun (x : let ty := Nat; ty) => Fin x) (2 : Nat) := by\n  lift_lets\n  guard_target =ₛ let ty := Nat; (fun (x : ty) ↦ Fin x) (2 : Nat)\n  exact 0\n⊢ (fun x => Fin x) 2\n", "full_text": "example : (fun (x : let ty := Nat; ty) => Fin x) (2 : Nat) := by\n  lift_lets\n  guard_target =ₛ let ty := Nat; (fun (x : ty) ↦ Fin x) (2 : Nat)\n  exact 0\n⊢ (fun x => Fin x) 2\n/- ⊢ let ty := ℕ;\n  (fun x => Fin x) 2 -/\n/- ⊢ let ty := ℕ;\n  (fun x => Fin x) 2 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : (id : Nat → Nat) = (fun (x : let ty := Nat; ty) => x) := by\n  lift_lets\n  guard_target =ₛ let ty := Nat; (id: Nat → Nat) = fun (x : ty) ↦ x\n  rfl\n⊢ id = fun x => x\n", "full_text": "example : (id : Nat → Nat) = (fun (x : let ty := Nat; ty) => x) := by\n  lift_lets\n  guard_target =ₛ let ty := Nat; (id: Nat → Nat) = fun (x : ty) ↦ x\n  rfl\n⊢ id = fun x => x\n/- ⊢ let ty := ℕ;\n  id = fun x => x -/\n/- ⊢ let ty := ℕ;\n  id = fun x => x -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : (x : let ty := Nat; ty) → let y := (1 : Nat); Fin (y + Nat.succ x) := by\n  lift_lets\n  guard_target =ₛ let ty := Nat; let y := 1; (x : ty) → Fin (y + Nat.succ x)\n  intro ty y x\n  rw [Nat.add_succ, Nat.succ_eq_add_one]\n  exact 0\n⊢ (x :\n      let ty := ℕ;\n      ty) →\n    let y := 1;\n    Fin (y + Nat.succ x)\n", "full_text": "example : (x : let ty := Nat; ty) → let y := (1 : Nat); Fin (y + Nat.succ x) := by\n  lift_lets\n  guard_target =ₛ let ty := Nat; let y := 1; (x : ty) → Fin (y + Nat.succ x)\n  intro ty y x\n  rw [Nat.add_succ, Nat.succ_eq_add_one]\n  exact 0\n⊢ (x :\n      let ty := ℕ;\n      ty) →\n    let y := 1;\n    Fin (y + Nat.succ x)\n/- ⊢ let ty := ℕ;\n  let y := 1;\n  (x : ty) → Fin (y + Nat.succ x) -/\n/- ⊢ let ty := ℕ;\n  let y := 1;\n  (x : ty) → Fin (y + Nat.succ x) -/\n/- ty : Type := ℕ\ny : ℕ := 1\nx : ty\n⊢ Fin (y + Nat.succ x) -/\n/- ty : Type := ℕ\ny : ℕ := 1\nx : ty\n⊢ Fin (y + x + 1) -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : (x : Nat) → (y : Nat) → let z := x + 1; let w := 3; Fin (z + w) := by\n  lift_lets\n  guard_target =ₛ let w := 3; (x : Nat) → let z := x + 1; Nat → Fin (z + w)\n  intro w x z _y\n  simp [w, z]\n  exact 0\n⊢ (x : ℕ) →\n    ℕ →\n      let z := x + 1;\n      let w := 3;\n      Fin (z + w)\n", "full_text": "example : (x : Nat) → (y : Nat) → let z := x + 1; let w := 3; Fin (z + w) := by\n  lift_lets\n  guard_target =ₛ let w := 3; (x : Nat) → let z := x + 1; Nat → Fin (z + w)\n  intro w x z _y\n  simp [w, z]\n  exact 0\n⊢ (x : ℕ) →\n    ℕ →\n      let z := x + 1;\n      let w := 3;\n      Fin (z + w)\n/- ⊢ let w := 3;\n  (x : ℕ) →\n    let z := x + 1;\n    ℕ → Fin (z + w) -/\n/- ⊢ let w := 3;\n  (x : ℕ) →\n    let z := x + 1;\n    ℕ → Fin (z + w) -/\n/- w : ℕ := 3\nx : ℕ\nz : ℕ := x + 1\n_y : ℕ\n⊢ Fin (z + w) -/\n/- w : ℕ := 3\nx : ℕ\nz : ℕ := x + 1\n_y : ℕ\n⊢ Fin (x + 1 + 3) -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : (x : Nat) → let z := x + 1; (y : Nat) → let w := 3; Fin (z + w) := by\n  lift_lets\n  guard_target =ₛ let w := 3; (x : Nat) → let z := x + 1; Nat → Fin (z + w)\n  intro w x z _y\n  simp [w, z]\n  exact 0\n⊢ (x : ℕ) →\n    let z := x + 1;\n    ℕ →\n      let w := 3;\n      Fin (z + w)\n", "full_text": "example : (x : Nat) → let z := x + 1; (y : Nat) → let w := 3; Fin (z + w) := by\n  lift_lets\n  guard_target =ₛ let w := 3; (x : Nat) → let z := x + 1; Nat → Fin (z + w)\n  intro w x z _y\n  simp [w, z]\n  exact 0\n⊢ (x : ℕ) →\n    let z := x + 1;\n    ℕ →\n      let w := 3;\n      Fin (z + w)\n/- ⊢ let w := 3;\n  (x : ℕ) →\n    let z := x + 1;\n    ℕ → Fin (z + w) -/\n/- ⊢ let w := 3;\n  (x : ℕ) →\n    let z := x + 1;\n    ℕ → Fin (z + w) -/\n/- w : ℕ := 3\nx : ℕ\nz : ℕ := x + 1\n_y : ℕ\n⊢ Fin (z + w) -/\n/- w : ℕ := 3\nx : ℕ\nz : ℕ := x + 1\n_y : ℕ\n⊢ Fin (x + 1 + 3) -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : (let x := 1; x) = (let x := 1; x) := by\n  lift_lets\n  guard_target =ₛ let x := 1; x = x\n  rfl\n⊢ (let x := 1;\n    x) =\n    let x := 1;\n    x\n", "full_text": "example : (let x := 1; x) = (let x := 1; x) := by\n  lift_lets\n  guard_target =ₛ let x := 1; x = x\n  rfl\n⊢ (let x := 1;\n    x) =\n    let x := 1;\n    x\n/- ⊢ let x := 1;\n  x = x -/\n/- ⊢ let x := 1;\n  x = x -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : (let x := 2; x) = (let y := 1; y + 1) := by\n  lift_lets\n  guard_target =ₛ let x := 2; let y := 1; x = y + 1\n  rfl\n⊢ (let x := 2;\n    x) =\n    let y := 1;\n    y + 1\n", "full_text": "example : (let x := 2; x) = (let y := 1; y + 1) := by\n  lift_lets\n  guard_target =ₛ let x := 2; let y := 1; x = y + 1\n  rfl\n⊢ (let x := 2;\n    x) =\n    let y := 1;\n    y + 1\n/- ⊢ let x := 2;\n  let y := 1;\n  x = y + 1 -/\n/- ⊢ let x := 2;\n  let y := 1;\n  x = y + 1 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : (let x := 1; x) = y) : True := by\n  lift_lets at h\n  guard_hyp h :ₛ let x := 1; x = y\n  trivial\ny : ℕ\nh :\n  (let x := 1;\n    x) =\n    y\n⊢ True\n", "full_text": "example (h : (let x := 1; x) = y) : True := by\n  lift_lets at h\n  guard_hyp h :ₛ let x := 1; x = y\n  trivial\ny : ℕ\nh :\n  (let x := 1;\n    x) =\n    y\n⊢ True\n/- y : ℕ\nh :\n  let x := 1;\n  x = y\n⊢ True -/\n/- y : ℕ\nh :\n  let x := 1;\n  x = y\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : (let x := 1; x) = y) : True := by\n  revert h\n  lift_lets\n  intro x h\n  guard_hyp x : Nat := 1\n  guard_hyp h :ₛ x = y\n  trivial\ny : ℕ\nh :\n  (let x := 1;\n    x) =\n    y\n⊢ True\n", "full_text": "example (h : (let x := 1; x) = y) : True := by\n  revert h\n  lift_lets\n  intro x h\n  guard_hyp x : Nat := 1\n  guard_hyp h :ₛ x = y\n  trivial\ny : ℕ\nh :\n  (let x := 1;\n    x) =\n    y\n⊢ True\n/- y : ℕ\n⊢ (let x := 1;\n      x) =\n      y →\n    True -/\n/- y : ℕ\n⊢ let x := 1;\n  x = y → True -/\n/- y : ℕ\nx : ℕ := 1\nh : x = y\n⊢ True -/\n/- y : ℕ\nx : ℕ := 1\nh : x = y\n⊢ True -/\n/- y : ℕ\nx : ℕ := 1\nh : x = y\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : let x := 1; ∀ n, let y := 1; x + n = y + n := by\n  lift_lets\n  guard_target =ₛ let x := 1; ∀ n, x + n = x + n\n  intros x n\n  rfl\n⊢ let x := 1;\n  ∀ (n : ℕ),\n    let y := 1;\n    x + n = y + n\n", "full_text": "example : let x := 1; ∀ n, let y := 1; x + n = y + n := by\n  lift_lets\n  guard_target =ₛ let x := 1; ∀ n, x + n = x + n\n  intros x n\n  rfl\n⊢ let x := 1;\n  ∀ (n : ℕ),\n    let y := 1;\n    x + n = y + n\n/- ⊢ let x := 1;\n  ∀ (n : ℕ), x + n = x + n -/\n/- ⊢ let x := 1;\n  ∀ (n : ℕ), x + n = x + n -/\n/- x : ℕ := 1\nn : ℕ\n⊢ x + n = x + n -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (m : Nat) (h : ∃ n, n + 1 = m) (x : Fin m) (y : Fin _) :\n    cast (let h' := h.choose_spec.symm; congrArg Fin h') x = y := by\n  lift_lets (config := {proofs := true})\n  intro h'\n  clear_value h'\n  guard_hyp h' : m = Exists.choose h + 1\n  exact test_sorry\nm : ℕ\nh : ∃ n, n + 1 = m\nx : Fin m\ny : Fin (h.choose + 1)\n⊢ cast ⋯ x = y\n", "full_text": "example (m : Nat) (h : ∃ n, n + 1 = m) (x : Fin m) (y : Fin _) :\n    cast (let h' := h.choose_spec.symm; congrArg Fin h') x = y := by\n  lift_lets (config := {proofs := true})\n  intro h'\n  clear_value h'\n  guard_hyp h' : m = Exists.choose h + 1\n  exact test_sorry\nm : ℕ\nh : ∃ n, n + 1 = m\nx : Fin m\ny : Fin (h.choose + 1)\n⊢ cast ⋯ x = y\n/- m : ℕ\nh : ∃ n, n + 1 = m\nx : Fin m\ny : Fin (h.choose + 1)\n⊢ let h' := ⋯;\n  cast ⋯ x = y -/\n/- m : ℕ\nh : ∃ n, n + 1 = m\nx : Fin m\ny : Fin (h.choose + 1)\nh' : m = h.choose + 1 := Eq.symm (Exists.choose_spec h)\n⊢ cast ⋯ x = y -/\n/- m : ℕ\nh : ∃ n, n + 1 = m\nx : Fin m\ny : Fin (h.choose + 1)\nh' : m = h.choose + 1\n⊢ cast ⋯ x = y -/\n/- m : ℕ\nh : ∃ n, n + 1 = m\nx : Fin m\ny : Fin (h.choose + 1)\nh' : m = h.choose + 1\n⊢ cast ⋯ x = y -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : orderOf (-1 : ℤˣ) = 2 :=\n  orderOf_eq_prime (Int.units_sq _) (by decide)\n⊢ -1 ≠ 1\n", "full_text": "example : orderOf (-1 : ℤˣ) = 2 :=\n  orderOf_eq_prime (Int.units_sq _) (by decide)\n⊢ -1 ≠ 1\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : y = z) : x + 0 = y → x = z := by\n  simp_intro\n  guard_target = x = y → x = z\n  simp_intro .. [h]\ny z x : ℕ\nh : y = z\n⊢ x + 0 = y → x = z\n", "full_text": "example (h : y = z) : x + 0 = y → x = z := by\n  simp_intro\n  guard_target = x = y → x = z\n  simp_intro .. [h]\ny z x : ℕ\nh : y = z\n⊢ x + 0 = y → x = z\n/- y z x : ℕ\nh : y = z\n⊢ x = y → x = z -/\n/- y z x : ℕ\nh : y = z\n⊢ x = y → x = z -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : 1 = 1) : True := by\n  fail_if_no_progress simp at h\n  trivial\nh : 1 = 1\n⊢ True\n", "full_text": "example (h : 1 = 1) : True := by\n  fail_if_no_progress simp at h\n  trivial\nh : 1 = 1\n⊢ True\n/- h : True\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : let x := 1; x = x := by\n  intro x\n  fail_if_no_progress clear_value x\n  rfl\n⊢ let x := 1;\n  x = x\n", "full_text": "example : let x := 1; x = x := by\n  intro x\n  fail_if_no_progress clear_value x\n  rfl\n⊢ let x := 1;\n  x = x\n/- x : ℕ := 1\n⊢ x = x -/\n/- x : ℕ\n⊢ x = x -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : let x := 1; x = x := by\n  intro x\n  fail_if_no_progress\n    revert x\n    intro x\n  rfl\n⊢ let x := 1;\n  x = x\n", "full_text": "example : let x := 1; x = x := by\n  intro x\n  fail_if_no_progress\n    revert x\n    intro x\n  rfl\n⊢ let x := 1;\n  x = x\n/- x : ℕ := 1\n⊢ x = x -/\n/- x : ℕ := 1\n⊢ x = x -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : let x := id 0; x = x := by\n  intro x\n  fail_if_no_progress\n    -- Reduce the value of `x` to `Nat.zero`\n    run_tac do\n      let g ← getMainGoal\n      let decl ← g.getDecl\n      let some d := decl.lctx.findFromUserName? `x | throwError \"no x\"\n      let lctx := decl.lctx.modifyLocalDecl d.fvarId fun d =>\n        d.setValue (.const ``Nat.zero [])\n      let g' ← Meta.mkFreshExprMVarAt lctx decl.localInstances decl.type\n      g.assign g'\n      replaceMainGoal [g'.mvarId!]\n    guard_hyp x : Nat :=ₛ Nat.zero\n  rfl\n⊢ let x := id 0;\n  x = x\n", "full_text": "example : let x := id 0; x = x := by\n  intro x\n  fail_if_no_progress\n    -- Reduce the value of `x` to `Nat.zero`\n    run_tac do\n      let g ← getMainGoal\n      let decl ← g.getDecl\n      let some d := decl.lctx.findFromUserName? `x | throwError \"no x\"\n      let lctx := decl.lctx.modifyLocalDecl d.fvarId fun d =>\n        d.setValue (.const ``Nat.zero [])\n      let g' ← Meta.mkFreshExprMVarAt lctx decl.localInstances decl.type\n      g.assign g'\n      replaceMainGoal [g'.mvarId!]\n    guard_hyp x : Nat :=ₛ Nat.zero\n  rfl\n⊢ let x := id 0;\n  x = x\n/- x : ℕ := id 0\n⊢ x = x -/\n/- x : ℕ := Nat.zero\n⊢ x = x -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x : Bool) (h : x = true) : x = true := by\n  fail_if_no_progress skip\nx : Bool\nh : x = true\n⊢ x = true\n", "full_text": "example (x : Bool) (h : x = true) : x = true := by\n  fail_if_no_progress skip\nx : Bool\nh : x = true\n⊢ x = true\n/- x : Bool\nh : x = true\n⊢ x = true -/\n"}
{"prompt": "example (x : Bool) (h : x = true) : x = true := by\n  fail_if_no_progress simp (config := {failIfUnchanged := false})\nx : Bool\nh : x = true\n⊢ x = true\n", "full_text": "example (x : Bool) (h : x = true) : x = true := by\n  fail_if_no_progress simp (config := {failIfUnchanged := false})\nx : Bool\nh : x = true\n⊢ x = true\n/- x : Bool\nh : x = true\n⊢ x = true -/\n"}
{"prompt": "example (x : Bool) (h : x = true) : True := by\n  fail_if_no_progress simp (config := {failIfUnchanged := false}) at h\nx : Bool\nh : x = true\n⊢ True\n", "full_text": "example (x : Bool) (h : x = true) : True := by\n  fail_if_no_progress simp (config := {failIfUnchanged := false}) at h\nx : Bool\nh : x = true\n⊢ True\n/- x : Bool\nh : x = true\n⊢ True -/\n"}
{"prompt": "example : let x := (fun x => x) Nat.zero; x = x := by\n  intro x\n  fail_if_no_progress\n    -- Reduce the value of `x` to `Nat.zero`\n    run_tac do\n      let g ← getMainGoal\n      let decl ← g.getDecl\n      let some d := decl.lctx.findFromUserName? `x | throwError \"no x\"\n      let lctx := decl.lctx.modifyLocalDecl d.fvarId fun d =>\n        d.setValue (.const ``Nat.zero [])\n      let g' ← Meta.mkFreshExprMVarAt lctx decl.localInstances decl.type\n      g.assign g'\n      replaceMainGoal [g'.mvarId!]\n    guard_hyp x : Nat :=ₛ Nat.zero\n⊢ let x := (fun x => x) Nat.zero;\n  x = x\n", "full_text": "example : let x := (fun x => x) Nat.zero; x = x := by\n  intro x\n  fail_if_no_progress\n    -- Reduce the value of `x` to `Nat.zero`\n    run_tac do\n      let g ← getMainGoal\n      let decl ← g.getDecl\n      let some d := decl.lctx.findFromUserName? `x | throwError \"no x\"\n      let lctx := decl.lctx.modifyLocalDecl d.fvarId fun d =>\n        d.setValue (.const ``Nat.zero [])\n      let g' ← Meta.mkFreshExprMVarAt lctx decl.localInstances decl.type\n      g.assign g'\n      replaceMainGoal [g'.mvarId!]\n    guard_hyp x : Nat :=ₛ Nat.zero\n⊢ let x := (fun x => x) Nat.zero;\n  x = x\n/- x : ℕ := (fun x => x) Nat.zero\n⊢ x = x -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : (α × β) × (γ × δ) ≃ α × (β × γ) × δ := by\n  exact (prod_assoc% : (α × β) × (γ × δ) ≃ α × (β × γ) × δ)\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\n⊢ (α × β) × γ × δ ≃ α × (β × γ) × δ\n", "full_text": "example : (α × β) × (γ × δ) ≃ α × (β × γ) × δ := by\n  exact (prod_assoc% : (α × β) × (γ × δ) ≃ α × (β × γ) × δ)\nα : Type u_1\nβ : Type u_2\nγ : Type u_3\nδ : Type u_4\n⊢ (α × β) × γ × δ ≃ α × (β × γ) × δ\n/- Goals Accomplished! -/\n"}
{"prompt": "example : natDegree (- C z * X ^ 5 + (monomial 2 5) ^ 2 - 0 + 1 + IntCast.intCast 1 +\n    NatCast.natCast 1 + (z : ℤ[X]) + (n : ℤ[X]) + f) ≤ 5 := by\n  compute_degree!\nR : Type u_1\nn : ℕ\nz : ℤ\nf : ℤ[X]\nhn : f.natDegree ≤ 5\nhd : f.degree ≤ 5\n⊢ (-C z * X ^ 5 + (monomial 2) 5 ^ 2 - 0 + 1 + IntCast.intCast 1 + ↑1 + ↑z + ↑n + f).natDegree ≤ 5\n", "full_text": "example : natDegree (- C z * X ^ 5 + (monomial 2 5) ^ 2 - 0 + 1 + IntCast.intCast 1 +\n    NatCast.natCast 1 + (z : ℤ[X]) + (n : ℤ[X]) + f) ≤ 5 := by\n  compute_degree!\nR : Type u_1\nn : ℕ\nz : ℤ\nf : ℤ[X]\nhn : f.natDegree ≤ 5\nhd : f.degree ≤ 5\n⊢ (-C z * X ^ 5 + (monomial 2) 5 ^ 2 - 0 + 1 + IntCast.intCast 1 + ↑1 + ↑z + ↑n + f).natDegree ≤ 5\n/- Goals Accomplished! -/\n"}
{"prompt": "example [Semiring R] : natDegree (OfNat.ofNat (OfNat.ofNat 0) : R[X]) ≤ 0 := by\n  compute_degree\nR : Type u_1\nn : ℕ\nz : ℤ\nf : ℤ[X]\nhn : f.natDegree ≤ 5\nhd : f.degree ≤ 5\ninst✝ : Semiring R\n⊢ natDegree (OfNat.ofNat (OfNat.ofNat 0)) ≤ 0\n", "full_text": "example [Semiring R] : natDegree (OfNat.ofNat (OfNat.ofNat 0) : R[X]) ≤ 0 := by\n  compute_degree\nR : Type u_1\nn : ℕ\nz : ℤ\nf : ℤ[X]\nhn : f.natDegree ≤ 5\nhd : f.degree ≤ 5\ninst✝ : Semiring R\n⊢ natDegree (OfNat.ofNat (OfNat.ofNat 0)) ≤ 0\n/- Goals Accomplished! -/\n"}
{"prompt": "example : degree (- C z * X ^ 5 + (C 0 + monomial 2 5) ^ 2 - 0 + 1 + IntCast.intCast 1 +\n    NatCast.natCast 1 + (z : ℤ[X]) + (n : ℤ[X]) + f) ≤ 5 := by\n  set k := f with _h₀\n  compute_degree!\nR : Type u_1\nn : ℕ\nz : ℤ\nf : ℤ[X]\nhn : f.natDegree ≤ 5\nhd : f.degree ≤ 5\n⊢ (-C z * X ^ 5 + (C 0 + (monomial 2) 5) ^ 2 - 0 + 1 + IntCast.intCast 1 + ↑1 + ↑z + ↑n + f).degree ≤ 5\n", "full_text": "example : degree (- C z * X ^ 5 + (C 0 + monomial 2 5) ^ 2 - 0 + 1 + IntCast.intCast 1 +\n    NatCast.natCast 1 + (z : ℤ[X]) + (n : ℤ[X]) + f) ≤ 5 := by\n  set k := f with _h₀\n  compute_degree!\nR : Type u_1\nn : ℕ\nz : ℤ\nf : ℤ[X]\nhn : f.natDegree ≤ 5\nhd : f.degree ≤ 5\n⊢ (-C z * X ^ 5 + (C 0 + (monomial 2) 5) ^ 2 - 0 + 1 + IntCast.intCast 1 + ↑1 + ↑z + ↑n + f).degree ≤ 5\n/- R : Type u_1\nn : ℕ\nz : ℤ\nf : ℤ[X]\nk : ℤ[X] := f\nhn : k.natDegree ≤ 5\nhd : k.degree ≤ 5\n_h₀ : k = f\n⊢ (-C z * X ^ 5 + (C 0 + (monomial 2) 5) ^ 2 - 0 + 1 + IntCast.intCast 1 + ↑1 + ↑z + ↑n + k).degree ≤ 5 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : natDegree (- C 1 * X ^ 5 + (C 0 + monomial 2 5) ^ 2 - 0 + 1 + IntCast.intCast 1 +\n    NatCast.natCast 1 + (z : ℤ[X]) + (n : ℤ[X])) = 5 := by\n  set k := f with _h₀\n  compute_degree!\nR : Type u_1\nn : ℕ\nz : ℤ\nf : ℤ[X]\nhn : f.natDegree ≤ 5\nhd : f.degree ≤ 5\n⊢ (-C 1 * X ^ 5 + (C 0 + (monomial 2) 5) ^ 2 - 0 + 1 + IntCast.intCast 1 + ↑1 + ↑z + ↑n).natDegree = 5\n", "full_text": "example : natDegree (- C 1 * X ^ 5 + (C 0 + monomial 2 5) ^ 2 - 0 + 1 + IntCast.intCast 1 +\n    NatCast.natCast 1 + (z : ℤ[X]) + (n : ℤ[X])) = 5 := by\n  set k := f with _h₀\n  compute_degree!\nR : Type u_1\nn : ℕ\nz : ℤ\nf : ℤ[X]\nhn : f.natDegree ≤ 5\nhd : f.degree ≤ 5\n⊢ (-C 1 * X ^ 5 + (C 0 + (monomial 2) 5) ^ 2 - 0 + 1 + IntCast.intCast 1 + ↑1 + ↑z + ↑n).natDegree = 5\n/- R : Type u_1\nn : ℕ\nz : ℤ\nf : ℤ[X]\nk : ℤ[X] := f\nhn : k.natDegree ≤ 5\nhd : k.degree ≤ 5\n_h₀ : k = f\n⊢ (-C 1 * X ^ 5 + (C 0 + (monomial 2) 5) ^ 2 - 0 + 1 + IntCast.intCast 1 + ↑1 + ↑z + ↑n).natDegree = 5 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : degree (- C 1 * X ^ 5 + (C 0 + monomial 2 5) ^ 2 - 0 + 1 + IntCast.intCast 1 +\n    NatCast.natCast 1 + (z : ℤ[X]) + (n : ℤ[X])) = 5 := by\n  set k := f with _h₀\n  compute_degree!\nR : Type u_1\nn : ℕ\nz : ℤ\nf : ℤ[X]\nhn : f.natDegree ≤ 5\nhd : f.degree ≤ 5\n⊢ (-C 1 * X ^ 5 + (C 0 + (monomial 2) 5) ^ 2 - 0 + 1 + IntCast.intCast 1 + ↑1 + ↑z + ↑n).degree = 5\n", "full_text": "example : degree (- C 1 * X ^ 5 + (C 0 + monomial 2 5) ^ 2 - 0 + 1 + IntCast.intCast 1 +\n    NatCast.natCast 1 + (z : ℤ[X]) + (n : ℤ[X])) = 5 := by\n  set k := f with _h₀\n  compute_degree!\nR : Type u_1\nn : ℕ\nz : ℤ\nf : ℤ[X]\nhn : f.natDegree ≤ 5\nhd : f.degree ≤ 5\n⊢ (-C 1 * X ^ 5 + (C 0 + (monomial 2) 5) ^ 2 - 0 + 1 + IntCast.intCast 1 + ↑1 + ↑z + ↑n).degree = 5\n/- R : Type u_1\nn : ℕ\nz : ℤ\nf : ℤ[X]\nk : ℤ[X] := f\nhn : k.natDegree ≤ 5\nhd : k.degree ≤ 5\n_h₀ : k = f\n⊢ (-C 1 * X ^ 5 + (C 0 + (monomial 2) 5) ^ 2 - 0 + 1 + IntCast.intCast 1 + ↑1 + ↑z + ↑n).degree = 5 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : degree\n    ((C 1 * X ^ 2 + C 2 * X + C 3) * (C 0 * X ^ 0 + C 2 * X ^ 1 + C 1 * X ^ 5) ^ 4) = 22 := by\n  compute_degree!\nR : Type u_1\nn : ℕ\nz : ℤ\nf : ℤ[X]\nhn : f.natDegree ≤ 5\nhd : f.degree ≤ 5\n⊢ ((C 1 * X ^ 2 + C 2 * X + C 3) * (C 0 * X ^ 0 + C 2 * X ^ 1 + C 1 * X ^ 5) ^ 4).degree = 22\n", "full_text": "example : degree\n    ((C 1 * X ^ 2 + C 2 * X + C 3) * (C 0 * X ^ 0 + C 2 * X ^ 1 + C 1 * X ^ 5) ^ 4) = 22 := by\n  compute_degree!\nR : Type u_1\nn : ℕ\nz : ℤ\nf : ℤ[X]\nhn : f.natDegree ≤ 5\nhd : f.degree ≤ 5\n⊢ ((C 1 * X ^ 2 + C 2 * X + C 3) * (C 0 * X ^ 0 + C 2 * X ^ 1 + C 1 * X ^ 5) ^ 4).degree = 22\n/- Goals Accomplished! -/\n"}
{"prompt": "example [Nontrivial R] [Ring R] : degree\n    (1 + X + X ^ 2 - X ^ 5 - X ^ 6 - 2 * X ^ 7 - X ^ 8 - X ^ 9 + X ^ 12 + X ^ 13 + X ^ 14 +\n        X ^ 15 + X ^ 16 + X ^ 17 - X ^ 20 - X ^ 22 - X ^ 24 - X ^ 26 - X ^ 28 + X ^ 31 + X ^ 32 +\n        X ^ 33 + X ^ 34 + X ^ 35 + X ^ 36 - X ^ 39 - X ^ 40 - 2 * X ^ 41 - X ^ 42 - X ^ 43 +\n        X ^ 46 + X ^ 47 + X ^ 48 : R[X]) = 48 := by\n  compute_degree!\nR : Type u_1\nn : ℕ\nz : ℤ\nf : ℤ[X]\nhn : f.natDegree ≤ 5\nhd : f.degree ≤ 5\ninst✝¹ : Nontrivial R\ninst✝ : Ring R\n⊢ (1 + X + X ^ 2 - X ^ 5 - X ^ 6 - 2 * X ^ 7 - X ^ 8 - X ^ 9 + X ^ 12 + X ^ 13 + X ^ 14 + X ^ 15 + X ^ 16 + X ^ 17 -\n                                            X ^ 20 -\n                                          X ^ 22 -\n                                        X ^ 24 -\n                                      X ^ 26 -\n                                    X ^ 28 +\n                                  X ^ 31 +\n                                X ^ 32 +\n                              X ^ 33 +\n                            X ^ 34 +\n                          X ^ 35 +\n                        X ^ 36 -\n                      X ^ 39 -\n                    X ^ 40 -\n                  2 * X ^ 41 -\n                X ^ 42 -\n              X ^ 43 +\n            X ^ 46 +\n          X ^ 47 +\n        X ^ 48).degree =\n    48\n", "full_text": "example [Nontrivial R] [Ring R] : degree\n    (1 + X + X ^ 2 - X ^ 5 - X ^ 6 - 2 * X ^ 7 - X ^ 8 - X ^ 9 + X ^ 12 + X ^ 13 + X ^ 14 +\n        X ^ 15 + X ^ 16 + X ^ 17 - X ^ 20 - X ^ 22 - X ^ 24 - X ^ 26 - X ^ 28 + X ^ 31 + X ^ 32 +\n        X ^ 33 + X ^ 34 + X ^ 35 + X ^ 36 - X ^ 39 - X ^ 40 - 2 * X ^ 41 - X ^ 42 - X ^ 43 +\n        X ^ 46 + X ^ 47 + X ^ 48 : R[X]) = 48 := by\n  compute_degree!\nR : Type u_1\nn : ℕ\nz : ℤ\nf : ℤ[X]\nhn : f.natDegree ≤ 5\nhd : f.degree ≤ 5\ninst✝¹ : Nontrivial R\ninst✝ : Ring R\n⊢ (1 + X + X ^ 2 - X ^ 5 - X ^ 6 - 2 * X ^ 7 - X ^ 8 - X ^ 9 + X ^ 12 + X ^ 13 + X ^ 14 + X ^ 15 + X ^ 16 + X ^ 17 -\n                                            X ^ 20 -\n                                          X ^ 22 -\n                                        X ^ 24 -\n                                      X ^ 26 -\n                                    X ^ 28 +\n                                  X ^ 31 +\n                                X ^ 32 +\n                              X ^ 33 +\n                            X ^ 34 +\n                          X ^ 35 +\n                        X ^ 36 -\n                      X ^ 39 -\n                    X ^ 40 -\n                  2 * X ^ 41 -\n                X ^ 42 -\n              X ^ 43 +\n            X ^ 46 +\n          X ^ 47 +\n        X ^ 48).degree =\n    48\n/- Goals Accomplished! -/\n"}
{"prompt": "example [Ring R] (g : R[X]) (hg : degree g ≤ 5) : degree (- C (z : R) * X ^ 5 + (monomial 2 5) ^ 2\n    - 0 + 1 + IntCast.intCast 1 + NatCast.natCast 1 + (z : R[X]) + (n : R[X]) + g) ≤ 5 := by\n  set k := g with _h₀\n  compute_degree!\nR : Type u_1\nn : ℕ\nz : ℤ\nf : ℤ[X]\nhn : f.natDegree ≤ 5\nhd : f.degree ≤ 5\ninst✝ : Ring R\ng : R[X]\nhg : g.degree ≤ 5\n⊢ (-C ↑z * X ^ 5 + (monomial 2) 5 ^ 2 - 0 + 1 + IntCast.intCast 1 + ↑1 + ↑z + ↑n + g).degree ≤ 5\n", "full_text": "example [Ring R] (g : R[X]) (hg : degree g ≤ 5) : degree (- C (z : R) * X ^ 5 + (monomial 2 5) ^ 2\n    - 0 + 1 + IntCast.intCast 1 + NatCast.natCast 1 + (z : R[X]) + (n : R[X]) + g) ≤ 5 := by\n  set k := g with _h₀\n  compute_degree!\nR : Type u_1\nn : ℕ\nz : ℤ\nf : ℤ[X]\nhn : f.natDegree ≤ 5\nhd : f.degree ≤ 5\ninst✝ : Ring R\ng : R[X]\nhg : g.degree ≤ 5\n⊢ (-C ↑z * X ^ 5 + (monomial 2) 5 ^ 2 - 0 + 1 + IntCast.intCast 1 + ↑1 + ↑z + ↑n + g).degree ≤ 5\n/- R : Type u_1\nn : ℕ\nz : ℤ\nf : ℤ[X]\nhn : f.natDegree ≤ 5\nhd : f.degree ≤ 5\ninst✝ : Ring R\ng : R[X]\nk : R[X] := g\nhg : k.degree ≤ 5\n_h₀ : k = g\n⊢ (-C ↑z * X ^ 5 + (monomial 2) 5 ^ 2 - 0 + 1 + IntCast.intCast 1 + ↑1 + ↑z + ↑n + k).degree ≤ 5 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x : Nat) (p : Prop) [Decidable p] : x = if p then x else x := by\n  split_ifs with h1\n  · rfl\n  · rfl\nx : ℕ\np : Prop\ninst✝ : Decidable p\n⊢ x = if p then x else x\n", "full_text": "example (x : Nat) (p : Prop) [Decidable p] : x = if p then x else x := by\n  split_ifs with h1\n  · rfl\n  · rfl\nx : ℕ\np : Prop\ninst✝ : Decidable p\n⊢ x = if p then x else x\n/- case pos\nx : ℕ\np : Prop\ninst✝ : Decidable p\nh1 : p\n⊢ x = x\n---\ncase neg\nx : ℕ\np : Prop\ninst✝ : Decidable p\nh1 : ¬p\n⊢ x = x -/\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x y : Nat) (p : Prop) [Decidable p] (h : if p then x = y else y = x) : x = y := by\n  split_ifs at h\n  · exact h\n  · exact h.symm\nx y : ℕ\np : Prop\ninst✝ : Decidable p\nh : if p then x = y else y = x\n⊢ x = y\n", "full_text": "example (x y : Nat) (p : Prop) [Decidable p] (h : if p then x = y else y = x) : x = y := by\n  split_ifs at h\n  · exact h\n  · exact h.symm\nx y : ℕ\np : Prop\ninst✝ : Decidable p\nh : if p then x = y else y = x\n⊢ x = y\n/- case pos\nx y : ℕ\np : Prop\ninst✝ : Decidable p\nh✝ : p\nh : x = y\n⊢ x = y\n---\ncase neg\nx y : ℕ\np : Prop\ninst✝ : Decidable p\nh✝ : ¬p\nh : y = x\n⊢ x = y -/\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x : Nat) (p q : Prop) [Decidable p] [Decidable q] :\n    x = if p then (if q then x else x) else x := by\n  split_ifs\n  · rfl\n  · rfl\n  · rfl\nx : ℕ\np q : Prop\ninst✝¹ : Decidable p\ninst✝ : Decidable q\n⊢ x = if p then if q then x else x else x\n", "full_text": "example (x : Nat) (p q : Prop) [Decidable p] [Decidable q] :\n    x = if p then (if q then x else x) else x := by\n  split_ifs\n  · rfl\n  · rfl\n  · rfl\nx : ℕ\np q : Prop\ninst✝¹ : Decidable p\ninst✝ : Decidable q\n⊢ x = if p then if q then x else x else x\n/- case pos\nx : ℕ\np q : Prop\ninst✝¹ : Decidable p\ninst✝ : Decidable q\nh✝¹ : p\nh✝ : q\n⊢ x = x\n---\ncase neg\nx : ℕ\np q : Prop\ninst✝¹ : Decidable p\ninst✝ : Decidable q\nh✝¹ : p\nh✝ : ¬q\n⊢ x = x\n---\ncase neg\nx : ℕ\np q : Prop\ninst✝¹ : Decidable p\ninst✝ : Decidable q\nh✝ : ¬p\n⊢ x = x -/\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x : Nat) (p : Prop) [Decidable p] :\n    x = if (if p then False else True) then x else x := by\n  split_ifs\n  · rfl\n  · rfl\n  · rfl\nx : ℕ\np : Prop\ninst✝ : Decidable p\n⊢ x = if if p then False else True then x else x\n", "full_text": "example (x : Nat) (p : Prop) [Decidable p] :\n    x = if (if p then False else True) then x else x := by\n  split_ifs\n  · rfl\n  · rfl\n  · rfl\nx : ℕ\np : Prop\ninst✝ : Decidable p\n⊢ x = if if p then False else True then x else x\n/- case pos\nx : ℕ\np : Prop\ninst✝ : Decidable p\nh✝¹ : p\nh✝ : False\n⊢ x = x\n---\ncase neg\nx : ℕ\np : Prop\ninst✝ : Decidable p\nh✝¹ : p\nh✝ : ¬False\n⊢ x = x\n---\ncase neg\nx : ℕ\np : Prop\ninst✝ : Decidable p\nh✝ : ¬p\n⊢ x = x -/\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (p : Prop) [Decidable p] : if if ¬p then p else True then p else ¬p := by\n  split_ifs with h\n  · exact h\n  · exact h\np : Prop\ninst✝ : Decidable p\n⊢ if if ¬p then p else True then p else ¬p\n", "full_text": "example (p : Prop) [Decidable p] : if if ¬p then p else True then p else ¬p := by\n  split_ifs with h\n  · exact h\n  · exact h\np : Prop\ninst✝ : Decidable p\n⊢ if if ¬p then p else True then p else ¬p\n/- case pos\np : Prop\ninst✝ : Decidable p\nh : p\n⊢ p\n---\ncase neg\np : Prop\ninst✝ : Decidable p\nh : ¬p\n⊢ ¬p -/\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "theorem foo (p q : Prop) [Decidable p] [Decidable q] :\n    if if if p then ¬p else q then p else q then q else ¬p ∨ ¬q := by\n  split_ifs with h1 h2 h3\n  · exact h2\n  · exact Or.inr h2\n  · exact Or.inl h1\n  · exact Or.inr h3\np q : Prop\ninst✝¹ : Decidable p\ninst✝ : Decidable q\n⊢ if if if p then ¬p else q then p else q then q else ¬p ∨ ¬q\n", "full_text": "theorem foo (p q : Prop) [Decidable p] [Decidable q] :\n    if if if p then ¬p else q then p else q then q else ¬p ∨ ¬q := by\n  split_ifs with h1 h2 h3\n  · exact h2\n  · exact Or.inr h2\n  · exact Or.inl h1\n  · exact Or.inr h3\np q : Prop\ninst✝¹ : Decidable p\ninst✝ : Decidable q\n⊢ if if if p then ¬p else q then p else q then q else ¬p ∨ ¬q\n/- case pos\np q : Prop\ninst✝¹ : Decidable p\ninst✝ : Decidable q\nh1 : p\nh2 : q\n⊢ q\n---\ncase neg\np q : Prop\ninst✝¹ : Decidable p\ninst✝ : Decidable q\nh1 : p\nh2 : ¬q\n⊢ ¬p ∨ ¬q\n---\ncase pos\np q : Prop\ninst✝¹ : Decidable p\ninst✝ : Decidable q\nh1 : ¬p\nh3 : q\n⊢ ¬p ∨ ¬q\n---\ncase neg\np q : Prop\ninst✝¹ : Decidable p\ninst✝ : Decidable q\nh1 : ¬p\nh3 : ¬q\n⊢ ¬p ∨ ¬q -/\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (p : Prop) [Decidable p] (h : (if p then 1 else 2) > 3) : False := by\n  split_ifs at h\n  cases h\n  · case pos.step h => cases h\n  · case neg h =>\n    cases h\n    case step h =>\n      cases h\n      case step h => cases h\np : Prop\ninst✝ : Decidable p\nh : (if p then 1 else 2) > 3\n⊢ False\n", "full_text": "example (p : Prop) [Decidable p] (h : (if p then 1 else 2) > 3) : False := by\n  split_ifs at h\n  cases h\n  · case pos.step h => cases h\n  · case neg h =>\n    cases h\n    case step h =>\n      cases h\n      case step h => cases h\np : Prop\ninst✝ : Decidable p\nh : (if p then 1 else 2) > 3\n⊢ False\n/- case pos\np : Prop\ninst✝ : Decidable p\nh✝ : p\nh : 1 > 3\n⊢ False\n---\ncase neg\np : Prop\ninst✝ : Decidable p\nh✝ : ¬p\nh : 2 > 3\n⊢ False -/\n/- case pos.step\np : Prop\ninst✝ : Decidable p\nh✝ : p\na✝ : (Nat.succ 3).le 0\n⊢ False\n---\ncase neg\np : Prop\ninst✝ : Decidable p\nh✝ : ¬p\nh : 2 > 3\n⊢ False -/\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (p : Prop) [Decidable p] (x : Nat) (h : (if p then 1 else 2) > x) :\n     x < (if ¬p then 1 else 0) + 1 := by\n   split_ifs at * <;> assumption\np : Prop\ninst✝ : Decidable p\nx : ℕ\nh : (if p then 1 else 2) > x\n⊢ x < (if ¬p then 1 else 0) + 1\n", "full_text": "example (p : Prop) [Decidable p] (x : Nat) (h : (if p then 1 else 2) > x) :\n     x < (if ¬p then 1 else 0) + 1 := by\n   split_ifs at * <;> assumption\np : Prop\ninst✝ : Decidable p\nx : ℕ\nh : (if p then 1 else 2) > x\n⊢ x < (if ¬p then 1 else 0) + 1\n/- Goals Accomplished! -/\n"}
{"prompt": "example (p : Prop) [Decidable p] : if if ¬p then p else True then p else ¬p := by\n  split_ifs <;>\n  assumption\np : Prop\ninst✝ : Decidable p\n⊢ if if ¬p then p else True then p else ¬p\n", "full_text": "example (p : Prop) [Decidable p] : if if ¬p then p else True then p else ¬p := by\n  split_ifs <;>\n  assumption\np : Prop\ninst✝ : Decidable p\n⊢ if if ¬p then p else True then p else ¬p\n/- Goals Accomplished! -/\n"}
{"prompt": "example (p q : Prop) [Decidable p] [Decidable q] :\n     if if if p then ¬p else q then p else q then q else ¬p ∨ ¬q := by\n  split_ifs <;>\n  simp [*]\np q : Prop\ninst✝¹ : Decidable p\ninst✝ : Decidable q\n⊢ if if if p then ¬p else q then p else q then q else ¬p ∨ ¬q\n", "full_text": "example (p q : Prop) [Decidable p] [Decidable q] :\n     if if if p then ¬p else q then p else q then q else ¬p ∨ ¬q := by\n  split_ifs <;>\n  simp [*]\np q : Prop\ninst✝¹ : Decidable p\ninst✝ : Decidable q\n⊢ if if if p then ¬p else q then p else q then q else ¬p ∨ ¬q\n/- Goals Accomplished! -/\n"}
{"prompt": "example : True := by\n  fail_if_success { split_ifs }\n  trivial\n⊢ True\n", "full_text": "example : True := by\n  fail_if_success { split_ifs }\n  trivial\n⊢ True\n/- ⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (P Q : Prop) (w : if P then (if Q then true else true) else true = true) : true := by\n  split_ifs at w\n  -- check that we've fully split w into three subgoals\n  · trivial\n  · trivial\n  · trivial\nP Q : Prop\nw : if P then if Q then true = true else true = true else true = true\n⊢ true = true\n", "full_text": "example (P Q : Prop) (w : if P then (if Q then true else true) else true = true) : true := by\n  split_ifs at w\n  -- check that we've fully split w into three subgoals\n  · trivial\n  · trivial\n  · trivial\nP Q : Prop\nw : if P then if Q then true = true else true = true else true = true\n⊢ true = true\n/- case pos\nP Q : Prop\nh✝¹ : P\nh✝ : Q\nw : true = true\n⊢ true = true\n---\ncase neg\nP Q : Prop\nh✝¹ : P\nh✝ : ¬Q\nw : true = true\n⊢ true = true\n---\ncase neg\nP Q : Prop\nh✝ : ¬P\nw : true = true\n⊢ true = true -/\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (u : Nat) : (if u = u then 0 else 1) = 0 := by\n  have h : u = u := by rfl\n  split_ifs\n  -- only one goal here\n  rfl\n  done\nu : ℕ\n⊢ (if u = u then 0 else 1) = 0\n", "full_text": "example (u : Nat) : (if u = u then 0 else 1) = 0 := by\n  have h : u = u := by rfl\n  split_ifs\n  -- only one goal here\n  rfl\n  done\nu : ℕ\n⊢ (if u = u then 0 else 1) = 0\n/- u : ℕ\nh : u = u\n⊢ (if u = u then 0 else 1) = 0 -/\n/- u : ℕ\nh : u = u\n⊢ 0 = 0 -/\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x y : ℚ) (hx : x ≠ 0) (hy : y ≠ 0) :\n    x / (y / z) + y ⁻¹ + 1 / (y * -x) = -1/ (x * y) + (x * z + 1) / y := by\n  field_simp\n  ring\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nz x y : ℚ\nhx : x ≠ 0\nhy : y ≠ 0\n⊢ x / (y / z) + y⁻¹ + 1 / (y * -x) = -1 / (x * y) + (x * z + 1) / y\n", "full_text": "example (x y : ℚ) (hx : x ≠ 0) (hy : y ≠ 0) :\n    x / (y / z) + y ⁻¹ + 1 / (y * -x) = -1/ (x * y) + (x * z + 1) / y := by\n  field_simp\n  ring\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nz x y : ℚ\nhx : x ≠ 0\nhy : y ≠ 0\n⊢ x / (y / z) + y⁻¹ + 1 / (y * -x) = -1 / (x * y) + (x * z + 1) / y\n/- α : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nz x y : ℚ\nhx : x ≠ 0\nhy : y ≠ 0\n⊢ (-((x * z + 1) * (y * x)) + y) * (x * y * y) = -((-y + (x * z + 1) * (x * y)) * (y * (y * x))) -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c d x y : ℚ) (hx : x ≠ 0) (hy : y ≠ 0) :\n    a + b / x - c / x^2 + d / x^3 = a + x⁻¹ * (y * b / y + (d / x - c) / x) := by\n  field_simp\n  ring\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\na b c d x y : ℚ\nhx : x ≠ 0\nhy : y ≠ 0\n⊢ a + b / x - c / x ^ 2 + d / x ^ 3 = a + x⁻¹ * (y * b / y + (d / x - c) / x)\n", "full_text": "example (a b c d x y : ℚ) (hx : x ≠ 0) (hy : y ≠ 0) :\n    a + b / x - c / x^2 + d / x^3 = a + x⁻¹ * (y * b / y + (d / x - c) / x) := by\n  field_simp\n  ring\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\na b c d x y : ℚ\nhx : x ≠ 0\nhy : y ≠ 0\n⊢ a + b / x - c / x ^ 2 + d / x ^ 3 = a + x⁻¹ * (y * b / y + (d / x - c) / x)\n/- α : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\na b c d x y : ℚ\nhx : x ≠ 0\nhy : y ≠ 0\n⊢ (((a * x + b) * x ^ 2 - x * c) * x ^ 3 + d * (x * x ^ 2)) * (x * (x * x)) =\n    (a * (x * (x * x)) + (b * (x * x) + (d - x * c))) * (x * x ^ 2 * x ^ 3) -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x : ℝ) (hx : x ≠ 0) :\n    2 * x ^ 3 * 2 / (24 * x) = x ^ 2 / 6 := by\n  field_simp\n  ring\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx : ℝ\nhx : x ≠ 0\n⊢ 2 * x ^ 3 * 2 / (24 * x) = x ^ 2 / 6\n", "full_text": "example (x : ℝ) (hx : x ≠ 0) :\n    2 * x ^ 3 * 2 / (24 * x) = x ^ 2 / 6 := by\n  field_simp\n  ring\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx : ℝ\nhx : x ≠ 0\n⊢ 2 * x ^ 3 * 2 / (24 * x) = x ^ 2 / 6\n/- α : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx : ℝ\nhx : x ≠ 0\n⊢ 2 * x ^ 3 * 2 * 6 = x ^ 2 * (24 * x) -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x : ℤ) (h : x - x + x = 0) : x = 0 := by\n  ring_nf at h\n  exact h\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx : ℤ\nh : x - x + x = 0\n⊢ x = 0\n", "full_text": "example (x : ℤ) (h : x - x + x = 0) : x = 0 := by\n  ring_nf at h\n  exact h\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx : ℤ\nh : x - x + x = 0\n⊢ x = 0\n/- α : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx : ℤ\nh : x = 0\n⊢ x = 0 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : 22 + 7 * 4 + 3 * 8 = 0 + 7 * 4 + 46 := by\n  conv => ring\n  trivial -- FIXME: not needed in lean 3\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\n⊢ 22 + 7 * 4 + 3 * 8 = 0 + 7 * 4 + 46\n", "full_text": "example : 22 + 7 * 4 + 3 * 8 = 0 + 7 * 4 + 46 := by\n  conv => ring\n  trivial -- FIXME: not needed in lean 3\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\n⊢ 22 + 7 * 4 + 3 * 8 = 0 + 7 * 4 + 46\n/- α : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : (22 + 7 * 4 + 3 * 8 = 0 + 7 * 4 + 47) = (74 = 75) := by\n  conv => ring\n  trivial\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\n⊢ (22 + 7 * 4 + 3 * 8 = 0 + 7 * 4 + 47) = (74 = 75)\n", "full_text": "example : (22 + 7 * 4 + 3 * 8 = 0 + 7 * 4 + 47) = (74 = 75) := by\n  conv => ring\n  trivial\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\n⊢ (22 + 7 * 4 + 3 * 8 = 0 + 7 * 4 + 47) = (74 = 75)\n/- α : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x : ℕ) : 22 + 7 * x + 3 * 8 = 0 + 7 * x + 46 := by\n  conv => ring\n  trivial\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx : ℕ\n⊢ 22 + 7 * x + 3 * 8 = 0 + 7 * x + 46\n", "full_text": "example (x : ℕ) : 22 + 7 * x + 3 * 8 = 0 + 7 * x + 46 := by\n  conv => ring\n  trivial\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx : ℕ\n⊢ 22 + 7 * x + 3 * 8 = 0 + 7 * x + 46\n/- α : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx : ℕ\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x : ℕ) : (22 + 7 * x + 3 * 8 = 0 + 7 * x + 46 + 1)\n                    = (7 * x + 46 = 7 * x + 47) := by\n  conv => ring\n  trivial\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx : ℕ\n⊢ (22 + 7 * x + 3 * 8 = 0 + 7 * x + 46 + 1) = (7 * x + 46 = 7 * x + 47)\n", "full_text": "example (x : ℕ) : (22 + 7 * x + 3 * 8 = 0 + 7 * x + 46 + 1)\n                    = (7 * x + 46 = 7 * x + 47) := by\n  conv => ring\n  trivial\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx : ℕ\n⊢ (22 + 7 * x + 3 * 8 = 0 + 7 * x + 46 + 1) = (7 * x + 46 = 7 * x + 47)\n/- α : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx : ℕ\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a : Nat) : 1 * f a * 1 = f (a + 0) := by\n  have ha : a + 0 = a := by ring\n  rw [ha] -- goal has mdata\n  ring1\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx✝ : Sort u_1\nf : x✝\na : ℕ\n⊢ 1 * sorry * 1 = sorry\n", "full_text": "example (a : Nat) : 1 * f a * 1 = f (a + 0) := by\n  have ha : a + 0 = a := by ring\n  rw [ha] -- goal has mdata\n  ring1\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx✝ : Sort u_1\nf : x✝\na : ℕ\n⊢ 1 * sorry * 1 = sorry\n/- α : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx✝ : Sort u_1\nf : x✝\na : ℕ\nha : a + 0 = a\n⊢ 1 * sorry * 1 = sorry -/\n/- α : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx✝ : Sort u_1\nf : x✝\na : ℕ\nha : a + 0 = a\n⊢ 1 * sorry * 1 = sorry -/\n"}
{"prompt": "example (a b : ℤ) : a+b=0 ↔ b+a=0 := by\n  have : 3 = 3 := rfl\n  ring_nf -- reduced to `True` with mdata\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\na b : ℤ\n⊢ a + b = 0 ↔ b + a = 0\n", "full_text": "example (a b : ℤ) : a+b=0 ↔ b+a=0 := by\n  have : 3 = 3 := rfl\n  ring_nf -- reduced to `True` with mdata\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\na b : ℤ\n⊢ a + b = 0 ↔ b + a = 0\n/- α : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\na b : ℤ\nthis : 3 = 3\n⊢ a + b = 0 ↔ b + a = 0 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (p : R PUnit.{u + 1} PUnit.{v + 1}) : p + 0 = p := by\n  ring\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx✝ : Sort u_1\nR : x✝\np : sorry\n⊢ p + 0 = p\n", "full_text": "example (p : R PUnit.{u + 1} PUnit.{v + 1}) : p + 0 = p := by\n  ring\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx✝ : Sort u_1\nR : x✝\np : sorry\n⊢ p + 0 = p\n/- α : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx✝ : Sort u_1\nR : x✝\np : sorry\n⊢ p + 0 = p -/\n"}
{"prompt": "example (p q : R PUnit.{u + 1} PUnit.{v + 1}) : p + q = q + p := by\n  ring\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx✝ : Sort u_1\nR : x✝\np : sorry\nq : sorry\n⊢ p + q = q + p\n", "full_text": "example (p q : R PUnit.{u + 1} PUnit.{v + 1}) : p + q = q + p := by\n  ring\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx✝ : Sort u_1\nR : x✝\np : sorry\nq : sorry\n⊢ p + q = q + p\n/- α : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx✝ : Sort u_1\nR : x✝\np : sorry\nq : sorry\n⊢ p + q = q + p -/\n"}
{"prompt": "example (p : R PUnit.{u + 1} PUnit.{v + 1}) : p + 0 = p := by\n  ring_nf\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx✝ : Sort u_1\nR : x✝\np : sorry\n⊢ p + 0 = p\n", "full_text": "example (p : R PUnit.{u + 1} PUnit.{v + 1}) : p + 0 = p := by\n  ring_nf\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx✝ : Sort u_1\nR : x✝\np : sorry\n⊢ p + 0 = p\n/- α : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx✝ : Sort u_1\nR : x✝\np : sorry\n⊢ p + 0 = p -/\n"}
{"prompt": "example (p q : R PUnit.{u + 1} PUnit.{v + 1}) : p + q = q + p := by\n  ring_nf\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx✝ : Sort u_1\nR : x✝\np : sorry\nq : sorry\n⊢ p + q = q + p\n", "full_text": "example (p q : R PUnit.{u + 1} PUnit.{v + 1}) : p + q = q + p := by\n  ring_nf\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx✝ : Sort u_1\nR : x✝\np : sorry\nq : sorry\n⊢ p + q = q + p\n/- α : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx✝ : Sort u_1\nR : x✝\np : sorry\nq : sorry\n⊢ p + q = q + p -/\n"}
{"prompt": "example {n : ℝ} :\n    (n + 1 / 2) ^ 2 * (n + 1 + 1 / 3) = 1 / 3 + n * (19 / 12) + n ^ 2 * (7 / 3) + n ^ 3 := by\n  -- `conv_lhs` prevents `ring_nf` picking a bad normalization for both sides.\n  conv_lhs => ring_nf\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nn : ℝ\n⊢ (n + 1 / 2) ^ 2 * (n + 1 + 1 / 3) = 1 / 3 + n * (19 / 12) + n ^ 2 * (7 / 3) + n ^ 3\n", "full_text": "example {n : ℝ} :\n    (n + 1 / 2) ^ 2 * (n + 1 + 1 / 3) = 1 / 3 + n * (19 / 12) + n ^ 2 * (7 / 3) + n ^ 3 := by\n  -- `conv_lhs` prevents `ring_nf` picking a bad normalization for both sides.\n  conv_lhs => ring_nf\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nn : ℝ\n⊢ (n + 1 / 2) ^ 2 * (n + 1 + 1 / 3) = 1 / 3 + n * (19 / 12) + n ^ 2 * (7 / 3) + n ^ 3\n/- Goals Accomplished! -/\n"}
{"prompt": "example {n : ℝ} (_hn : 0 ≤ n) : (n + 1 / 2) ^ 2 * (n + 1 + 1 / 3) ≤ (n + 1 / 3) * (n + 1) ^ 2 := by\n  ring_nf\n  trace_state\n  exact test_sorry\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nn : ℝ\n_hn : 0 ≤ n\n⊢ (n + 1 / 2) ^ 2 * (n + 1 + 1 / 3) ≤ (n + 1 / 3) * (n + 1) ^ 2\n", "full_text": "example {n : ℝ} (_hn : 0 ≤ n) : (n + 1 / 2) ^ 2 * (n + 1 + 1 / 3) ≤ (n + 1 / 3) * (n + 1) ^ 2 := by\n  ring_nf\n  trace_state\n  exact test_sorry\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nn : ℝ\n_hn : 0 ≤ n\n⊢ (n + 1 / 2) ^ 2 * (n + 1 + 1 / 3) ≤ (n + 1 / 3) * (n + 1) ^ 2\n/- α : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nn : ℝ\n_hn : 0 ≤ n\n⊢ 1 / 3 + n * (19 / 12) + n ^ 2 * (7 / 3) + n ^ 3 ≤ 1 / 3 + n * (5 / 3) + n ^ 2 * (7 / 3) + n ^ 3 -/\n/- α : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nn : ℝ\n_hn : 0 ≤ n\n⊢ 1 / 3 + n * (19 / 12) + n ^ 2 * (7 / 3) + n ^ 3 ≤ 1 / 3 + n * (5 / 3) + n ^ 2 * (7 / 3) + n ^ 3 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x : ℤ) (R : ℤ → ℤ → Prop) : True := by\n  have h : R (myId x + x) (x + myId x) := test_sorry\n  ring_nf at h\n  trace_state\n  trivial\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx : ℤ\nR : ℤ → ℤ → Prop\n⊢ True\n", "full_text": "example (x : ℤ) (R : ℤ → ℤ → Prop) : True := by\n  have h : R (myId x + x) (x + myId x) := test_sorry\n  ring_nf at h\n  trace_state\n  trivial\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx : ℤ\nR : ℤ → ℤ → Prop\n⊢ True\n/- α : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx : ℤ\nR : ℤ → ℤ → Prop\nh : R (sorry + x) (x + sorry)\n⊢ True -/\n/- α : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx : ℤ\nR : ℤ → ℤ → Prop\nh : R (sorry + x) (sorry + x)\n⊢ True -/\n/- α : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx : ℤ\nR : ℤ → ℤ → Prop\nh : R (sorry + x) (sorry + x)\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x : ℝ) (f : ℝ → ℝ) : True := by\n  let y := x\n  have : x = y := by\n    ring_nf\n    ring_nf!\n  have : x - y = 0 := by\n    ring_nf\n    ring_nf!\n  have : f x = f y := by\n    ring_nf\n    ring_nf!\n  have : f x - f y = 0 := by\n    ring_nf\n    ring_nf!\n  trivial\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx : ℝ\nf : ℝ → ℝ\n⊢ True\n", "full_text": "example (x : ℝ) (f : ℝ → ℝ) : True := by\n  let y := x\n  have : x = y := by\n    ring_nf\n    ring_nf!\n  have : x - y = 0 := by\n    ring_nf\n    ring_nf!\n  have : f x = f y := by\n    ring_nf\n    ring_nf!\n  have : f x - f y = 0 := by\n    ring_nf\n    ring_nf!\n  trivial\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx : ℝ\nf : ℝ → ℝ\n⊢ True\n/- α : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx : ℝ\nf : ℝ → ℝ\ny : ℝ := x\n⊢ True -/\n/- α : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx : ℝ\nf : ℝ → ℝ\ny : ℝ := x\nthis : x = y\n⊢ True -/\n/- α : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx : ℝ\nf : ℝ → ℝ\ny : ℝ := x\nthis✝ : x = y\nthis : x - y = 0\n⊢ True -/\n/- α : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx : ℝ\nf : ℝ → ℝ\ny : ℝ := x\nthis✝¹ : x = y\nthis✝ : x - y = 0\nthis : f x = f y\n⊢ True -/\n/- α : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\nx : ℝ\nf : ℝ → ℝ\ny : ℝ := x\nthis✝² : x = y\nthis✝¹ : x - y = 0\nthis✝ : f x = f y\nthis : f x - f y = 0\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : (fun x : ℝ => x * x^2) = (fun y => y^2 * y) := by\n  ring_nf\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\n⊢ (fun x => x * x ^ 2) = fun y => y ^ 2 * y\n", "full_text": "example : (fun x : ℝ => x * x^2) = (fun y => y^2 * y) := by\n  ring_nf\nα : Type ?u.136\ninst✝¹ : Field α\ninst✝ : CharZero α\n⊢ (fun x => x * x ^ 2) = fun y => y ^ 2 * y\n/- Goals Accomplished! -/\n"}
{"prompt": "example {A B : Type} (h : A) (f : A → B) : B := by\n  replace h := f h\n  exact h\nA B : Type\nh : A\nf : A → B\n⊢ B\n", "full_text": "example {A B : Type} (h : A) (f : A → B) : B := by\n  replace h := f h\n  exact h\nA B : Type\nh : A\nf : A → B\n⊢ B\n/- A B : Type\nf : A → B\nh : B\n⊢ B -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (z : Int) : Nat := by\n  replace z : Nat\n  exact 0\n  assumption\nz : ℤ\n⊢ ℕ\n", "full_text": "example (z : Int) : Nat := by\n  replace z : Nat\n  exact 0\n  assumption\nz : ℤ\n⊢ ℕ\n/- case z\nz : ℤ\n⊢ ℕ\n---\nz : ℕ\n⊢ ℕ -/\n/- z : ℕ\n⊢ ℕ -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : True := by\n  have : 1 + 1 = 2 := by simp +arith\n  replace : 2 + 2 = 4\n  simp +arith\n  trivial\n⊢ True\n", "full_text": "example : True := by\n  have : 1 + 1 = 2 := by simp +arith\n  replace : 2 + 2 = 4\n  simp +arith\n  trivial\n⊢ True\n/- this : 1 + 1 = 2\n⊢ True -/\n/- case this\nthis : 1 + 1 = 2\n⊢ 2 + 2 = 4\n---\nthis : 2 + 2 = 4\n⊢ True -/\n/- this : 2 + 2 = 4\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : True) : False := by\n  guard_hyp h : True\n  replace h\n  · exact true\n  guard_hyp h : Bool\n  rename_i h'\n  guard_hyp h' : True\n  exact test_sorry\nh : True\n⊢ False\n", "full_text": "example (h : True) : False := by\n  guard_hyp h : True\n  replace h\n  · exact true\n  guard_hyp h : Bool\n  rename_i h'\n  guard_hyp h' : True\n  exact test_sorry\nh : True\n⊢ False\n/- h : True\n⊢ False -/\n/- case h\nh : True\n⊢ ?m.8\n---\nh✝ : True\nh : ?m.8\n⊢ False -/\n/- Goals Accomplished! -/\n/- h✝ : True\nh : Bool\n⊢ False -/\n/- h' : True\nh : Bool\n⊢ False -/\n/- h' : True\nh : Bool\n⊢ False -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (α β : Type) (h : α = β) (b : β) : α := by\n  convert b\nα β : Type\nh : α = β\nb : β\n⊢ α\n", "full_text": "example (α β : Type) (h : α = β) (b : β) : α := by\n  convert b\nα β : Type\nh : α = β\nb : β\n⊢ α\n/- Goals Accomplished! -/\n"}
{"prompt": "example (α β : Type) (h : ∀ α β : Type, α = β) (b : β) : α := by\n  convert b\n  apply h\nα β : Type\nh : ∀ (α β : Type), α = β\nb : β\n⊢ α\n", "full_text": "example (α β : Type) (h : ∀ α β : Type, α = β) (b : β) : α := by\n  convert b\n  apply h\nα β : Type\nh : ∀ (α β : Type), α = β\nb : β\n⊢ α\n/- α β : Type\nh : ∀ (α β : Type), α = β\nb : β\n⊢ α = β -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (m n : Nat) (h : m = n) (b : Fin n) : Nat × Nat × Nat × Fin m := by\n  convert (37, 57, 2, b)\nm n : ℕ\nh : m = n\nb : Fin n\n⊢ ℕ × ℕ × ℕ × Fin m\n", "full_text": "example (m n : Nat) (h : m = n) (b : Fin n) : Nat × Nat × Nat × Fin m := by\n  convert (37, 57, 2, b)\nm n : ℕ\nh : m = n\nb : Fin n\n⊢ ℕ × ℕ × ℕ × Fin m\n/- Goals Accomplished! -/\n"}
{"prompt": "example (α β : Type) (h : α = β) (b : β) : Nat × α := by\n  -- type eq ok since arguments to `Prod` are explicit\n  convert (37, b)\nα β : Type\nh : α = β\nb : β\n⊢ ℕ × α\n", "full_text": "example (α β : Type) (h : α = β) (b : β) : Nat × α := by\n  -- type eq ok since arguments to `Prod` are explicit\n  convert (37, b)\nα β : Type\nh : α = β\nb : β\n⊢ ℕ × α\n/- Goals Accomplished! -/\n"}
{"prompt": "example (α β : Type) (h : β = α) (b : β) : Nat × α := by\n  convert ← (37, b)\nα β : Type\nh : β = α\nb : β\n⊢ ℕ × α\n", "full_text": "example (α β : Type) (h : β = α) (b : β) : Nat × α := by\n  convert ← (37, b)\nα β : Type\nh : β = α\nb : β\n⊢ ℕ × α\n/- Goals Accomplished! -/\n"}
{"prompt": "example (α β : Type) (h : α = β) (b : β) : Nat × Nat × Nat × α := by\n  convert (37, 57, 2, b)\nα β : Type\nh : α = β\nb : β\n⊢ ℕ × ℕ × ℕ × α\n", "full_text": "example (α β : Type) (h : α = β) (b : β) : Nat × Nat × Nat × α := by\n  convert (37, 57, 2, b)\nα β : Type\nh : α = β\nb : β\n⊢ ℕ × ℕ × ℕ × α\n/- Goals Accomplished! -/\n"}
{"prompt": "example (α β : Type) (h : α = β) (b : β) : Nat × Nat × Nat × α := by\n  convert (37, 57, 2, b) using 2\n  guard_target = (Nat × α) = (Nat × β)\n  congr!\nα β : Type\nh : α = β\nb : β\n⊢ ℕ × ℕ × ℕ × α\n", "full_text": "example (α β : Type) (h : α = β) (b : β) : Nat × Nat × Nat × α := by\n  convert (37, 57, 2, b) using 2\n  guard_target = (Nat × α) = (Nat × β)\n  congr!\nα β : Type\nh : α = β\nb : β\n⊢ ℕ × ℕ × ℕ × α\n/- case h.e'_2.h.e'_2\nα β : Type\nh : α = β\nb : β\n⊢ (ℕ × α) = (ℕ × β) -/\n/- case h.e'_2.h.e'_2\nα β : Type\nh : α = β\nb : β\n⊢ (ℕ × α) = (ℕ × β) -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {f : β → α} {x y : α} (h : x ≠ y) : f ⁻¹' {x} ∩ f ⁻¹' {y} = ∅ := by\n  have : {x} ∩ {y} = (∅ : Set α) := by simpa [ne_comm] using h\n  convert Set.preimage_empty\n  rw [← Set.preimage_inter, this]\nβ : Type u_1\nα : Type u_2\nf : β → α\nx y : α\nh : x ≠ y\n⊢ f ⁻¹' {x} ∩ f ⁻¹' {y} = ∅\n", "full_text": "example {f : β → α} {x y : α} (h : x ≠ y) : f ⁻¹' {x} ∩ f ⁻¹' {y} = ∅ := by\n  have : {x} ∩ {y} = (∅ : Set α) := by simpa [ne_comm] using h\n  convert Set.preimage_empty\n  rw [← Set.preimage_inter, this]\nβ : Type u_1\nα : Type u_2\nf : β → α\nx y : α\nh : x ≠ y\n⊢ f ⁻¹' {x} ∩ f ⁻¹' {y} = ∅\n/- β : Type u_1\nα : Type u_2\nf : β → α\nx y : α\nh : x ≠ y\nthis : {x} ∩ {y} = ∅\n⊢ f ⁻¹' {x} ∩ f ⁻¹' {y} = ∅ -/\n/- case h.e'_2\nβ : Type u_1\nα : Type u_2\nf : β → α\nx y : α\nh : x ≠ y\nthis : {x} ∩ {y} = ∅\n⊢ f ⁻¹' {x} ∩ f ⁻¹' {y} = ?convert_3 ⁻¹' ∅\n---\ncase convert_2\nβ : Type u_1\nα : Type u_2\nf : β → α\nx y : α\nh : x ≠ y\nthis : {x} ∩ {y} = ∅\n⊢ Type ?u.1522\n---\ncase convert_3\nβ : Type u_1\nα : Type u_2\nf : β → α\nx y : α\nh : x ≠ y\nthis : {x} ∩ {y} = ∅\n⊢ β → ?convert_2 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {α} [AddCommMonoid α] {a b c d : α} (H : a = c) (H' : b = d) : a + b = d + c := by\n  convert_to c + d = _ using 2\n  rw [add_comm]\nα : Type u_1\ninst✝ : AddCommMonoid α\na b c d : α\nH : a = c\nH' : b = d\n⊢ a + b = d + c\n", "full_text": "example {α} [AddCommMonoid α] {a b c d : α} (H : a = c) (H' : b = d) : a + b = d + c := by\n  convert_to c + d = _ using 2\n  rw [add_comm]\nα : Type u_1\ninst✝ : AddCommMonoid α\na b c d : α\nH : a = c\nH' : b = d\n⊢ a + b = d + c\n/- case convert_2\nα : Type u_1\ninst✝ : AddCommMonoid α\na b c d : α\nH : a = c\nH' : b = d\n⊢ c + d = d + c -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {α} [AddCommMonoid α] {a b c d : α} (H : a = c) (H' : b = d) : a + b = d + c := by\n  convert_to c + d = _ -- defaults to `using 1`\n  congr 2\n  rw [add_comm]\nα : Type u_1\ninst✝ : AddCommMonoid α\na b c d : α\nH : a = c\nH' : b = d\n⊢ a + b = d + c\n", "full_text": "example {α} [AddCommMonoid α] {a b c d : α} (H : a = c) (H' : b = d) : a + b = d + c := by\n  convert_to c + d = _ -- defaults to `using 1`\n  congr 2\n  rw [add_comm]\nα : Type u_1\ninst✝ : AddCommMonoid α\na b c d : α\nH : a = c\nH' : b = d\n⊢ a + b = d + c\n/- case h.e'_2\nα : Type u_1\ninst✝ : AddCommMonoid α\na b c d : α\nH : a = c\nH' : b = d\n⊢ a + b = c + d\n---\ncase convert_2\nα : Type u_1\ninst✝ : AddCommMonoid α\na b c d : α\nH : a = c\nH' : b = d\n⊢ c + d = d + c -/\n/- case convert_2\nα : Type u_1\ninst✝ : AddCommMonoid α\na b c d : α\nH : a = c\nH' : b = d\n⊢ c + d = d + c -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {α} [AddCommMonoid α] {a b c d : α} (H : a = c) (H' : b = d) : a + b = d + c := by\n  convert_to c + d = _ using 1\n  congr 2\n  rw [add_comm]\nα : Type u_1\ninst✝ : AddCommMonoid α\na b c d : α\nH : a = c\nH' : b = d\n⊢ a + b = d + c\n", "full_text": "example {α} [AddCommMonoid α] {a b c d : α} (H : a = c) (H' : b = d) : a + b = d + c := by\n  convert_to c + d = _ using 1\n  congr 2\n  rw [add_comm]\nα : Type u_1\ninst✝ : AddCommMonoid α\na b c d : α\nH : a = c\nH' : b = d\n⊢ a + b = d + c\n/- case h.e'_2\nα : Type u_1\ninst✝ : AddCommMonoid α\na b c d : α\nH : a = c\nH' : b = d\n⊢ a + b = c + d\n---\ncase convert_2\nα : Type u_1\ninst✝ : AddCommMonoid α\na b c d : α\nH : a = c\nH' : b = d\n⊢ c + d = d + c -/\n/- case convert_2\nα : Type u_1\ninst✝ : AddCommMonoid α\na b c d : α\nH : a = c\nH' : b = d\n⊢ c + d = d + c -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (prime : Nat → Prop) (n : Nat) (h : prime (2 * n + 1)) :\n    prime (n + n + 1) := by\n  convert h\n  · guard_target = (HAdd.hAdd : Nat → Nat → Nat) = HMul.hMul\n    exact test_sorry\n  · guard_target = n = 2\n    exact test_sorry\nprime : ℕ → Prop\nn : ℕ\nh : prime (2 * n + 1)\n⊢ prime (n + n + 1)\n", "full_text": "example (prime : Nat → Prop) (n : Nat) (h : prime (2 * n + 1)) :\n    prime (n + n + 1) := by\n  convert h\n  · guard_target = (HAdd.hAdd : Nat → Nat → Nat) = HMul.hMul\n    exact test_sorry\n  · guard_target = n = 2\n    exact test_sorry\nprime : ℕ → Prop\nn : ℕ\nh : prime (2 * n + 1)\n⊢ prime (n + n + 1)\n/- case h.e'_1.h.e'_5.h.e\nprime : ℕ → Prop\nn : ℕ\nh : prime (2 * n + 1)\n⊢ HAdd.hAdd = HMul.hMul\n---\ncase h.e'_1.h.e'_5.h.e'_1\nprime : ℕ → Prop\nn : ℕ\nh : prime (2 * n + 1)\n⊢ n = 2 -/\n/- case h.e'_1.h.e'_5.h.e\nprime : ℕ → Prop\nn : ℕ\nh : prime (2 * n + 1)\n⊢ HAdd.hAdd = HMul.hMul -/\n/- Goals Accomplished! -/\n/- case h.e'_1.h.e'_5.h.e'_1\nprime : ℕ → Prop\nn : ℕ\nh : prime (2 * n + 1)\n⊢ n = 2 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (prime : Nat → Prop) (n : Nat) (h : prime (2 * n + 1)) :\n    prime (n + n + 1) := by\n  convert (config := .unfoldSameFun) h\n  guard_target = n + n = 2 * n\n  exact test_sorry\nprime : ℕ → Prop\nn : ℕ\nh : prime (2 * n + 1)\n⊢ prime (n + n + 1)\n", "full_text": "example (prime : Nat → Prop) (n : Nat) (h : prime (2 * n + 1)) :\n    prime (n + n + 1) := by\n  convert (config := .unfoldSameFun) h\n  guard_target = n + n = 2 * n\n  exact test_sorry\nprime : ℕ → Prop\nn : ℕ\nh : prime (2 * n + 1)\n⊢ prime (n + n + 1)\n/- case h.e'_1.h.e'_5\nprime : ℕ → Prop\nn : ℕ\nh : prime (2 * n + 1)\n⊢ n + n = 2 * n -/\n/- case h.e'_1.h.e'_5\nprime : ℕ → Prop\nn : ℕ\nh : prime (2 * n + 1)\n⊢ n + n = 2 * n -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (p q : Nat → Prop) (h : ∀ ε > 0, p ε) :\n    ∀ ε > 0, q ε := by\n  convert h using 2 with ε hε\n  guard_hyp hε : ε > 0\n  guard_target = q ε ↔ p ε\n  exact test_sorry\np q : ℕ → Prop\nh : ∀ ε > 0, p ε\n⊢ ∀ ε > 0, q ε\n", "full_text": "example (p q : Nat → Prop) (h : ∀ ε > 0, p ε) :\n    ∀ ε > 0, q ε := by\n  convert h using 2 with ε hε\n  guard_hyp hε : ε > 0\n  guard_target = q ε ↔ p ε\n  exact test_sorry\np q : ℕ → Prop\nh : ∀ ε > 0, p ε\n⊢ ∀ ε > 0, q ε\n/- case h.h'.a\np q : ℕ → Prop\nh : ∀ ε > 0, p ε\nε : ℕ\nhε : ε > 0\n⊢ q ε ↔ p ε -/\n/- case h.h'.a\np q : ℕ → Prop\nh : ∀ ε > 0, p ε\nε : ℕ\nhε : ε > 0\n⊢ q ε ↔ p ε -/\n/- case h.h'.a\np q : ℕ → Prop\nh : ∀ ε > 0, p ε\nε : ℕ\nhε : ε > 0\n⊢ q ε ↔ p ε -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : @Fintype.card Bool instFintypeBool = 2 := by\n  convert Fintype.foo _\ninstFintypeBool : Fintype Bool\n⊢ Fintype.card Bool = 2\n", "full_text": "example : @Fintype.card Bool instFintypeBool = 2 := by\n  convert Fintype.foo _\ninstFintypeBool : Fintype Bool\n⊢ Fintype.card Bool = 2\n/- Goals Accomplished! -/\n"}
{"prompt": "example : @Fintype.card Bool instFintypeBool = 2 := by\n  convert Fintype.foo' _ using 1\n  guard_target = Fintype (Option Bool)\n  exact test_sorry\ninstFintypeBool : Fintype Bool\n⊢ Fintype.card Bool = 2\n", "full_text": "example : @Fintype.card Bool instFintypeBool = 2 := by\n  convert Fintype.foo' _ using 1\n  guard_target = Fintype (Option Bool)\n  exact test_sorry\ninstFintypeBool : Fintype Bool\n⊢ Fintype.card Bool = 2\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : True := by\n  convert_to ?x + ?y = ?z\n  case x => exact 1\n  case y => exact 2\n  case z => exact 3\n  all_goals try infer_instance\n  · simp\n  · simp\n⊢ True\n", "full_text": "example : True := by\n  convert_to ?x + ?y = ?z\n  case x => exact 1\n  case y => exact 2\n  case z => exact 3\n  all_goals try infer_instance\n  · simp\n  · simp\n⊢ True\n/- case a\n⊢ True ↔ ?x + ?y = ?z\n---\ncase x\n⊢ ?convert_1\n---\ncase y\n⊢ ?convert_2\n---\ncase z\n⊢ ?convert_4\n---\ncase convert_1\n⊢ Type ?u.9\n---\ncase convert_2\n⊢ Type ?u.8\n---\ncase convert_3\n⊢ HAdd ?convert_1 ?convert_2 ?convert_4\n---\ncase convert_4\n⊢ Type ?u.7\n---\ncase convert_5\n⊢ ?x + ?y = ?z -/\n/- case a\n⊢ True ↔ 1 + ?y = ?z\n---\ncase y\n⊢ ?convert_2\n---\ncase z\n⊢ ?convert_4\n---\ncase convert_2\n⊢ Type ?u.8\n---\ncase convert_3\n⊢ HAdd ℕ ?convert_2 ?convert_4\n---\ncase convert_4\n⊢ Type ?u.7\n---\ncase convert_5\n⊢ 1 + ?y = ?z -/\n/- case a\n⊢ True ↔ 1 + 2 = ?z\n---\ncase z\n⊢ ?convert_4\n---\ncase convert_3\n⊢ HAdd ℕ ℕ ?convert_4\n---\ncase convert_4\n⊢ Type ?u.7\n---\ncase convert_5\n⊢ 1 + 2 = ?z -/\n/- case a\n⊢ True ↔ 1 + 2 = 3\n---\ncase convert_3\n⊢ HAdd ℕ ℕ ℕ\n---\ncase convert_5\n⊢ 1 + 2 = 3 -/\n/- case a\n⊢ True ↔ 1 + 2 = 3\n---\ncase convert_5\n⊢ 1 + 2 = 3 -/\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {α β : Type u} [Fintype α] [Fintype β] : Fintype.card α = Fintype.card β := by\n  congr!\n  guard_target = Fintype.card α = Fintype.card β\n  congr! (config := {typeEqs := true})\n  · guard_target = α = β\n    exact test_sorry\n  · rename_i inst1 inst2 h\n    guard_target = HEq inst1 inst2\n    have : Subsingleton (Fintype α) := test_sorry\n    congr!\nα β : Type u\ninst✝¹ : Fintype α\ninst✝ : Fintype β\n⊢ Fintype.card α = Fintype.card β\n", "full_text": "example {α β : Type u} [Fintype α] [Fintype β] : Fintype.card α = Fintype.card β := by\n  congr!\n  guard_target = Fintype.card α = Fintype.card β\n  congr! (config := {typeEqs := true})\n  · guard_target = α = β\n    exact test_sorry\n  · rename_i inst1 inst2 h\n    guard_target = HEq inst1 inst2\n    have : Subsingleton (Fintype α) := test_sorry\n    congr!\nα β : Type u\ninst✝¹ : Fintype α\ninst✝ : Fintype β\n⊢ Fintype.card α = Fintype.card β\n/- case h\nα β : Type u\ninst✝¹ : Fintype α\ninst✝ : Fintype β\n⊢ α = β -/\n/- case h\nα β : Type u\ninst✝¹ : Fintype α\ninst✝ : Fintype β\n⊢ α = β -/\n"}
{"prompt": "example (x y z : Nat) (h : x + y = z) : y + x = z := by\n  convert_to y + x = _ at h\n  · rw [Nat.add_comm]\n  exact h\nx y z : ℕ\nh : x + y = z\n⊢ y + x = z\n", "full_text": "example (x y z : Nat) (h : x + y = z) : y + x = z := by\n  convert_to y + x = _ at h\n  · rw [Nat.add_comm]\n  exact h\nx y z : ℕ\nh : x + y = z\n⊢ y + x = z\n/- case h.e'_2\nx y z : ℕ\nh : x + y = z\n⊢ x + y = y + x\n---\nx y z : ℕ\nh✝ : x + y = z\nh : y + x = z\n⊢ y + x = z -/\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (f : ℕ → ℕ) (h : f x = f y) : x = y := by\n  apply_fun f\n  · guard_target = f x = f y\n    assumption\n  · guard_target = Injective f\n    exact test_sorry\nx y : ℕ\nf : ℕ → ℕ\nh : f x = f y\n⊢ x = y\n", "full_text": "example (f : ℕ → ℕ) (h : f x = f y) : x = y := by\n  apply_fun f\n  · guard_target = f x = f y\n    assumption\n  · guard_target = Injective f\n    exact test_sorry\nx y : ℕ\nf : ℕ → ℕ\nh : f x = f y\n⊢ x = y\n/- x y : ℕ\nf : ℕ → ℕ\nh : f x = f y\n⊢ f x = f y\n---\ncase inj\nx y : ℕ\nf : ℕ → ℕ\nh : f x = f y\n⊢ Injective f -/\n/- x y : ℕ\nf : ℕ → ℕ\nh : f x = f y\n⊢ f x = f y -/\n/- Goals Accomplished! -/\n/- case inj\nx y : ℕ\nf : ℕ → ℕ\nh : f x = f y\n⊢ Injective f -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (f : ℕ → ℕ → ℕ) (h : f 1 x = f 1 y) (hinj : ∀ n, Injective (f n)) : x = y := by\n  apply_fun f ?foo\n  guard_target = f ?foo x = f ?foo y\n  case foo => exact 1\n  · exact h\n  · apply hinj\nx y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x = f 1 y\nhinj : ∀ (n : ℕ), Injective (f n)\n⊢ x = y\n", "full_text": "example (f : ℕ → ℕ → ℕ) (h : f 1 x = f 1 y) (hinj : ∀ n, Injective (f n)) : x = y := by\n  apply_fun f ?foo\n  guard_target = f ?foo x = f ?foo y\n  case foo => exact 1\n  · exact h\n  · apply hinj\nx y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x = f 1 y\nhinj : ∀ (n : ℕ), Injective (f n)\n⊢ x = y\n/- x y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x = f 1 y\nhinj : ∀ (n : ℕ), Injective (f n)\n⊢ f ?foo x = f ?foo y\n---\ncase inj\nx y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x = f 1 y\nhinj : ∀ (n : ℕ), Injective (f n)\n⊢ Injective (f ?foo)\n---\ncase foo\nx y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x = f 1 y\nhinj : ∀ (n : ℕ), Injective (f n)\n⊢ ℕ -/\n/- x y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x = f 1 y\nhinj : ∀ (n : ℕ), Injective (f n)\n⊢ f ?foo x = f ?foo y\n---\ncase inj\nx y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x = f 1 y\nhinj : ∀ (n : ℕ), Injective (f n)\n⊢ Injective (f ?foo)\n---\ncase foo\nx y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x = f 1 y\nhinj : ∀ (n : ℕ), Injective (f n)\n⊢ ℕ -/\n/- x y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x = f 1 y\nhinj : ∀ (n : ℕ), Injective (f n)\n⊢ f 1 x = f 1 y\n---\ncase inj\nx y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x = f 1 y\nhinj : ∀ (n : ℕ), Injective (f n)\n⊢ Injective (f 1) -/\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (f : ℕ → ℕ → ℕ) : x = y := by\n  fail_if_success apply_fun f _\n  exact test_sorry\nα✝ : Sort u_1\nx y : α✝\nf : ℕ → ℕ → ℕ\n⊢ x = y\n", "full_text": "example (f : ℕ → ℕ → ℕ) : x = y := by\n  fail_if_success apply_fun f _\n  exact test_sorry\nα✝ : Sort u_1\nx y : α✝\nf : ℕ → ℕ → ℕ\n⊢ x = y\n/- α✝ : Sort u_1\nx y : α✝\nf : ℕ → ℕ → ℕ\n⊢ x = y -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (f : ℕ → ℕ → ℕ) (h : f 1 x = f 1 y) (hinj : Injective (f 1)) : x = y := by\n  apply_fun f _ using hinj\n  -- Solves for the hole using unification since it makes use of the `using` clause.\n  guard_target = f 1 x = f 1 y\n  assumption\nx y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x = f 1 y\nhinj : Injective (f 1)\n⊢ x = y\n", "full_text": "example (f : ℕ → ℕ → ℕ) (h : f 1 x = f 1 y) (hinj : Injective (f 1)) : x = y := by\n  apply_fun f _ using hinj\n  -- Solves for the hole using unification since it makes use of the `using` clause.\n  guard_target = f 1 x = f 1 y\n  assumption\nx y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x = f 1 y\nhinj : Injective (f 1)\n⊢ x = y\n/- x y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x = f 1 y\nhinj : Injective (f 1)\n⊢ f 1 x = f 1 y -/\n/- x y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x = f 1 y\nhinj : Injective (f 1)\n⊢ f 1 x = f 1 y -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (f : ℕ → ℕ → ℕ) (h : f 1 x = f 1 y) (hinj : Injective (f 1)) : x = y := by\n  apply_fun f _\n  -- Solves for the hole using unification since `hinj` is pulled in by `assumption`.\n  guard_target = f 1 x = f 1 y\n  assumption\nx y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x = f 1 y\nhinj : Injective (f 1)\n⊢ x = y\n", "full_text": "example (f : ℕ → ℕ → ℕ) (h : f 1 x = f 1 y) (hinj : Injective (f 1)) : x = y := by\n  apply_fun f _\n  -- Solves for the hole using unification since `hinj` is pulled in by `assumption`.\n  guard_target = f 1 x = f 1 y\n  assumption\nx y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x = f 1 y\nhinj : Injective (f 1)\n⊢ x = y\n/- x y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x = f 1 y\nhinj : Injective (f 1)\n⊢ f 1 x = f 1 y -/\n/- x y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x = f 1 y\nhinj : Injective (f 1)\n⊢ f 1 x = f 1 y -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (f : ℕ → ℕ) (h : f x = f y) (hinj : Injective f) : x = y := by\n  apply_fun _\n  guard_target = f x = f y\n  assumption\nx y : ℕ\nf : ℕ → ℕ\nh : f x = f y\nhinj : Injective f\n⊢ x = y\n", "full_text": "example (f : ℕ → ℕ) (h : f x = f y) (hinj : Injective f) : x = y := by\n  apply_fun _\n  guard_target = f x = f y\n  assumption\nx y : ℕ\nf : ℕ → ℕ\nh : f x = f y\nhinj : Injective f\n⊢ x = y\n/- x y : ℕ\nf : ℕ → ℕ\nh : f x = f y\nhinj : Injective f\n⊢ f x = f y -/\n/- x y : ℕ\nf : ℕ → ℕ\nh : f x = f y\nhinj : Injective f\n⊢ f x = f y -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (f : ℕ → ℕ → ℕ) (h : f 1 x ≠ f 1 y) : x ≠ y := by\n  apply_fun f ?foo\n  guard_target = f ?foo x ≠ f ?foo y\n  case foo => exact 1\n  assumption\nx y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x ≠ f 1 y\n⊢ x ≠ y\n", "full_text": "example (f : ℕ → ℕ → ℕ) (h : f 1 x ≠ f 1 y) : x ≠ y := by\n  apply_fun f ?foo\n  guard_target = f ?foo x ≠ f ?foo y\n  case foo => exact 1\n  assumption\nx y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x ≠ f 1 y\n⊢ x ≠ y\n/- x y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x ≠ f 1 y\n⊢ f ?foo x ≠ f ?foo y\n---\ncase foo\nx y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x ≠ f 1 y\n⊢ ℕ -/\n/- x y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x ≠ f 1 y\n⊢ f ?foo x ≠ f ?foo y\n---\ncase foo\nx y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x ≠ f 1 y\n⊢ ℕ -/\n/- x y : ℕ\nf : ℕ → ℕ → ℕ\nh : f 1 x ≠ f 1 y\n⊢ f 1 x ≠ f 1 y -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (X Y Z : Type) (f : X → Y) (g : Y → Z) (H : Injective <| g ∘ f) : Injective f := by\n  intros x x' h\n  apply_fun g at h\n  exact H h\nX Y Z : Type\nf : X → Y\ng : Y → Z\nH : Injective (g ∘ f)\n⊢ Injective f\n", "full_text": "example (X Y Z : Type) (f : X → Y) (g : Y → Z) (H : Injective <| g ∘ f) : Injective f := by\n  intros x x' h\n  apply_fun g at h\n  exact H h\nX Y Z : Type\nf : X → Y\ng : Y → Z\nH : Injective (g ∘ f)\n⊢ Injective f\n/- X Y Z : Type\nf : X → Y\ng : Y → Z\nH : Injective (g ∘ f)\nx x' : X\nh : f x = f x'\n⊢ x = x' -/\n/- X Y Z : Type\nf : X → Y\ng : Y → Z\nH : Injective (g ∘ f)\nx x' : X\nh : g (f x) = g (f x')\n⊢ x = x' -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x : Int) (h : x = 1) : 1 = 1 := by\n  apply_fun (fun p => p) at h\n  rfl\nx : ℤ\nh : x = 1\n⊢ 1 = 1\n", "full_text": "example (x : Int) (h : x = 1) : 1 = 1 := by\n  apply_fun (fun p => p) at h\n  rfl\nx : ℤ\nh : x = 1\n⊢ 1 = 1\n/- x : ℤ\nh : x = 1\n⊢ 1 = 1 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b : Int) (h : a = b) : a + 1 = b + 1 := by\n  -- Make sure that we infer the type of the function only after we see the hypothesis:\n  apply_fun (fun n => n + 1) at h\n  -- check that `h` was β-reduced\n  guard_hyp h :ₛ a + 1 = b + 1\n  exact h\na b : ℤ\nh : a = b\n⊢ a + 1 = b + 1\n", "full_text": "example (a b : Int) (h : a = b) : a + 1 = b + 1 := by\n  -- Make sure that we infer the type of the function only after we see the hypothesis:\n  apply_fun (fun n => n + 1) at h\n  -- check that `h` was β-reduced\n  guard_hyp h :ₛ a + 1 = b + 1\n  exact h\na b : ℤ\nh : a = b\n⊢ a + 1 = b + 1\n/- a b : ℤ\nh : a + 1 = b + 1\n⊢ a + 1 = b + 1 -/\n/- a b : ℤ\nh : a + 1 = b + 1\n⊢ a + 1 = b + 1 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (P : Nat → Type) (Q : (n : Nat) -> P n) (a b : Nat) (h : a = b) : True := by\n  fail_if_success apply_fun Q at h\n  trivial\nP : ℕ → Type\nQ : (n : ℕ) → P n\na b : ℕ\nh : a = b\n⊢ True\n", "full_text": "example (P : Nat → Type) (Q : (n : Nat) -> P n) (a b : Nat) (h : a = b) : True := by\n  fail_if_success apply_fun Q at h\n  trivial\nP : ℕ → Type\nQ : (n : ℕ) → P n\na b : ℕ\nh : a = b\n⊢ True\n/- P : ℕ → Type\nQ : (n : ℕ) → P n\na b : ℕ\nh : a = b\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (f : ℕ → ℕ) (a b : ℕ) (monof : Monotone f) (h : a ≤ b) : f a ≤ f b := by\n  apply_fun f at h using monof\n  assumption\nf : ℕ → ℕ\na b : ℕ\nmonof : Monotone f\nh : a ≤ b\n⊢ f a ≤ f b\n", "full_text": "example (f : ℕ → ℕ) (a b : ℕ) (monof : Monotone f) (h : a ≤ b) : f a ≤ f b := by\n  apply_fun f at h using monof\n  assumption\nf : ℕ → ℕ\na b : ℕ\nmonof : Monotone f\nh : a ≤ b\n⊢ f a ≤ f b\n/- f : ℕ → ℕ\na b : ℕ\nmonof : Monotone f\nh : f a ≤ f b\n⊢ f a ≤ f b -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (f : ℕ → ℕ) (a b : ℕ) (monof : Monotone f) (h : a ≤ b) : f a ≤ f b := by\n  apply_fun f at h\n  · assumption\n  · assumption\nf : ℕ → ℕ\na b : ℕ\nmonof : Monotone f\nh : a ≤ b\n⊢ f a ≤ f b\n", "full_text": "example (f : ℕ → ℕ) (a b : ℕ) (monof : Monotone f) (h : a ≤ b) : f a ≤ f b := by\n  apply_fun f at h\n  · assumption\n  · assumption\nf : ℕ → ℕ\na b : ℕ\nmonof : Monotone f\nh : a ≤ b\n⊢ f a ≤ f b\n/- f : ℕ → ℕ\na b : ℕ\nmonof : Monotone f\nh : f a ≤ f b\n⊢ f a ≤ f b\n---\nf : ℕ → ℕ\na b : ℕ\nmonof : Monotone f\nh : a ≤ b\n⊢ Monotone f -/\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (n m : ℕ) (f : ℕ → ℕ) (h : f n ≠ f m) : n ≠ m := by\n  apply_fun f\n  exact h\nn m : ℕ\nf : ℕ → ℕ\nh : f n ≠ f m\n⊢ n ≠ m\n", "full_text": "example (n m : ℕ) (f : ℕ → ℕ) (h : f n ≠ f m) : n ≠ m := by\n  apply_fun f\n  exact h\nn m : ℕ\nf : ℕ → ℕ\nh : f n ≠ f m\n⊢ n ≠ m\n/- n m : ℕ\nf : ℕ → ℕ\nh : f n ≠ f m\n⊢ f n ≠ f m -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (n m : ℕ) (f : ℕ ≃ ℕ) (h : f n ≠ f m) : n ≠ m := by\n  apply_fun f\n  exact h\nn m : ℕ\nf : ℕ ≃ ℕ\nh : f n ≠ f m\n⊢ n ≠ m\n", "full_text": "example (n m : ℕ) (f : ℕ ≃ ℕ) (h : f n ≠ f m) : n ≠ m := by\n  apply_fun f\n  exact h\nn m : ℕ\nf : ℕ ≃ ℕ\nh : f n ≠ f m\n⊢ n ≠ m\n/- n m : ℕ\nf : ℕ ≃ ℕ\nh : f n ≠ f m\n⊢ f n ≠ f m -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (n m : ℕ) (f : ℕ → ℕ) (w : Function.Injective f) (h : f n = f m) : n = m := by\n  apply_fun f\n  assumption\nn m : ℕ\nf : ℕ → ℕ\nw : Injective f\nh : f n = f m\n⊢ n = m\n", "full_text": "example (n m : ℕ) (f : ℕ → ℕ) (w : Function.Injective f) (h : f n = f m) : n = m := by\n  apply_fun f\n  assumption\nn m : ℕ\nf : ℕ → ℕ\nw : Injective f\nh : f n = f m\n⊢ n = m\n/- n m : ℕ\nf : ℕ → ℕ\nw : Injective f\nh : f n = f m\n⊢ f n = f m -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (n m : ℕ) (f : ℕ → ℕ) (w : Function.Injective f) (h : f n = f m) : n = m := by\n  apply_fun f using w\n  assumption\nn m : ℕ\nf : ℕ → ℕ\nw : Injective f\nh : f n = f m\n⊢ n = m\n", "full_text": "example (n m : ℕ) (f : ℕ → ℕ) (w : Function.Injective f) (h : f n = f m) : n = m := by\n  apply_fun f using w\n  assumption\nn m : ℕ\nf : ℕ → ℕ\nw : Injective f\nh : f n = f m\n⊢ n = m\n/- n m : ℕ\nf : ℕ → ℕ\nw : Injective f\nh : f n = f m\n⊢ f n = f m -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (n m : ℕ) (f : ℕ → ℕ) (w : Function.Injective f ∧ true) (h : f n = f m) : n = m := by\n  apply_fun f using w.1\n  assumption\nn m : ℕ\nf : ℕ → ℕ\nw : Injective f ∧ true = true\nh : f n = f m\n⊢ n = m\n", "full_text": "example (n m : ℕ) (f : ℕ → ℕ) (w : Function.Injective f ∧ true) (h : f n = f m) : n = m := by\n  apply_fun f using w.1\n  assumption\nn m : ℕ\nf : ℕ → ℕ\nw : Injective f ∧ true = true\nh : f n = f m\n⊢ n = m\n/- n m : ℕ\nf : ℕ → ℕ\nw : Injective f ∧ true = true\nh : f n = f m\n⊢ f n = f m -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (f : ℕ ≃ ℕ) (h : f x = f y) : x = y := by\n  apply_fun f\n  assumption\nx y : ℕ\nf : ℕ ≃ ℕ\nh : f x = f y\n⊢ x = y\n", "full_text": "example (f : ℕ ≃ ℕ) (h : f x = f y) : x = y := by\n  apply_fun f\n  assumption\nx y : ℕ\nf : ℕ ≃ ℕ\nh : f x = f y\n⊢ x = y\n/- x y : ℕ\nf : ℕ ≃ ℕ\nh : f x = f y\n⊢ f x = f y -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (f : ℕ ≃ ℕ) (h : f x = f y) : x = y := by\n  apply_fun f using f.injective\n  assumption\nx y : ℕ\nf : ℕ ≃ ℕ\nh : f x = f y\n⊢ x = y\n", "full_text": "example (f : ℕ ≃ ℕ) (h : f x = f y) : x = y := by\n  apply_fun f using f.injective\n  assumption\nx y : ℕ\nf : ℕ ≃ ℕ\nh : f x = f y\n⊢ x = y\n/- x y : ℕ\nf : ℕ ≃ ℕ\nh : f x = f y\n⊢ f x = f y -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {x y : ℕ} (h : Equiv.refl ℕ x = Equiv.refl ℕ y) : x = y := by\n  apply_fun Equiv.refl ℕ\n  assumption\nx y : ℕ\nh : (Equiv.refl ℕ) x = (Equiv.refl ℕ) y\n⊢ x = y\n", "full_text": "example {x y : ℕ} (h : Equiv.refl ℕ x = Equiv.refl ℕ y) : x = y := by\n  apply_fun Equiv.refl ℕ\n  assumption\nx y : ℕ\nh : (Equiv.refl ℕ) x = (Equiv.refl ℕ) y\n⊢ x = y\n/- x y : ℕ\nh : (Equiv.refl ℕ) x = (Equiv.refl ℕ) y\n⊢ (Equiv.refl ℕ) x = (Equiv.refl ℕ) y -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b : List α) (P : a = b) : True := by\n  apply_fun List.length at P\n  trivial\nα : Type u_1\na b : List α\nP : a = b\n⊢ True\n", "full_text": "example (a b : List α) (P : a = b) : True := by\n  apply_fun List.length at P\n  trivial\nα : Type u_1\na b : List α\nP : a = b\n⊢ True\n/- α : Type u_1\na b : List α\nP : a.length = b.length\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b : ℕ) (h : a ≤ b) : a + 1 ≤ b + 1 := by\n  apply_fun (· + 1 : ℕ → ℕ) at h -- TODO shouldn't need type ascription here\n  · exact h\n  · exact Monotone.add_const monotone_id 1\na b : ℕ\nh : a ≤ b\n⊢ a + 1 ≤ b + 1\n", "full_text": "example (a b : ℕ) (h : a ≤ b) : a + 1 ≤ b + 1 := by\n  apply_fun (· + 1 : ℕ → ℕ) at h -- TODO shouldn't need type ascription here\n  · exact h\n  · exact Monotone.add_const monotone_id 1\na b : ℕ\nh : a ≤ b\n⊢ a + 1 ≤ b + 1\n/- a b : ℕ\nh : (fun x => x + 1) a ≤ (fun x => x + 1) b\n⊢ a + 1 ≤ b + 1\n---\na b : ℕ\nh : a ≤ b\n⊢ Monotone fun x => x + 1 -/\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b : ℕ) (h : a < b) : a + 1 < b + 1 := by\n  apply_fun (· + 1 : ℕ → ℕ) at h\n  · exact h\n  · exact StrictMono.add_const strictMono_id 1\na b : ℕ\nh : a < b\n⊢ a + 1 < b + 1\n", "full_text": "example (a b : ℕ) (h : a < b) : a + 1 < b + 1 := by\n  apply_fun (· + 1 : ℕ → ℕ) at h\n  · exact h\n  · exact StrictMono.add_const strictMono_id 1\na b : ℕ\nh : a < b\n⊢ a + 1 < b + 1\n/- a b : ℕ\nh : (fun x => x + 1) a < (fun x => x + 1) b\n⊢ a + 1 < b + 1\n---\na b : ℕ\nh : a < b\n⊢ StrictMono fun x => x + 1 -/\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b : ℕ) (h : a < b) : a + 1 < b + 1 := by\n  apply_fun (· + 1 : ℕ → ℕ) at h using StrictMono.add_const strictMono_id 1\n  · exact h\na b : ℕ\nh : a < b\n⊢ a + 1 < b + 1\n", "full_text": "example (a b : ℕ) (h : a < b) : a + 1 < b + 1 := by\n  apply_fun (· + 1 : ℕ → ℕ) at h using StrictMono.add_const strictMono_id 1\n  · exact h\na b : ℕ\nh : a < b\n⊢ a + 1 < b + 1\n/- a b : ℕ\nh : (fun x => id x + 1) a < (fun x => id x + 1) b\n⊢ a + 1 < b + 1 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b : ℕ) (h : a ≠ b) : a + 1 ≠ b + 1 := by\n  apply_fun (· + 1 : ℕ → ℕ) at h\n  · exact h\n  · exact add_left_injective 1\na b : ℕ\nh : a ≠ b\n⊢ a + 1 ≠ b + 1\n", "full_text": "example (a b : ℕ) (h : a ≠ b) : a + 1 ≠ b + 1 := by\n  apply_fun (· + 1 : ℕ → ℕ) at h\n  · exact h\n  · exact add_left_injective 1\na b : ℕ\nh : a ≠ b\n⊢ a + 1 ≠ b + 1\n/- a b : ℕ\nh : a + 1 ≠ b + 1\n⊢ a + 1 ≠ b + 1\n---\na b : ℕ\nh : a ≠ b\n⊢ Injective fun x => x + 1 -/\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {n : Type} [Fintype n] {X : Type} [Semiring X]\n  (f : Matrix n n X → Matrix n n X) (A B : Matrix n n X) (h : A * B = 0) : f (A * B) = f 0 := by\n  apply_fun f at h\n  -- check that our β-reduction didn't mess things up:\n  -- (previously `apply_fun` was producing `f (A.mul B) = f 0`)\n  guard_hyp h :ₛ f (A * B) = f 0\n  exact h\nn : Type\ninst✝¹ : Fintype n\nX : Type\ninst✝ : Semiring X\nf : Matrix n n X → Matrix n n X\nA B : Matrix n n X\nh : A * B = 0\n⊢ f (A * B) = f 0\n", "full_text": "example {n : Type} [Fintype n] {X : Type} [Semiring X]\n  (f : Matrix n n X → Matrix n n X) (A B : Matrix n n X) (h : A * B = 0) : f (A * B) = f 0 := by\n  apply_fun f at h\n  -- check that our β-reduction didn't mess things up:\n  -- (previously `apply_fun` was producing `f (A.mul B) = f 0`)\n  guard_hyp h :ₛ f (A * B) = f 0\n  exact h\nn : Type\ninst✝¹ : Fintype n\nX : Type\ninst✝ : Semiring X\nf : Matrix n n X → Matrix n n X\nA B : Matrix n n X\nh : A * B = 0\n⊢ f (A * B) = f 0\n/- n : Type\ninst✝¹ : Fintype n\nX : Type\ninst✝ : Semiring X\nf : Matrix n n X → Matrix n n X\nA B : Matrix n n X\nh : f (A * B) = f 0\n⊢ f (A * B) = f 0 -/\n/- n : Type\ninst✝¹ : Fintype n\nX : Type\ninst✝ : Semiring X\nf : Matrix n n X → Matrix n n X\nA B : Matrix n n X\nh : f (A * B) = f 0\n⊢ f (A * B) = f 0 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (n m : ℕ) (f : ℕ ≃ ℕ) (h : f n = f m) : n = m := by\n  apply_fun f\n  assumption\nn m : ℕ\nf : ℕ ≃ ℕ\nh : f n = f m\n⊢ n = m\n", "full_text": "example (n m : ℕ) (f : ℕ ≃ ℕ) (h : f n = f m) : n = m := by\n  apply_fun f\n  assumption\nn m : ℕ\nf : ℕ ≃ ℕ\nh : f n = f m\n⊢ n = m\n/- n m : ℕ\nf : ℕ ≃ ℕ\nh : f n = f m\n⊢ f n = f m -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (n m : ℕ) (f : ℕ ≃o ℕ) (h : f n ≤ f m) : n ≤ m := by\n  apply_fun f\n  assumption\nn m : ℕ\nf : ℕ ≃o ℕ\nh : f n ≤ f m\n⊢ n ≤ m\n", "full_text": "example (n m : ℕ) (f : ℕ ≃o ℕ) (h : f n ≤ f m) : n ≤ m := by\n  apply_fun f\n  assumption\nn m : ℕ\nf : ℕ ≃o ℕ\nh : f n ≤ f m\n⊢ n ≤ m\n/- n m : ℕ\nf : ℕ ≃o ℕ\nh : f n ≤ f m\n⊢ f n ≤ f m -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (n m : ℕ) (f : ℕ ≃o ℕ) (h : f n < f m) : n < m := by\n  apply_fun f\n  assumption\nn m : ℕ\nf : ℕ ≃o ℕ\nh : f n < f m\n⊢ n < m\n", "full_text": "example (n m : ℕ) (f : ℕ ≃o ℕ) (h : f n < f m) : n < m := by\n  apply_fun f\n  assumption\nn m : ℕ\nf : ℕ ≃o ℕ\nh : f n < f m\n⊢ n < m\n/- n m : ℕ\nf : ℕ ≃o ℕ\nh : f n < f m\n⊢ f n < f m -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : ∀ m n : ℕ, m = n → (m < 2) = (n < 2) := by\n  refine fun m n h => ?_\n  apply_fun (· < 2) at h\n  exact h\n⊢ ∀ (m n : ℕ), m = n → (m < 2) = (n < 2)\n", "full_text": "example : ∀ m n : ℕ, m = n → (m < 2) = (n < 2) := by\n  refine fun m n h => ?_\n  apply_fun (· < 2) at h\n  exact h\n⊢ ∀ (m n : ℕ), m = n → (m < 2) = (n < 2)\n/- m n : ℕ\nh : m = n\n⊢ (m < 2) = (n < 2) -/\n/- m n : ℕ\nh : (m < 2) = (n < 2)\n⊢ (m < 2) = (n < 2) -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : ∀ m n : ℕ, m = n → (m < 2) = (n < 2) := by\n  intro m n h\n  apply_fun (· < 2) at h\n  exact h\n⊢ ∀ (m n : ℕ), m = n → (m < 2) = (n < 2)\n", "full_text": "example : ∀ m n : ℕ, m = n → (m < 2) = (n < 2) := by\n  intro m n h\n  apply_fun (· < 2) at h\n  exact h\n⊢ ∀ (m n : ℕ), m = n → (m < 2) = (n < 2)\n/- m n : ℕ\nh : m = n\n⊢ (m < 2) = (n < 2) -/\n/- m n : ℕ\nh : (m < 2) = (n < 2)\n⊢ (m < 2) = (n < 2) -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (f : ℕ ≃ ℕ) (a b : ℕ) (h : a = b) : True := by\n  apply_fun f at h\n  guard_hyp h : f a = f b\n  trivial\nf : ℕ ≃ ℕ\na b : ℕ\nh : a = b\n⊢ True\n", "full_text": "example (f : ℕ ≃ ℕ) (a b : ℕ) (h : a = b) : True := by\n  apply_fun f at h\n  guard_hyp h : f a = f b\n  trivial\nf : ℕ ≃ ℕ\na b : ℕ\nh : a = b\n⊢ True\n/- f : ℕ ≃ ℕ\na b : ℕ\nh : f a = f b\n⊢ True -/\n/- f : ℕ ≃ ℕ\na b : ℕ\nh : f a = f b\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (f : ℤ ≃ ℤ) (a b : ℕ) (h : a = b) : True := by\n  apply_fun f at h\n  guard_hyp h : f a = f b\n  trivial\nf : ℤ ≃ ℤ\na b : ℕ\nh : a = b\n⊢ True\n", "full_text": "example (f : ℤ ≃ ℤ) (a b : ℕ) (h : a = b) : True := by\n  apply_fun f at h\n  guard_hyp h : f a = f b\n  trivial\nf : ℤ ≃ ℤ\na b : ℕ\nh : a = b\n⊢ True\n/- f : ℤ ≃ ℤ\na b : ℕ\nh : f ↑a = f ↑b\n⊢ True -/\n/- f : ℤ ≃ ℤ\na b : ℕ\nh : f ↑a = f ↑b\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (f : ℤ ≃ ℤ) (a b : α) (h : a = b) : True := by\n  fail_if_success apply_fun f at h\n  trivial\nα : Sort u_1\nf : ℤ ≃ ℤ\na b : α\nh : a = b\n⊢ True\n", "full_text": "example (f : ℤ ≃ ℤ) (a b : α) (h : a = b) : True := by\n  fail_if_success apply_fun f at h\n  trivial\nα : Sort u_1\nf : ℤ ≃ ℤ\na b : α\nh : a = b\n⊢ True\n/- α : Sort u_1\nf : ℤ ≃ ℤ\na b : α\nh : a = b\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (f : ℕ → ℕ) (a b : ℕ) (h : a = b) : True := by\n  apply_fun f at h\n  guard_hyp h : f a = f b\n  trivial\nf : ℕ → ℕ\na b : ℕ\nh : a = b\n⊢ True\n", "full_text": "example (f : ℕ → ℕ) (a b : ℕ) (h : a = b) : True := by\n  apply_fun f at h\n  guard_hyp h : f a = f b\n  trivial\nf : ℕ → ℕ\na b : ℕ\nh : a = b\n⊢ True\n/- f : ℕ → ℕ\na b : ℕ\nh : f a = f b\n⊢ True -/\n/- f : ℕ → ℕ\na b : ℕ\nh : f a = f b\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (f : {i : Nat} → Fin i → ℕ) (a b : Fin 37) (h : a = b) : True := by\n  apply_fun f at h\n  guard_hyp h : f a = f b\n  trivial\nf : {i : ℕ} → Fin i → ℕ\na b : Fin 37\nh : a = b\n⊢ True\n", "full_text": "example (f : {i : Nat} → Fin i → ℕ) (a b : Fin 37) (h : a = b) : True := by\n  apply_fun f at h\n  guard_hyp h : f a = f b\n  trivial\nf : {i : ℕ} → Fin i → ℕ\na b : Fin 37\nh : a = b\n⊢ True\n/- f : {i : ℕ} → Fin i → ℕ\na b : Fin 37\nh : f a = f b\n⊢ True -/\n/- f : {i : ℕ} → Fin i → ℕ\na b : Fin 37\nh : f a = f b\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (f : (p : Prop) → [Decidable p] → Nat) (p q : Prop) (h : p = q)\n    (h' : {n m : Nat} → n = m → True) : True := by\n  classical\n  apply_fun f at h\n  apply h'\n  exact h\nf : (p : Prop) → [inst : Decidable p] → ℕ\np q : Prop\nh : p = q\nh' : ∀ {n m : ℕ}, n = m → True\n⊢ True\n", "full_text": "example (f : (p : Prop) → [Decidable p] → Nat) (p q : Prop) (h : p = q)\n    (h' : {n m : Nat} → n = m → True) : True := by\n  classical\n  apply_fun f at h\n  apply h'\n  exact h\nf : (p : Prop) → [inst : Decidable p] → ℕ\np q : Prop\nh : p = q\nh' : ∀ {n m : ℕ}, n = m → True\n⊢ True\n/- Goals Accomplished! -/\n"}
{"prompt": "example (f : (p : Prop) → [Decidable p] → Nat) (p q : Prop) (h : p = q)\n    (h' : {n m : Nat} → n = m → True) : True := by\n  classical\n  apply_fun (fun x [Decidable x] => f x) at h\n  apply h'\n  exact h\nf : (p : Prop) → [inst : Decidable p] → ℕ\np q : Prop\nh : p = q\nh' : ∀ {n m : ℕ}, n = m → True\n⊢ True\n", "full_text": "example (f : (p : Prop) → [Decidable p] → Nat) (p q : Prop) (h : p = q)\n    (h' : {n m : Nat} → n = m → True) : True := by\n  classical\n  apply_fun (fun x [Decidable x] => f x) at h\n  apply h'\n  exact h\nf : (p : Prop) → [inst : Decidable p] → ℕ\np q : Prop\nh : p = q\nh' : ∀ {n m : ℕ}, n = m → True\n⊢ True\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b : ℕ) (h : a = b) : True := by\n  apply_fun (fun i => i + ?_) at h\n  · trivial\n  · exact 37\na b : ℕ\nh : a = b\n⊢ True\n", "full_text": "example (a b : ℕ) (h : a = b) : True := by\n  apply_fun (fun i => i + ?_) at h\n  · trivial\n  · exact 37\na b : ℕ\nh : a = b\n⊢ True\n/- a b : ℕ\nh : a + ?m.23 = b + ?m.23\n⊢ True\n---\na b : ℕ\nh : a = b\ni : ℕ\n⊢ ℕ -/\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (α β : Type u) [Fintype α] [Fintype β] (h : α = β) : True := by\n  apply_fun Fintype.card at h\n  guard_hyp h : Fintype.card α = Fintype.card β\n  trivial\nα β : Type u\ninst✝¹ : Fintype α\ninst✝ : Fintype β\nh : α = β\n⊢ True\n", "full_text": "example (α β : Type u) [Fintype α] [Fintype β] (h : α = β) : True := by\n  apply_fun Fintype.card at h\n  guard_hyp h : Fintype.card α = Fintype.card β\n  trivial\nα β : Type u\ninst✝¹ : Fintype α\ninst✝ : Fintype β\nh : α = β\n⊢ True\n/- α β : Type u\ninst✝¹ : Fintype α\ninst✝ : Fintype β\nh : Fintype.card α = Fintype.card β\n⊢ True -/\n/- α β : Type u\ninst✝¹ : Fintype α\ninst✝ : Fintype β\nh : Fintype.card α = Fintype.card β\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (f : α ≃ β) (x y : α) (h : f x = f y) : x = y := by\n  change _\n  -- now the goal is a metavariable\n  apply_fun f\n  exact h\nα : Sort u_1\nβ : Sort u_2\nf : α ≃ β\nx y : α\nh : f x = f y\n⊢ x = y\n", "full_text": "example (f : α ≃ β) (x y : α) (h : f x = f y) : x = y := by\n  change _\n  -- now the goal is a metavariable\n  apply_fun f\n  exact h\nα : Sort u_1\nβ : Sort u_2\nf : α ≃ β\nx y : α\nh : f x = f y\n⊢ x = y\n/- α : Sort u_1\nβ : Sort u_2\nf : α ≃ β\nx y : α\nh : f x = f y\n⊢ x = y -/\n/- α : Sort u_1\nβ : Sort u_2\nf : α ≃ β\nx y : α\nh : f x = f y\n⊢ f x = f y -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (f : α ≃ β) (x y : α) (h : f x = f y) : (fun s => s) (x = y) := by\n  apply_fun f\n  exact h\nα : Sort u_1\nβ : Sort u_2\nf : α ≃ β\nx y : α\nh : f x = f y\n⊢ (fun s => s) (x = y)\n", "full_text": "example (f : α ≃ β) (x y : α) (h : f x = f y) : (fun s => s) (x = y) := by\n  apply_fun f\n  exact h\nα : Sort u_1\nβ : Sort u_2\nf : α ≃ β\nx y : α\nh : f x = f y\n⊢ (fun s => s) (x = y)\n/- α : Sort u_1\nβ : Sort u_2\nf : α ≃ β\nx y : α\nh : f x = f y\n⊢ f x = f y -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x : ℕ) : x = x := by\n  apply_fun (Nat.cast : ℕ → ℚ) using Nat.cast_injective\n  rfl\nx : ℕ\n⊢ x = x\n", "full_text": "example (x : ℕ) : x = x := by\n  apply_fun (Nat.cast : ℕ → ℚ) using Nat.cast_injective\n  rfl\nx : ℕ\n⊢ x = x\n/- x : ℕ\n⊢ ↑x = ↑x -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : 1 = 1 := by\n  let f := fun (x : Nat) => x + 1\n  -- clearly false but for demo purposes only\n  have g : ∀ (f : ℕ → ℕ), Function.Injective f := test_sorry\n  apply_fun f using (g f)\n  rfl\n⊢ 1 = 1\n", "full_text": "example : 1 = 1 := by\n  let f := fun (x : Nat) => x + 1\n  -- clearly false but for demo purposes only\n  have g : ∀ (f : ℕ → ℕ), Function.Injective f := test_sorry\n  apply_fun f using (g f)\n  rfl\n⊢ 1 = 1\n/- f : ℕ → ℕ := fun x => x + 1\n⊢ 1 = 1 -/\n/- f : ℕ → ℕ := fun x => x + 1\ng : ∀ (f : ℕ → ℕ), Injective f\n⊢ 1 = 1 -/\n/- f : ℕ → ℕ := fun x => x + 1\ng : ∀ (f : ℕ → ℕ), Injective f\n⊢ f 1 = f 1 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (_h₁ : Function.Injective (funFamily ((List.range 128).map (fun _ => 0)).sum)) :\n    true = true := by\n  apply_fun funFamily 0\nx✝ : Sort u_1\nfunFamily : x✝\n_h₁ : Injective sorry\n⊢ true = true\n", "full_text": "example (_h₁ : Function.Injective (funFamily ((List.range 128).map (fun _ => 0)).sum)) :\n    true = true := by\n  apply_fun funFamily 0\nx✝ : Sort u_1\nfunFamily : x✝\n_h₁ : Injective sorry\n⊢ true = true\n/- x✝ : Sort u_1\nfunFamily : x✝\n_h₁ : Injective sorry\n⊢ true = true -/\n"}
{"prompt": "example (n : ℤ) : 3 ∣ n ^ 3 - n := by\n  mod_cases n % 3\n  · guard_hyp H :ₛ n ≡ 0 [ZMOD 3]; guard_target = 3 ∣ n ^ 3 - n; exact test_sorry\n  · guard_hyp H :ₛ n ≡ 1 [ZMOD 3]; guard_target = 3 ∣ n ^ 3 - n; exact test_sorry\n  · guard_hyp H :ₛ n ≡ 2 [ZMOD 3]; guard_target = 3 ∣ n ^ 3 - n; exact test_sorry\nn : ℤ\n⊢ 3 ∣ n ^ 3 - n\n", "full_text": "example (n : ℤ) : 3 ∣ n ^ 3 - n := by\n  mod_cases n % 3\n  · guard_hyp H :ₛ n ≡ 0 [ZMOD 3]; guard_target = 3 ∣ n ^ 3 - n; exact test_sorry\n  · guard_hyp H :ₛ n ≡ 1 [ZMOD 3]; guard_target = 3 ∣ n ^ 3 - n; exact test_sorry\n  · guard_hyp H :ₛ n ≡ 2 [ZMOD 3]; guard_target = 3 ∣ n ^ 3 - n; exact test_sorry\nn : ℤ\n⊢ 3 ∣ n ^ 3 - n\n/- n : ℤ\nH : n ≡ 0 [ZMOD 3]\n⊢ 3 ∣ n ^ 3 - n\n---\nn : ℤ\nH : n ≡ 1 [ZMOD 3]\n⊢ 3 ∣ n ^ 3 - n\n---\nn : ℤ\nH : n ≡ 2 [ZMOD 3]\n⊢ 3 ∣ n ^ 3 - n -/\n/- n : ℤ\nH : n ≡ 0 [ZMOD 3]\n⊢ 3 ∣ n ^ 3 - n -/\n/- n : ℤ\nH : n ≡ 0 [ZMOD 3]\n⊢ 3 ∣ n ^ 3 - n -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (n : ℕ) : 3 ∣ n ^ 3 + n := by\n  mod_cases n % 3\n  · guard_hyp H :~ n ≡ 0 [MOD 3]; guard_target = 3 ∣ n ^ 3 + n; exact test_sorry\n  · guard_hyp H :~ n ≡ 1 [MOD 3]; guard_target = 3 ∣ n ^ 3 + n; exact test_sorry\n  · guard_hyp H :~ n ≡ 2 [MOD 3]; guard_target = 3 ∣ n ^ 3 + n; exact test_sorry\nn : ℕ\n⊢ 3 ∣ n ^ 3 + n\n", "full_text": "example (n : ℕ) : 3 ∣ n ^ 3 + n := by\n  mod_cases n % 3\n  · guard_hyp H :~ n ≡ 0 [MOD 3]; guard_target = 3 ∣ n ^ 3 + n; exact test_sorry\n  · guard_hyp H :~ n ≡ 1 [MOD 3]; guard_target = 3 ∣ n ^ 3 + n; exact test_sorry\n  · guard_hyp H :~ n ≡ 2 [MOD 3]; guard_target = 3 ∣ n ^ 3 + n; exact test_sorry\nn : ℕ\n⊢ 3 ∣ n ^ 3 + n\n/- n : ℕ\nH : n ≡ 0 [MOD 3]\n⊢ 3 ∣ n ^ 3 + n\n---\nn : ℕ\nH : n ≡ 1 [MOD 3]\n⊢ 3 ∣ n ^ 3 + n\n---\nn : ℕ\nH : n ≡ 2 [MOD 3]\n⊢ 3 ∣ n ^ 3 + n -/\n/- n : ℕ\nH : n ≡ 0 [MOD 3]\n⊢ 3 ∣ n ^ 3 + n -/\n/- n : ℕ\nH : n ≡ 0 [MOD 3]\n⊢ 3 ∣ n ^ 3 + n -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (n : ℕ) (z : ℤ) : n = n := by\n  induction n with\n  | zero => rfl\n  | succ n _ih =>\n     mod_cases _h : z % 2\n     · exact test_sorry\n     · exact test_sorry\nn : ℕ\nz : ℤ\n⊢ n = n\n", "full_text": "example (n : ℕ) (z : ℤ) : n = n := by\n  induction n with\n  | zero => rfl\n  | succ n _ih =>\n     mod_cases _h : z % 2\n     · exact test_sorry\n     · exact test_sorry\nn : ℕ\nz : ℤ\n⊢ n = n\n/- Goals Accomplished! -/\n"}
{"prompt": "example {α} [CommRing α] [LinearOrder α] [IsStrictOrderedRing α]\n    {a b : α} (h : a < b) (w : b < a) : False := by\n  linarith\nα : Type u_1\ninst✝² : CommRing α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b : α\nh : a < b\nw : b < a\n⊢ False\n", "full_text": "example {α} [CommRing α] [LinearOrder α] [IsStrictOrderedRing α]\n    {a b : α} (h : a < b) (w : b < a) : False := by\n  linarith\nα : Type u_1\ninst✝² : CommRing α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b : α\nh : a < b\nw : b < a\n⊢ False\n/- Goals Accomplished! -/\n"}
{"prompt": "example {α : Type} (_inst : (a : Prop) → Decidable a)\n    [CommRing α] [LinearOrder α] [IsStrictOrderedRing α]\n    {a b c : α}\n    (ha : a < 0)\n    (hb : ¬b = 0)\n    (hc' : c = 0)\n    (h : (1 - a) * (b * b) ≤ 0)\n    (hc : 0 ≤ 0)\n    (w : -(a * -b * -b + b * -b + 0) = (1 - a) * (b * b))\n    (h : (1 - a) * (b * b) ≤ 0) :\n    0 < 1 - a := by\n  linarith\nα : Type\n_inst : (a : Prop) → Decidable a\ninst✝² : CommRing α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c : α\nha : a < 0\nhb : ¬b = 0\nhc' : c = 0\nh✝ : (1 - a) * (b * b) ≤ 0\nhc : 0 ≤ 0\nw : -(a * -b * -b + b * -b + 0) = (1 - a) * (b * b)\nh : (1 - a) * (b * b) ≤ 0\n⊢ 0 < 1 - a\n", "full_text": "example {α : Type} (_inst : (a : Prop) → Decidable a)\n    [CommRing α] [LinearOrder α] [IsStrictOrderedRing α]\n    {a b c : α}\n    (ha : a < 0)\n    (hb : ¬b = 0)\n    (hc' : c = 0)\n    (h : (1 - a) * (b * b) ≤ 0)\n    (hc : 0 ≤ 0)\n    (w : -(a * -b * -b + b * -b + 0) = (1 - a) * (b * b))\n    (h : (1 - a) * (b * b) ≤ 0) :\n    0 < 1 - a := by\n  linarith\nα : Type\n_inst : (a : Prop) → Decidable a\ninst✝² : CommRing α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\na b c : α\nha : a < 0\nhb : ¬b = 0\nhc' : c = 0\nh✝ : (1 - a) * (b * b) ≤ 0\nhc : 0 ≤ 0\nw : -(a * -b * -b + b * -b + 0) = (1 - a) * (b * b)\nh : (1 - a) * (b * b) ≤ 0\n⊢ 0 < 1 - a\n/- Goals Accomplished! -/\n"}
{"prompt": "example (e b c a v0 v1 : Rat) (h1 : v0 = 5 * a) (h2 : v1 = 3 * b) (h3 : v0 + v1 + c = 10) :\n    v0 + 5 + (v1 - 3) + (c - 2) = 10 := by\n  linarith\ne b c a v0 v1 : ℚ\nh1 : v0 = 5 * a\nh2 : v1 = 3 * b\nh3 : v0 + v1 + c = 10\n⊢ v0 + 5 + (v1 - 3) + (c - 2) = 10\n", "full_text": "example (e b c a v0 v1 : Rat) (h1 : v0 = 5 * a) (h2 : v1 = 3 * b) (h3 : v0 + v1 + c = 10) :\n    v0 + 5 + (v1 - 3) + (c - 2) = 10 := by\n  linarith\ne b c a v0 v1 : ℚ\nh1 : v0 = 5 * a\nh2 : v1 = 3 * b\nh3 : v0 + v1 + c = 10\n⊢ v0 + 5 + (v1 - 3) + (c - 2) = 10\n/- Goals Accomplished! -/\n"}
{"prompt": "example {α} [CommRing α] [LinearOrder α] [IsStrictOrderedRing α]\n    (e b c a v0 v1 : α) (h1 : v0 = 5 * a) (h2 : v1 = 3 * b)\n    (h3 : v0 + v1 + c = 10) : v0 + 5 + (v1 - 3) + (c - 2) = 10 := by\n  linarith\nα : Type u_1\ninst✝² : CommRing α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\ne b c a v0 v1 : α\nh1 : v0 = 5 * a\nh2 : v1 = 3 * b\nh3 : v0 + v1 + c = 10\n⊢ v0 + 5 + (v1 - 3) + (c - 2) = 10\n", "full_text": "example {α} [CommRing α] [LinearOrder α] [IsStrictOrderedRing α]\n    (e b c a v0 v1 : α) (h1 : v0 = 5 * a) (h2 : v1 = 3 * b)\n    (h3 : v0 + v1 + c = 10) : v0 + 5 + (v1 - 3) + (c - 2) = 10 := by\n  linarith\nα : Type u_1\ninst✝² : CommRing α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\ne b c a v0 v1 : α\nh1 : v0 = 5 * a\nh2 : v1 = 3 * b\nh3 : v0 + v1 + c = 10\n⊢ v0 + 5 + (v1 - 3) + (c - 2) = 10\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : (1 : ℤ) < 0) (g : ¬ (37 : ℤ) < 42) (_k : True) (l : (-7 : ℤ) < 5): (3 : ℤ) < 7 := by\n  linarith [(rfl : 0 = 0)]\nh : 1 < 0\ng : ¬37 < 42\n_k : True\nl : -7 < 5\n⊢ 3 < 7\n", "full_text": "example (h : (1 : ℤ) < 0) (g : ¬ (37 : ℤ) < 42) (_k : True) (l : (-7 : ℤ) < 5): (3 : ℤ) < 7 := by\n  linarith [(rfl : 0 = 0)]\nh : 1 < 0\ng : ¬37 < 42\n_k : True\nl : -7 < 5\n⊢ 3 < 7\n/- Goals Accomplished! -/\n"}
{"prompt": "example (u v r s t : Rat) (h : 0 < u * (t * v + t * r + s)) : 0 < (t * (r + v) + s) * 3 * u := by\n  linarith\nu v r s t : ℚ\nh : 0 < u * (t * v + t * r + s)\n⊢ 0 < (t * (r + v) + s) * 3 * u\n", "full_text": "example (u v r s t : Rat) (h : 0 < u * (t * v + t * r + s)) : 0 < (t * (r + v) + s) * 3 * u := by\n  linarith\nu v r s t : ℚ\nh : 0 < u * (t * v + t * r + s)\n⊢ 0 < (t * (r + v) + s) * 3 * u\n/- Goals Accomplished! -/\n"}
{"prompt": "example (A B : Rat) (h : 0 < A * B) : 0 < 8*A*B := by\n  linarith\nA B : ℚ\nh : 0 < A * B\n⊢ 0 < 8 * A * B\n", "full_text": "example (A B : Rat) (h : 0 < A * B) : 0 < 8*A*B := by\n  linarith\nA B : ℚ\nh : 0 < A * B\n⊢ 0 < 8 * A * B\n/- Goals Accomplished! -/\n"}
{"prompt": "example (A B : Rat) (h : 0 < A * B) : 0 < A*8*B := by\n  linarith\nA B : ℚ\nh : 0 < A * B\n⊢ 0 < A * 8 * B\n", "full_text": "example (A B : Rat) (h : 0 < A * B) : 0 < A*8*B := by\n  linarith\nA B : ℚ\nh : 0 < A * B\n⊢ 0 < A * 8 * B\n/- Goals Accomplished! -/\n"}
{"prompt": "example {α} [CommRing α] [LinearOrder α] [IsStrictOrderedRing α] (x : α) : 0 ≤ x := by\n  have h : 0 ≤ x := test_sorry\n  linarith\nα : Type u_1\ninst✝² : CommRing α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\nx : α\n⊢ 0 ≤ x\n", "full_text": "example {α} [CommRing α] [LinearOrder α] [IsStrictOrderedRing α] (x : α) : 0 ≤ x := by\n  have h : 0 ≤ x := test_sorry\n  linarith\nα : Type u_1\ninst✝² : CommRing α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\nx : α\n⊢ 0 ≤ x\n/- α : Type u_1\ninst✝² : CommRing α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\nx : α\nh : 0 ≤ x\n⊢ 0 ≤ x -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {α} [CommRing α] [LinearOrder α] [IsStrictOrderedRing α] (x : α) : 0 ≤ x := by\n  have h : 0 ≤ x := test_sorry\n  linarith [h]\nα : Type u_1\ninst✝² : CommRing α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\nx : α\n⊢ 0 ≤ x\n", "full_text": "example {α} [CommRing α] [LinearOrder α] [IsStrictOrderedRing α] (x : α) : 0 ≤ x := by\n  have h : 0 ≤ x := test_sorry\n  linarith [h]\nα : Type u_1\ninst✝² : CommRing α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\nx : α\n⊢ 0 ≤ x\n/- α : Type u_1\ninst✝² : CommRing α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\nx : α\nh : 0 ≤ x\n⊢ 0 ≤ x -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {α} [CommRing α] [LinearOrder α] [IsStrictOrderedRing α]\n    (A B : α) (h : 0 < A * B) : 0 < 8*A*B := by\n  linarith\nα : Type u_1\ninst✝² : CommRing α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\nA B : α\nh : 0 < A * B\n⊢ 0 < 8 * A * B\n", "full_text": "example {α} [CommRing α] [LinearOrder α] [IsStrictOrderedRing α]\n    (A B : α) (h : 0 < A * B) : 0 < 8*A*B := by\n  linarith\nα : Type u_1\ninst✝² : CommRing α\ninst✝¹ : LinearOrder α\ninst✝ : IsStrictOrderedRing α\nA B : α\nh : 0 < A * B\n⊢ 0 < 8 * A * B\n/- Goals Accomplished! -/\n"}
{"prompt": "example (A B : Rat) (h : 0 < A * B) : 0 < A*B/8 := by\n  linarith\nA B : ℚ\nh : 0 < A * B\n⊢ 0 < A * B / 8\n", "full_text": "example (A B : Rat) (h : 0 < A * B) : 0 < A*B/8 := by\n  linarith\nA B : ℚ\nh : 0 < A * B\n⊢ 0 < A * B / 8\n/- Goals Accomplished! -/\n"}
{"prompt": "example (A B : Rat) (h : 0 < A * B) : 0 < A/8*B := by\n  linarith\nA B : ℚ\nh : 0 < A * B\n⊢ 0 < A / 8 * B\n", "full_text": "example (A B : Rat) (h : 0 < A * B) : 0 < A/8*B := by\n  linarith\nA B : ℚ\nh : 0 < A * B\n⊢ 0 < A / 8 * B\n/- Goals Accomplished! -/\n"}
{"prompt": "example (ε : Rat) (h1 : ε > 0) : ε / 2 + ε / 3 + ε / 7 < ε :=\n by linarith\nε : ℚ\nh1 : ε > 0\n⊢ ε / 2 + ε / 3 + ε / 7 < ε\n", "full_text": "example (ε : Rat) (h1 : ε > 0) : ε / 2 + ε / 3 + ε / 7 < ε :=\n by linarith\nε : ℚ\nh1 : ε > 0\n⊢ ε / 2 + ε / 3 + ε / 7 < ε\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x y z : Rat) (h1 : 2 * x < 3 * y) (h2 : -4 * x + z / 2 < 0)\n    (h3 : 12 * y - z < 0) : False := by\n  linarith\nx y z : ℚ\nh1 : 2 * x < 3 * y\nh2 : -4 * x + z / 2 < 0\nh3 : 12 * y - z < 0\n⊢ False\n", "full_text": "example (x y z : Rat) (h1 : 2 * x < 3 * y) (h2 : -4 * x + z / 2 < 0)\n    (h3 : 12 * y - z < 0) : False := by\n  linarith\nx y z : ℚ\nh1 : 2 * x < 3 * y\nh2 : -4 * x + z / 2 < 0\nh3 : 12 * y - z < 0\n⊢ False\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c : Rat) (h2 : b + 2 > 3 + b) : False := by\n  linarith (config := {discharger := do Lean.Elab.Tactic.evalTactic (←`(tactic| ring1))})\na b c : ℚ\nh2 : b + 2 > 3 + b\n⊢ False\n", "full_text": "example (a b c : Rat) (h2 : b + 2 > 3 + b) : False := by\n  linarith (config := {discharger := do Lean.Elab.Tactic.evalTactic (←`(tactic| ring1))})\na b c : ℚ\nh2 : b + 2 > 3 + b\n⊢ False\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c : Rat) (h2 : b + 2 > 3 + b) : False := by\n  linarith\na b c : ℚ\nh2 : b + 2 > 3 + b\n⊢ False\n", "full_text": "example (a b c : Rat) (h2 : b + 2 > 3 + b) : False := by\n  linarith\na b c : ℚ\nh2 : b + 2 > 3 + b\n⊢ False\n/- Goals Accomplished! -/\n"}
{"prompt": "example (g v V c h : Rat) (h1 : h = 0) (h2 : v = V) (h3 : V > 0) (h4 : g > 0)\n    (h5 : 0 ≤ c) (h6 : c < 1) : v ≤ V := by\n  linarith\ng v V c h : ℚ\nh1 : h = 0\nh2 : v = V\nh3 : V > 0\nh4 : g > 0\nh5 : 0 ≤ c\nh6 : c < 1\n⊢ v ≤ V\n", "full_text": "example (g v V c h : Rat) (h1 : h = 0) (h2 : v = V) (h3 : V > 0) (h4 : g > 0)\n    (h5 : 0 ≤ c) (h6 : c < 1) : v ≤ V := by\n  linarith\ng v V c h : ℚ\nh1 : h = 0\nh2 : v = V\nh3 : V > 0\nh4 : g > 0\nh5 : 0 ≤ c\nh6 : c < 1\n⊢ v ≤ V\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x y z : ℤ) (h1 : 2 * x < 3 * y) (h2 : -4 * x + 2 * z < 0) (h3 : 12 * y - 4 * z < 0) : False := by\n  linarith\nx y z : ℤ\nh1 : 2 * x < 3 * y\nh2 : -4 * x + 2 * z < 0\nh3 : 12 * y - 4 * z < 0\n⊢ False\n", "full_text": "example (x y z : ℤ) (h1 : 2 * x < 3 * y) (h2 : -4 * x + 2 * z < 0) (h3 : 12 * y - 4 * z < 0) : False := by\n  linarith\nx y z : ℤ\nh1 : 2 * x < 3 * y\nh2 : -4 * x + 2 * z < 0\nh3 : 12 * y - 4 * z < 0\n⊢ False\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x y z : ℤ) (h1 : 2 * x < 3 * y) (h2 : -4 * x + 2 * z < 0) (h3 : x * y < 5) (h3 : 12 * y - 4 * z < 0) :\n    False := by\n  linarith\nx y z : ℤ\nh1 : 2 * x < 3 * y\nh2 : -4 * x + 2 * z < 0\nh3✝ : x * y < 5\nh3 : 12 * y - 4 * z < 0\n⊢ False\n", "full_text": "example (x y z : ℤ) (h1 : 2 * x < 3 * y) (h2 : -4 * x + 2 * z < 0) (h3 : x * y < 5) (h3 : 12 * y - 4 * z < 0) :\n    False := by\n  linarith\nx y z : ℤ\nh1 : 2 * x < 3 * y\nh2 : -4 * x + 2 * z < 0\nh3✝ : x * y < 5\nh3 : 12 * y - 4 * z < 0\n⊢ False\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c : Rat) (h1 : a > 0) (h2 : b > 5) (h3 : c < -10) (h4 : a + b - c < 3) : False := by\n  linarith\na b c : ℚ\nh1 : a > 0\nh2 : b > 5\nh3 : c < -10\nh4 : a + b - c < 3\n⊢ False\n", "full_text": "example (a b c : Rat) (h1 : a > 0) (h2 : b > 5) (h3 : c < -10) (h4 : a + b - c < 3) : False := by\n  linarith\na b c : ℚ\nh1 : a > 0\nh2 : b > 5\nh3 : c < -10\nh4 : a + b - c < 3\n⊢ False\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c : Rat) (h2 : b > 0) (h3 : ¬ b ≥ 0) : False := by\n  linarith\na b c : ℚ\nh2 : b > 0\nh3 : ¬b ≥ 0\n⊢ False\n", "full_text": "example (a b c : Rat) (h2 : b > 0) (h3 : ¬ b ≥ 0) : False := by\n  linarith\na b c : ℚ\nh2 : b > 0\nh3 : ¬b ≥ 0\n⊢ False\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x y z : Rat) (hx : x ≤ 3 * y) (h2 : y ≤ 2 * z) (h3 : x ≥ 6 * z) : x = 3*y := by\n  linarith\nx y z : ℚ\nhx : x ≤ 3 * y\nh2 : y ≤ 2 * z\nh3 : x ≥ 6 * z\n⊢ x = 3 * y\n", "full_text": "example (x y z : Rat) (hx : x ≤ 3 * y) (h2 : y ≤ 2 * z) (h3 : x ≥ 6 * z) : x = 3*y := by\n  linarith\nx y z : ℚ\nhx : x ≤ 3 * y\nh2 : y ≤ 2 * z\nh3 : x ≥ 6 * z\n⊢ x = 3 * y\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x y z : ℤ) (h1 : 2 * x < 3 * y) (h2 : -4 * x + 2 * z < 0) (h3 : x * y < 5) : ¬ 12*y - 4* z < 0 := by\n  linarith\nx y z : ℤ\nh1 : 2 * x < 3 * y\nh2 : -4 * x + 2 * z < 0\nh3 : x * y < 5\n⊢ ¬12 * y - 4 * z < 0\n", "full_text": "example (x y z : ℤ) (h1 : 2 * x < 3 * y) (h2 : -4 * x + 2 * z < 0) (h3 : x * y < 5) : ¬ 12*y - 4* z < 0 := by\n  linarith\nx y z : ℤ\nh1 : 2 * x < 3 * y\nh2 : -4 * x + 2 * z < 0\nh3 : x * y < 5\n⊢ ¬12 * y - 4 * z < 0\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x y z : Rat) (hx : ¬ x > 3 * y) (h2 : ¬ y > 2 * z) (h3 : x ≥ 6 * z) : x = 3 * y := by\n  linarith\nx y z : ℚ\nhx : ¬x > 3 * y\nh2 : ¬y > 2 * z\nh3 : x ≥ 6 * z\n⊢ x = 3 * y\n", "full_text": "example (x y z : Rat) (hx : ¬ x > 3 * y) (h2 : ¬ y > 2 * z) (h3 : x ≥ 6 * z) : x = 3 * y := by\n  linarith\nx y z : ℚ\nhx : ¬x > 3 * y\nh2 : ¬y > 2 * z\nh3 : x ≥ 6 * z\n⊢ x = 3 * y\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x y : Rat) (h : 6 + ((x + 4) * x + (6 + 3 * y) * y) = 3) (h' : (x + 4) * x ≥ 0)\n    (h'' : (6 + 3 * y) * y ≥ 0) : False := by\n  linarith\nx y : ℚ\nh : 6 + ((x + 4) * x + (6 + 3 * y) * y) = 3\nh' : (x + 4) * x ≥ 0\nh'' : (6 + 3 * y) * y ≥ 0\n⊢ False\n", "full_text": "example (x y : Rat) (h : 6 + ((x + 4) * x + (6 + 3 * y) * y) = 3) (h' : (x + 4) * x ≥ 0)\n    (h'' : (6 + 3 * y) * y ≥ 0) : False := by\n  linarith\nx y : ℚ\nh : 6 + ((x + 4) * x + (6 + 3 * y) * y) = 3\nh' : (x + 4) * x ≥ 0\nh'' : (6 + 3 * y) * y ≥ 0\n⊢ False\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a : Rat) (ha : 0 ≤ a) : 0 * 0 ≤ 2 * a := by\n  linarith\na : ℚ\nha : 0 ≤ a\n⊢ 0 * 0 ≤ 2 * a\n", "full_text": "example (a : Rat) (ha : 0 ≤ a) : 0 * 0 ≤ 2 * a := by\n  linarith\na : ℚ\nha : 0 ≤ a\n⊢ 0 * 0 ≤ 2 * a\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x : Rat) : id x ≥ x := by\n  fail_if_success\n    linarith\n  linarith!\nx : ℚ\n⊢ id x ≥ x\n", "full_text": "example (x : Rat) : id x ≥ x := by\n  fail_if_success\n    linarith\n  linarith!\nx : ℚ\n⊢ id x ≥ x\n/- x : ℚ\n⊢ id x ≥ x -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x y z : Rat) (h1 : 2 * x + ((-3) * y) < 0) (h2 : (-4) * x + 2 * z < 0) (h3 : 12 * y + (-4) * z < 0)\n    (h4 : Nat.prime 7) : False := by\n  linarith\nx y z : ℚ\nh1 : 2 * x + -3 * y < 0\nh2 : -4 * x + 2 * z < 0\nh3 : 12 * y + -4 * z < 0\nh4 : sorry\n⊢ False\n", "full_text": "example (x y z : Rat) (h1 : 2 * x + ((-3) * y) < 0) (h2 : (-4) * x + 2 * z < 0) (h3 : 12 * y + (-4) * z < 0)\n    (h4 : Nat.prime 7) : False := by\n  linarith\nx y z : ℚ\nh1 : 2 * x + -3 * y < 0\nh2 : -4 * x + 2 * z < 0\nh3 : 12 * y + -4 * z < 0\nh4 : sorry\n⊢ False\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x y z : Rat) (h1 : 2 * 1 * x + (3) * (y * (-1)) < 0) (h2 : (-2) * x * 2 < -(z + z))\n    (h3 : 12 * y + (-4) * z < 0) (h4 : Nat.prime 7) : False := by\n  linarith\nx y z : ℚ\nh1 : 2 * 1 * x + 3 * (y * -1) < 0\nh2 : -2 * x * 2 < -(z + z)\nh3 : 12 * y + -4 * z < 0\nh4 : sorry\n⊢ False\n", "full_text": "example (x y z : Rat) (h1 : 2 * 1 * x + (3) * (y * (-1)) < 0) (h2 : (-2) * x * 2 < -(z + z))\n    (h3 : 12 * y + (-4) * z < 0) (h4 : Nat.prime 7) : False := by\n  linarith\nx y z : ℚ\nh1 : 2 * 1 * x + 3 * (y * -1) < 0\nh2 : -2 * x * 2 < -(z + z)\nh3 : 12 * y + -4 * z < 0\nh4 : sorry\n⊢ False\n/- Goals Accomplished! -/\n"}
{"prompt": "example (w x y z : ℤ) (h1 : 4 * x + (-3) * y + 6 * w ≤ 0) (h2 : (-1) * x < 0) (h3 : y < 0) (h4 : w ≥ 0)\n    (h5 : Nat.prime x.natAbs) : False := by\n  linarith\nw x y z : ℤ\nh1 : 4 * x + -3 * y + 6 * w ≤ 0\nh2 : -1 * x < 0\nh3 : y < 0\nh4 : w ≥ 0\nh5 : sorry\n⊢ False\n", "full_text": "example (w x y z : ℤ) (h1 : 4 * x + (-3) * y + 6 * w ≤ 0) (h2 : (-1) * x < 0) (h3 : y < 0) (h4 : w ≥ 0)\n    (h5 : Nat.prime x.natAbs) : False := by\n  linarith\nw x y z : ℤ\nh1 : 4 * x + -3 * y + 6 * w ≤ 0\nh2 : -1 * x < 0\nh3 : y < 0\nh4 : w ≥ 0\nh5 : sorry\n⊢ False\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x : Rat) (hx : x > 0) (h : x.num < 0) : False := by\n  linarith [Rat.num_pos.mpr hx, h]\nx : ℚ\nhx : x > 0\nh : x.num < 0\n⊢ False\n", "full_text": "example (x : Rat) (hx : x > 0) (h : x.num < 0) : False := by\n  linarith [Rat.num_pos.mpr hx, h]\nx : ℚ\nhx : x > 0\nh : x.num < 0\n⊢ False\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x : Rat) (hx : x > 0) (h : x.num < 0) : False := by\n  fail_if_success\n    linarith\n  fail_if_success\n    linarith only [h]\n  fail_if_success\n    linarith only [Rat.num_pos.mpr hx]\n  linarith only [Rat.num_pos.mpr hx, h]\nx : ℚ\nhx : x > 0\nh : x.num < 0\n⊢ False\n", "full_text": "example (x : Rat) (hx : x > 0) (h : x.num < 0) : False := by\n  fail_if_success\n    linarith\n  fail_if_success\n    linarith only [h]\n  fail_if_success\n    linarith only [Rat.num_pos.mpr hx]\n  linarith only [Rat.num_pos.mpr hx, h]\nx : ℚ\nhx : x > 0\nh : x.num < 0\n⊢ False\n/- x : ℚ\nhx : x > 0\nh : x.num < 0\n⊢ False -/\n/- x : ℚ\nhx : x > 0\nh : x.num < 0\n⊢ False -/\n/- x : ℚ\nhx : x > 0\nh : x.num < 0\n⊢ False -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (i n : ℕ) (h : (2 : ℤ) ^ i ≤ 2 ^ n) : (0 : ℤ) ≤ 2 ^ n - 2 ^ i := by\n  linarith\ni n : ℕ\nh : 2 ^ i ≤ 2 ^ n\n⊢ 0 ≤ 2 ^ n - 2 ^ i\n", "full_text": "example (i n : ℕ) (h : (2 : ℤ) ^ i ≤ 2 ^ n) : (0 : ℤ) ≤ 2 ^ n - 2 ^ i := by\n  linarith\ni n : ℕ\nh : 2 ^ i ≤ 2 ^ n\n⊢ 0 ≤ 2 ^ n - 2 ^ i\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c : Rat) (h2 : b > 0) (h3 : b < 0) : Nat.prime 10 := by\n  linarith\na b c : ℚ\nh2 : b > 0\nh3 : b < 0\n⊢ sorry\n", "full_text": "example (a b c : Rat) (h2 : b > 0) (h3 : b < 0) : Nat.prime 10 := by\n  linarith\na b c : ℚ\nh2 : b > 0\nh3 : b < 0\n⊢ sorry\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c : Rat) (h2 : (2 : Rat) > 3) : a + b - c ≥ 3 := by\n  linarith (config := {exfalso := false})\na b c : ℚ\nh2 : 2 > 3\n⊢ a + b - c ≥ 3\n", "full_text": "example (a b c : Rat) (h2 : (2 : Rat) > 3) : a + b - c ≥ 3 := by\n  linarith (config := {exfalso := false})\na b c : ℚ\nh2 : 2 > 3\n⊢ a + b - c ≥ 3\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x y : Rat)\n    (h : 6 + ((x + 4) * x + (6 + 3 * y) * y) = 3 ∧ (x + 4) * x ≥ 0 ∧ (6 + 3 * y) * y ≥ 0) :\n    False := by\n  fail_if_success\n    linarith (config := {splitHypotheses := false})\n  linarith\nx y : ℚ\nh : 6 + ((x + 4) * x + (6 + 3 * y) * y) = 3 ∧ (x + 4) * x ≥ 0 ∧ (6 + 3 * y) * y ≥ 0\n⊢ False\n", "full_text": "example (x y : Rat)\n    (h : 6 + ((x + 4) * x + (6 + 3 * y) * y) = 3 ∧ (x + 4) * x ≥ 0 ∧ (6 + 3 * y) * y ≥ 0) :\n    False := by\n  fail_if_success\n    linarith (config := {splitHypotheses := false})\n  linarith\nx y : ℚ\nh : 6 + ((x + 4) * x + (6 + 3 * y) * y) = 3 ∧ (x + 4) * x ≥ 0 ∧ (6 + 3 * y) * y ≥ 0\n⊢ False\n/- x y : ℚ\nh : 6 + ((x + 4) * x + (6 + 3 * y) * y) = 3 ∧ (x + 4) * x ≥ 0 ∧ (6 + 3 * y) * y ≥ 0\n⊢ False -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : 1 < 0) (g : ¬ 37 < 42) (k : True) (l : (-7 : ℤ) < 5) : 3 < 7 := by\n  linarith [(rfl : 0 = 0)]\nh : 1 < 0\ng : ¬37 < 42\nk : True\nl : -7 < 5\n⊢ 3 < 7\n", "full_text": "example (h : 1 < 0) (g : ¬ 37 < 42) (k : True) (l : (-7 : ℤ) < 5) : 3 < 7 := by\n  linarith [(rfl : 0 = 0)]\nh : 1 < 0\ng : ¬37 < 42\nk : True\nl : -7 < 5\n⊢ 3 < 7\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : 1 < 0) : 3 = 7 := by\n  linarith [Int.zero_lt_one]\nh : 1 < 0\n⊢ 3 = 7\n", "full_text": "example (h : 1 < 0) : 3 = 7 := by\n  linarith [Int.zero_lt_one]\nh : 1 < 0\n⊢ 3 = 7\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h1 : (1 : ℕ) < 1) : False := by\n  linarith\nh1 : 1 < 1\n⊢ False\n", "full_text": "example (h1 : (1 : ℕ) < 1) : False := by\n  linarith\nh1 : 1 < 1\n⊢ False\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c : ℕ) : a + b ≥ a := by\n  linarith\na b c : ℕ\n⊢ a + b ≥ a\n", "full_text": "example (a b c : ℕ) : a + b ≥ a := by\n  linarith\na b c : ℕ\n⊢ a + b ≥ a\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b i : ℕ) (h1 : ¬ a < i) (h2 : b < i) (h3 : a ≤ b) : False := by\n  linarith\na b i : ℕ\nh1 : ¬a < i\nh2 : b < i\nh3 : a ≤ b\n⊢ False\n", "full_text": "example (a b i : ℕ) (h1 : ¬ a < i) (h2 : b < i) (h3 : a ≤ b) : False := by\n  linarith\na b i : ℕ\nh1 : ¬a < i\nh2 : b < i\nh3 : a ≤ b\n⊢ False\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x y : ℕ) (h : x < 3 * y) : True := by\n  zify at h\n  trivial\nx y : ℕ\nh : x < 3 * y\n⊢ True\n", "full_text": "example (x y : ℕ) (h : x < 3 * y) : True := by\n  zify at h\n  trivial\nx y : ℕ\nh : x < 3 * y\n⊢ True\n/- x y : ℕ\nh : ↑x < 3 * ↑y\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x y z : ℕ) (hx : x ≤ 3 * y) (h2 : y ≤ 2 * z) (h3 : x ≥ 6 * z) : x = 3 * y := by\n  linarith\nx y z : ℕ\nhx : x ≤ 3 * y\nh2 : y ≤ 2 * z\nh3 : x ≥ 6 * z\n⊢ x = 3 * y\n", "full_text": "example (x y z : ℕ) (hx : x ≤ 3 * y) (h2 : y ≤ 2 * z) (h3 : x ≥ 6 * z) : x = 3 * y := by\n  linarith\nx y z : ℕ\nhx : x ≤ 3 * y\nh2 : y ≤ 2 * z\nh3 : x ≥ 6 * z\n⊢ x = 3 * y\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c : ℕ) : ¬ a + b < a := by\n  linarith\na b c : ℕ\n⊢ ¬a + b < a\n", "full_text": "example (a b c : ℕ) : ¬ a + b < a := by\n  linarith\na b c : ℕ\n⊢ ¬a + b < a\n/- Goals Accomplished! -/\n"}
{"prompt": "example (n : ℕ) (h1 : n ≤ 3) (h2 : n > 2) : n = 3 := by\n  linarith\nn : ℕ\nh1 : n ≤ 3\nh2 : n > 2\n⊢ n = 3\n", "full_text": "example (n : ℕ) (h1 : n ≤ 3) (h2 : n > 2) : n = 3 := by\n  linarith\nn : ℕ\nh1 : n ≤ 3\nh2 : n > 2\n⊢ n = 3\n/- Goals Accomplished! -/\n"}
{"prompt": "example (z : ℕ) (hz : ¬ z ≥ 2) (h2 : ¬ z + 1 ≤ 2) : False := by\n  linarith\nz : ℕ\nhz : ¬z ≥ 2\nh2 : ¬z + 1 ≤ 2\n⊢ False\n", "full_text": "example (z : ℕ) (hz : ¬ z ≥ 2) (h2 : ¬ z + 1 ≤ 2) : False := by\n  linarith\nz : ℕ\nhz : ¬z ≥ 2\nh2 : ¬z + 1 ≤ 2\n⊢ False\n/- Goals Accomplished! -/\n"}
{"prompt": "example (z : ℕ) (hz : ¬ z ≥ 2) : z + 1 ≤ 2 := by\n  linarith\nz : ℕ\nhz : ¬z ≥ 2\n⊢ z + 1 ≤ 2\n", "full_text": "example (z : ℕ) (hz : ¬ z ≥ 2) : z + 1 ≤ 2 := by\n  linarith\nz : ℕ\nhz : ¬z ≥ 2\n⊢ z + 1 ≤ 2\n/- Goals Accomplished! -/\n"}
{"prompt": "example (i : ℤ) (hi : i > 5) : 2 * i + 3 > 11 := by\n  linarith\ni : ℤ\nhi : i > 5\n⊢ 2 * i + 3 > 11\n", "full_text": "example (i : ℤ) (hi : i > 5) : 2 * i + 3 > 11 := by\n  linarith\ni : ℤ\nhi : i > 5\n⊢ 2 * i + 3 > 11\n/- Goals Accomplished! -/\n"}
{"prompt": "example (m : ℕ) : m * m + m + (2 * m + 2) = m * m + m + (m + 1) + (m + 1) := by\n  linarith\nm : ℕ\n⊢ m * m + m + (2 * m + 2) = m * m + m + (m + 1) + (m + 1)\n", "full_text": "example (m : ℕ) : m * m + m + (2 * m + 2) = m * m + m + (m + 1) + (m + 1) := by\n  linarith\nm : ℕ\n⊢ m * m + m + (2 * m + 2) = m * m + m + (m + 1) + (m + 1)\n/- Goals Accomplished! -/\n"}
{"prompt": "example (mess : ℕ → ℕ) (S n : ℕ) :\n    mess S + (n * mess S + n * 2 + 1) < n * mess S + mess S + (n * 2 + 2) := by\n  linarith\nmess : ℕ → ℕ\nS n : ℕ\n⊢ mess S + (n * mess S + n * 2 + 1) < n * mess S + mess S + (n * 2 + 2)\n", "full_text": "example (mess : ℕ → ℕ) (S n : ℕ) :\n    mess S + (n * mess S + n * 2 + 1) < n * mess S + mess S + (n * 2 + 2) := by\n  linarith\nmess : ℕ → ℕ\nS n : ℕ\n⊢ mess S + (n * mess S + n * 2 + 1) < n * mess S + mess S + (n * 2 + 2)\n/- Goals Accomplished! -/\n"}
{"prompt": "example (p n p' n' : ℕ) (h : p + n' = p' + n) : n + p' = n' + p := by\n  linarith\np n p' n' : ℕ\nh : p + n' = p' + n\n⊢ n + p' = n' + p\n", "full_text": "example (p n p' n' : ℕ) (h : p + n' = p' + n) : n + p' = n' + p := by\n  linarith\np n p' n' : ℕ\nh : p + n' = p' + n\n⊢ n + p' = n' + p\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c : ℚ) (h1 : 1 / a < b) (h2 : b < c) : 1 / a < c := by\n  linarith\na b c : ℚ\nh1 : 1 / a < b\nh2 : b < c\n⊢ 1 / a < c\n", "full_text": "example (a b c : ℚ) (h1 : 1 / a < b) (h2 : b < c) : 1 / a < c := by\n  linarith\na b c : ℚ\nh1 : 1 / a < b\nh2 : b < c\n⊢ 1 / a < c\n/- Goals Accomplished! -/\n"}
{"prompt": "example (N : ℕ) (n : ℕ) (Hirrelevant : n > N) (A : Rat) (l : Rat) (h : A - l ≤ -(A - l))\n    (h_1 : ¬A ≤ -A) (h_2 : ¬l ≤ -l) (h_3 : -(A - l) < 1) : A < l + 1 := by\n  linarith\nN n : ℕ\nHirrelevant : n > N\nA l : ℚ\nh : A - l ≤ -(A - l)\nh_1 : ¬A ≤ -A\nh_2 : ¬l ≤ -l\nh_3 : -(A - l) < 1\n⊢ A < l + 1\n", "full_text": "example (N : ℕ) (n : ℕ) (Hirrelevant : n > N) (A : Rat) (l : Rat) (h : A - l ≤ -(A - l))\n    (h_1 : ¬A ≤ -A) (h_2 : ¬l ≤ -l) (h_3 : -(A - l) < 1) : A < l + 1 := by\n  linarith\nN n : ℕ\nHirrelevant : n > N\nA l : ℚ\nh : A - l ≤ -(A - l)\nh_1 : ¬A ≤ -A\nh_2 : ¬l ≤ -l\nh_3 : -(A - l) < 1\n⊢ A < l + 1\n/- Goals Accomplished! -/\n"}
{"prompt": "example (d : Rat) (q n : ℕ) (h1 : ((q : Rat) - 1) * n ≥ 0) (h2 : d = 2 / 3 * (((q : Rat) - 1) * n)) :\n    d ≤ ((q : Rat) - 1) * n := by\n  linarith\nd : ℚ\nq n : ℕ\nh1 : (↑q - 1) * ↑n ≥ 0\nh2 : d = 2 / 3 * ((↑q - 1) * ↑n)\n⊢ d ≤ (↑q - 1) * ↑n\n", "full_text": "example (d : Rat) (q n : ℕ) (h1 : ((q : Rat) - 1) * n ≥ 0) (h2 : d = 2 / 3 * (((q : Rat) - 1) * n)) :\n    d ≤ ((q : Rat) - 1) * n := by\n  linarith\nd : ℚ\nq n : ℕ\nh1 : (↑q - 1) * ↑n ≥ 0\nh2 : d = 2 / 3 * ((↑q - 1) * ↑n)\n⊢ d ≤ (↑q - 1) * ↑n\n/- Goals Accomplished! -/\n"}
{"prompt": "example (d : Rat) (q n : ℕ) (h1 : ((q : Rat) - 1) * n ≥ 0) (h2 : d = 2 / 3 * (((q : Rat) - 1) * n)) :\n    ((q : Rat) - 1)*n - d = 1/3 * (((q : Rat) - 1) * n) := by\n  linarith\nd : ℚ\nq n : ℕ\nh1 : (↑q - 1) * ↑n ≥ 0\nh2 : d = 2 / 3 * ((↑q - 1) * ↑n)\n⊢ (↑q - 1) * ↑n - d = 1 / 3 * ((↑q - 1) * ↑n)\n", "full_text": "example (d : Rat) (q n : ℕ) (h1 : ((q : Rat) - 1) * n ≥ 0) (h2 : d = 2 / 3 * (((q : Rat) - 1) * n)) :\n    ((q : Rat) - 1)*n - d = 1/3 * (((q : Rat) - 1) * n) := by\n  linarith\nd : ℚ\nq n : ℕ\nh1 : (↑q - 1) * ↑n ≥ 0\nh2 : d = 2 / 3 * ((↑q - 1) * ↑n)\n⊢ (↑q - 1) * ↑n - d = 1 / 3 * ((↑q - 1) * ↑n)\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x y z : ℚ) (hx : x < 5) (hx2 : x > 5) (hy : y < 5000000000) (hz : z > 34 * y) : false := by\n  linarith only [hx, hx2]\nx y z : ℚ\nhx : x < 5\nhx2 : x > 5\nhy : y < 5000000000\nhz : z > 34 * y\n⊢ false = true\n", "full_text": "example (x y z : ℚ) (hx : x < 5) (hx2 : x > 5) (hy : y < 5000000000) (hz : z > 34 * y) : false := by\n  linarith only [hx, hx2]\nx y z : ℚ\nhx : x < 5\nhx2 : x > 5\nhy : y < 5000000000\nhz : z > 34 * y\n⊢ false = true\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x y z : ℚ) (hx : x < 5) (hy : y < 5000000000) (hz : z > 34 * y) : x ≤ 5 := by\n  linarith only [hx]\nx y z : ℚ\nhx : x < 5\nhy : y < 5000000000\nhz : z > 34 * y\n⊢ x ≤ 5\n", "full_text": "example (x y z : ℚ) (hx : x < 5) (hy : y < 5000000000) (hz : z > 34 * y) : x ≤ 5 := by\n  linarith only [hx]\nx y z : ℚ\nhx : x < 5\nhy : y < 5000000000\nhz : z > 34 * y\n⊢ x ≤ 5\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : 0 + 0 = 0) : True := by\n  simp at h\n  try exact h\nh : 0 + 0 = 0\n⊢ True\n", "full_text": "example (h : 0 + 0 = 0) : True := by\n  simp at h\n  try exact h\nh : 0 + 0 = 0\n⊢ True\n/- h : True\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {a b : Nat} (h : a = b) : a + 0 = b := by\n  simp\n  subst h\n  rfl\na b : ℕ\nh : a = b\n⊢ a + 0 = b\n", "full_text": "example {a b : Nat} (h : a = b) : a + 0 = b := by\n  simp\n  subst h\n  rfl\na b : ℕ\nh : a = b\n⊢ a + 0 = b\n/- a b : ℕ\nh : a = b\n⊢ a = b -/\n/- a : ℕ\n⊢ a = a -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {a b : Nat} (h : a = b) : a + 0 = b := by\n  simp\n  by_cases a = b\n  subst h; rfl\n  subst h; rfl\na b : ℕ\nh : a = b\n⊢ a + 0 = b\n", "full_text": "example {a b : Nat} (h : a = b) : a + 0 = b := by\n  simp\n  by_cases a = b\n  subst h; rfl\n  subst h; rfl\na b : ℕ\nh : a = b\n⊢ a + 0 = b\n/- a b : ℕ\nh : a = b\n⊢ a = b -/\n/- case pos\na b : ℕ\nh h✝ : a = b\n⊢ a = b\n---\ncase neg\na b : ℕ\nh : a = b\nh✝ : ¬a = b\n⊢ a = b -/\n/- case pos\na : ℕ\nh✝ : a = a\n⊢ a = a\n---\ncase neg\na b : ℕ\nh : a = b\nh✝ : ¬a = b\n⊢ a = b -/\n/- case neg\na b : ℕ\nh : a = b\nh✝ : ¬a = b\n⊢ a = b -/\n"}
{"prompt": "example {a b : Nat} (h : a = b) : a + 0 = b := by\n  simp\n  induction a <;> assumption\na b : ℕ\nh : a = b\n⊢ a + 0 = b\n", "full_text": "example {a b : Nat} (h : a = b) : a + 0 = b := by\n  simp\n  induction a <;> assumption\na b : ℕ\nh : a = b\n⊢ a + 0 = b\n/- a b : ℕ\nh : a = b\n⊢ a = b -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : 0 = 0 ∨ 0 = 0) : True := by\n  cases h <;>\n    rename_i h <;>\n    simp at h\n  · exact h\n  · assumption --exact h\nh : 0 = 0 ∨ 0 = 0\n⊢ True\n", "full_text": "example (h : 0 = 0 ∨ 0 = 0) : True := by\n  cases h <;>\n    rename_i h <;>\n    simp at h\n  · exact h\n  · assumption --exact h\nh : 0 = 0 ∨ 0 = 0\n⊢ True\n/- case inl\nh : True\n⊢ True\n---\ncase inr\nh : True\n⊢ True -/\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : 0 = 1 ∨ 0 = 1) : 0 = 1 ∧ 0 = 1 := by\n  cases h <;> simp\n  on_goal 2 => · contradiction\n  · contradiction\nh : 0 = 1 ∨ 0 = 1\n⊢ 0 = 1 ∧ 0 = 1\n", "full_text": "example (h : 0 = 1 ∨ 0 = 1) : 0 = 1 ∧ 0 = 1 := by\n  cases h <;> simp\n  on_goal 2 => · contradiction\n  · contradiction\nh : 0 = 1 ∨ 0 = 1\n⊢ 0 = 1 ∧ 0 = 1\n/- case inl\nh✝ : 0 = 1\n⊢ False\n---\ncase inr\nh✝ : 0 = 1\n⊢ False -/\n/- case inl\nh✝ : 0 = 1\n⊢ False -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : 0 = 1 ∨ 0 = 1) : 0 = 1 ∧ 0 = 1 := by\n  cases h <;> simp\n  · contradiction\n  · contradiction\nh : 0 = 1 ∨ 0 = 1\n⊢ 0 = 1 ∧ 0 = 1\n", "full_text": "example (h : 0 = 1 ∨ 0 = 1) : 0 = 1 ∧ 0 = 1 := by\n  cases h <;> simp\n  · contradiction\n  · contradiction\nh : 0 = 1 ∨ 0 = 1\n⊢ 0 = 1 ∧ 0 = 1\n/- case inl\nh✝ : 0 = 1\n⊢ False\n---\ncase inr\nh✝ : 0 = 1\n⊢ False -/\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {h : 0 = 0} {k : 1 = 1} : True := by\n  simp at h k;\n  rw [← Classical.not_not (a := True)]\n  -- flag the two below vvv do not above ^^^\n  rw [← Classical.not_not (a := True)] at k\n  rw [← Classical.not_not (a := True)] at h\n  assumption\nh : 0 = 0\nk : 1 = 1\n⊢ True\n", "full_text": "example {h : 0 = 0} {k : 1 = 1} : True := by\n  simp at h k;\n  rw [← Classical.not_not (a := True)]\n  -- flag the two below vvv do not above ^^^\n  rw [← Classical.not_not (a := True)] at k\n  rw [← Classical.not_not (a := True)] at h\n  assumption\nh : 0 = 0\nk : 1 = 1\n⊢ True\n/- h k : True\n⊢ True -/\n/- h k : True\n⊢ ¬¬True -/\n/- h : True\nk : ¬¬True\n⊢ ¬¬True -/\n/- h k : ¬¬True\n⊢ ¬¬True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {a b : Nat} (h : ∀ c, c + a + b = a + c) : (0 + 2 + 1 + a + b) = a + 3 := by\n  simp\n  specialize h 3\n  simp_all\na b : ℕ\nh : ∀ (c : ℕ), c + a + b = a + c\n⊢ 0 + 2 + 1 + a + b = a + 3\n", "full_text": "example {a b : Nat} (h : ∀ c, c + a + b = a + c) : (0 + 2 + 1 + a + b) = a + 3 := by\n  simp\n  specialize h 3\n  simp_all\na b : ℕ\nh : ∀ (c : ℕ), c + a + b = a + c\n⊢ 0 + 2 + 1 + a + b = a + 3\n/- a b : ℕ\nh : ∀ (c : ℕ), c + a + b = a + c\n⊢ 3 + a + b = a + 3 -/\n/- a b : ℕ\nh : 3 + a + b = a + 3\n⊢ 3 + a + b = a + 3 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : (0 + 2 : Rat) + 1 = 3 := by\n  simp\n  norm_num\n⊢ 0 + 2 + 1 = 3\n", "full_text": "example : (0 + 2 : Rat) + 1 = 3 := by\n  simp\n  norm_num\n⊢ 0 + 2 + 1 = 3\n/- ⊢ 2 + 1 = 3 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {a : Rat} : a + (0 + 2 + 1 : Rat) = 3 + a := by\n  simp\n  norm_num\n  rw [add_comm]\na : ℚ\n⊢ a + (0 + 2 + 1) = 3 + a\n", "full_text": "example {a : Rat} : a + (0 + 2 + 1 : Rat) = 3 + a := by\n  simp\n  norm_num\n  rw [add_comm]\na : ℚ\n⊢ a + (0 + 2 + 1) = 3 + a\n/- a : ℚ\n⊢ a + (2 + 1) = 3 + a -/\n/- a : ℚ\n⊢ a + 3 = 3 + a -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {a b : Nat} (h : a = b) : a + b + 0 = b + a := by\n  simp\n  congr\n  exact h.symm\na b : ℕ\nh : a = b\n⊢ a + b + 0 = b + a\n", "full_text": "example {a b : Nat} (h : a = b) : a + b + 0 = b + a := by\n  simp\n  congr\n  exact h.symm\na b : ℕ\nh : a = b\n⊢ a + b + 0 = b + a\n/- a b : ℕ\nh : a = b\n⊢ a + b = b + a -/\n/- case e_a\na b : ℕ\nh : a = b\n⊢ b = a -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : False) : 0 ≠ 0 := by\n  try (simp; done)\n  exact h.elim\nh : False\n⊢ 0 ≠ 0\n", "full_text": "example (h : False) : 0 ≠ 0 := by\n  try (simp; done)\n  exact h.elim\nh : False\n⊢ 0 ≠ 0\n/- h : False\n⊢ 0 ≠ 0 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {a b : Nat} (h : a + b = a + (b + 1)) : a + b = b + a + 0 + 1 := by\n  simp\n  abel_nf\n  assumption\na b : ℕ\nh : a + b = a + (b + 1)\n⊢ a + b = b + a + 0 + 1\n", "full_text": "example {a b : Nat} (h : a + b = a + (b + 1)) : a + b = b + a + 0 + 1 := by\n  simp\n  abel_nf\n  assumption\na b : ℕ\nh : a + b = a + (b + 1)\n⊢ a + b = b + a + 0 + 1\n/- a b : ℕ\nh : a + b = a + (b + 1)\n⊢ a + b = b + a + 1 -/\n/- a b : ℕ\nh : a + b = a + (b + 1)\n⊢ a + b = a + (b + 1) -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {a b : Nat} : a + b = b + a + 0 := by\n  simp\n  abel\na b : ℕ\n⊢ a + b = b + a + 0\n", "full_text": "example {a b : Nat} : a + b = b + a + 0 := by\n  simp\n  abel\na b : ℕ\n⊢ a + b = b + a + 0\n/- a b : ℕ\n⊢ a + b = b + a -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {a b : Nat} (h : a + b = 1 + a + b) : a + b = b + a + 0 + 1 := by\n  simp\n  ring_nf\n  assumption\na b : ℕ\nh : a + b = 1 + a + b\n⊢ a + b = b + a + 0 + 1\n", "full_text": "example {a b : Nat} (h : a + b = 1 + a + b) : a + b = b + a + 0 + 1 := by\n  simp\n  ring_nf\n  assumption\na b : ℕ\nh : a + b = 1 + a + b\n⊢ a + b = b + a + 0 + 1\n/- a b : ℕ\nh : a + b = 1 + a + b\n⊢ a + b = b + a + 1 -/\n/- a b : ℕ\nh : a + b = 1 + a + b\n⊢ a + b = 1 + a + b -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {a b : Nat} : a + b = b + a + 0 := by\n  simp\n  ring\na b : ℕ\n⊢ a + b = b + a + 0\n", "full_text": "example {a b : Nat} : a + b = b + a + 0 := by\n  simp\n  ring\na b : ℕ\n⊢ a + b = b + a + 0\n/- a b : ℕ\n⊢ a + b = b + a -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h : 0 = 1 ∨ 0 = 1) : 0 = 1 ∧ 0 = 1 := by\n  cases h <;> simp\n  · simp_all\n  · contradiction\nh : 0 = 1 ∨ 0 = 1\n⊢ 0 = 1 ∧ 0 = 1\n", "full_text": "example (h : 0 = 1 ∨ 0 = 1) : 0 = 1 ∧ 0 = 1 := by\n  cases h <;> simp\n  · simp_all\n  · contradiction\nh : 0 = 1 ∨ 0 = 1\n⊢ 0 = 1 ∧ 0 = 1\n/- case inl\nh✝ : 0 = 1\n⊢ False\n---\ncase inr\nh✝ : 0 = 1\n⊢ False -/\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (n : Nat) : n + 1 = 1 + n := by\n  by_cases 0 = 0\n  · simp_all\n    omega\n  · have : 0 ≠ 1 := by\n      intro h\n      -- should not flag `cases`!\n      cases h\n    -- should not flag `exact`!\n    exact Nat.add_comm ..\nn : ℕ\n⊢ n + 1 = 1 + n\n", "full_text": "example (n : Nat) : n + 1 = 1 + n := by\n  by_cases 0 = 0\n  · simp_all\n    omega\n  · have : 0 ≠ 1 := by\n      intro h\n      -- should not flag `cases`!\n      cases h\n    -- should not flag `exact`!\n    exact Nat.add_comm ..\nn : ℕ\n⊢ n + 1 = 1 + n\n/- case pos\nn : ℕ\nh✝ : 0 = 0\n⊢ n + 1 = 1 + n\n---\ncase neg\nn : ℕ\nh✝ : ¬0 = 0\n⊢ n + 1 = 1 + n -/\n/- case pos\nn : ℕ\n⊢ n + 1 = 1 + n -/\n/- Goals Accomplished! -/\n/- case neg\nn : ℕ\nh✝ : ¬0 = 0\nthis : 0 ≠ 1\n⊢ n + 1 = 1 + n -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {h : 0 = 0} {k : 1 = 1} : ¬ ¬ True := by\n  simp at h\n  rw [← Nat.add_zero 1] at k\n  -- flag below vvv do not flag above ^^^\n  rw [← Classical.not_not (a := True)] at h\n  --exact h -- <-- flagged\n  assumption\nh : 0 = 0\nk : 1 = 1\n⊢ ¬¬True\n", "full_text": "example {h : 0 = 0} {k : 1 = 1} : ¬ ¬ True := by\n  simp at h\n  rw [← Nat.add_zero 1] at k\n  -- flag below vvv do not flag above ^^^\n  rw [← Classical.not_not (a := True)] at h\n  --exact h -- <-- flagged\n  assumption\nh : 0 = 0\nk : 1 = 1\n⊢ ¬¬True\n/- k : 1 = 1\nh : True\n⊢ ¬¬True -/\n/- k : 1 + 0 = 1 + 0\nh : True\n⊢ ¬¬True -/\n/- k : 1 + 0 = 1 + 0\nh : ¬¬True\n⊢ ¬¬True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {h : 0 = 0} {k : 1 = 1} : True := by\n  simp at h k\n  rw [← Classical.not_not (a := True)]\n  -- flag the two below vvv do not above ^^^\n  rw [← Classical.not_not (a := True)] at k\n  rw [← Classical.not_not (a := True)] at h\n  assumption\nh : 0 = 0\nk : 1 = 1\n⊢ True\n", "full_text": "example {h : 0 = 0} {k : 1 = 1} : True := by\n  simp at h k\n  rw [← Classical.not_not (a := True)]\n  -- flag the two below vvv do not above ^^^\n  rw [← Classical.not_not (a := True)] at k\n  rw [← Classical.not_not (a := True)] at h\n  assumption\nh : 0 = 0\nk : 1 = 1\n⊢ True\n/- h k : True\n⊢ True -/\n/- h k : True\n⊢ ¬¬True -/\n/- h : True\nk : ¬¬True\n⊢ ¬¬True -/\n/- h k : ¬¬True\n⊢ ¬¬True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {h : 0 = 0} : True := by\n  simp at h\n  rw [← Classical.not_not (a := True)]\n  -- flag below vvv do not flag above ^^^\n  rw [← Classical.not_not (a := True)] at h\n  assumption\nh : 0 = 0\n⊢ True\n", "full_text": "example {h : 0 = 0} : True := by\n  simp at h\n  rw [← Classical.not_not (a := True)]\n  -- flag below vvv do not flag above ^^^\n  rw [← Classical.not_not (a := True)] at h\n  assumption\nh : 0 = 0\n⊢ True\n/- h : True\n⊢ True -/\n/- h : True\n⊢ ¬¬True -/\n/- h : ¬¬True\n⊢ ¬¬True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {h : False} : 0 = 1 := by\n  simp\n  rw [← Classical.not_not (a := False)] at h\n  -- flag below vvv do not flag above ^^^\n  rwa [← Classical.not_not (a := False)]\nh : False\n⊢ 0 = 1\n", "full_text": "example {h : False} : 0 = 1 := by\n  simp\n  rw [← Classical.not_not (a := False)] at h\n  -- flag below vvv do not flag above ^^^\n  rwa [← Classical.not_not (a := False)]\nh : False\n⊢ 0 = 1\n/- h : False\n⊢ False -/\n/- h : ¬¬False\n⊢ False -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {h : False} : 0 = 1 ∧ 0 = 1 := by\n  constructor\n  · simpa\n  . simp\n    rw [← Classical.not_not (a := False)] at h\n    rwa [← Classical.not_not (a := False)]\nh : False\n⊢ 0 = 1 ∧ 0 = 1\n", "full_text": "example {h : False} : 0 = 1 ∧ 0 = 1 := by\n  constructor\n  · simpa\n  . simp\n    rw [← Classical.not_not (a := False)] at h\n    rwa [← Classical.not_not (a := False)]\nh : False\n⊢ 0 = 1 ∧ 0 = 1\n/- case left\nh : False\n⊢ 0 = 1\n---\ncase right\nh : False\n⊢ 0 = 1 -/\n/- Goals Accomplished! -/\n/- case right\nh : False\n⊢ False -/\n/- case right\nh : ¬¬False\n⊢ False -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (p q r : Prop) : True := by\n  haveI : p ∨ ¬p := by (fail_if_success itauto); sorry\n  clear this; haveI : ¬(p ↔ q) → ¬p → q := by (fail_if_success itauto); sorry\n  clear this; haveI : ¬(p ↔ q) → (r ↔ q) → (p ↔ ¬r) := by (fail_if_success itauto); sorry\n  trivial\np✝ q✝ r✝ : Prop\nh : p✝ ∧ q✝ ∨ p✝ ∧ r✝\np q r : Prop\n⊢ True\n", "full_text": "example (p q r : Prop) : True := by\n  haveI : p ∨ ¬p := by (fail_if_success itauto); sorry\n  clear this; haveI : ¬(p ↔ q) → ¬p → q := by (fail_if_success itauto); sorry\n  clear this; haveI : ¬(p ↔ q) → (r ↔ q) → (p ↔ ¬r) := by (fail_if_success itauto); sorry\n  trivial\np✝ q✝ r✝ : Prop\nh : p✝ ∧ q✝ ∨ p✝ ∧ r✝\np q r : Prop\n⊢ True\n/- p✝ q✝ r✝ : Prop\nh : p✝ ∧ q✝ ∨ p✝ ∧ r✝\np q r : Prop\nthis : p ∨ ¬p\n⊢ True -/\n/- p✝ q✝ r✝ : Prop\nh : p✝ ∧ q✝ ∨ p✝ ∧ r✝\np q r : Prop\n⊢ True -/\n/- p✝ q✝ r✝ : Prop\nh : p✝ ∧ q✝ ∨ p✝ ∧ r✝\np q r : Prop\nthis : ¬(p ↔ q) → ¬p → q\n⊢ True -/\n/- p✝ q✝ r✝ : Prop\nh : p✝ ∧ q✝ ∨ p✝ ∧ r✝\np q r : Prop\n⊢ True -/\n"}
{"prompt": "example : (fun₀ | 1 => 3) 1 = 3 := by\n  simp\n⊢ (fun₀ | 1 => 3) 1 = 3\n", "full_text": "example : (fun₀ | 1 => 3) 1 = 3 := by\n  simp\n⊢ (fun₀ | 1 => 3) 1 = 3\n/- Goals Accomplished! -/\n"}
{"prompt": "example : (fun₀ | 1 | 2 | 3 => 3 | 3 => 4) 1 = 3 := by\n  simp\n⊢ (fun₀ | 1 => 3 | 2 => 3 | 3 => 3 | 3 => 4) 1 = 3\n", "full_text": "example : (fun₀ | 1 | 2 | 3 => 3 | 3 => 4) 1 = 3 := by\n  simp\n⊢ (fun₀ | 1 => 3 | 2 => 3 | 3 => 3 | 3 => 4) 1 = 3\n/- Goals Accomplished! -/\n"}
{"prompt": "example : (fun₀ | 1 | 2 | 3 => 3 | 3 => 4) 2 = 3 := by\n  simp\n⊢ (fun₀ | 1 => 3 | 2 => 3 | 3 => 3 | 3 => 4) 2 = 3\n", "full_text": "example : (fun₀ | 1 | 2 | 3 => 3 | 3 => 4) 2 = 3 := by\n  simp\n⊢ (fun₀ | 1 => 3 | 2 => 3 | 3 => 3 | 3 => 4) 2 = 3\n/- Goals Accomplished! -/\n"}
{"prompt": "example : (fun₀ | 1 | 2 | 3 => 3 | 3 => 4) 3 = 4 := by\n  simp\n⊢ (fun₀ | 1 => 3 | 2 => 3 | 3 => 3 | 3 => 4) 3 = 4\n", "full_text": "example : (fun₀ | 1 | 2 | 3 => 3 | 3 => 4) 3 = 4 := by\n  simp\n⊢ (fun₀ | 1 => 3 | 2 => 3 | 3 => 3 | 3 => 4) 3 = 4\n/- Goals Accomplished! -/\n"}
{"prompt": "example : True := by\n  let x : id Nat := by dsimp; exact 1\n  guard_hyp x :ₛ id Nat := id (1 : Nat)\n  let x' : id Nat := clean% by dsimp; exact 1\n  guard_hyp x' :ₛ id Nat := (1 : Nat)\n\n  let y := show Nat from 1\n  guard_hyp y :ₛ Nat := let_fun this := 1; this\n  let y' := clean% show Nat from 1\n  guard_hyp y' :ₛ Nat := 1\n\n  -- Not a tautological let_fun:\n  let z := clean% let_fun x := 1; x + x\n  guard_hyp z :ₛ Nat := let_fun x := 1; x + x\n\n  trivial\n⊢ True\n", "full_text": "example : True := by\n  let x : id Nat := by dsimp; exact 1\n  guard_hyp x :ₛ id Nat := id (1 : Nat)\n  let x' : id Nat := clean% by dsimp; exact 1\n  guard_hyp x' :ₛ id Nat := (1 : Nat)\n\n  let y := show Nat from 1\n  guard_hyp y :ₛ Nat := let_fun this := 1; this\n  let y' := clean% show Nat from 1\n  guard_hyp y' :ₛ Nat := 1\n\n  -- Not a tautological let_fun:\n  let z := clean% let_fun x := 1; x + x\n  guard_hyp z :ₛ Nat := let_fun x := 1; x + x\n\n  trivial\n⊢ True\n/- x : id ℕ := id 1\n⊢ True -/\n/- x : id ℕ := id 1\n⊢ True -/\n/- x : id ℕ := id 1\nx' : id ℕ := 1\n⊢ True -/\n/- x : id ℕ := id 1\nx' : id ℕ := 1\n⊢ True -/\n/- x : id ℕ := id 1\nx' : id ℕ := 1\ny : ℕ :=\n  let_fun this := 1;\n  this\n⊢ True -/\n/- x : id ℕ := id 1\nx' : id ℕ := 1\ny : ℕ :=\n  let_fun this := 1;\n  this\n⊢ True -/\n/- x : id ℕ := id 1\nx' : id ℕ := 1\ny : ℕ :=\n  let_fun this := 1;\n  this\ny' : ℕ := 1\n⊢ True -/\n/- x : id ℕ := id 1\nx' : id ℕ := 1\ny : ℕ :=\n  let_fun this := 1;\n  this\ny' : ℕ := 1\n⊢ True -/\n/- x : id ℕ := id 1\nx' : id ℕ := 1\ny : ℕ :=\n  let_fun this := 1;\n  this\ny' : ℕ := 1\nz : ℕ :=\n  let_fun x := 1;\n  x + x\n⊢ True -/\n/- x : id ℕ := id 1\nx' : id ℕ := 1\ny : ℕ :=\n  let_fun this := 1;\n  this\ny' : ℕ := 1\nz : ℕ :=\n  let_fun x := 1;\n  x + x\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (A B : Type*) [CommRing A] [CommRing B] (f : A →+* B) : True := by\n  fail_if_success -- Check that this instance is not available by default\n    have h : Algebra A B := inferInstance\n  algebraize [f]\n  guard_hyp algInst := f.toAlgebra\n  trivial\nA : Type u_1\nB : Type u_2\ninst✝¹ : CommRing A\ninst✝ : CommRing B\nf : A →+* B\n⊢ True\n", "full_text": "example (A B : Type*) [CommRing A] [CommRing B] (f : A →+* B) : True := by\n  fail_if_success -- Check that this instance is not available by default\n    have h : Algebra A B := inferInstance\n  algebraize [f]\n  guard_hyp algInst := f.toAlgebra\n  trivial\nA : Type u_1\nB : Type u_2\ninst✝¹ : CommRing A\ninst✝ : CommRing B\nf : A →+* B\n⊢ True\n/- A : Type u_1\nB : Type u_2\ninst✝¹ : CommRing A\ninst✝ : CommRing B\nf : A →+* B\n⊢ True -/\n/- A : Type u_1\nB : Type u_2\ninst✝¹ : CommRing A\ninst✝ : CommRing B\nf : A →+* B\nalgInst✝ : Algebra A B := f.toAlgebra\n⊢ True -/\n/- A : Type u_1\nB : Type u_2\ninst✝¹ : CommRing A\ninst✝ : CommRing B\nf : A →+* B\nalgInst✝ : Algebra A B := f.toAlgebra\n⊢ True -/\n"}
{"prompt": "example (A B : Type*) [CommRing A] [CommRing B] (f : A →+* B) : True := by\n  let f' : A →+* B := f\n  fail_if_success -- Check that this instance is not available by default\n    have h : Algebra A B := inferInstance\n  algebraize [f']\n  guard_hyp algInst := f'.toAlgebra\n  trivial\nA : Type u_1\nB : Type u_2\ninst✝¹ : CommRing A\ninst✝ : CommRing B\nf : A →+* B\n⊢ True\n", "full_text": "example (A B : Type*) [CommRing A] [CommRing B] (f : A →+* B) : True := by\n  let f' : A →+* B := f\n  fail_if_success -- Check that this instance is not available by default\n    have h : Algebra A B := inferInstance\n  algebraize [f']\n  guard_hyp algInst := f'.toAlgebra\n  trivial\nA : Type u_1\nB : Type u_2\ninst✝¹ : CommRing A\ninst✝ : CommRing B\nf : A →+* B\n⊢ True\n/- A : Type u_1\nB : Type u_2\ninst✝¹ : CommRing A\ninst✝ : CommRing B\nf : A →+* B\nf' : A →+* B := f\n⊢ True -/\n/- A : Type u_1\nB : Type u_2\ninst✝¹ : CommRing A\ninst✝ : CommRing B\nf : A →+* B\nf' : A →+* B := f\n⊢ True -/\n/- A : Type u_1\nB : Type u_2\ninst✝¹ : CommRing A\ninst✝ : CommRing B\nf : A →+* B\nf' : A →+* B := f\nalgInst✝ : Algebra A B := f'.toAlgebra\n⊢ True -/\n/- A : Type u_1\nB : Type u_2\ninst✝¹ : CommRing A\ninst✝ : CommRing B\nf : A →+* B\nf' : A →+* B := f\nalgInst✝ : Algebra A B := f'.toAlgebra\n⊢ True -/\n"}
{"prompt": "example (A B C : Type*) [CommRing A] [CommRing B] [CommRing C] (f : A →+* B) (g : B →+* C) :\n    True := by\n  fail_if_success -- Check that this instance is not available by default\n    have h : Algebra A C := inferInstance\n  algebraize [g.comp f]\n  guard_hyp algInst := (g.comp f).toAlgebra\n  trivial\nA : Type u_1\nB : Type u_2\nC : Type u_3\ninst✝² : CommRing A\ninst✝¹ : CommRing B\ninst✝ : CommRing C\nf : A →+* B\ng : B →+* C\n⊢ True\n", "full_text": "example (A B C : Type*) [CommRing A] [CommRing B] [CommRing C] (f : A →+* B) (g : B →+* C) :\n    True := by\n  fail_if_success -- Check that this instance is not available by default\n    have h : Algebra A C := inferInstance\n  algebraize [g.comp f]\n  guard_hyp algInst := (g.comp f).toAlgebra\n  trivial\nA : Type u_1\nB : Type u_2\nC : Type u_3\ninst✝² : CommRing A\ninst✝¹ : CommRing B\ninst✝ : CommRing C\nf : A →+* B\ng : B →+* C\n⊢ True\n/- A : Type u_1\nB : Type u_2\nC : Type u_3\ninst✝² : CommRing A\ninst✝¹ : CommRing B\ninst✝ : CommRing C\nf : A →+* B\ng : B →+* C\n⊢ True -/\n/- A : Type u_1\nB : Type u_2\nC : Type u_3\ninst✝² : CommRing A\ninst✝¹ : CommRing B\ninst✝ : CommRing C\nf : A →+* B\ng : B →+* C\nalgInst✝ : Algebra A C := (g.comp f).toAlgebra\n⊢ True -/\n/- A : Type u_1\nB : Type u_2\nC : Type u_3\ninst✝² : CommRing A\ninst✝¹ : CommRing B\ninst✝ : CommRing C\nf : A →+* B\ng : B →+* C\nalgInst✝ : Algebra A C := (g.comp f).toAlgebra\n⊢ True -/\n"}
{"prompt": "example (A B C : Type*) [CommRing A] [CommRing B] [CommRing C] (f : A →+* B) (g : B →+* C) :\n    True := by\n  fail_if_success -- Check that this instance is not available by default\n    have h : IsScalarTower A B C := inferInstance\n  algebraize [f, g, g.comp f]\n  guard_hyp scalarTowerInst := IsScalarTower.of_algebraMap_eq' rfl\n  trivial\nA : Type u_1\nB : Type u_2\nC : Type u_3\ninst✝² : CommRing A\ninst✝¹ : CommRing B\ninst✝ : CommRing C\nf : A →+* B\ng : B →+* C\n⊢ True\n", "full_text": "example (A B C : Type*) [CommRing A] [CommRing B] [CommRing C] (f : A →+* B) (g : B →+* C) :\n    True := by\n  fail_if_success -- Check that this instance is not available by default\n    have h : IsScalarTower A B C := inferInstance\n  algebraize [f, g, g.comp f]\n  guard_hyp scalarTowerInst := IsScalarTower.of_algebraMap_eq' rfl\n  trivial\nA : Type u_1\nB : Type u_2\nC : Type u_3\ninst✝² : CommRing A\ninst✝¹ : CommRing B\ninst✝ : CommRing C\nf : A →+* B\ng : B →+* C\n⊢ True\n/- A : Type u_1\nB : Type u_2\nC : Type u_3\ninst✝² : CommRing A\ninst✝¹ : CommRing B\ninst✝ : CommRing C\nf : A →+* B\ng : B →+* C\n⊢ True -/\n/- A : Type u_1\nB : Type u_2\nC : Type u_3\ninst✝² : CommRing A\ninst✝¹ : CommRing B\ninst✝ : CommRing C\nf : A →+* B\ng : B →+* C\nalgInst✝² : Algebra A B := f.toAlgebra\nalgInst✝¹ : Algebra B C := g.toAlgebra\nalgInst✝ : Algebra A C := (g.comp f).toAlgebra\nscalarTowerInst✝ : IsScalarTower A B C := IsScalarTower.of_algebraMap_eq' (Eq.refl (algebraMap A C))\n⊢ True -/\n/- A : Type u_1\nB : Type u_2\nC : Type u_3\ninst✝² : CommRing A\ninst✝¹ : CommRing B\ninst✝ : CommRing C\nf : A →+* B\ng : B →+* C\nalgInst✝² : Algebra A B := f.toAlgebra\nalgInst✝¹ : Algebra B C := g.toAlgebra\nalgInst✝ : Algebra A C := (g.comp f).toAlgebra\nscalarTowerInst✝ : IsScalarTower A B C := IsScalarTower.of_algebraMap_eq' (Eq.refl (algebraMap A C))\n⊢ True -/\n"}
{"prompt": "example (A B : Type*) [CommRing A] [CommRing B] (f : A →+* B) (hf : f.testProperty1) : True := by\n  algebraize [f]\n  guard_hyp algebraizeInst : Algebra.testProperty1 A B\n  trivial\nA : Type u_1\nB : Type u_2\ninst✝¹ : CommRing A\ninst✝ : CommRing B\nf : A →+* B\nhf : sorry\n⊢ True\n", "full_text": "example (A B : Type*) [CommRing A] [CommRing B] (f : A →+* B) (hf : f.testProperty1) : True := by\n  algebraize [f]\n  guard_hyp algebraizeInst : Algebra.testProperty1 A B\n  trivial\nA : Type u_1\nB : Type u_2\ninst✝¹ : CommRing A\ninst✝ : CommRing B\nf : A →+* B\nhf : sorry\n⊢ True\n/- A : Type u_1\nB : Type u_2\ninst✝¹ : CommRing A\ninst✝ : CommRing B\nf : A →+* B\nhf : sorry\nalgInst✝ : Algebra A B := f.toAlgebra\n⊢ True -/\n/- A : Type u_1\nB : Type u_2\ninst✝¹ : CommRing A\ninst✝ : CommRing B\nf : A →+* B\nhf : sorry\nalgInst✝ : Algebra A B := f.toAlgebra\n⊢ True -/\n"}
{"prompt": "example (A B : Type*) [CommRing A] [CommRing B] (f : A →+* B) (hf : f.testProperty2) : True := by\n  algebraize [f]\n  guard_hyp algebraizeInst : Module.testProperty2 A B\n  trivial\nA : Type u_1\nB : Type u_2\ninst✝¹ : CommRing A\ninst✝ : CommRing B\nf : A →+* B\nhf : sorry\n⊢ True\n", "full_text": "example (A B : Type*) [CommRing A] [CommRing B] (f : A →+* B) (hf : f.testProperty2) : True := by\n  algebraize [f]\n  guard_hyp algebraizeInst : Module.testProperty2 A B\n  trivial\nA : Type u_1\nB : Type u_2\ninst✝¹ : CommRing A\ninst✝ : CommRing B\nf : A →+* B\nhf : sorry\n⊢ True\n/- A : Type u_1\nB : Type u_2\ninst✝¹ : CommRing A\ninst✝ : CommRing B\nf : A →+* B\nhf : sorry\nalgInst✝ : Algebra A B := f.toAlgebra\n⊢ True -/\n/- A : Type u_1\nB : Type u_2\ninst✝¹ : CommRing A\ninst✝ : CommRing B\nf : A →+* B\nhf : sorry\nalgInst✝ : Algebra A B := f.toAlgebra\n⊢ True -/\n"}
{"prompt": "example (A B : Type*) [CommRing A] [CommRing B] (f : A →+* B) (hf : f.testProperty3) : True := by\n  algebraize [f]\n  guard_hyp algebraizeInst : Algebra.testProperty3 A B\n  trivial\nA : Type u_1\nB : Type u_2\ninst✝¹ : CommRing A\ninst✝ : CommRing B\nf : A →+* B\nhf : sorry\n⊢ True\n", "full_text": "example (A B : Type*) [CommRing A] [CommRing B] (f : A →+* B) (hf : f.testProperty3) : True := by\n  algebraize [f]\n  guard_hyp algebraizeInst : Algebra.testProperty3 A B\n  trivial\nA : Type u_1\nB : Type u_2\ninst✝¹ : CommRing A\ninst✝ : CommRing B\nf : A →+* B\nhf : sorry\n⊢ True\n/- A : Type u_1\nB : Type u_2\ninst✝¹ : CommRing A\ninst✝ : CommRing B\nf : A →+* B\nhf : sorry\nalgInst✝ : Algebra A B := f.toAlgebra\n⊢ True -/\n/- A : Type u_1\nB : Type u_2\ninst✝¹ : CommRing A\ninst✝ : CommRing B\nf : A →+* B\nhf : sorry\nalgInst✝ : Algebra A B := f.toAlgebra\n⊢ True -/\n"}
{"prompt": "example (n : ℕ) (A B : Type*) [CommRing A] [CommRing B] (f : A →+* B) (hf : f.testProperty4 n) :\n    True := by\n  algebraize [f]\n  guard_hyp algebraizeInst : Algebra.testProperty4 n A B\n  trivial\nn : ℕ\nA : Type u_1\nB : Type u_2\ninst✝¹ : CommRing A\ninst✝ : CommRing B\nf : A →+* B\nhf : sorry\n⊢ True\n", "full_text": "example (n : ℕ) (A B : Type*) [CommRing A] [CommRing B] (f : A →+* B) (hf : f.testProperty4 n) :\n    True := by\n  algebraize [f]\n  guard_hyp algebraizeInst : Algebra.testProperty4 n A B\n  trivial\nn : ℕ\nA : Type u_1\nB : Type u_2\ninst✝¹ : CommRing A\ninst✝ : CommRing B\nf : A →+* B\nhf : sorry\n⊢ True\n/- n : ℕ\nA : Type u_1\nB : Type u_2\ninst✝¹ : CommRing A\ninst✝ : CommRing B\nf : A →+* B\nhf : sorry\nalgInst✝ : Algebra A B := f.toAlgebra\n⊢ True -/\n/- n : ℕ\nA : Type u_1\nB : Type u_2\ninst✝¹ : CommRing A\ninst✝ : CommRing B\nf : A →+* B\nhf : sorry\nalgInst✝ : Algebra A B := f.toAlgebra\n⊢ True -/\n"}
{"prompt": "example (A B C : Type*) [CommRing A] [CommRing B] [CommRing C] (f : A →+* B) (g : B →+* C)\n    (hfg : (g.comp f).testProperty1) : True := by\n  fail_if_success -- Check that this instance is not available by default\n    have h : Algebra.Flat A C := inferInstance\n  fail_if_success\n    have h : IsScalarTower A B C := inferInstance\n  algebraize [f, g, g.comp f]\n  guard_hyp algebraizeInst : Algebra.testProperty1 A C\n  guard_hyp scalarTowerInst := IsScalarTower.of_algebraMap_eq' rfl\n  trivial\nA : Type u_1\nB : Type u_2\nC : Type u_3\ninst✝² : CommRing A\ninst✝¹ : CommRing B\ninst✝ : CommRing C\nf : A →+* B\ng : B →+* C\nhfg : sorry\n⊢ True\n", "full_text": "example (A B C : Type*) [CommRing A] [CommRing B] [CommRing C] (f : A →+* B) (g : B →+* C)\n    (hfg : (g.comp f).testProperty1) : True := by\n  fail_if_success -- Check that this instance is not available by default\n    have h : Algebra.Flat A C := inferInstance\n  fail_if_success\n    have h : IsScalarTower A B C := inferInstance\n  algebraize [f, g, g.comp f]\n  guard_hyp algebraizeInst : Algebra.testProperty1 A C\n  guard_hyp scalarTowerInst := IsScalarTower.of_algebraMap_eq' rfl\n  trivial\nA : Type u_1\nB : Type u_2\nC : Type u_3\ninst✝² : CommRing A\ninst✝¹ : CommRing B\ninst✝ : CommRing C\nf : A →+* B\ng : B →+* C\nhfg : sorry\n⊢ True\n/- A : Type u_1\nB : Type u_2\nC : Type u_3\ninst✝² : CommRing A\ninst✝¹ : CommRing B\ninst✝ : CommRing C\nf : A →+* B\ng : B →+* C\nhfg : sorry\n⊢ True -/\n/- A : Type u_1\nB : Type u_2\nC : Type u_3\ninst✝² : CommRing A\ninst✝¹ : CommRing B\ninst✝ : CommRing C\nf : A →+* B\ng : B →+* C\nhfg : sorry\n⊢ True -/\n/- A : Type u_1\nB : Type u_2\nC : Type u_3\ninst✝² : CommRing A\ninst✝¹ : CommRing B\ninst✝ : CommRing C\nf : A →+* B\ng : B →+* C\nhfg : sorry\nalgInst✝² : Algebra A B := f.toAlgebra\nalgInst✝¹ : Algebra B C := g.toAlgebra\nalgInst✝ : Algebra A C := (g.comp f).toAlgebra\nscalarTowerInst✝ : IsScalarTower A B C := IsScalarTower.of_algebraMap_eq' (Eq.refl (algebraMap A C))\n⊢ True -/\n/- A : Type u_1\nB : Type u_2\nC : Type u_3\ninst✝² : CommRing A\ninst✝¹ : CommRing B\ninst✝ : CommRing C\nf : A →+* B\ng : B →+* C\nhfg : sorry\nalgInst✝² : Algebra A B := f.toAlgebra\nalgInst✝¹ : Algebra B C := g.toAlgebra\nalgInst✝ : Algebra A C := (g.comp f).toAlgebra\nscalarTowerInst✝ : IsScalarTower A B C := IsScalarTower.of_algebraMap_eq' (Eq.refl (algebraMap A C))\n⊢ True -/\n"}
{"prompt": "example (y : ℝ) (hy : y ≠ 0) : ContinuousAt (fun x => x * (Real.log x) ^ 2 - Real.exp x / x) y := by\n  fun_prop (disch:=aesop)\ny : ℝ\nhy : y ≠ 0\n⊢ ContinuousAt (fun x => x * Real.log x ^ 2 - Real.exp x / x) y\n", "full_text": "example (y : ℝ) (hy : y ≠ 0) : ContinuousAt (fun x => x * (Real.log x) ^ 2 - Real.exp x / x) y := by\n  fun_prop (disch:=aesop)\ny : ℝ\nhy : y ≠ 0\n⊢ ContinuousAt (fun x => x * Real.log x ^ 2 - Real.exp x / x) y\n/- Goals Accomplished! -/\n"}
{"prompt": "example : DifferentiableOn ℝ foo {0}ᶜ := by\n  unfold foo; fun_prop (disch:=aesop)\nF✝ : Type u_1\nfoo : ℕ → F✝\n⊢ DifferentiableOn ℝ foo {0}ᶜ\n", "full_text": "example : DifferentiableOn ℝ foo {0}ᶜ := by\n  unfold foo; fun_prop (disch:=aesop)\nF✝ : Type u_1\nfoo : ℕ → F✝\n⊢ DifferentiableOn ℝ foo {0}ᶜ\n/- F✝ : Type u_1\nfoo : ℕ → F✝\n⊢ DifferentiableOn ℝ foo {0}ᶜ -/\n"}
{"prompt": "example {n} : ContDiffOn ℝ n foo {0}ᶜ := by\n  unfold foo; fun_prop (disch:=aesop)\nF✝ : Type u_1\nfoo : ℕ → F✝\nn : WithTop ℕ∞\n⊢ ContDiffOn ℝ n foo {0}ᶜ\n", "full_text": "example {n} : ContDiffOn ℝ n foo {0}ᶜ := by\n  unfold foo; fun_prop (disch:=aesop)\nF✝ : Type u_1\nfoo : ℕ → F✝\nn : WithTop ℕ∞\n⊢ ContDiffOn ℝ n foo {0}ᶜ\n/- F✝ : Type u_1\nfoo : ℕ → F✝\nn : WithTop ℕ∞\n⊢ ContDiffOn ℝ n foo {0}ᶜ -/\n"}
{"prompt": "example : Measurable (fun x => x * (Real.log x) ^ 2 - Real.exp x / x) := by\n  fun_prop\n⊢ Measurable fun x => x * Real.log x ^ 2 - Real.exp x / x\n", "full_text": "example : Measurable (fun x => x * (Real.log x) ^ 2 - Real.exp x / x) := by\n  fun_prop\n⊢ Measurable fun x => x * Real.log x ^ 2 - Real.exp x / x\n/- Goals Accomplished! -/\n"}
{"prompt": "example : AEMeasurable (fun x => x * (Real.log x) ^ 2 - Real.exp x / x) := by\n  fun_prop (config:={maxTransitionDepth:=2})\n⊢ MeasureTheory.Measure ℝ\n", "full_text": "example : AEMeasurable (fun x => x * (Real.log x) ^ 2 - Real.exp x / x) := by\n  fun_prop (config:={maxTransitionDepth:=2})\n⊢ MeasureTheory.Measure ℝ\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : DifferentiableOn ℝ T (Set.Icc 0 1) := by\n  unfold T S\n  fun_prop (disch:=(rintro x ⟨a,b⟩; nlinarith))\nF✝ : Type u_1\nT : ℕ → F✝\n⊢ DifferentiableOn ℝ T (Set.Icc 0 1)\n", "full_text": "example : DifferentiableOn ℝ T (Set.Icc 0 1) := by\n  unfold T S\n  fun_prop (disch:=(rintro x ⟨a,b⟩; nlinarith))\nF✝ : Type u_1\nT : ℕ → F✝\n⊢ DifferentiableOn ℝ T (Set.Icc 0 1)\n/- F✝ : Type u_1\nT : ℕ → F✝\n⊢ DifferentiableOn ℝ T (Set.Icc 0 1) -/\n"}
{"prompt": "example {n}: ContDiffOn ℝ n T (Set.Icc 0 1) := by\n  unfold T S\n  fun_prop (disch:=(rintro x ⟨a,b⟩; nlinarith))\nF✝ : Type u_1\nT : ℕ → F✝\nn : WithTop ℕ∞\n⊢ ContDiffOn ℝ n T (Set.Icc 0 1)\n", "full_text": "example {n}: ContDiffOn ℝ n T (Set.Icc 0 1) := by\n  unfold T S\n  fun_prop (disch:=(rintro x ⟨a,b⟩; nlinarith))\nF✝ : Type u_1\nT : ℕ → F✝\nn : WithTop ℕ∞\n⊢ ContDiffOn ℝ n T (Set.Icc 0 1)\n/- F✝ : Type u_1\nT : ℕ → F✝\nn : WithTop ℕ∞\n⊢ ContDiffOn ℝ n T (Set.Icc 0 1) -/\n"}
{"prompt": "example : AEMeasurable T := by\n  unfold T S\n  fun_prop\nT : ?m.110 → ?m.111\n⊢ MeasureTheory.Measure ?m.110\n", "full_text": "example : AEMeasurable T := by\n  unfold T S\n  fun_prop\nT : ?m.110 → ?m.111\n⊢ MeasureTheory.Measure ?m.110\n/- T : ?m.357 → ?m.111\n⊢ MeasureTheory.Measure ?m.357 -/\n/- α✝ : Type u_1\nβ✝ : Type u_2\nT : α✝ → β✝\n⊢ AEMeasurable T sorry -/\n"}
{"prompt": "example {f : ℝ → ℝ} (hf : ContDiff ℝ 12 f) :\n    Differentiable ℝ (iteratedDeriv 5 (fun x => f (2*(f (x + x))) + x)) := by\n  fun_prop (disch:=(exact t1))\nf : ℝ → ℝ\nhf : ContDiff ℝ 12 f\n⊢ Differentiable ℝ (iteratedDeriv 5 fun x => f (2 * f (x + x)) + x)\n", "full_text": "example {f : ℝ → ℝ} (hf : ContDiff ℝ 12 f) :\n    Differentiable ℝ (iteratedDeriv 5 (fun x => f (2*(f (x + x))) + x)) := by\n  fun_prop (disch:=(exact t1))\nf : ℝ → ℝ\nhf : ContDiff ℝ 12 f\n⊢ Differentiable ℝ (iteratedDeriv 5 fun x => f (2 * f (x + x)) + x)\n/- Goals Accomplished! -/\n"}
{"prompt": "example (P : ℕ → ℕ → Prop) (h : ∀ n, ∃ m, P n m) : ∀ l, ∃ m, P l m := by\n  trace_state\n  rename_bvar n → q at h\n  trace_state\n  rename_bvar m → n\n  trace_state\n  rename_bvar l → m\n  trace_state\n  exact h\nP : ℕ → ℕ → Prop\nh : ∀ (n : ℕ), ∃ m, P n m\n⊢ ∀ (l : ℕ), ∃ m, P l m\n", "full_text": "example (P : ℕ → ℕ → Prop) (h : ∀ n, ∃ m, P n m) : ∀ l, ∃ m, P l m := by\n  trace_state\n  rename_bvar n → q at h\n  trace_state\n  rename_bvar m → n\n  trace_state\n  rename_bvar l → m\n  trace_state\n  exact h\nP : ℕ → ℕ → Prop\nh : ∀ (n : ℕ), ∃ m, P n m\n⊢ ∀ (l : ℕ), ∃ m, P l m\n/- P : ℕ → ℕ → Prop\nh : ∀ (n : ℕ), ∃ m, P n m\n⊢ ∀ (l : ℕ), ∃ m, P l m -/\n/- P : ℕ → ℕ → Prop\nh : ∀ (q : ℕ), ∃ m, P q m\n⊢ ∀ (l : ℕ), ∃ m, P l m -/\n/- P : ℕ → ℕ → Prop\nh : ∀ (q : ℕ), ∃ m, P q m\n⊢ ∀ (l : ℕ), ∃ m, P l m -/\n/- P : ℕ → ℕ → Prop\nh : ∀ (q : ℕ), ∃ m, P q m\n⊢ ∀ (l : ℕ), ∃ n, P l n -/\n/- P : ℕ → ℕ → Prop\nh : ∀ (q : ℕ), ∃ m, P q m\n⊢ ∀ (l : ℕ), ∃ n, P l n -/\n/- P : ℕ → ℕ → Prop\nh : ∀ (q : ℕ), ∃ m, P q m\n⊢ ∀ (m : ℕ), ∃ n, P m n -/\n/- P : ℕ → ℕ → Prop\nh : ∀ (q : ℕ), ∃ m, P q m\n⊢ ∀ (m : ℕ), ∃ n, P m n -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c : Int) (h1 : a ∣ b) (h2 : b ∣ c) : a ∣ c := by\n  rcases h1 with ⟨k, hk⟩\n  show ∃ k, c = a * k\n  trace_state\n  rename_bvar k → m\n  trace_state\n  exact test_sorry\na b c : ℤ\nh1 : a ∣ b\nh2 : b ∣ c\n⊢ a ∣ c\n", "full_text": "example (a b c : Int) (h1 : a ∣ b) (h2 : b ∣ c) : a ∣ c := by\n  rcases h1 with ⟨k, hk⟩\n  show ∃ k, c = a * k\n  trace_state\n  rename_bvar k → m\n  trace_state\n  exact test_sorry\na b c : ℤ\nh1 : a ∣ b\nh2 : b ∣ c\n⊢ a ∣ c\n/- case intro\na b c : ℤ\nh2 : b ∣ c\nk : ℤ\nhk : b = a * k\n⊢ a ∣ c -/\n/- case intro\na b c : ℤ\nh2 : b ∣ c\nk : ℤ\nhk : b = a * k\n⊢ ∃ k, c = a * k -/\n/- case intro\na b c : ℤ\nh2 : b ∣ c\nk : ℤ\nhk : b = a * k\n⊢ ∃ k, c = a * k -/\n/- case intro\na b c : ℤ\nh2 : b ∣ c\nk : ℤ\nhk : b = a * k\n⊢ ∃ m, c = a * m -/\n/- case intro\na b c : ℤ\nh2 : b ∣ c\nk : ℤ\nhk : b = a * k\n⊢ ∃ m, c = a * m -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : TFAE [P, Q] := by\n  tfae_have 1 → 2 := pq\n  tfae_have 2 → 1 := qp\n  tfae_finish\nP Q : Prop\n⊢ [P, Q].TFAE\n", "full_text": "example : TFAE [P, Q] := by\n  tfae_have 1 → 2 := pq\n  tfae_have 2 → 1 := qp\n  tfae_finish\nP Q : Prop\n⊢ [P, Q].TFAE\n/- P Q : Prop\ntfae_1_to_2 : P → Q\n⊢ [P, Q].TFAE -/\n/- P Q : Prop\ntfae_1_to_2 : P → Q\ntfae_2_to_1 : Q → P\n⊢ [P, Q].TFAE -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : TFAE [P, Q] := by\n  tfae_have 1 ↔ 2 := Iff.intro pq qp\n  tfae_finish\nP Q : Prop\n⊢ [P, Q].TFAE\n", "full_text": "example : TFAE [P, Q] := by\n  tfae_have 1 ↔ 2 := Iff.intro pq qp\n  tfae_finish\nP Q : Prop\n⊢ [P, Q].TFAE\n/- P Q : Prop\ntfae_1_iff_2 : P ↔ Q\n⊢ [P, Q].TFAE -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : TFAE [P, Q] := by\n  tfae_have 2 ← 1 := pq\n  guard_hyp tfae_2_from_1 : P → Q\n  tfae_have 1 ← 2 := qp\n  tfae_finish\nP Q : Prop\n⊢ [P, Q].TFAE\n", "full_text": "example : TFAE [P, Q] := by\n  tfae_have 2 ← 1 := pq\n  guard_hyp tfae_2_from_1 : P → Q\n  tfae_have 1 ← 2 := qp\n  tfae_finish\nP Q : Prop\n⊢ [P, Q].TFAE\n/- P Q : Prop\ntfae_2_from_1 : P → Q\n⊢ [P, Q].TFAE -/\n/- P Q : Prop\ntfae_2_from_1 : P → Q\n⊢ [P, Q].TFAE -/\n/- P Q : Prop\ntfae_2_from_1 : P → Q\ntfae_1_from_2 : Q → P\n⊢ [P, Q].TFAE -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : TFAE [P, Q, R] := by\n  tfae_have 1 → 2 := pq\n  tfae_have 2 → 3 := qr\n  tfae_have 3 → 1 := rp\n  tfae_finish\nP Q R : Prop\n⊢ [P, Q, R].TFAE\n", "full_text": "example : TFAE [P, Q, R] := by\n  tfae_have 1 → 2 := pq\n  tfae_have 2 → 3 := qr\n  tfae_have 3 → 1 := rp\n  tfae_finish\nP Q R : Prop\n⊢ [P, Q, R].TFAE\n/- P Q R : Prop\ntfae_1_to_2 : P → Q\n⊢ [P, Q, R].TFAE -/\n/- P Q R : Prop\ntfae_1_to_2 : P → Q\ntfae_2_to_3 : Q → R\n⊢ [P, Q, R].TFAE -/\n/- P Q R : Prop\ntfae_1_to_2 : P → Q\ntfae_2_to_3 : Q → R\ntfae_3_to_1 : R → P\n⊢ [P, Q, R].TFAE -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : TFAE [P, Q, R] := by\n  tfae_have 1 ↔ 2 := Iff.intro pq (rp ∘ qr)\n  tfae_have 3 ↔ 2 := Iff.intro (pq ∘ rp) qr\n  tfae_finish\nP Q R : Prop\n⊢ [P, Q, R].TFAE\n", "full_text": "example : TFAE [P, Q, R] := by\n  tfae_have 1 ↔ 2 := Iff.intro pq (rp ∘ qr)\n  tfae_have 3 ↔ 2 := Iff.intro (pq ∘ rp) qr\n  tfae_finish\nP Q R : Prop\n⊢ [P, Q, R].TFAE\n/- P Q R : Prop\n⊢ [P, Q, R].TFAE -/\n"}
{"prompt": "example : TFAE [P, Q, R] := by\n  tfae_have 1 → 2 := pq\n  tfae_have 2 → 1 := rp ∘ qr\n  tfae_have 2 ↔ 3 := Iff.intro qr (pq ∘ rp)\n  tfae_finish\nP Q R : Prop\n⊢ [P, Q, R].TFAE\n", "full_text": "example : TFAE [P, Q, R] := by\n  tfae_have 1 → 2 := pq\n  tfae_have 2 → 1 := rp ∘ qr\n  tfae_have 2 ↔ 3 := Iff.intro qr (pq ∘ rp)\n  tfae_finish\nP Q R : Prop\n⊢ [P, Q, R].TFAE\n/- P Q R : Prop\ntfae_1_to_2 : P → Q\n⊢ [P, Q, R].TFAE -/\n/- P Q R : Prop\ntfae_1_to_2 : P → Q\n⊢ [P, Q, R].TFAE -/\n"}
{"prompt": "example : TFAE [P₁, P₂, P₃, P₄, P₅, P₆, P₇] := by\n  tfae_have test : 1 ↔ 2 := h₁\n  guard_hyp test : _\n  tfae_have 1 → 6 := h₂\n  tfae_have 6 → 7 := h₃\n  tfae_have 7 → 4 := h₄\n  tfae_have 4 → 5 := h₅\n  tfae_have 5 → 3 := h₆\n  tfae_have 3 → 2 := h₇\n  tfae_finish\nP₁ P₂ P₃ P₄ P₅ P₆ P₇ : Prop\n⊢ [P₁, P₂, P₃, P₄, P₅, P₆, P₇].TFAE\n", "full_text": "example : TFAE [P₁, P₂, P₃, P₄, P₅, P₆, P₇] := by\n  tfae_have test : 1 ↔ 2 := h₁\n  guard_hyp test : _\n  tfae_have 1 → 6 := h₂\n  tfae_have 6 → 7 := h₃\n  tfae_have 7 → 4 := h₄\n  tfae_have 4 → 5 := h₅\n  tfae_have 5 → 3 := h₆\n  tfae_have 3 → 2 := h₇\n  tfae_finish\nP₁ P₂ P₃ P₄ P₅ P₆ P₇ : Prop\n⊢ [P₁, P₂, P₃, P₄, P₅, P₆, P₇].TFAE\n/- P₁ P₂ P₃ P₄ P₅ P₆ P₇ : Prop\ntest : P₁ ↔ P₂\n⊢ [P₁, P₂, P₃, P₄, P₅, P₆, P₇].TFAE -/\n/- P₁ P₂ P₃ P₄ P₅ P₆ P₇ : Prop\ntest : P₁ ↔ P₂\n⊢ [P₁, P₂, P₃, P₄, P₅, P₆, P₇].TFAE -/\n/- P₁ P₂ P₃ P₄ P₅ P₆ P₇ : Prop\ntest : P₁ ↔ P₂\ntfae_1_to_6 : P₁ → P₆\n⊢ [P₁, P₂, P₃, P₄, P₅, P₆, P₇].TFAE -/\n/- P₁ P₂ P₃ P₄ P₅ P₆ P₇ : Prop\ntest : P₁ ↔ P₂\ntfae_1_to_6 : P₁ → P₆\ntfae_6_to_7 : P₆ → P₇\n⊢ [P₁, P₂, P₃, P₄, P₅, P₆, P₇].TFAE -/\n/- P₁ P₂ P₃ P₄ P₅ P₆ P₇ : Prop\ntest : P₁ ↔ P₂\ntfae_1_to_6 : P₁ → P₆\ntfae_6_to_7 : P₆ → P₇\ntfae_7_to_4 : P₇ → P₄\n⊢ [P₁, P₂, P₃, P₄, P₅, P₆, P₇].TFAE -/\n/- P₁ P₂ P₃ P₄ P₅ P₆ P₇ : Prop\ntest : P₁ ↔ P₂\ntfae_1_to_6 : P₁ → P₆\ntfae_6_to_7 : P₆ → P₇\ntfae_7_to_4 : P₇ → P₄\ntfae_4_to_5 : P₄ → P₅\n⊢ [P₁, P₂, P₃, P₄, P₅, P₆, P₇].TFAE -/\n/- P₁ P₂ P₃ P₄ P₅ P₆ P₇ : Prop\ntest : P₁ ↔ P₂\ntfae_1_to_6 : P₁ → P₆\ntfae_6_to_7 : P₆ → P₇\ntfae_7_to_4 : P₇ → P₄\ntfae_4_to_5 : P₄ → P₅\ntfae_5_to_3 : P₅ → P₃\n⊢ [P₁, P₂, P₃, P₄, P₅, P₆, P₇].TFAE -/\n/- P₁ P₂ P₃ P₄ P₅ P₆ P₇ : Prop\ntest : P₁ ↔ P₂\ntfae_1_to_6 : P₁ → P₆\ntfae_6_to_7 : P₆ → P₇\ntfae_7_to_4 : P₇ → P₄\ntfae_4_to_5 : P₄ → P₅\ntfae_5_to_3 : P₅ → P₃\ntfae_3_to_2 : P₃ → P₂\n⊢ [P₁, P₂, P₃, P₄, P₅, P₆, P₇].TFAE -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (n : ℕ) : List.TFAE [n = 1, n + 1 = 2] := by\n  generalize n = m\n  tfae_have 1 ↔ 2 := by simp\n  tfae_finish\nn : ℕ\n⊢ [n = 1, n + 1 = 2].TFAE\n", "full_text": "example (n : ℕ) : List.TFAE [n = 1, n + 1 = 2] := by\n  generalize n = m\n  tfae_have 1 ↔ 2 := by simp\n  tfae_finish\nn : ℕ\n⊢ [n = 1, n + 1 = 2].TFAE\n/- n m : ℕ\n⊢ [m = 1, m + 1 = 2].TFAE -/\n/- n m : ℕ\ntfae_1_iff_2 : m = 1 ↔ m + 1 = 2\n⊢ [m = 1, m + 1 = 2].TFAE -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h₁ : P → Q) (h₂ : Q → P) : TFAE [P, Q] := by\n  tfae_finish\nP Q : Prop\nh₁ : P → Q\nh₂ : Q → P\n⊢ [P, Q].TFAE\n", "full_text": "example (h₁ : P → Q) (h₂ : Q → P) : TFAE [P, Q] := by\n  tfae_finish\nP Q : Prop\nh₁ : P → Q\nh₂ : Q → P\n⊢ [P, Q].TFAE\n/- Goals Accomplished! -/\n"}
{"prompt": "example : TFAE [P, Q] := by\n  tfae_have h : 1 → 2 := pq\n  guard_hyp h : P → Q\n  tfae_have _ : 1 ← 2 := qp\n  tfae_finish\nP Q : Prop\n⊢ [P, Q].TFAE\n", "full_text": "example : TFAE [P, Q] := by\n  tfae_have h : 1 → 2 := pq\n  guard_hyp h : P → Q\n  tfae_have _ : 1 ← 2 := qp\n  tfae_finish\nP Q : Prop\n⊢ [P, Q].TFAE\n/- P Q : Prop\nh : P → Q\n⊢ [P, Q].TFAE -/\n/- P Q : Prop\nh : P → Q\n⊢ [P, Q].TFAE -/\n/- P Q : Prop\nh : P → Q\nx✝ : Q → P\n⊢ [P, Q].TFAE -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : TFAE [P, Q] := by\n  have n : ℕ := 4\n  tfae_have 1 → 2 := by\n    guard_hyp n : ℕ -- hypotheses are accessible (context is correct)\n    guard_target =ₛ P → Q -- expected type is known\n    exact pq\n  tfae_have 1 ← 2 := qp\n  tfae_finish\nP Q : Prop\n⊢ [P, Q].TFAE\n", "full_text": "example : TFAE [P, Q] := by\n  have n : ℕ := 4\n  tfae_have 1 → 2 := by\n    guard_hyp n : ℕ -- hypotheses are accessible (context is correct)\n    guard_target =ₛ P → Q -- expected type is known\n    exact pq\n  tfae_have 1 ← 2 := qp\n  tfae_finish\nP Q : Prop\n⊢ [P, Q].TFAE\n/- P Q : Prop\nn : ℕ\n⊢ [P, Q].TFAE -/\n/- P Q : Prop\nn : ℕ\ntfae_1_to_2 : P → Q\n⊢ [P, Q].TFAE -/\n/- P Q : Prop\nn : ℕ\ntfae_1_to_2 : P → Q\ntfae_1_from_2 : Q → P\n⊢ [P, Q].TFAE -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : TFAE [P, Q] := by\n  have n : ℕ := 3\n  tfae_have 2 ← 1 := fun p => ?Qgoal\n  case Qgoal => exact pq p\n  refine ?a\n  fail_if_success (tfae_have 1 ← 2 := ((?a).out 1 2 sorry sorry).mpr)\n  tfae_have 2 → 1 := qp\n  tfae_finish\nP Q : Prop\n⊢ [P, Q].TFAE\n", "full_text": "example : TFAE [P, Q] := by\n  have n : ℕ := 3\n  tfae_have 2 ← 1 := fun p => ?Qgoal\n  case Qgoal => exact pq p\n  refine ?a\n  fail_if_success (tfae_have 1 ← 2 := ((?a).out 1 2 sorry sorry).mpr)\n  tfae_have 2 → 1 := qp\n  tfae_finish\nP Q : Prop\n⊢ [P, Q].TFAE\n/- P Q : Prop\nn : ℕ\n⊢ [P, Q].TFAE -/\n/- P Q : Prop\nn : ℕ\ntfae_2_from_1 : P → Q\n⊢ [P, Q].TFAE\n---\ncase Qgoal\nP Q : Prop\nn : ℕ\np : P\n⊢ Q -/\n/- P Q : Prop\nn : ℕ\ntfae_2_from_1 : P → Q\n⊢ [P, Q].TFAE -/\n/- case a\nP Q : Prop\nn : ℕ\ntfae_2_from_1 : P → Q\n⊢ [P, Q].TFAE -/\n/- case a\nP Q : Prop\nn : ℕ\ntfae_2_from_1 : P → Q\n⊢ [P, Q].TFAE -/\n/- case a\nP Q : Prop\nn : ℕ\ntfae_2_from_1 : P → Q\ntfae_2_to_1 : Q → P\n⊢ [P, Q].TFAE -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : TFAE [P, Q] := by\n  tfae_have 1 → 2\n  | p => pq p\n  tfae_have 2 → 1\n  | q => qp q\n  tfae_finish\nP Q : Prop\n⊢ [P, Q].TFAE\n", "full_text": "example : TFAE [P, Q] := by\n  tfae_have 1 → 2\n  | p => pq p\n  tfae_have 2 → 1\n  | q => qp q\n  tfae_finish\nP Q : Prop\n⊢ [P, Q].TFAE\n/- P Q : Prop\ntfae_1_to_2 : P → Q\n⊢ [P, Q].TFAE -/\n/- P Q : Prop\ntfae_1_to_2 : P → Q\ntfae_2_to_1 : Q → P\n⊢ [P, Q].TFAE -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : TFAE [P, Q] := by\n  tfae_have ⟨mp, mpr⟩ : 1 ↔ 2 := ⟨pq, qp⟩\n  tfae_finish\nP Q : Prop\n⊢ [P, Q].TFAE\n", "full_text": "example : TFAE [P, Q] := by\n  tfae_have ⟨mp, mpr⟩ : 1 ↔ 2 := ⟨pq, qp⟩\n  tfae_finish\nP Q : Prop\n⊢ [P, Q].TFAE\n/- P Q : Prop\nmp : P → Q\nmpr : Q → P\n⊢ [P, Q].TFAE -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (n : ℤ) (a : G) (h : a ^ (n * (n + 1) - n - n ^ 2) = a) : a = 1 := by\n  group at h\n  exact h.symm\nG : Type\ninst✝ : Group G\nn : ℤ\na : G\nh : a ^ (n * (n + 1) - n - n ^ 2) = a\n⊢ a = 1\n", "full_text": "example (n : ℤ) (a : G) (h : a ^ (n * (n + 1) - n - n ^ 2) = a) : a = 1 := by\n  group at h\n  exact h.symm\nG : Type\ninst✝ : Group G\nn : ℤ\na : G\nh : a ^ (n * (n + 1) - n - n ^ 2) = a\n⊢ a = 1\n/- G : Type\ninst✝ : Group G\nn : ℤ\na : G\nh : 1 = a\n⊢ a = 1 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c d : G) (h : c = (a * b ^ 2) * ((b * b)⁻¹ * a⁻¹) * d) : a*c*d⁻¹ = a := by\n  group at h\n  rw [h]\n  group\nG : Type\ninst✝ : Group G\na b c d : G\nh : c = a * b ^ 2 * ((b * b)⁻¹ * a⁻¹) * d\n⊢ a * c * d⁻¹ = a\n", "full_text": "example (a b c d : G) (h : c = (a * b ^ 2) * ((b * b)⁻¹ * a⁻¹) * d) : a*c*d⁻¹ = a := by\n  group at h\n  rw [h]\n  group\nG : Type\ninst✝ : Group G\na b c d : G\nh : c = a * b ^ 2 * ((b * b)⁻¹ * a⁻¹) * d\n⊢ a * c * d⁻¹ = a\n/- G : Type\ninst✝ : Group G\na b c d : G\nh : c = d\n⊢ a * c * d⁻¹ = a -/\n/- G : Type\ninst✝ : Group G\na b c d : G\nh : c = d\n⊢ a * d * d⁻¹ = a -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x : G) (h : x = 1) : x = 1 := by\n  group\n  exact h\nG : Type\ninst✝ : Group G\nx : G\nh : x = 1\n⊢ x = 1\n", "full_text": "example (x : G) (h : x = 1) : x = 1 := by\n  group\n  exact h\nG : Type\ninst✝ : Group G\nx : G\nh : x = 1\n⊢ x = 1\n/- G : Type\ninst✝ : Group G\nx : G\nh : x = 1\n⊢ x = 1 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {α} (x : α) : rfl2.toFun x = x ∧ rfl2.invFun x = x := by\n  dsimp\n  guard_target = x = x ∧ x = x\n  exact ⟨rfl, rfl⟩\nα : Sort u_1\nx : α\n⊢ sorry = x ∧ sorry = x\n", "full_text": "example {α} (x : α) : rfl2.toFun x = x ∧ rfl2.invFun x = x := by\n  dsimp\n  guard_target = x = x ∧ x = x\n  exact ⟨rfl, rfl⟩\nα : Sort u_1\nx : α\n⊢ sorry = x ∧ sorry = x\n/- α : Sort u_1\nx : α\n⊢ sorry () = x ∧ sorry () = x -/\n/- α : Sort u_1\nx : α\n⊢ sorry () = x ∧ sorry () = x -/\n"}
{"prompt": "example {α} (x : α) : rfl2.toFun x = x ∧ rfl2.invFun x = x := by\n  dsimp only [rfl2_toFun, rfl2_invFun]\n  guard_target = x = x ∧ x = x\n  exact ⟨rfl, rfl⟩\nα : Sort u_1\nx : α\n⊢ sorry = x ∧ sorry = x\n", "full_text": "example {α} (x : α) : rfl2.toFun x = x ∧ rfl2.invFun x = x := by\n  dsimp only [rfl2_toFun, rfl2_invFun]\n  guard_target = x = x ∧ x = x\n  exact ⟨rfl, rfl⟩\nα : Sort u_1\nx : α\n⊢ sorry = x ∧ sorry = x\n/- α : Sort u_1\nx : α\n⊢ sorry = x ∧ sorry = x -/\n"}
{"prompt": "example {α} {b : Bool} {x} (h : (⟨3, 5⟩ : MyProd _ _) = x) : (@test α).extra b = x := by\n  dsimp\n  rw [h]\nx✝¹ : Sort u_1\nMyProd : x✝¹\nx✝ : Sort u_2\ntest : x✝\nα : ?m.951\nb : Bool\nx : sorry\nh : sorry = x\n⊢ sorry = x\n", "full_text": "example {α} {b : Bool} {x} (h : (⟨3, 5⟩ : MyProd _ _) = x) : (@test α).extra b = x := by\n  dsimp\n  rw [h]\nx✝¹ : Sort u_1\nMyProd : x✝¹\nx✝ : Sort u_2\ntest : x✝\nα : ?m.951\nb : Bool\nx : sorry\nh : sorry = x\n⊢ sorry = x\n/- x✝¹ : Sort u_1\nMyProd : x✝¹\nx✝ : Sort u_2\ntest : x✝\nα : ?m.951\nb : Bool\nx : sorry\nh : sorry = x\n⊢ sorry () = x -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {α β γ : Type} (f : α ≃ β) (g : β ≃ γ) (x : α) {z : γ} (h : g.toFun (f.toFun x) = z) :\n  (f.trans g).toFun x = z := by\n  dsimp only [Equiv'.trans_toFun]\n  rw [h]\nα β γ : Type\nf : α ≃ β\ng : β ≃ γ\nx : α\nz : γ\nh : g.toFun (f.toFun x) = z\n⊢ (f.trans g).toFun x = z\n", "full_text": "example {α β γ : Type} (f : α ≃ β) (g : β ≃ γ) (x : α) {z : γ} (h : g.toFun (f.toFun x) = z) :\n  (f.trans g).toFun x = z := by\n  dsimp only [Equiv'.trans_toFun]\n  rw [h]\nα β γ : Type\nf : α ≃ β\ng : β ≃ γ\nx : α\nz : γ\nh : g.toFun (f.toFun x) = z\n⊢ (f.trans g).toFun x = z\n/- α β γ : Type\nf : α ≃ β\ng : β ≃ γ\nx : α\nz : γ\nh : g.toFun (f.toFun x) = z\n⊢ (f.trans g).toFun x = z -/\n"}
{"prompt": "example (n : ℕ) : myNatEquiv.toFun (myNatEquiv.toFun <| myNatEquiv.invFun n) = n := by\n  { /-successIfFail { rfl },-/ simp only [myNatEquiv_toFun, myNatEquiv_invFun] }\nn : ℕ\n⊢ sorry = n\n", "full_text": "example (n : ℕ) : myNatEquiv.toFun (myNatEquiv.toFun <| myNatEquiv.invFun n) = n := by\n  { /-successIfFail { rfl },-/ simp only [myNatEquiv_toFun, myNatEquiv_invFun] }\nn : ℕ\n⊢ sorry = n\n/- Goals Accomplished! -/\n"}
{"prompt": "example (e₁ : α ≃ β) (e₂ : β ≃ γ) (x : γ) {z} (h : e₁.symm (e₂.symm x) = z) :\n    (e₁.trans e₂).symm x = z := by\n  simp only [Equiv.trans_invFun]; rw [h]\nα : Sort u_1\nβ : Sort u_2\nγ : Sort u_3\ne₁ : α ≃ β\ne₂ : β ≃ γ\nx : γ\nz : α\nh : e₁.symm (e₂.symm x) = z\n⊢ (e₁.trans e₂).symm x = z\n", "full_text": "example (e₁ : α ≃ β) (e₂ : β ≃ γ) (x : γ) {z} (h : e₁.symm (e₂.symm x) = z) :\n    (e₁.trans e₂).symm x = z := by\n  simp only [Equiv.trans_invFun]; rw [h]\nα : Sort u_1\nβ : Sort u_2\nγ : Sort u_3\ne₁ : α ≃ β\ne₂ : β ≃ γ\nx : γ\nz : α\nh : e₁.symm (e₂.symm x) = z\n⊢ (e₁.trans e₂).symm x = z\n/- α : Sort u_1\nβ : Sort u_2\nγ : Sort u_3\ne₁ : α ≃ β\ne₂ : β ≃ γ\nx : γ\nz : α\nh : e₁.symm (e₂.symm x) = z\n⊢ (e₁.trans e₂).symm x = z -/\n"}
{"prompt": "example (e₁ : α ≃ β) (e₂ : β ≃ γ) (x : γ) {z} (h : e₁.symm (e₂.symm x) = z) :\n    (e₁.trans e₂).symm x = z := by\n  simp only [Equiv.trans_invFun]; rw [h]\nα✝¹ : Sort ?u.56\nβ✝¹ : Sort ?u.59\nγ✝¹ : Sort ?u.62\nα✝ : Sort ?u.65\nβ✝ : Sort ?u.68\nγ✝ : Sort ?u.71\nα : Sort u_1\nβ : Sort u_2\nγ : Sort u_3\ne₁ : α ≃ β\ne₂ : β ≃ γ\nx : γ\nz : α\nh : e₁.symm (e₂.symm x) = z\n⊢ (e₁.trans e₂).symm x = z\n", "full_text": "example (e₁ : α ≃ β) (e₂ : β ≃ γ) (x : γ) {z} (h : e₁.symm (e₂.symm x) = z) :\n    (e₁.trans e₂).symm x = z := by\n  simp only [Equiv.trans_invFun]; rw [h]\nα✝¹ : Sort ?u.56\nβ✝¹ : Sort ?u.59\nγ✝¹ : Sort ?u.62\nα✝ : Sort ?u.65\nβ✝ : Sort ?u.68\nγ✝ : Sort ?u.71\nα : Sort u_1\nβ : Sort u_2\nγ : Sort u_3\ne₁ : α ≃ β\ne₂ : β ≃ γ\nx : γ\nz : α\nh : e₁.symm (e₂.symm x) = z\n⊢ (e₁.trans e₂).symm x = z\n/- α✝¹ : Sort ?u.56\nβ✝¹ : Sort ?u.59\nγ✝¹ : Sort ?u.62\nα✝ : Sort ?u.65\nβ✝ : Sort ?u.68\nγ✝ : Sort ?u.71\nα : Sort u_1\nβ : Sort u_2\nγ : Sort u_3\ne₁ : α ≃ β\ne₂ : β ≃ γ\nx : γ\nz : α\nh : e₁.symm (e₂.symm x) = z\n⊢ (e₁.trans e₂).symm x = z -/\n"}
{"prompt": "example (e₁ : α ≃ β) (e₂ : β ≃ γ) (x : α) {z} (h : e₂ (e₁ x) = z) : (e₁.trans e₂) x = z := by\n  simp only [Equiv.trans_apply]; rw [h]\nα✝⁴ : Sort ?u.191\nβ✝⁴ : Sort ?u.194\nγ✝⁴ : Sort ?u.197\nα✝³ : Sort ?u.200\nβ✝³ : Sort ?u.203\nγ✝³ : Sort ?u.206\nα✝² : Sort ?u.209\nβ✝² : Sort ?u.212\nγ✝² : Sort ?u.215\nα✝¹ : Sort ?u.218\nβ✝¹ : Sort ?u.221\nγ✝¹ : Sort ?u.224\nα✝ : Sort ?u.227\nβ✝ : Sort ?u.230\nγ✝ : Sort ?u.233\nα : Sort u_1\nβ : Sort u_2\nγ : Sort u_3\ne₁ : α ≃ β\ne₂ : β ≃ γ\nx : α\nz : γ\nh : e₂ (e₁ x) = z\n⊢ (e₁.trans e₂) x = z\n", "full_text": "example (e₁ : α ≃ β) (e₂ : β ≃ γ) (x : α) {z} (h : e₂ (e₁ x) = z) : (e₁.trans e₂) x = z := by\n  simp only [Equiv.trans_apply]; rw [h]\nα✝⁴ : Sort ?u.191\nβ✝⁴ : Sort ?u.194\nγ✝⁴ : Sort ?u.197\nα✝³ : Sort ?u.200\nβ✝³ : Sort ?u.203\nγ✝³ : Sort ?u.206\nα✝² : Sort ?u.209\nβ✝² : Sort ?u.212\nγ✝² : Sort ?u.215\nα✝¹ : Sort ?u.218\nβ✝¹ : Sort ?u.221\nγ✝¹ : Sort ?u.224\nα✝ : Sort ?u.227\nβ✝ : Sort ?u.230\nγ✝ : Sort ?u.233\nα : Sort u_1\nβ : Sort u_2\nγ : Sort u_3\ne₁ : α ≃ β\ne₂ : β ≃ γ\nx : α\nz : γ\nh : e₂ (e₁ x) = z\n⊢ (e₁.trans e₂) x = z\n/- α✝⁴ : Sort ?u.191\nβ✝⁴ : Sort ?u.194\nγ✝⁴ : Sort ?u.197\nα✝³ : Sort ?u.200\nβ✝³ : Sort ?u.203\nγ✝³ : Sort ?u.206\nα✝² : Sort ?u.209\nβ✝² : Sort ?u.212\nγ✝² : Sort ?u.215\nα✝¹ : Sort ?u.218\nβ✝¹ : Sort ?u.221\nγ✝¹ : Sort ?u.224\nα✝ : Sort ?u.227\nβ✝ : Sort ?u.230\nγ✝ : Sort ?u.233\nα : Sort u_1\nβ : Sort u_2\nγ : Sort u_3\ne₁ : α ≃ β\ne₂ : β ≃ γ\nx : α\nz : γ\nh : e₂ (e₁ x) = z\n⊢ e₂ (e₁ x) = z -/\n"}
{"prompt": "example (e₁ : α ≃ β) (e₂ : β ≃ γ) (x : γ) {z} (h : e₁.symm (e₂.symm x) = z) :\n    (e₁.trans e₂).symm x = z := by\n  simp only [Equiv.trans_symm_apply]; rw [h]\nα✝⁴ : Sort ?u.191\nβ✝⁴ : Sort ?u.194\nγ✝⁴ : Sort ?u.197\nα✝³ : Sort ?u.200\nβ✝³ : Sort ?u.203\nγ✝³ : Sort ?u.206\nα✝² : Sort ?u.209\nβ✝² : Sort ?u.212\nγ✝² : Sort ?u.215\nα✝¹ : Sort ?u.218\nβ✝¹ : Sort ?u.221\nγ✝¹ : Sort ?u.224\nα✝ : Sort ?u.227\nβ✝ : Sort ?u.230\nγ✝ : Sort ?u.233\nα : Sort u_1\nβ : Sort u_2\nγ : Sort u_3\ne₁ : α ≃ β\ne₂ : β ≃ γ\nx : γ\nz : α\nh : e₁.symm (e₂.symm x) = z\n⊢ (e₁.trans e₂).symm x = z\n", "full_text": "example (e₁ : α ≃ β) (e₂ : β ≃ γ) (x : γ) {z} (h : e₁.symm (e₂.symm x) = z) :\n    (e₁.trans e₂).symm x = z := by\n  simp only [Equiv.trans_symm_apply]; rw [h]\nα✝⁴ : Sort ?u.191\nβ✝⁴ : Sort ?u.194\nγ✝⁴ : Sort ?u.197\nα✝³ : Sort ?u.200\nβ✝³ : Sort ?u.203\nγ✝³ : Sort ?u.206\nα✝² : Sort ?u.209\nβ✝² : Sort ?u.212\nγ✝² : Sort ?u.215\nα✝¹ : Sort ?u.218\nβ✝¹ : Sort ?u.221\nγ✝¹ : Sort ?u.224\nα✝ : Sort ?u.227\nβ✝ : Sort ?u.230\nγ✝ : Sort ?u.233\nα : Sort u_1\nβ : Sort u_2\nγ : Sort u_3\ne₁ : α ≃ β\ne₂ : β ≃ γ\nx : γ\nz : α\nh : e₁.symm (e₂.symm x) = z\n⊢ (e₁.trans e₂).symm x = z\n/- α✝⁴ : Sort ?u.191\nβ✝⁴ : Sort ?u.194\nγ✝⁴ : Sort ?u.197\nα✝³ : Sort ?u.200\nβ✝³ : Sort ?u.203\nγ✝³ : Sort ?u.206\nα✝² : Sort ?u.209\nβ✝² : Sort ?u.212\nγ✝² : Sort ?u.215\nα✝¹ : Sort ?u.218\nβ✝¹ : Sort ?u.221\nγ✝¹ : Sort ?u.224\nα✝ : Sort ?u.227\nβ✝ : Sort ?u.230\nγ✝ : Sort ?u.233\nα : Sort u_1\nβ : Sort u_2\nγ : Sort u_3\ne₁ : α ≃ β\ne₂ : β ≃ γ\nx : γ\nz : α\nh : e₁.symm (e₂.symm x) = z\n⊢ (e₁.trans e₂).symm x = z -/\n"}
{"prompt": "example (e₁ : α ≃ β) (e₂ : β ≃ γ) (x : α) {z} (h : e₂ (e₁ x) = z) : (e₁.trans e₂) x = z := by\n  simp only [Equiv.coe_trans]\n  rw [h]\nα✝⁵ : Sort ?u.254\nβ✝⁵ : Sort ?u.257\nγ✝⁵ : Sort ?u.260\nα✝⁴ : Sort ?u.263\nβ✝⁴ : Sort ?u.266\nγ✝⁴ : Sort ?u.269\nα✝³ : Sort ?u.272\nβ✝³ : Sort ?u.275\nγ✝³ : Sort ?u.278\nα✝² : Sort ?u.281\nβ✝² : Sort ?u.284\nγ✝² : Sort ?u.287\nα✝¹ : Sort ?u.290\nβ✝¹ : Sort ?u.293\nγ✝¹ : Sort ?u.296\nα✝ : Sort ?u.299\nβ✝ : Sort ?u.302\nγ✝ : Sort ?u.305\nα : Sort u_1\nβ : Sort u_2\nγ : Sort u_3\ne₁ : α ≃ β\ne₂ : β ≃ γ\nx : α\nz : γ\nh : e₂ (e₁ x) = z\n⊢ (e₁.trans e₂) x = z\n", "full_text": "example (e₁ : α ≃ β) (e₂ : β ≃ γ) (x : α) {z} (h : e₂ (e₁ x) = z) : (e₁.trans e₂) x = z := by\n  simp only [Equiv.coe_trans]\n  rw [h]\nα✝⁵ : Sort ?u.254\nβ✝⁵ : Sort ?u.257\nγ✝⁵ : Sort ?u.260\nα✝⁴ : Sort ?u.263\nβ✝⁴ : Sort ?u.266\nγ✝⁴ : Sort ?u.269\nα✝³ : Sort ?u.272\nβ✝³ : Sort ?u.275\nγ✝³ : Sort ?u.278\nα✝² : Sort ?u.281\nβ✝² : Sort ?u.284\nγ✝² : Sort ?u.287\nα✝¹ : Sort ?u.290\nβ✝¹ : Sort ?u.293\nγ✝¹ : Sort ?u.296\nα✝ : Sort ?u.299\nβ✝ : Sort ?u.302\nγ✝ : Sort ?u.305\nα : Sort u_1\nβ : Sort u_2\nγ : Sort u_3\ne₁ : α ≃ β\ne₂ : β ≃ γ\nx : α\nz : γ\nh : e₂ (e₁ x) = z\n⊢ (e₁.trans e₂) x = z\n/- α✝⁵ : Sort ?u.254\nβ✝⁵ : Sort ?u.257\nγ✝⁵ : Sort ?u.260\nα✝⁴ : Sort ?u.263\nβ✝⁴ : Sort ?u.266\nγ✝⁴ : Sort ?u.269\nα✝³ : Sort ?u.272\nβ✝³ : Sort ?u.275\nγ✝³ : Sort ?u.278\nα✝² : Sort ?u.281\nβ✝² : Sort ?u.284\nγ✝² : Sort ?u.287\nα✝¹ : Sort ?u.290\nβ✝¹ : Sort ?u.293\nγ✝¹ : Sort ?u.296\nα✝ : Sort ?u.299\nβ✝ : Sort ?u.302\nγ✝ : Sort ?u.305\nα : Sort u_1\nβ : Sort u_2\nγ : Sort u_3\ne₁ : α ≃ β\ne₂ : β ≃ γ\nx : α\nz : γ\nh : e₂ (e₁ x) = z\n⊢ (⇑e₂ ∘ ⇑e₁) x = z -/\n/- α✝⁵ : Sort ?u.254\nβ✝⁵ : Sort ?u.257\nγ✝⁵ : Sort ?u.260\nα✝⁴ : Sort ?u.263\nβ✝⁴ : Sort ?u.266\nγ✝⁴ : Sort ?u.269\nα✝³ : Sort ?u.272\nβ✝³ : Sort ?u.275\nγ✝³ : Sort ?u.278\nα✝² : Sort ?u.281\nβ✝² : Sort ?u.284\nγ✝² : Sort ?u.287\nα✝¹ : Sort ?u.290\nβ✝¹ : Sort ?u.293\nγ✝¹ : Sort ?u.296\nα✝ : Sort ?u.299\nβ✝ : Sort ?u.302\nγ✝ : Sort ?u.305\nα : Sort u_1\nβ : Sort u_2\nγ : Sort u_3\ne₁ : α ≃ β\ne₂ : β ≃ γ\nx : α\nz : γ\nh : e₂ (e₁ x) = z\n⊢ (⇑e₂ ∘ ⇑e₁) x = z -/\n"}
{"prompt": "example {α β γ δ : Type _} (x : α) (e₁ : α ≃ β) (e₂ : γ ≃ δ) (z : α × γ) {y} (h : e₁ z.1 = y) :\n    ((foo x e₁ e₂).2 z).1 = y := by\n  simp only [coe_foo_snd_fst]\n  rw [h]\nα✝⁶ : Sort ?u.254\nβ✝⁶ : Sort ?u.257\nγ✝⁶ : Sort ?u.260\nα✝⁵ : Sort ?u.263\nβ✝⁵ : Sort ?u.266\nγ✝⁵ : Sort ?u.269\nα✝⁴ : Sort ?u.272\nβ✝⁴ : Sort ?u.275\nγ✝⁴ : Sort ?u.278\nα✝³ : Sort ?u.281\nβ✝³ : Sort ?u.284\nγ✝³ : Sort ?u.287\nα✝² : Sort ?u.290\nβ✝² : Sort ?u.293\nγ✝² : Sort ?u.296\nα✝¹ : Sort ?u.299\nβ✝¹ : Sort ?u.302\nγ✝¹ : Sort ?u.305\nα✝ : Sort ?u.308\nβ✝ : Sort ?u.311\nγ✝ : Sort ?u.314\nx✝ : Sort u_1\nfoo : x✝\nα : Type u_2\nβ : Type u_3\nγ : Type u_4\nδ : Type u_5\nx : α\ne₁ : α ≃ β\ne₂ : γ ≃ δ\nz : α × γ\ny : β\nh : e₁ z.1 = y\n⊢ sorry = y\n", "full_text": "example {α β γ δ : Type _} (x : α) (e₁ : α ≃ β) (e₂ : γ ≃ δ) (z : α × γ) {y} (h : e₁ z.1 = y) :\n    ((foo x e₁ e₂).2 z).1 = y := by\n  simp only [coe_foo_snd_fst]\n  rw [h]\nα✝⁶ : Sort ?u.254\nβ✝⁶ : Sort ?u.257\nγ✝⁶ : Sort ?u.260\nα✝⁵ : Sort ?u.263\nβ✝⁵ : Sort ?u.266\nγ✝⁵ : Sort ?u.269\nα✝⁴ : Sort ?u.272\nβ✝⁴ : Sort ?u.275\nγ✝⁴ : Sort ?u.278\nα✝³ : Sort ?u.281\nβ✝³ : Sort ?u.284\nγ✝³ : Sort ?u.287\nα✝² : Sort ?u.290\nβ✝² : Sort ?u.293\nγ✝² : Sort ?u.296\nα✝¹ : Sort ?u.299\nβ✝¹ : Sort ?u.302\nγ✝¹ : Sort ?u.305\nα✝ : Sort ?u.308\nβ✝ : Sort ?u.311\nγ✝ : Sort ?u.314\nx✝ : Sort u_1\nfoo : x✝\nα : Type u_2\nβ : Type u_3\nγ : Type u_4\nδ : Type u_5\nx : α\ne₁ : α ≃ β\ne₂ : γ ≃ δ\nz : α × γ\ny : β\nh : e₁ z.1 = y\n⊢ sorry = y\n/- α✝⁶ : Sort ?u.254\nβ✝⁶ : Sort ?u.257\nγ✝⁶ : Sort ?u.260\nα✝⁵ : Sort ?u.263\nβ✝⁵ : Sort ?u.266\nγ✝⁵ : Sort ?u.269\nα✝⁴ : Sort ?u.272\nβ✝⁴ : Sort ?u.275\nγ✝⁴ : Sort ?u.278\nα✝³ : Sort ?u.281\nβ✝³ : Sort ?u.284\nγ✝³ : Sort ?u.287\nα✝² : Sort ?u.290\nβ✝² : Sort ?u.293\nγ✝² : Sort ?u.296\nα✝¹ : Sort ?u.299\nβ✝¹ : Sort ?u.302\nγ✝¹ : Sort ?u.305\nα✝ : Sort ?u.308\nβ✝ : Sort ?u.311\nγ✝ : Sort ?u.314\nx✝ : Sort u_1\nfoo : x✝\nα : Type u_2\nβ : Type u_3\nγ : Type u_4\nδ : Type u_5\nx : α\ne₁ : α ≃ β\ne₂ : γ ≃ δ\nz : α × γ\ny : β\nh : e₁ z.1 = y\n⊢ sorry = y -/\n"}
{"prompt": "example {x : Set ℕ} (h : Set.univ = x) : Nat.SetPlus1.s = x := by\n  dsimp only [Nat.SetPlus1_s]\n  rw [h]\nα✝⁵ : Sort ?u.254\nβ✝⁵ : Sort ?u.257\nγ✝⁵ : Sort ?u.260\nα✝⁴ : Sort ?u.263\nβ✝⁴ : Sort ?u.266\nγ✝⁴ : Sort ?u.269\nα✝³ : Sort ?u.272\nβ✝³ : Sort ?u.275\nγ✝³ : Sort ?u.278\nα✝² : Sort ?u.281\nβ✝² : Sort ?u.284\nγ✝² : Sort ?u.287\nα✝¹ : Sort ?u.290\nβ✝¹ : Sort ?u.293\nγ✝¹ : Sort ?u.296\nα✝ : Sort ?u.299\nβ✝ : Sort ?u.302\nγ✝ : Sort ?u.305\nα : Sort ?u.308\nβ : Sort ?u.311\nγ : Sort ?u.314\nx : Set ℕ\nh : Set.univ = x\n⊢ sorry = x\n", "full_text": "example {x : Set ℕ} (h : Set.univ = x) : Nat.SetPlus1.s = x := by\n  dsimp only [Nat.SetPlus1_s]\n  rw [h]\nα✝⁵ : Sort ?u.254\nβ✝⁵ : Sort ?u.257\nγ✝⁵ : Sort ?u.260\nα✝⁴ : Sort ?u.263\nβ✝⁴ : Sort ?u.266\nγ✝⁴ : Sort ?u.269\nα✝³ : Sort ?u.272\nβ✝³ : Sort ?u.275\nγ✝³ : Sort ?u.278\nα✝² : Sort ?u.281\nβ✝² : Sort ?u.284\nγ✝² : Sort ?u.287\nα✝¹ : Sort ?u.290\nβ✝¹ : Sort ?u.293\nγ✝¹ : Sort ?u.296\nα✝ : Sort ?u.299\nβ✝ : Sort ?u.302\nγ✝ : Sort ?u.305\nα : Sort ?u.308\nβ : Sort ?u.311\nγ : Sort ?u.314\nx : Set ℕ\nh : Set.univ = x\n⊢ sorry = x\n/- α✝⁵ : Sort ?u.254\nβ✝⁵ : Sort ?u.257\nγ✝⁵ : Sort ?u.260\nα✝⁴ : Sort ?u.263\nβ✝⁴ : Sort ?u.266\nγ✝⁴ : Sort ?u.269\nα✝³ : Sort ?u.272\nβ✝³ : Sort ?u.275\nγ✝³ : Sort ?u.278\nα✝² : Sort ?u.281\nβ✝² : Sort ?u.284\nγ✝² : Sort ?u.287\nα✝¹ : Sort ?u.290\nβ✝¹ : Sort ?u.293\nγ✝¹ : Sort ?u.296\nα✝ : Sort ?u.299\nβ✝ : Sort ?u.302\nγ✝ : Sort ?u.305\nα : Sort ?u.308\nβ : Sort ?u.311\nγ : Sort ?u.314\nx : Set ℕ\nh : Set.univ = x\n⊢ sorry = x -/\n"}
{"prompt": "example {x : Set ℕ} (h : Set.univ = x) : Nat.SetPlus2.s = x := by\n  fail_if_success { rw [h] }\n  exact h\nα✝⁵ : Sort ?u.254\nβ✝⁵ : Sort ?u.257\nγ✝⁵ : Sort ?u.260\nα✝⁴ : Sort ?u.263\nβ✝⁴ : Sort ?u.266\nγ✝⁴ : Sort ?u.269\nα✝³ : Sort ?u.272\nβ✝³ : Sort ?u.275\nγ✝³ : Sort ?u.278\nα✝² : Sort ?u.281\nβ✝² : Sort ?u.284\nγ✝² : Sort ?u.287\nα✝¹ : Sort ?u.290\nβ✝¹ : Sort ?u.293\nγ✝¹ : Sort ?u.296\nα✝ : Sort ?u.299\nβ✝ : Sort ?u.302\nγ✝ : Sort ?u.305\nα : Sort ?u.308\nβ : Sort ?u.311\nγ : Sort ?u.314\nx : Set ℕ\nh : Set.univ = x\n⊢ sorry = x\n", "full_text": "example {x : Set ℕ} (h : Set.univ = x) : Nat.SetPlus2.s = x := by\n  fail_if_success { rw [h] }\n  exact h\nα✝⁵ : Sort ?u.254\nβ✝⁵ : Sort ?u.257\nγ✝⁵ : Sort ?u.260\nα✝⁴ : Sort ?u.263\nβ✝⁴ : Sort ?u.266\nγ✝⁴ : Sort ?u.269\nα✝³ : Sort ?u.272\nβ✝³ : Sort ?u.275\nγ✝³ : Sort ?u.278\nα✝² : Sort ?u.281\nβ✝² : Sort ?u.284\nγ✝² : Sort ?u.287\nα✝¹ : Sort ?u.290\nβ✝¹ : Sort ?u.293\nγ✝¹ : Sort ?u.296\nα✝ : Sort ?u.299\nβ✝ : Sort ?u.302\nγ✝ : Sort ?u.305\nα : Sort ?u.308\nβ : Sort ?u.311\nγ : Sort ?u.314\nx : Set ℕ\nh : Set.univ = x\n⊢ sorry = x\n/- α✝⁵ : Sort ?u.254\nβ✝⁵ : Sort ?u.257\nγ✝⁵ : Sort ?u.260\nα✝⁴ : Sort ?u.263\nβ✝⁴ : Sort ?u.266\nγ✝⁴ : Sort ?u.269\nα✝³ : Sort ?u.272\nβ✝³ : Sort ?u.275\nγ✝³ : Sort ?u.278\nα✝² : Sort ?u.281\nβ✝² : Sort ?u.284\nγ✝² : Sort ?u.287\nα✝¹ : Sort ?u.290\nβ✝¹ : Sort ?u.293\nγ✝¹ : Sort ?u.296\nα✝ : Sort ?u.299\nβ✝ : Sort ?u.302\nγ✝ : Sort ?u.305\nα : Sort ?u.308\nβ : Sort ?u.311\nγ : Sort ?u.314\nx : Set ℕ\nh : Set.univ = x\n⊢ sorry = x -/\n/- α✝⁵ : Sort ?u.254\nβ✝⁵ : Sort ?u.257\nγ✝⁵ : Sort ?u.260\nα✝⁴ : Sort ?u.263\nβ✝⁴ : Sort ?u.266\nγ✝⁴ : Sort ?u.269\nα✝³ : Sort ?u.272\nβ✝³ : Sort ?u.275\nγ✝³ : Sort ?u.278\nα✝² : Sort ?u.281\nβ✝² : Sort ?u.284\nγ✝² : Sort ?u.287\nα✝¹ : Sort ?u.290\nβ✝¹ : Sort ?u.293\nγ✝¹ : Sort ?u.296\nα✝ : Sort ?u.299\nβ✝ : Sort ?u.302\nγ✝ : Sort ?u.305\nα : Sort ?u.308\nβ : Sort ?u.311\nγ : Sort ?u.314\nx : Set ℕ\nh : Set.univ = x\n⊢ sorry = x -/\n"}
{"prompt": "example {x : Set ℕ} (h : Set.univ = x) : Nat.SetPlus3.s = x := by\n  dsimp only [Nat.SetPlus3_s]\n  rw [h]\nα✝⁵ : Sort ?u.254\nβ✝⁵ : Sort ?u.257\nγ✝⁵ : Sort ?u.260\nα✝⁴ : Sort ?u.263\nβ✝⁴ : Sort ?u.266\nγ✝⁴ : Sort ?u.269\nα✝³ : Sort ?u.272\nβ✝³ : Sort ?u.275\nγ✝³ : Sort ?u.278\nα✝² : Sort ?u.281\nβ✝² : Sort ?u.284\nγ✝² : Sort ?u.287\nα✝¹ : Sort ?u.290\nβ✝¹ : Sort ?u.293\nγ✝¹ : Sort ?u.296\nα✝ : Sort ?u.299\nβ✝ : Sort ?u.302\nγ✝ : Sort ?u.305\nα : Sort ?u.308\nβ : Sort ?u.311\nγ : Sort ?u.314\nx : Set ℕ\nh : Set.univ = x\n⊢ sorry = x\n", "full_text": "example {x : Set ℕ} (h : Set.univ = x) : Nat.SetPlus3.s = x := by\n  dsimp only [Nat.SetPlus3_s]\n  rw [h]\nα✝⁵ : Sort ?u.254\nβ✝⁵ : Sort ?u.257\nγ✝⁵ : Sort ?u.260\nα✝⁴ : Sort ?u.263\nβ✝⁴ : Sort ?u.266\nγ✝⁴ : Sort ?u.269\nα✝³ : Sort ?u.272\nβ✝³ : Sort ?u.275\nγ✝³ : Sort ?u.278\nα✝² : Sort ?u.281\nβ✝² : Sort ?u.284\nγ✝² : Sort ?u.287\nα✝¹ : Sort ?u.290\nβ✝¹ : Sort ?u.293\nγ✝¹ : Sort ?u.296\nα✝ : Sort ?u.299\nβ✝ : Sort ?u.302\nγ✝ : Sort ?u.305\nα : Sort ?u.308\nβ : Sort ?u.311\nγ : Sort ?u.314\nx : Set ℕ\nh : Set.univ = x\n⊢ sorry = x\n/- α✝⁵ : Sort ?u.254\nβ✝⁵ : Sort ?u.257\nγ✝⁵ : Sort ?u.260\nα✝⁴ : Sort ?u.263\nβ✝⁴ : Sort ?u.266\nγ✝⁴ : Sort ?u.269\nα✝³ : Sort ?u.272\nβ✝³ : Sort ?u.275\nγ✝³ : Sort ?u.278\nα✝² : Sort ?u.281\nβ✝² : Sort ?u.284\nγ✝² : Sort ?u.287\nα✝¹ : Sort ?u.290\nβ✝¹ : Sort ?u.293\nγ✝¹ : Sort ?u.296\nα✝ : Sort ?u.299\nβ✝ : Sort ?u.302\nγ✝ : Sort ?u.305\nα : Sort ?u.308\nβ : Sort ?u.311\nγ : Sort ?u.314\nx : Set ℕ\nh : Set.univ = x\n⊢ sorry = x -/\n"}
{"prompt": "example (e : α ≃ β) {x : β → α} (h : e.invFun = x) : (Equiv.symm2.invFun e).toFun = x := by\n  dsimp only [Equiv.symm2_invFun_toFun]\n  rw [h]\nα✝⁶ : Sort ?u.326\nβ✝⁶ : Sort ?u.329\nγ✝⁶ : Sort ?u.332\nα✝⁵ : Sort ?u.335\nβ✝⁵ : Sort ?u.338\nγ✝⁵ : Sort ?u.341\nα✝⁴ : Sort ?u.344\nβ✝⁴ : Sort ?u.347\nγ✝⁴ : Sort ?u.350\nα✝³ : Sort ?u.353\nβ✝³ : Sort ?u.356\nγ✝³ : Sort ?u.359\nα✝² : Sort ?u.362\nβ✝² : Sort ?u.365\nγ✝² : Sort ?u.368\nα✝¹ : Sort ?u.371\nβ✝¹ : Sort ?u.374\nγ✝¹ : Sort ?u.377\nα✝ : Sort ?u.380\nβ✝ : Sort ?u.383\nγ✝ : Sort ?u.386\nα : Sort u_1\nβ : Sort u_2\nγ : Sort ?u.395\ne : α ≃ β\nx : β → α\nh : e.invFun = x\n⊢ sorry = x\n", "full_text": "example (e : α ≃ β) {x : β → α} (h : e.invFun = x) : (Equiv.symm2.invFun e).toFun = x := by\n  dsimp only [Equiv.symm2_invFun_toFun]\n  rw [h]\nα✝⁶ : Sort ?u.326\nβ✝⁶ : Sort ?u.329\nγ✝⁶ : Sort ?u.332\nα✝⁵ : Sort ?u.335\nβ✝⁵ : Sort ?u.338\nγ✝⁵ : Sort ?u.341\nα✝⁴ : Sort ?u.344\nβ✝⁴ : Sort ?u.347\nγ✝⁴ : Sort ?u.350\nα✝³ : Sort ?u.353\nβ✝³ : Sort ?u.356\nγ✝³ : Sort ?u.359\nα✝² : Sort ?u.362\nβ✝² : Sort ?u.365\nγ✝² : Sort ?u.368\nα✝¹ : Sort ?u.371\nβ✝¹ : Sort ?u.374\nγ✝¹ : Sort ?u.377\nα✝ : Sort ?u.380\nβ✝ : Sort ?u.383\nγ✝ : Sort ?u.386\nα : Sort u_1\nβ : Sort u_2\nγ : Sort ?u.395\ne : α ≃ β\nx : β → α\nh : e.invFun = x\n⊢ sorry = x\n/- α✝⁶ : Sort ?u.326\nβ✝⁶ : Sort ?u.329\nγ✝⁶ : Sort ?u.332\nα✝⁵ : Sort ?u.335\nβ✝⁵ : Sort ?u.338\nγ✝⁵ : Sort ?u.341\nα✝⁴ : Sort ?u.344\nβ✝⁴ : Sort ?u.347\nγ✝⁴ : Sort ?u.350\nα✝³ : Sort ?u.353\nβ✝³ : Sort ?u.356\nγ✝³ : Sort ?u.359\nα✝² : Sort ?u.362\nβ✝² : Sort ?u.365\nγ✝² : Sort ?u.368\nα✝¹ : Sort ?u.371\nβ✝¹ : Sort ?u.374\nγ✝¹ : Sort ?u.377\nα✝ : Sort ?u.380\nβ✝ : Sort ?u.383\nγ✝ : Sort ?u.386\nα : Sort u_1\nβ : Sort u_2\nγ : Sort ?u.395\ne : α ≃ β\nx : β → α\nh : e.invFun = x\n⊢ sorry = x -/\n"}
{"prompt": "example (x : Bool) {z} (h : id x = z) : myAlgHom x = z := by\n  simp only [myAlgHom_toFun]\n  rw [h]\nα✝⁶ : Sort ?u.326\nβ✝⁶ : Sort ?u.329\nγ✝⁶ : Sort ?u.332\nα✝⁵ : Sort ?u.335\nβ✝⁵ : Sort ?u.338\nγ✝⁵ : Sort ?u.341\nα✝⁴ : Sort ?u.344\nβ✝⁴ : Sort ?u.347\nγ✝⁴ : Sort ?u.350\nα✝³ : Sort ?u.353\nβ✝³ : Sort ?u.356\nγ✝³ : Sort ?u.359\nα✝² : Sort ?u.362\nβ✝² : Sort ?u.365\nγ✝² : Sort ?u.368\nα✝¹ : Sort ?u.371\nβ✝¹ : Sort ?u.374\nγ✝¹ : Sort ?u.377\nα✝ : Sort ?u.380\nβ✝ : Sort ?u.383\nγ✝ : Sort ?u.386\nα : Sort ?u.389\nβ : Sort ?u.392\nγ : Sort ?u.395\nx✝ : Sort u_1\nmyAlgHom : x✝\nx z : Bool\nh : id x = z\n⊢ sorry = z\n", "full_text": "example (x : Bool) {z} (h : id x = z) : myAlgHom x = z := by\n  simp only [myAlgHom_toFun]\n  rw [h]\nα✝⁶ : Sort ?u.326\nβ✝⁶ : Sort ?u.329\nγ✝⁶ : Sort ?u.332\nα✝⁵ : Sort ?u.335\nβ✝⁵ : Sort ?u.338\nγ✝⁵ : Sort ?u.341\nα✝⁴ : Sort ?u.344\nβ✝⁴ : Sort ?u.347\nγ✝⁴ : Sort ?u.350\nα✝³ : Sort ?u.353\nβ✝³ : Sort ?u.356\nγ✝³ : Sort ?u.359\nα✝² : Sort ?u.362\nβ✝² : Sort ?u.365\nγ✝² : Sort ?u.368\nα✝¹ : Sort ?u.371\nβ✝¹ : Sort ?u.374\nγ✝¹ : Sort ?u.377\nα✝ : Sort ?u.380\nβ✝ : Sort ?u.383\nγ✝ : Sort ?u.386\nα : Sort ?u.389\nβ : Sort ?u.392\nγ : Sort ?u.395\nx✝ : Sort u_1\nmyAlgHom : x✝\nx z : Bool\nh : id x = z\n⊢ sorry = z\n/- α✝⁶ : Sort ?u.326\nβ✝⁶ : Sort ?u.329\nγ✝⁶ : Sort ?u.332\nα✝⁵ : Sort ?u.335\nβ✝⁵ : Sort ?u.338\nγ✝⁵ : Sort ?u.341\nα✝⁴ : Sort ?u.344\nβ✝⁴ : Sort ?u.347\nγ✝⁴ : Sort ?u.350\nα✝³ : Sort ?u.353\nβ✝³ : Sort ?u.356\nγ✝³ : Sort ?u.359\nα✝² : Sort ?u.362\nβ✝² : Sort ?u.365\nγ✝² : Sort ?u.368\nα✝¹ : Sort ?u.371\nβ✝¹ : Sort ?u.374\nγ✝¹ : Sort ?u.377\nα✝ : Sort ?u.380\nβ✝ : Sort ?u.383\nγ✝ : Sort ?u.386\nα : Sort ?u.389\nβ : Sort ?u.392\nγ : Sort ?u.395\nx✝ : Sort u_1\nmyAlgHom : x✝\nx z : Bool\nh : id x = z\n⊢ sorry = z -/\n"}
{"prompt": "example (x : Bool) {z} (h : id x = z) : myRingHom x = z := by\n  simp only [myRingHom_toFun]\n  rw [h]\nα✝⁶ : Sort ?u.326\nβ✝⁶ : Sort ?u.329\nγ✝⁶ : Sort ?u.332\nα✝⁵ : Sort ?u.335\nβ✝⁵ : Sort ?u.338\nγ✝⁵ : Sort ?u.341\nα✝⁴ : Sort ?u.344\nβ✝⁴ : Sort ?u.347\nγ✝⁴ : Sort ?u.350\nα✝³ : Sort ?u.353\nβ✝³ : Sort ?u.356\nγ✝³ : Sort ?u.359\nα✝² : Sort ?u.362\nβ✝² : Sort ?u.365\nγ✝² : Sort ?u.368\nα✝¹ : Sort ?u.371\nβ✝¹ : Sort ?u.374\nγ✝¹ : Sort ?u.377\nα✝ : Sort ?u.380\nβ✝ : Sort ?u.383\nγ✝ : Sort ?u.386\nα : Sort ?u.389\nβ : Sort ?u.392\nγ : Sort ?u.395\nx✝ : Sort u_1\nmyRingHom : x✝\nx z : Bool\nh : id x = z\n⊢ sorry = z\n", "full_text": "example (x : Bool) {z} (h : id x = z) : myRingHom x = z := by\n  simp only [myRingHom_toFun]\n  rw [h]\nα✝⁶ : Sort ?u.326\nβ✝⁶ : Sort ?u.329\nγ✝⁶ : Sort ?u.332\nα✝⁵ : Sort ?u.335\nβ✝⁵ : Sort ?u.338\nγ✝⁵ : Sort ?u.341\nα✝⁴ : Sort ?u.344\nβ✝⁴ : Sort ?u.347\nγ✝⁴ : Sort ?u.350\nα✝³ : Sort ?u.353\nβ✝³ : Sort ?u.356\nγ✝³ : Sort ?u.359\nα✝² : Sort ?u.362\nβ✝² : Sort ?u.365\nγ✝² : Sort ?u.368\nα✝¹ : Sort ?u.371\nβ✝¹ : Sort ?u.374\nγ✝¹ : Sort ?u.377\nα✝ : Sort ?u.380\nβ✝ : Sort ?u.383\nγ✝ : Sort ?u.386\nα : Sort ?u.389\nβ : Sort ?u.392\nγ : Sort ?u.395\nx✝ : Sort u_1\nmyRingHom : x✝\nx z : Bool\nh : id x = z\n⊢ sorry = z\n/- α✝⁶ : Sort ?u.326\nβ✝⁶ : Sort ?u.329\nγ✝⁶ : Sort ?u.332\nα✝⁵ : Sort ?u.335\nβ✝⁵ : Sort ?u.338\nγ✝⁵ : Sort ?u.341\nα✝⁴ : Sort ?u.344\nβ✝⁴ : Sort ?u.347\nγ✝⁴ : Sort ?u.350\nα✝³ : Sort ?u.353\nβ✝³ : Sort ?u.356\nγ✝³ : Sort ?u.359\nα✝² : Sort ?u.362\nβ✝² : Sort ?u.365\nγ✝² : Sort ?u.368\nα✝¹ : Sort ?u.371\nβ✝¹ : Sort ?u.374\nγ✝¹ : Sort ?u.377\nα✝ : Sort ?u.380\nβ✝ : Sort ?u.383\nγ✝ : Sort ?u.386\nα : Sort ?u.389\nβ : Sort ?u.392\nγ : Sort ?u.395\nx✝ : Sort u_1\nmyRingHom : x✝\nx z : Bool\nh : id x = z\n⊢ sorry = z -/\n"}
{"prompt": "example (f : α → β) (L M : List α) : (L ++ M).map f = L.map f ++ M.map f := by\n  rw?\nα : Type u_1\nβ : Type u_2\nf : α → β\nL M : List α\n⊢ List.map f (L ++ M) = List.map f L ++ List.map f M\n", "full_text": "example (f : α → β) (L M : List α) : (L ++ M).map f = L.map f ++ M.map f := by\n  rw?\nα : Type u_1\nβ : Type u_2\nf : α → β\nL M : List α\n⊢ List.map f (L ++ M) = List.map f L ++ List.map f M\n/- Goals Accomplished! -/\n"}
{"prompt": "example [Category C] {X Y Z : C} (f : X ⟶ Y) (g : Y ⟶ Z) : f ≫ 𝟙 _ ≫ g = f ≫ g := by\n  rw?\nC : Type u_1\ninst✝ : Category.{u_2, u_1} C\nX Y Z : C\nf : X ⟶ Y\ng : Y ⟶ Z\n⊢ f ≫ 𝟙 Y ≫ g = f ≫ g\n", "full_text": "example [Category C] {X Y Z : C} (f : X ⟶ Y) (g : Y ⟶ Z) : f ≫ 𝟙 _ ≫ g = f ≫ g := by\n  rw?\nC : Type u_1\ninst✝ : Category.{u_2, u_1} C\nX Y Z : C\nf : X ⟶ Y\ng : Y ⟶ Z\n⊢ f ≫ 𝟙 Y ≫ g = f ≫ g\n/- Goals Accomplished! -/\n"}
{"prompt": "example [Group G] (h : G) : 1 * h = h := by\n  rw? [-mul_left_eq_self] -- exclude deprecated name for mul_eq_right, it is found first otherwise\nG : Type u_1\ninst✝ : Group G\nh : G\n⊢ 1 * h = h\n", "full_text": "example [Group G] (h : G) : 1 * h = h := by\n  rw? [-mul_left_eq_self] -- exclude deprecated name for mul_eq_right, it is found first otherwise\nG : Type u_1\ninst✝ : Group G\nh : G\n⊢ 1 * h = h\n/- Goals Accomplished! -/\n"}
{"prompt": "example [Group G] (h : G) (hyp : g * 1 = h) : g = h := by\n  rw? at hyp\n  assumption\nG : Type u_1\ng : G\ninst✝ : Group G\nh : G\nhyp : g * 1 = h\n⊢ g = h\n", "full_text": "example [Group G] (h : G) (hyp : g * 1 = h) : g = h := by\n  rw? at hyp\n  assumption\nG : Type u_1\ng : G\ninst✝ : Group G\nh : G\nhyp : g * 1 = h\n⊢ g = h\n/- G : Type u_1\ng : G\ninst✝ : Group G\nh : G\nhyp : g = h\n⊢ g = h -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : ∀ (x y : ℕ), x ≤ y := by\n  intros x y\n  rw? -- Used to be an error here https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/panic.20and.20error.20with.20rw.3F/near/370495531\n  exact test_sorry\n⊢ ∀ (x y : ℕ), x ≤ y\n", "full_text": "example : ∀ (x y : ℕ), x ≤ y := by\n  intros x y\n  rw? -- Used to be an error here https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/panic.20and.20error.20with.20rw.3F/near/370495531\n  exact test_sorry\n⊢ ∀ (x y : ℕ), x ≤ y\n/- x y : ℕ\n⊢ x ≤ y -/\n/- x y : ℕ\n⊢ ↑x ≤ ↑y -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : ∀ (x y : ℕ), x ≤ y := by\n  -- Used to be a panic here https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/panic.20and.20error.20with.20rw.3F/near/370495531\n  success_if_fail_with_msg \"Could not find any lemmas which can rewrite the goal\" rw?\n  exact test_sorry\n⊢ ∀ (x y : ℕ), x ≤ y\n", "full_text": "example : ∀ (x y : ℕ), x ≤ y := by\n  -- Used to be a panic here https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/panic.20and.20error.20with.20rw.3F/near/370495531\n  success_if_fail_with_msg \"Could not find any lemmas which can rewrite the goal\" rw?\n  exact test_sorry\n⊢ ∀ (x y : ℕ), x ≤ y\n/- ⊢ ∀ (x y : ℕ), x ≤ y -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : foo x = 1 ↔ ∃ k : ℤ, x = k := by\n  rw? -- Used to panic, see https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/panic.20and.20error.20with.20rw.3F/near/370598036\n  exact test_sorry\nx✝ : Sort u_1\nfoo : x✝\nx : ℤ\n⊢ sorry = 1 ↔ ∃ k, x = k\n", "full_text": "example : foo x = 1 ↔ ∃ k : ℤ, x = k := by\n  rw? -- Used to panic, see https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/panic.20and.20error.20with.20rw.3F/near/370598036\n  exact test_sorry\nx✝ : Sort u_1\nfoo : x✝\nx : ℤ\n⊢ sorry = 1 ↔ ∃ k, x = k\n/- x✝ : Sort u_1\nfoo : x✝\nx : ℤ\n⊢ (∀ (p : ℕ), Nat.Prime p → ¬p ∣ sorry) ↔ ∃ k, x = k -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : ∀ (x : ℕ), x ≤ 6 := by\n  rw?\n  guard_target = ∀ (x : ℕ), x ≤ 7\n  exact test_sorry\n⊢ ∀ (x : ℕ), x ≤ 6\n", "full_text": "example : ∀ (x : ℕ), x ≤ 6 := by\n  rw?\n  guard_target = ∀ (x : ℕ), x ≤ 7\n  exact test_sorry\n⊢ ∀ (x : ℕ), x ≤ 6\n/- ⊢ ∀ (x : ℕ), x ≤ 6.num -/\n/- ⊢ ∀ (x : ℕ), x ≤ 6.num -/\n"}
{"prompt": "example : ∀ (x : ℕ) (_w : x ≤ 6), x ≤ 8 := by\n  rw?\n  guard_target = ∀ (x : ℕ) (_w : x ≤ 7), x ≤ 8\n  exact test_sorry\n⊢ ∀ x ≤ 6, x ≤ 8\n", "full_text": "example : ∀ (x : ℕ) (_w : x ≤ 6), x ≤ 8 := by\n  rw?\n  guard_target = ∀ (x : ℕ) (_w : x ≤ 7), x ≤ 8\n  exact test_sorry\n⊢ ∀ x ≤ 6, x ≤ 8\n/- ⊢ ∀ x ≤ 6.num, x ≤ 8 -/\n/- ⊢ ∀ x ≤ 6.num, x ≤ 8 -/\n"}
{"prompt": "example (n : ℕ) : let y := 3; n + y = 3 + n := by\n  rw?\nn : ℕ\n⊢ let y := 3;\n  n + y = 3 + n\n", "full_text": "example (n : ℕ) : let y := 3; n + y = 3 + n := by\n  rw?\nn : ℕ\n⊢ let y := 3;\n  n + y = 3 + n\n/- Goals Accomplished! -/\n"}
{"prompt": "lemma test : f n = f m := by\n  fail_if_success rw? [-f_eq] -- Check that we can forbid lemmas.\n  rw?\n  rw [f_eq]\nx✝ : Sort u_1\nf : x✝\n⊢ sorry = sorry\n", "full_text": "lemma test : f n = f m := by\n  fail_if_success rw? [-f_eq] -- Check that we can forbid lemmas.\n  rw?\n  rw [f_eq]\nx✝ : Sort u_1\nf : x✝\n⊢ sorry = sorry\n/- x✝ : Sort u_1\nf : x✝\n⊢ sorry = sorry -/\n/- x✝ : Sort u_1\nf : x✝\n⊢ sorry = sorry -/\n"}
{"prompt": "example (h : 1 = 2) : 2 = 1 := by\n  rw?\nh : 1 = 2\n⊢ 2 = 1\n", "full_text": "example (h : 1 = 2) : 2 = 1 := by\n  rw?\nh : 1 = 2\n⊢ 2 = 1\n/- Goals Accomplished! -/\n"}
{"prompt": "example : testConst = 4 := by\n  rw?\n  exact test_sorry\ntestConst : ℕ\n⊢ testConst = 4\n", "full_text": "example : testConst = 4 := by\n  rw?\n  exact test_sorry\ntestConst : ℕ\n⊢ testConst = 4\n/- testConst : ℕ\n⊢ ↑testConst = ↑4 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {P : Prop} (p : P) (h : P → 1 = 2) : 2 = 1 := by\n  rw?\nP : Prop\np : P\nh : P → 1 = 2\n⊢ 2 = 1\n", "full_text": "example {P : Prop} (p : P) (h : P → 1 = 2) : 2 = 1 := by\n  rw?\nP : Prop\np : P\nh : P → 1 = 2\n⊢ 2 = 1\n/- Goals Accomplished! -/\n"}
{"prompt": "example {P Q : Prop} (p : P) (f : P → Q) (h : Q → 1 = 2) : 2 = 1 := by\n  rw?\nP Q : Prop\np : P\nf : P → Q\nh : Q → 1 = 2\n⊢ 2 = 1\n", "full_text": "example {P Q : Prop} (p : P) (f : P → Q) (h : Q → 1 = 2) : 2 = 1 := by\n  rw?\nP Q : Prop\np : P\nf : P → Q\nh : Q → 1 = 2\n⊢ 2 = 1\n/- Goals Accomplished! -/\n"}
{"prompt": "example {P : Prop} (p : P) (Q : α → Prop) (a b : α) (h₁ : P → a = b) (w : Q a) : Q b := by\n  rw?\n  exact w\nα : Sort u_1\nP : Prop\np : P\nQ : α → Prop\na b : α\nh₁ : P → a = b\nw : Q a\n⊢ Q b\n", "full_text": "example {P : Prop} (p : P) (Q : α → Prop) (a b : α) (h₁ : P → a = b) (w : Q a) : Q b := by\n  rw?\n  exact w\nα : Sort u_1\nP : Prop\np : P\nQ : α → Prop\na b : α\nh₁ : P → a = b\nw : Q a\n⊢ Q b\n/- α : Sort u_1\nP : Prop\np : P\nQ : α → Prop\na b : α\nh₁ : P → a = b\nw : Q a\n⊢ Q a -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b c : Nat) (ab : a = b) (bc : b = c) : c = a := by\n  symm_saturate\n  -- Run twice to check that we don't add repeated copies.\n  -- Unfortunately `guard_hyp_nums` doesn't seem to work so I haven't made an assertion.\n  symm_saturate\n  apply Eq.trans <;> assumption\na b c : ℕ\nab : a = b\nbc : b = c\n⊢ c = a\n", "full_text": "example (a b c : Nat) (ab : a = b) (bc : b = c) : c = a := by\n  symm_saturate\n  -- Run twice to check that we don't add repeated copies.\n  -- Unfortunately `guard_hyp_nums` doesn't seem to work so I haven't made an assertion.\n  symm_saturate\n  apply Eq.trans <;> assumption\na b c : ℕ\nab : a = b\nbc : b = c\n⊢ c = a\n/- a b c : ℕ\nab : a = b\nbc : b = c\nab_symm : b = a\nbc_symm : c = b\n⊢ c = a -/\n/- a b c : ℕ\nab : a = b\nbc : b = c\nab_symm : b = a\nbc_symm : c = b\n⊢ c = a -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {n m : Nat} (h : MyEq n m) : MyEq m n := by\n  symm\n  assumption\nx✝ : Sort ?u.6\nMyEq : x✝\nn m : ℕ\nh : sorry\n⊢ sorry\n", "full_text": "example {n m : Nat} (h : MyEq n m) : MyEq m n := by\n  symm\n  assumption\nx✝ : Sort ?u.6\nMyEq : x✝\nn m : ℕ\nh : sorry\n⊢ sorry\n/- x✝ : Sort ?u.6\nMyEq : x✝\nn m : ℕ\nh : sorry\n⊢ sorry -/\n"}
{"prompt": "example (h : 0 + 1 = 0) : False := by\n  change 1 = 0 at h\n  simp at h\nh : 0 + 1 = 0\n⊢ False\n", "full_text": "example (h : 0 + 1 = 0) : False := by\n  change 1 = 0 at h\n  simp at h\nh : 0 + 1 = 0\n⊢ False\n/- h : 1 = 0\n⊢ False -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : 0 + 1 = 1 := by\n  change 1 = 1\n  rfl\n⊢ 0 + 1 = 1\n", "full_text": "example : 0 + 1 = 1 := by\n  change 1 = 1\n  rfl\n⊢ 0 + 1 = 1\n/- ⊢ 1 = 1 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : 1 = 1 := by\n  change 1 = 1\n  rfl\n⊢ 1 = 1\n", "full_text": "example : 1 = 1 := by\n  change 1 = 1\n  rfl\n⊢ 1 = 1\n/- ⊢ 1 = 1 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : True := by\n  #adaptation_note /-- hi -/\n  exact .intro\n⊢ True\n", "full_text": "example : True := by\n  #adaptation_note /-- hi -/\n  exact .intro\n⊢ True\n/- ⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : True ∧ True := by\n  constructor <;> trivial;\n⊢ True ∧ True\n", "full_text": "example : True ∧ True := by\n  constructor <;> trivial;\n⊢ True ∧ True\n/- Goals Accomplished! -/\n"}
{"prompt": "example : True := by\n  congr\n  constructor\n  done\n⊢ True\n", "full_text": "example : True := by\n  congr\n  constructor\n  done\n⊢ True\n/- ⊢ True -/\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : True := by\n  skip\n  constructor\n  done\n⊢ True\n", "full_text": "example : True := by\n  skip\n  constructor\n  done\n⊢ True\n/- ⊢ True -/\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {R : Type u} [Semiring R] {p : Polynomial R} [Subsingleton R] :\n    Polynomial.degree p = ⊥ := by\n  rw_search [-Polynomial.degree_of_subsingleton]\n  -- Mathlib proof:\n  -- rw [Subsingleton.elim p 0, degree_zero]\n  done\nR : Type u\ninst✝¹ : Semiring R\np : R[X]\ninst✝ : Subsingleton R\n⊢ p.degree = ⊥\n", "full_text": "example {R : Type u} [Semiring R] {p : Polynomial R} [Subsingleton R] :\n    Polynomial.degree p = ⊥ := by\n  rw_search [-Polynomial.degree_of_subsingleton]\n  -- Mathlib proof:\n  -- rw [Subsingleton.elim p 0, degree_zero]\n  done\nR : Type u\ninst✝¹ : Semiring R\np : R[X]\ninst✝ : Subsingleton R\n⊢ p.degree = ⊥\n/- R : Type u\ninst✝¹ : Semiring R\np : R[X]\ninst✝ : Subsingleton R\n⊢ p.degree = ⊥ -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {R : Type u} {a : R} [Semiring R] (n : ℕ) (ha : a ≠ 0) :\n    Polynomial.degree (Polynomial.C a * Polynomial.X ^ n) = n := by\n  rw_search [-Polynomial.degree_C_mul_X_pow]\n  -- Mathlib proof:\n  -- rw [C_mul_X_pow_eq_monomial, degree_monomial n ha]\n  done\nR : Type u\na : R\ninst✝ : Semiring R\nn : ℕ\nha : a ≠ 0\n⊢ (C a * X ^ n).degree = ↑n\n", "full_text": "example {R : Type u} {a : R} [Semiring R] (n : ℕ) (ha : a ≠ 0) :\n    Polynomial.degree (Polynomial.C a * Polynomial.X ^ n) = n := by\n  rw_search [-Polynomial.degree_C_mul_X_pow]\n  -- Mathlib proof:\n  -- rw [C_mul_X_pow_eq_monomial, degree_monomial n ha]\n  done\nR : Type u\na : R\ninst✝ : Semiring R\nn : ℕ\nha : a ≠ 0\n⊢ (C a * X ^ n).degree = ↑n\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {R : Type u} [Semiring R] {p q : Polynomial R}\n    (h : Polynomial.degree p < Polynomial.degree q) :\n    Polynomial.degree (p + q) = Polynomial.degree q := by\n  rw_search [-Polynomial.degree_add_eq_right_of_degree_lt]\n  -- Mathlib proof:\n  -- rw [add_comm, degree_add_eq_left_of_degree_lt h]\n  done\nR : Type u\ninst✝ : Semiring R\np q : R[X]\nh : p.degree < q.degree\n⊢ (p + q).degree = q.degree\n", "full_text": "example {R : Type u} [Semiring R] {p q : Polynomial R}\n    (h : Polynomial.degree p < Polynomial.degree q) :\n    Polynomial.degree (p + q) = Polynomial.degree q := by\n  rw_search [-Polynomial.degree_add_eq_right_of_degree_lt]\n  -- Mathlib proof:\n  -- rw [add_comm, degree_add_eq_left_of_degree_lt h]\n  done\nR : Type u\ninst✝ : Semiring R\np q : R[X]\nh : p.degree < q.degree\n⊢ (p + q).degree = q.degree\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {R : Type u} [Semiring R] (a : R) (n : ℕ) :\n    Polynomial.leadingCoeff (Polynomial.C a * Polynomial.X ^ n) = a := by\n  rw_search [-Polynomial.leadingCoeff_C_mul_X_pow]\n  -- Mathlib proof:\n  -- rw [C_mul_X_pow_eq_monomial, leadingCoeff_monomial]\n  done\nR : Type u\ninst✝ : Semiring R\na : R\nn : ℕ\n⊢ (C a * X ^ n).leadingCoeff = a\n", "full_text": "example {R : Type u} [Semiring R] (a : R) (n : ℕ) :\n    Polynomial.leadingCoeff (Polynomial.C a * Polynomial.X ^ n) = a := by\n  rw_search [-Polynomial.leadingCoeff_C_mul_X_pow]\n  -- Mathlib proof:\n  -- rw [C_mul_X_pow_eq_monomial, leadingCoeff_monomial]\n  done\nR : Type u\ninst✝ : Semiring R\na : R\nn : ℕ\n⊢ (C a * X ^ n).leadingCoeff = a\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {R : Type u} [Semiring R] {p : Polynomial R}\n    (h : Finset.card (Polynomial.support p) ≤ 1) :\n    Polynomial.C (Polynomial.leadingCoeff p) * Polynomial.X ^ Polynomial.natDegree p = p := by\n  rw_search [-Polynomial.C_mul_X_pow_eq_self]\n  -- Mathlib proof:\n  -- rw [C_mul_X_pow_eq_monomial, monomial_natDegree_leadingCoeff_eq_self h]\n  done\nR : Type u\ninst✝ : Semiring R\np : R[X]\nh : p.support.card ≤ 1\n⊢ C p.leadingCoeff * X ^ p.natDegree = p\n", "full_text": "example {R : Type u} [Semiring R] {p : Polynomial R}\n    (h : Finset.card (Polynomial.support p) ≤ 1) :\n    Polynomial.C (Polynomial.leadingCoeff p) * Polynomial.X ^ Polynomial.natDegree p = p := by\n  rw_search [-Polynomial.C_mul_X_pow_eq_self]\n  -- Mathlib proof:\n  -- rw [C_mul_X_pow_eq_monomial, monomial_natDegree_leadingCoeff_eq_self h]\n  done\nR : Type u\ninst✝ : Semiring R\np : R[X]\nh : p.support.card ≤ 1\n⊢ C p.leadingCoeff * X ^ p.natDegree = p\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {R : Type u} {a b : R} [Semiring R] (ha : a ≠ 0) :\n    Polynomial.natDegree (Polynomial.C a * Polynomial.X + Polynomial.C b) = 1 := by\n  rw_search [-Polynomial.natDegree_linear]\n  -- Mathlib proof:\n  -- rw [natDegree_add_C, natDegree_C_mul_X a ha]\n  done\nR : Type u\na b : R\ninst✝ : Semiring R\nha : a ≠ 0\n⊢ (C a * X + C b).natDegree = 1\n", "full_text": "example {R : Type u} {a b : R} [Semiring R] (ha : a ≠ 0) :\n    Polynomial.natDegree (Polynomial.C a * Polynomial.X + Polynomial.C b) = 1 := by\n  rw_search [-Polynomial.natDegree_linear]\n  -- Mathlib proof:\n  -- rw [natDegree_add_C, natDegree_C_mul_X a ha]\n  done\nR : Type u\na b : R\ninst✝ : Semiring R\nha : a ≠ 0\n⊢ (C a * X + C b).natDegree = 1\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {R : Type u} [Ring R] [Nontrivial R] (x : R) :\n    Polynomial.natDegree (Polynomial.X - Polynomial.C x) = 1 := by\n  rw_search [-Polynomial.natDegree_X_sub_C]\n  -- Mathlib proof:\n  -- rw [natDegree_sub_C, natDegree_X]\n  done\nR : Type u\ninst✝¹ : Ring R\ninst✝ : Nontrivial R\nx : R\n⊢ (X - C x).natDegree = 1\n", "full_text": "example {R : Type u} [Ring R] [Nontrivial R] (x : R) :\n    Polynomial.natDegree (Polynomial.X - Polynomial.C x) = 1 := by\n  rw_search [-Polynomial.natDegree_X_sub_C]\n  -- Mathlib proof:\n  -- rw [natDegree_sub_C, natDegree_X]\n  done\nR : Type u\ninst✝¹ : Ring R\ninst✝ : Nontrivial R\nx : R\n⊢ (X - C x).natDegree = 1\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {S : Type v} [Ring S] (c : S) :\n    Polynomial.nextCoeff (Polynomial.X - Polynomial.C c) = -c := by\n  rw_search\n  -- Mathlib proof:\n  -- rw [sub_eq_add_neg, ← map_neg C c, nextCoeff_X_add_C]\n  done\nS : Type v\ninst✝ : Ring S\nc : S\n⊢ (X - C c).nextCoeff = -c\n", "full_text": "example {S : Type v} [Ring S] (c : S) :\n    Polynomial.nextCoeff (Polynomial.X - Polynomial.C c) = -c := by\n  rw_search\n  -- Mathlib proof:\n  -- rw [sub_eq_add_neg, ← map_neg C c, nextCoeff_X_add_C]\n  done\nS : Type v\ninst✝ : Ring S\nc : S\n⊢ (X - C c).nextCoeff = -c\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {R : Type u} [Ring R] [Nontrivial R] {n : ℕ} (hn : 0 < n) (a : R) :\n    Polynomial.degree (Polynomial.X ^ n - Polynomial.C a) = n := by\n  rw_search [-Polynomial.degree_X_pow_sub_C]\n  -- Mathlib proof:\n  -- rw [sub_eq_add_neg, ← map_neg C a, degree_X_pow_add_C hn]\n  done\nR : Type u\ninst✝¹ : Ring R\ninst✝ : Nontrivial R\nn : ℕ\nhn : 0 < n\na : R\n⊢ (X ^ n - C a).degree = ↑n\n", "full_text": "example {R : Type u} [Ring R] [Nontrivial R] {n : ℕ} (hn : 0 < n) (a : R) :\n    Polynomial.degree (Polynomial.X ^ n - Polynomial.C a) = n := by\n  rw_search [-Polynomial.degree_X_pow_sub_C]\n  -- Mathlib proof:\n  -- rw [sub_eq_add_neg, ← map_neg C a, degree_X_pow_add_C hn]\n  done\nR : Type u\ninst✝¹ : Ring R\ninst✝ : Nontrivial R\nn : ℕ\nhn : 0 < n\na : R\n⊢ (X ^ n - C a).degree = ↑n\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {R : Type u} [Ring R] [Nontrivial R] {n : ℕ} {r : R} :\n    Polynomial.natDegree (Polynomial.X ^ n - Polynomial.C r) = n := by\n  rw_search [-Polynomial.natDegree_X_pow_sub_C]\n  -- Mathlib proof:\n  -- rw [sub_eq_add_neg, ← map_neg C r, natDegree_X_pow_add_C]\n  done\nR : Type u\ninst✝¹ : Ring R\ninst✝ : Nontrivial R\nn : ℕ\nr : R\n⊢ (X ^ n - C r).natDegree = n\n", "full_text": "example {R : Type u} [Ring R] [Nontrivial R] {n : ℕ} {r : R} :\n    Polynomial.natDegree (Polynomial.X ^ n - Polynomial.C r) = n := by\n  rw_search [-Polynomial.natDegree_X_pow_sub_C]\n  -- Mathlib proof:\n  -- rw [sub_eq_add_neg, ← map_neg C r, natDegree_X_pow_add_C]\n  done\nR : Type u\ninst✝¹ : Ring R\ninst✝ : Nontrivial R\nn : ℕ\nr : R\n⊢ (X ^ n - C r).natDegree = n\n/- Goals Accomplished! -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (xs ys : List α) : (xs ++ ys).length = ys.length + xs.length := by\n  rw_search\nα : Type u_1\nxs ys : List α\n⊢ (xs ++ ys).length = ys.length + xs.length\n", "full_text": "example (xs ys : List α) : (xs ++ ys).length = ys.length + xs.length := by\n  rw_search\nα : Type u_1\nxs ys : List α\n⊢ (xs ++ ys).length = ys.length + xs.length\n/- Goals Accomplished! -/\n"}
{"prompt": "example (x y : Nat) : True := by\n  observe? h : x + y = y + x\n  guard_hyp h : x + y = y + x\n  trivial\nx y : ℕ\n⊢ True\n", "full_text": "example (x y : Nat) : True := by\n  observe? h : x + y = y + x\n  guard_hyp h : x + y = y + x\n  trivial\nx y : ℕ\n⊢ True\n/- x y : ℕ\nh : x + y = y + x\n⊢ True -/\n/- x y : ℕ\nh : x + y = y + x\n⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b : ℕ) : a + b = b + a := by\n  apply?\na b : ℕ\n⊢ a + b = b + a\n", "full_text": "example (a b : ℕ) : a + b = b + a := by\n  apply?\na b : ℕ\n⊢ a + b = b + a\n/- Goals Accomplished! -/\n"}
{"prompt": "example (n m k : ℕ) : n * (m - k) = n * m - n * k := by\n  apply?\nn m k : ℕ\n⊢ n * (m - k) = n * m - n * k\n", "full_text": "example (n m k : ℕ) : n * (m - k) = n * m - n * k := by\n  apply?\nn m k : ℕ\n⊢ n * (m - k) = n * m - n * k\n/- Goals Accomplished! -/\n"}
{"prompt": "example (n m k : ℕ) : n * m - n * k = n * (m - k) := by\n  apply?\nn m k : ℕ\n⊢ n * m - n * k = n * (m - k)\n", "full_text": "example (n m k : ℕ) : n * m - n * k = n * (m - k) := by\n  apply?\nn m k : ℕ\n⊢ n * m - n * k = n * (m - k)\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b : ℕ) (h : a ∣ b) (w : b > 0) : a ≤ b := by\n  apply?\na b : ℕ\nh : a ∣ b\nw : b > 0\n⊢ a ≤ b\n", "full_text": "example (a b : ℕ) (h : a ∣ b) (w : b > 0) : a ≤ b := by\n  apply?\na b : ℕ\nh : a ∣ b\nw : b > 0\n⊢ a ≤ b\n/- Goals Accomplished! -/\n"}
{"prompt": "theorem lemma_with_false_in_head (a b : ℕ) (_h1 : a < b) (h2 : P a) : False := by\n  apply Nat.not_lt_zero; cases h2; assumption\nx✝ : Sort u_1\nP : x✝\na b : ℕ\n_h1 : a < b\nh2 : sorry\n⊢ False\n", "full_text": "theorem lemma_with_false_in_head (a b : ℕ) (_h1 : a < b) (h2 : P a) : False := by\n  apply Nat.not_lt_zero; cases h2; assumption\nx✝ : Sort u_1\nP : x✝\na b : ℕ\n_h1 : a < b\nh2 : sorry\n⊢ False\n/- case a\nx✝ : Sort u_1\nP : x✝\na b : ℕ\n_h1 : a < b\nh2 : sorry\n⊢ ?n < 0\n---\ncase n\nx✝ : Sort u_1\nP : x✝\na b : ℕ\n_h1 : a < b\nh2 : sorry\n⊢ ℕ -/\n"}
{"prompt": "example (l : List α) (f : α → β ⊕ γ) : List β × List γ := by\n  apply? using f -- partitionMap f l\nα : Type ?u.29\nβ : Type ?u.35\nγ : Type ?u.34\nl : List α\nf : α → β ⊕ γ\n⊢ List β × List γ\n", "full_text": "example (l : List α) (f : α → β ⊕ γ) : List β × List γ := by\n  apply? using f -- partitionMap f l\nα : Type ?u.29\nβ : Type ?u.35\nγ : Type ?u.34\nl : List α\nf : α → β ⊕ γ\n⊢ List β × List γ\n/- Goals Accomplished! -/\n"}
{"prompt": "theorem Bool_eq_iff {A B : Bool} : (A = B) = (A ↔ B) := by\n  (cases A <;> cases B <;> simp)\nA B : Bool\n⊢ (A = B) = (A = true ↔ B = true)\n", "full_text": "theorem Bool_eq_iff {A B : Bool} : (A = B) = (A ↔ B) := by\n  (cases A <;> cases B <;> simp)\nA B : Bool\n⊢ (A = B) = (A = true ↔ B = true)\n/- Goals Accomplished! -/\n"}
{"prompt": "theorem Bool_eq_iff2 {A B : Bool} : (A = B) = (A ↔ B) := by\n  apply? -- exact Bool_eq_iff\nA B : Bool\n⊢ (A = B) = (A = true ↔ B = true)\n", "full_text": "theorem Bool_eq_iff2 {A B : Bool} : (A = B) = (A ↔ B) := by\n  apply? -- exact Bool_eq_iff\nA B : Bool\n⊢ (A = B) = (A = true ↔ B = true)\n/- Goals Accomplished! -/\n"}
{"prompt": "lemma prime_of_prime (n : ℕ) : Prime n ↔ Nat.Prime n := by\n  exact?\nn : ℕ\n⊢ Prime n ↔ Nat.Prime n\n", "full_text": "lemma prime_of_prime (n : ℕ) : Prime n ↔ Nat.Prime n := by\n  exact?\nn : ℕ\n⊢ Prime n ↔ Nat.Prime n\n/- Goals Accomplished! -/\n"}
{"prompt": "example (P Q : Prop) (h : P → Q) (h' : ¬Q) : ¬P := by\n  exact? says exact fun a ↦ h' (h a)\nP Q : Prop\nh : P → Q\nh' : ¬Q\n⊢ ¬P\n", "full_text": "example (P Q : Prop) (h : P → Q) (h' : ¬Q) : ¬P := by\n  exact? says exact fun a ↦ h' (h a)\nP Q : Prop\nh : P → Q\nh' : ¬Q\n⊢ ¬P\n/- Goals Accomplished! -/\n"}
{"prompt": "example (_h : List.range 10000 = List.range 10000) (n m : Nat) : n + m = m + n := by\n  with_reducible exact?\n_h : List.range 10000 = List.range 10000\nn m : ℕ\n⊢ n + m = m + n\n", "full_text": "example (_h : List.range 10000 = List.range 10000) (n m : Nat) : n + m = m + n := by\n  with_reducible exact?\n_h : List.range 10000 = List.range 10000\nn m : ℕ\n⊢ n + m = m + n\n/- Goals Accomplished! -/\n"}
{"prompt": "example (f : ℝ → ℝ) {K : Set ℝ} (_hK : IsCompact K) : ∃ x ∈ K, ∀ y ∈ K, f x ≤ f y := by\n  fail_if_success exact?\n  apply? -- Verify that this includes: `refine IsCompact.exists_forall_le _hK ?_ ?_`\nf : ℝ → ℝ\nK : Set ℝ\n_hK : IsCompact K\n⊢ ∃ x ∈ K, ∀ y ∈ K, f x ≤ f y\n", "full_text": "example (f : ℝ → ℝ) {K : Set ℝ} (_hK : IsCompact K) : ∃ x ∈ K, ∀ y ∈ K, f x ≤ f y := by\n  fail_if_success exact?\n  apply? -- Verify that this includes: `refine IsCompact.exists_forall_le _hK ?_ ?_`\nf : ℝ → ℝ\nK : Set ℝ\n_hK : IsCompact K\n⊢ ∃ x ∈ K, ∀ y ∈ K, f x ≤ f y\n/- f : ℝ → ℝ\nK : Set ℝ\n_hK : IsCompact K\n⊢ ∃ x ∈ K, ∀ y ∈ K, f x ≤ f y -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example :\n    (NonUnitalNormedRing.toNormedAddCommGroup : NormedAddCommGroup ℂ) =\n      Complex.instNormedAddCommGroup := by\n  with_reducible_and_instances rfl\n⊢ NonUnitalNormedRing.toNormedAddCommGroup = Complex.instNormedAddCommGroup\n", "full_text": "example :\n    (NonUnitalNormedRing.toNormedAddCommGroup : NormedAddCommGroup ℂ) =\n      Complex.instNormedAddCommGroup := by\n  with_reducible_and_instances rfl\n⊢ NonUnitalNormedRing.toNormedAddCommGroup = Complex.instNormedAddCommGroup\n/- Goals Accomplished! -/\n"}
{"prompt": "example : (Complex.SMul.instSMulRealComplex : SMul ℚ ℂ) = (Algebra.toSMul : SMul ℚ ℂ) := by\n  with_reducible_and_instances rfl\n⊢ Complex.SMul.instSMulRealComplex = Algebra.toSMul\n", "full_text": "example : (Complex.SMul.instSMulRealComplex : SMul ℚ ℂ) = (Algebra.toSMul : SMul ℚ ℂ) := by\n  with_reducible_and_instances rfl\n⊢ Complex.SMul.instSMulRealComplex = Algebra.toSMul\n/- Goals Accomplished! -/\n"}
{"prompt": "example : (AddCommGroup.toNatModule : Module ℕ (AlgebraicClosure k)) =\n      @Algebra.toModule _ _ _ _ (AlgebraicClosure.instAlgebra k) := by\n  with_reducible_and_instances rfl\nk : Type u_1\ninst✝ : Field k\n⊢ AddCommGroup.toNatModule = Algebra.toModule\n", "full_text": "example : (AddCommGroup.toNatModule : Module ℕ (AlgebraicClosure k)) =\n      @Algebra.toModule _ _ _ _ (AlgebraicClosure.instAlgebra k) := by\n  with_reducible_and_instances rfl\nk : Type u_1\ninst✝ : Field k\n⊢ AddCommGroup.toNatModule = Algebra.toModule\n/- Goals Accomplished! -/\n"}
{"prompt": "example : (AddCommGroup.toIntModule _ : Module ℤ (AlgebraicClosure k)) =\n      @Algebra.toModule _ _ _ _ (AlgebraicClosure.instAlgebra k) := by\n  with_reducible_and_instances rfl\nk : Type u_1\ninst✝ : Field k\n⊢ AddCommGroup.toIntModule (AlgebraicClosure k) = Algebra.toModule\n", "full_text": "example : (AddCommGroup.toIntModule _ : Module ℤ (AlgebraicClosure k)) =\n      @Algebra.toModule _ _ _ _ (AlgebraicClosure.instAlgebra k) := by\n  with_reducible_and_instances rfl\nk : Type u_1\ninst✝ : Field k\n⊢ AddCommGroup.toIntModule (AlgebraicClosure k) = Algebra.toModule\n/- Goals Accomplished! -/\n"}
{"prompt": "example :\n    (AddCommGroup.toNatModule : Module ℕ (SplittingField f)) =\n      @Algebra.toModule _ _ _ _ (SplittingField.algebra' f) := by\n  with_reducible_and_instances rfl\nF : Type u\nK : Type v\nL : Type w\ninst✝² : Field K\ninst✝¹ : Field L\ninst✝ : Field F\nf : K[X]\n⊢ AddCommGroup.toNatModule = Algebra.toModule\n", "full_text": "example :\n    (AddCommGroup.toNatModule : Module ℕ (SplittingField f)) =\n      @Algebra.toModule _ _ _ _ (SplittingField.algebra' f) := by\n  with_reducible_and_instances rfl\nF : Type u\nK : Type v\nL : Type w\ninst✝² : Field K\ninst✝¹ : Field L\ninst✝ : Field F\nf : K[X]\n⊢ AddCommGroup.toNatModule = Algebra.toModule\n/- Goals Accomplished! -/\n"}
{"prompt": "example :\n    (AddCommGroup.toIntModule _ : Module ℤ (SplittingField f)) =\n      @Algebra.toModule _ _ _ _ (SplittingField.algebra' f) := by\n  with_reducible_and_instances rfl\nF : Type u\nK : Type v\nL : Type w\ninst✝² : Field K\ninst✝¹ : Field L\ninst✝ : Field F\nf : K[X]\n⊢ AddCommGroup.toIntModule f.SplittingField = Algebra.toModule\n", "full_text": "example :\n    (AddCommGroup.toIntModule _ : Module ℤ (SplittingField f)) =\n      @Algebra.toModule _ _ _ _ (SplittingField.algebra' f) := by\n  with_reducible_and_instances rfl\nF : Type u\nK : Type v\nL : Type w\ninst✝² : Field K\ninst✝¹ : Field L\ninst✝ : Field F\nf : K[X]\n⊢ AddCommGroup.toIntModule f.SplittingField = Algebra.toModule\n/- Goals Accomplished! -/\n"}
{"prompt": "example {R S : 𝒮} {a b : 𝒳} (f : R ⟶ S) (φ : a ⟶ b) [p.IsHomLift f φ] : f = f := by\n  subst_hom_lift p f φ\n  rename_i h\n  guard_hyp h : p.IsHomLift (p.map φ) φ\n  guard_target = p.map φ = p.map φ\n  trivial\n𝒮 : Type u₁\n𝒳 : Type u₂\ninst✝² : Category.{v₁, u₂} 𝒳\ninst✝¹ : Category.{v₂, u₁} 𝒮\np : 𝒳 ⥤ 𝒮\nR S : 𝒮\na b : 𝒳\nf : R ⟶ S\nφ : a ⟶ b\ninst✝ : p.IsHomLift f φ\n⊢ f = f\n", "full_text": "example {R S : 𝒮} {a b : 𝒳} (f : R ⟶ S) (φ : a ⟶ b) [p.IsHomLift f φ] : f = f := by\n  subst_hom_lift p f φ\n  rename_i h\n  guard_hyp h : p.IsHomLift (p.map φ) φ\n  guard_target = p.map φ = p.map φ\n  trivial\n𝒮 : Type u₁\n𝒳 : Type u₂\ninst✝² : Category.{v₁, u₂} 𝒳\ninst✝¹ : Category.{v₂, u₁} 𝒮\np : 𝒳 ⥤ 𝒮\nR S : 𝒮\na b : 𝒳\nf : R ⟶ S\nφ : a ⟶ b\ninst✝ : p.IsHomLift f φ\n⊢ f = f\n/- case map\n𝒮 : Type u₁\n𝒳 : Type u₂\ninst✝² : Category.{v₁, u₂} 𝒳\ninst✝¹ : Category.{v₂, u₁} 𝒮\np : 𝒳 ⥤ 𝒮\na✝ b✝ : 𝒳\nφ : a✝ ⟶ b✝\nR S : 𝒮\na b : 𝒳\ninst✝ : p.IsHomLift (p.map φ) φ\n⊢ p.map φ = p.map φ -/\n/- case map\n𝒮 : Type u₁\n𝒳 : Type u₂\ninst✝¹ : Category.{v₁, u₂} 𝒳\ninst✝ : Category.{v₂, u₁} 𝒮\np : 𝒳 ⥤ 𝒮\na✝ b✝ : 𝒳\nφ : a✝ ⟶ b✝\nR S : 𝒮\na b : 𝒳\nh : p.IsHomLift (p.map φ) φ\n⊢ p.map φ = p.map φ -/\n/- case map\n𝒮 : Type u₁\n𝒳 : Type u₂\ninst✝¹ : Category.{v₁, u₂} 𝒳\ninst✝ : Category.{v₂, u₁} 𝒮\np : 𝒳 ⥤ 𝒮\na✝ b✝ : 𝒳\nφ : a✝ ⟶ b✝\nR S : 𝒮\na b : 𝒳\nh : p.IsHomLift (p.map φ) φ\n⊢ p.map φ = p.map φ -/\n/- case map\n𝒮 : Type u₁\n𝒳 : Type u₂\ninst✝¹ : Category.{v₁, u₂} 𝒳\ninst✝ : Category.{v₂, u₁} 𝒮\np : 𝒳 ⥤ 𝒮\na✝ b✝ : 𝒳\nφ : a✝ ⟶ b✝\nR S : 𝒮\na b : 𝒳\nh : p.IsHomLift (p.map φ) φ\n⊢ p.map φ = p.map φ -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {R S T : 𝒮} {a b c : 𝒳} (f : R ⟶ S) (g : S ⟶ T) (φ : a ⟶ b) (ψ : b ⟶ c)\n    [p.IsHomLift f (φ ≫ ψ)] : f = f := by\n  subst_hom_lift p f (φ ≫ ψ)\n  rename_i h\n  guard_hyp h : p.IsHomLift (p.map (φ ≫ ψ)) (φ ≫ ψ)\n  guard_target = p.map (φ ≫ ψ) = p.map (φ ≫ ψ)\n  trivial\n𝒮 : Type u₁\n𝒳 : Type u₂\ninst✝² : Category.{v₁, u₂} 𝒳\ninst✝¹ : Category.{v₂, u₁} 𝒮\np : 𝒳 ⥤ 𝒮\nR S T : 𝒮\na b c : 𝒳\nf : R ⟶ S\ng : S ⟶ T\nφ : a ⟶ b\nψ : b ⟶ c\ninst✝ : p.IsHomLift f (φ ≫ ψ)\n⊢ f = f\n", "full_text": "example {R S T : 𝒮} {a b c : 𝒳} (f : R ⟶ S) (g : S ⟶ T) (φ : a ⟶ b) (ψ : b ⟶ c)\n    [p.IsHomLift f (φ ≫ ψ)] : f = f := by\n  subst_hom_lift p f (φ ≫ ψ)\n  rename_i h\n  guard_hyp h : p.IsHomLift (p.map (φ ≫ ψ)) (φ ≫ ψ)\n  guard_target = p.map (φ ≫ ψ) = p.map (φ ≫ ψ)\n  trivial\n𝒮 : Type u₁\n𝒳 : Type u₂\ninst✝² : Category.{v₁, u₂} 𝒳\ninst✝¹ : Category.{v₂, u₁} 𝒮\np : 𝒳 ⥤ 𝒮\nR S T : 𝒮\na b c : 𝒳\nf : R ⟶ S\ng : S ⟶ T\nφ : a ⟶ b\nψ : b ⟶ c\ninst✝ : p.IsHomLift f (φ ≫ ψ)\n⊢ f = f\n/- case map\n𝒮 : Type u₁\n𝒳 : Type u₂\ninst✝² : Category.{v₁, u₂} 𝒳\ninst✝¹ : Category.{v₂, u₁} 𝒮\np : 𝒳 ⥤ 𝒮\nT : 𝒮\na✝ b✝ c : 𝒳\nφ : a✝ ⟶ b✝\nψ : b✝ ⟶ c\nR S : 𝒮\na b : 𝒳\ng : p.obj c ⟶ T\ninst✝ : p.IsHomLift (p.map (φ ≫ ψ)) (φ ≫ ψ)\n⊢ p.map (φ ≫ ψ) = p.map (φ ≫ ψ) -/\n/- case map\n𝒮 : Type u₁\n𝒳 : Type u₂\ninst✝¹ : Category.{v₁, u₂} 𝒳\ninst✝ : Category.{v₂, u₁} 𝒮\np : 𝒳 ⥤ 𝒮\nT : 𝒮\na✝ b✝ c : 𝒳\nφ : a✝ ⟶ b✝\nψ : b✝ ⟶ c\nR S : 𝒮\na b : 𝒳\ng : p.obj c ⟶ T\nh : p.IsHomLift (p.map (φ ≫ ψ)) (φ ≫ ψ)\n⊢ p.map (φ ≫ ψ) = p.map (φ ≫ ψ) -/\n/- case map\n𝒮 : Type u₁\n𝒳 : Type u₂\ninst✝¹ : Category.{v₁, u₂} 𝒳\ninst✝ : Category.{v₂, u₁} 𝒮\np : 𝒳 ⥤ 𝒮\nT : 𝒮\na✝ b✝ c : 𝒳\nφ : a✝ ⟶ b✝\nψ : b✝ ⟶ c\nR S : 𝒮\na b : 𝒳\ng : p.obj c ⟶ T\nh : p.IsHomLift (p.map (φ ≫ ψ)) (φ ≫ ψ)\n⊢ p.map (φ ≫ ψ) = p.map (φ ≫ ψ) -/\n/- case map\n𝒮 : Type u₁\n𝒳 : Type u₂\ninst✝¹ : Category.{v₁, u₂} 𝒳\ninst✝ : Category.{v₂, u₁} 𝒮\np : 𝒳 ⥤ 𝒮\nT : 𝒮\na✝ b✝ c : 𝒳\nφ : a✝ ⟶ b✝\nψ : b✝ ⟶ c\nR S : 𝒮\na b : 𝒳\ng : p.obj c ⟶ T\nh : p.IsHomLift (p.map (φ ≫ ψ)) (φ ≫ ψ)\n⊢ p.map (φ ≫ ψ) = p.map (φ ≫ ψ) -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (hyp : f₁ ≫ g₁ = f₂ ≫ g₂) : f₁ ≫ g₁ ≫ h ≫ l = (f₂ ≫ g₂) ≫ (h ≫ l) := by\n  conv =>\n    rhs\n    slice 2 3\n  show f₁ ≫ g₁ ≫ h ≫ l = f₂ ≫ (g₂ ≫ h) ≫ l\n  conv =>\n    lhs\n    slice 1 2\n    rw [hyp]\n  show ((f₂ ≫ g₂) ≫ h) ≫ l = f₂ ≫ (g₂ ≫ h) ≫ l\n  conv =>\n    lhs\n    slice 2 3\nC : Type\ninst✝ : Category.{u_1, 0} C\nX Y Z W U : C\nf₁ f₂ : X ⟶ Y\ng g₁ g₂ : Y ⟶ Z\nh : Z ⟶ W\nl : W ⟶ U\nhyp : f₁ ≫ g₁ = f₂ ≫ g₂\n⊢ f₁ ≫ g₁ ≫ h ≫ l = (f₂ ≫ g₂) ≫ h ≫ l\n", "full_text": "example (hyp : f₁ ≫ g₁ = f₂ ≫ g₂) : f₁ ≫ g₁ ≫ h ≫ l = (f₂ ≫ g₂) ≫ (h ≫ l) := by\n  conv =>\n    rhs\n    slice 2 3\n  show f₁ ≫ g₁ ≫ h ≫ l = f₂ ≫ (g₂ ≫ h) ≫ l\n  conv =>\n    lhs\n    slice 1 2\n    rw [hyp]\n  show ((f₂ ≫ g₂) ≫ h) ≫ l = f₂ ≫ (g₂ ≫ h) ≫ l\n  conv =>\n    lhs\n    slice 2 3\nC : Type\ninst✝ : Category.{u_1, 0} C\nX Y Z W U : C\nf₁ f₂ : X ⟶ Y\ng g₁ g₂ : Y ⟶ Z\nh : Z ⟶ W\nl : W ⟶ U\nhyp : f₁ ≫ g₁ = f₂ ≫ g₂\n⊢ f₁ ≫ g₁ ≫ h ≫ l = (f₂ ≫ g₂) ≫ h ≫ l\n/- C : Type\ninst✝ : Category.{u_1, 0} C\nX Y Z W U : C\nf₁ f₂ : X ⟶ Y\ng g₁ g₂ : Y ⟶ Z\nh : Z ⟶ W\nl : W ⟶ U\nhyp : f₁ ≫ g₁ = f₂ ≫ g₂\n⊢ f₁ ≫ g₁ ≫ h ≫ l = f₂ ≫ (g₂ ≫ h) ≫ l -/\n/- C : Type\ninst✝ : Category.{u_1, 0} C\nX Y Z W U : C\nf₁ f₂ : X ⟶ Y\ng g₁ g₂ : Y ⟶ Z\nh : Z ⟶ W\nl : W ⟶ U\nhyp : f₁ ≫ g₁ = f₂ ≫ g₂\n⊢ f₁ ≫ g₁ ≫ h ≫ l = f₂ ≫ (g₂ ≫ h) ≫ l -/\n/- C : Type\ninst✝ : Category.{u_1, 0} C\nX Y Z W U : C\nf₁ f₂ : X ⟶ Y\ng g₁ g₂ : Y ⟶ Z\nh : Z ⟶ W\nl : W ⟶ U\nhyp : f₁ ≫ g₁ = f₂ ≫ g₂\n⊢ ((f₂ ≫ g₂) ≫ h) ≫ l = f₂ ≫ (g₂ ≫ h) ≫ l -/\n/- C : Type\ninst✝ : Category.{u_1, 0} C\nX Y Z W U : C\nf₁ f₂ : X ⟶ Y\ng g₁ g₂ : Y ⟶ Z\nh : Z ⟶ W\nl : W ⟶ U\nhyp : f₁ ≫ g₁ = f₂ ≫ g₂\n⊢ ((f₂ ≫ g₂) ≫ h) ≫ l = f₂ ≫ (g₂ ≫ h) ≫ l -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (hyp : f₁ ≫ g₁ = f₂ ≫ g₂) : f₁ ≫ g₁ ≫ h ≫ l = (f₂ ≫ g₂) ≫ (h ≫ l) := by\n  slice_lhs 1 2 => { rw [hyp] }; slice_rhs 1 2 => skip\nC : Type\ninst✝ : Category.{u_1, 0} C\nX Y Z W U : C\nf₁ f₂ : X ⟶ Y\ng g₁ g₂ : Y ⟶ Z\nh : Z ⟶ W\nl : W ⟶ U\nhyp : f₁ ≫ g₁ = f₂ ≫ g₂\n⊢ f₁ ≫ g₁ ≫ h ≫ l = (f₂ ≫ g₂) ≫ h ≫ l\n", "full_text": "example (hyp : f₁ ≫ g₁ = f₂ ≫ g₂) : f₁ ≫ g₁ ≫ h ≫ l = (f₂ ≫ g₂) ≫ (h ≫ l) := by\n  slice_lhs 1 2 => { rw [hyp] }; slice_rhs 1 2 => skip\nC : Type\ninst✝ : Category.{u_1, 0} C\nX Y Z W U : C\nf₁ f₂ : X ⟶ Y\ng g₁ g₂ : Y ⟶ Z\nh : Z ⟶ W\nl : W ⟶ U\nhyp : f₁ ≫ g₁ = f₂ ≫ g₂\n⊢ f₁ ≫ g₁ ≫ h ≫ l = (f₂ ≫ g₂) ≫ h ≫ l\n/- C : Type\ninst✝ : Category.{u_1, 0} C\nX Y Z W U : C\nf₁ f₂ : X ⟶ Y\ng g₁ g₂ : Y ⟶ Z\nh : Z ⟶ W\nl : W ⟶ U\nhyp : f₁ ≫ g₁ = f₂ ≫ g₂\n⊢ ((f₂ ≫ g₂) ≫ h) ≫ l = (f₂ ≫ g₂) ≫ h ≫ l -/\n"}
{"prompt": "example (h₁ : f₁ = f₂) : f₁ ≫ g ≫ h ≫ l = ((f₂ ≫ g) ≫ h) ≫ l := by\n  slice_lhs 1 1 => rw [h₁]\nC : Type\ninst✝ : Category.{u_1, 0} C\nX Y Z W U : C\nf₁ f₂ : X ⟶ Y\ng g₁ g₂ : Y ⟶ Z\nh : Z ⟶ W\nl : W ⟶ U\nh₁ : f₁ = f₂\n⊢ f₁ ≫ g ≫ h ≫ l = ((f₂ ≫ g) ≫ h) ≫ l\n", "full_text": "example (h₁ : f₁ = f₂) : f₁ ≫ g ≫ h ≫ l = ((f₂ ≫ g) ≫ h) ≫ l := by\n  slice_lhs 1 1 => rw [h₁]\nC : Type\ninst✝ : Category.{u_1, 0} C\nX Y Z W U : C\nf₁ f₂ : X ⟶ Y\ng g₁ g₂ : Y ⟶ Z\nh : Z ⟶ W\nl : W ⟶ U\nh₁ : f₁ = f₂\n⊢ f₁ ≫ g ≫ h ≫ l = ((f₂ ≫ g) ≫ h) ≫ l\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h₁ : f₁ = f₂) : ((f₂ ≫ g) ≫ h) ≫ l = f₁ ≫ g ≫ h ≫ l := by\n  slice_rhs 1 1 => rw [h₁]\nC : Type\ninst✝ : Category.{u_1, 0} C\nX Y Z W U : C\nf₁ f₂ : X ⟶ Y\ng g₁ g₂ : Y ⟶ Z\nh : Z ⟶ W\nl : W ⟶ U\nh₁ : f₁ = f₂\n⊢ ((f₂ ≫ g) ≫ h) ≫ l = f₁ ≫ g ≫ h ≫ l\n", "full_text": "example (h₁ : f₁ = f₂) : ((f₂ ≫ g) ≫ h) ≫ l = f₁ ≫ g ≫ h ≫ l := by\n  slice_rhs 1 1 => rw [h₁]\nC : Type\ninst✝ : Category.{u_1, 0} C\nX Y Z W U : C\nf₁ f₂ : X ⟶ Y\ng g₁ g₂ : Y ⟶ Z\nh : Z ⟶ W\nl : W ⟶ U\nh₁ : f₁ = f₂\n⊢ ((f₂ ≫ g) ≫ h) ≫ l = f₁ ≫ g ≫ h ≫ l\n/- Goals Accomplished! -/\n"}
{"prompt": "example (j : J) :\n    colimit.ι ((F ⋙ G) ⋙ H) j ≫ (preservesColimitIso (G ⋙ H) F).inv =\n      H.map (G.map (colimit.ι F j)) := by\n\n  -- We know which lemma we want to use, and it's even a simp lemma, but `rw` won't let us apply it\n  fail_if_success rw [ι_preservesColimitIso_inv]\n  fail_if_success rw [ι_preservesColimitIso_inv (G ⋙ H)]\n  fail_if_success simp only [ι_preservesColimitIso_inv]\n\n  -- This would work:\n  -- erw [ι_preservesColimitIso_inv (G ⋙ H)]\n\n  -- `check_compositions` checks if the two morphisms we're composing are composed by abusing defeq,\n  -- and indeed it tells us that we are abusing definitional associativity of composition of\n  -- functors here!\n  check_compositions\n\n  -- In this case, we can \"fix\" this by reassociating in the goal, but usually at this point the\n  -- right thing to do is to back off and check how we ended up with a bad goal in the first place.\n  dsimp only [Functor.assoc]\n\n  -- This would work now, but it is not needed, because simp works as well\n  -- rw [ι_preservesColimitIso_inv]\n\n  simp\nJ : Type u\ninst✝⁵ : Category.{v, u} J\nC : Type u₁\ninst✝⁴ : Category.{v₁, u₁} C\nD : Type u₂\ninst✝³ : Category.{v₂, u₂} D\nobj✝² : Type u_1\ninst✝² : Category.{u_2, u_1} obj✝²\nF : J ⥤ obj✝²\nobj✝¹ : Type u_3\ninst✝¹ : Category.{u_4, u_3} obj✝¹\nG : obj✝² ⥤ obj✝¹\nobj✝ : Type u_5\ninst✝ : Category.{u_6, u_5} obj✝\nH : obj✝¹ ⥤ obj✝\nj : J\n⊢ colimit.ι ((F ⋙ G) ⋙ H) j ≫ sorry = H.map (G.map (colimit.ι F j))\n", "full_text": "example (j : J) :\n    colimit.ι ((F ⋙ G) ⋙ H) j ≫ (preservesColimitIso (G ⋙ H) F).inv =\n      H.map (G.map (colimit.ι F j)) := by\n\n  -- We know which lemma we want to use, and it's even a simp lemma, but `rw` won't let us apply it\n  fail_if_success rw [ι_preservesColimitIso_inv]\n  fail_if_success rw [ι_preservesColimitIso_inv (G ⋙ H)]\n  fail_if_success simp only [ι_preservesColimitIso_inv]\n\n  -- This would work:\n  -- erw [ι_preservesColimitIso_inv (G ⋙ H)]\n\n  -- `check_compositions` checks if the two morphisms we're composing are composed by abusing defeq,\n  -- and indeed it tells us that we are abusing definitional associativity of composition of\n  -- functors here!\n  check_compositions\n\n  -- In this case, we can \"fix\" this by reassociating in the goal, but usually at this point the\n  -- right thing to do is to back off and check how we ended up with a bad goal in the first place.\n  dsimp only [Functor.assoc]\n\n  -- This would work now, but it is not needed, because simp works as well\n  -- rw [ι_preservesColimitIso_inv]\n\n  simp\nJ : Type u\ninst✝⁵ : Category.{v, u} J\nC : Type u₁\ninst✝⁴ : Category.{v₁, u₁} C\nD : Type u₂\ninst✝³ : Category.{v₂, u₂} D\nobj✝² : Type u_1\ninst✝² : Category.{u_2, u_1} obj✝²\nF : J ⥤ obj✝²\nobj✝¹ : Type u_3\ninst✝¹ : Category.{u_4, u_3} obj✝¹\nG : obj✝² ⥤ obj✝¹\nobj✝ : Type u_5\ninst✝ : Category.{u_6, u_5} obj✝\nH : obj✝¹ ⥤ obj✝\nj : J\n⊢ colimit.ι ((F ⋙ G) ⋙ H) j ≫ sorry = H.map (G.map (colimit.ι F j))\n/- J : Type u\ninst✝⁵ : Category.{v, u} J\nC : Type u₁\ninst✝⁴ : Category.{v₁, u₁} C\nD : Type u₂\ninst✝³ : Category.{v₂, u₂} D\nobj✝² : Type u_1\ninst✝² : Category.{u_2, u_1} obj✝²\nF : J ⥤ obj✝²\nobj✝¹ : Type u_3\ninst✝¹ : Category.{u_4, u_3} obj✝¹\nG : obj✝² ⥤ obj✝¹\nobj✝ : Type u_5\ninst✝ : Category.{u_6, u_5} obj✝\nH : obj✝¹ ⥤ obj✝\nj : J\n⊢ colimit.ι ((F ⋙ G) ⋙ H) j ≫ sorry = H.map (G.map (colimit.ι F j)) -/\n/- J : Type u\ninst✝⁵ : Category.{v, u} J\nC : Type u₁\ninst✝⁴ : Category.{v₁, u₁} C\nD : Type u₂\ninst✝³ : Category.{v₂, u₂} D\nobj✝² : Type u_1\ninst✝² : Category.{u_2, u_1} obj✝²\nF : J ⥤ obj✝²\nobj✝¹ : Type u_3\ninst✝¹ : Category.{u_4, u_3} obj✝¹\nG : obj✝² ⥤ obj✝¹\nobj✝ : Type u_5\ninst✝ : Category.{u_6, u_5} obj✝\nH : obj✝¹ ⥤ obj✝\nj : J\n⊢ colimit.ι ((F ⋙ G) ⋙ H) j ≫ sorry = H.map (G.map (colimit.ι F j)) -/\n/- J : Type u\ninst✝⁵ : Category.{v, u} J\nC : Type u₁\ninst✝⁴ : Category.{v₁, u₁} C\nD : Type u₂\ninst✝³ : Category.{v₂, u₂} D\nobj✝² : Type u_1\ninst✝² : Category.{u_2, u_1} obj✝²\nF : J ⥤ obj✝²\nobj✝¹ : Type u_3\ninst✝¹ : Category.{u_4, u_3} obj✝¹\nG : obj✝² ⥤ obj✝¹\nobj✝ : Type u_5\ninst✝ : Category.{u_6, u_5} obj✝\nH : obj✝¹ ⥤ obj✝\nj : J\n⊢ colimit.ι ((F ⋙ G) ⋙ H) j ≫ sorry = H.map (G.map (colimit.ι F j)) -/\n/- J : Type u\ninst✝⁵ : Category.{v, u} J\nC : Type u₁\ninst✝⁴ : Category.{v₁, u₁} C\nD : Type u₂\ninst✝³ : Category.{v₂, u₂} D\nobj✝² : Type u_1\ninst✝² : Category.{u_2, u_1} obj✝²\nF : J ⥤ obj✝²\nobj✝¹ : Type u_3\ninst✝¹ : Category.{u_4, u_3} obj✝¹\nG : obj✝² ⥤ obj✝¹\nobj✝ : Type u_5\ninst✝ : Category.{u_6, u_5} obj✝\nH : obj✝¹ ⥤ obj✝\nj : J\n⊢ colimit.ι ((F ⋙ G) ⋙ H) j ≫ sorry = H.map (G.map (colimit.ι F j)) -/\n/- J : Type u\ninst✝⁵ : Category.{v, u} J\nC : Type u₁\ninst✝⁴ : Category.{v₁, u₁} C\nD : Type u₂\ninst✝³ : Category.{v₂, u₂} D\nobj✝² : Type u_1\ninst✝² : Category.{u_2, u_1} obj✝²\nF : J ⥤ obj✝²\nobj✝¹ : Type u_3\ninst✝¹ : Category.{u_4, u_3} obj✝¹\nG : obj✝² ⥤ obj✝¹\nobj✝ : Type u_5\ninst✝ : Category.{u_6, u_5} obj✝\nH : obj✝¹ ⥤ obj✝\nj : J\n⊢ colimit.ι (F ⋙ G ⋙ H) j ≫ sorry = H.map (G.map (colimit.ι F j)) -/\n/- J : Type u\ninst✝⁵ : Category.{v, u} J\nC : Type u₁\ninst✝⁴ : Category.{v₁, u₁} C\nD : Type u₂\ninst✝³ : Category.{v₂, u₂} D\nobj✝² : Type u_1\ninst✝² : Category.{u_2, u_1} obj✝²\nF : J ⥤ obj✝²\nobj✝¹ : Type u_3\ninst✝¹ : Category.{u_4, u_3} obj✝¹\nG : obj✝² ⥤ obj✝¹\nobj✝ : Type u_5\ninst✝ : Category.{u_6, u_5} obj✝\nH : obj✝¹ ⥤ obj✝\nj : J\n⊢ colimit.ι (F ⋙ G ⋙ H) j ≫ sorry () = H.map (G.map (colimit.ι F j)) -/\n"}
{"prompt": "example (X₁ X₂ : C) :\n    ((λ_ (𝟙_ C)).inv ⊗ 𝟙 (X₁ ⊗ X₂)) ≫ (α_ (𝟙_ C) (𝟙_ C) (X₁ ⊗ X₂)).hom ≫\n      (𝟙 (𝟙_ C) ⊗ (α_ (𝟙_ C) X₁ X₂).inv) =\n    𝟙 (𝟙_ C) ⊗ ((λ_ X₁).inv ⊗ 𝟙 X₂) := by\n  pure_coherence\n  -- This is just running:\n  -- change projectMap id _ _ (LiftHom.lift (((λ_ (𝟙_ C)).inv ⊗ 𝟙 (X₁ ⊗ X₂)) ≫\n  --     (α_ (𝟙_ C) (𝟙_ C) (X₁ ⊗ X₂)).hom ≫ (𝟙 (𝟙_ C) ⊗ (α_ (𝟙_ C) X₁ X₂).inv))) =\n  --   projectMap id _ _ (LiftHom.lift (𝟙 (𝟙_ C) ⊗ ((λ_ X₁).inv ⊗ 𝟙 X₂)))\n  -- exact congrArg _ (Subsingleton.elim _ _)\nC : Type u\ninst✝¹ : Category.{v, u} C\ninst✝ : MonoidalCategory C\nX₁ X₂ : C\n⊢ ((λ_ (𝟙_ C)).inv ⊗ 𝟙 (X₁ ⊗ X₂)) ≫ (α_ (𝟙_ C) (𝟙_ C) (X₁ ⊗ X₂)).hom ≫ (𝟙 (𝟙_ C) ⊗ (α_ (𝟙_ C) X₁ X₂).inv) =\n    𝟙 (𝟙_ C) ⊗ (λ_ X₁).inv ⊗ 𝟙 X₂\n", "full_text": "example (X₁ X₂ : C) :\n    ((λ_ (𝟙_ C)).inv ⊗ 𝟙 (X₁ ⊗ X₂)) ≫ (α_ (𝟙_ C) (𝟙_ C) (X₁ ⊗ X₂)).hom ≫\n      (𝟙 (𝟙_ C) ⊗ (α_ (𝟙_ C) X₁ X₂).inv) =\n    𝟙 (𝟙_ C) ⊗ ((λ_ X₁).inv ⊗ 𝟙 X₂) := by\n  pure_coherence\n  -- This is just running:\n  -- change projectMap id _ _ (LiftHom.lift (((λ_ (𝟙_ C)).inv ⊗ 𝟙 (X₁ ⊗ X₂)) ≫\n  --     (α_ (𝟙_ C) (𝟙_ C) (X₁ ⊗ X₂)).hom ≫ (𝟙 (𝟙_ C) ⊗ (α_ (𝟙_ C) X₁ X₂).inv))) =\n  --   projectMap id _ _ (LiftHom.lift (𝟙 (𝟙_ C) ⊗ ((λ_ X₁).inv ⊗ 𝟙 X₂)))\n  -- exact congrArg _ (Subsingleton.elim _ _)\nC : Type u\ninst✝¹ : Category.{v, u} C\ninst✝ : MonoidalCategory C\nX₁ X₂ : C\n⊢ ((λ_ (𝟙_ C)).inv ⊗ 𝟙 (X₁ ⊗ X₂)) ≫ (α_ (𝟙_ C) (𝟙_ C) (X₁ ⊗ X₂)).hom ≫ (𝟙 (𝟙_ C) ⊗ (α_ (𝟙_ C) X₁ X₂).inv) =\n    𝟙 (𝟙_ C) ⊗ (λ_ X₁).inv ⊗ 𝟙 X₂\n/- Goals Accomplished! -/\n"}
{"prompt": "example {Y Z : C} (f : Y ⟶ Z) (g) (w : false) : (λ_ _).hom ≫ f = g := by\n  liftable_prefixes\n  guard_target = (𝟙 _ ≫ (λ_ _).hom) ≫ f = (𝟙 _) ≫ g\n  cases w\nC : Type u\ninst✝¹ : Category.{v, u} C\ninst✝ : MonoidalCategory C\nY Z : C\nf : Y ⟶ Z\ng : 𝟙_ C ⊗ Y ⟶ Z\nw : false = true\n⊢ (λ_ Y).hom ≫ f = g\n", "full_text": "example {Y Z : C} (f : Y ⟶ Z) (g) (w : false) : (λ_ _).hom ≫ f = g := by\n  liftable_prefixes\n  guard_target = (𝟙 _ ≫ (λ_ _).hom) ≫ f = (𝟙 _) ≫ g\n  cases w\nC : Type u\ninst✝¹ : Category.{v, u} C\ninst✝ : MonoidalCategory C\nY Z : C\nf : Y ⟶ Z\ng : 𝟙_ C ⊗ Y ⟶ Z\nw : false = true\n⊢ (λ_ Y).hom ≫ f = g\n/- C : Type u\ninst✝¹ : Category.{v, u} C\ninst✝ : MonoidalCategory C\nY Z : C\nf : Y ⟶ Z\ng : 𝟙_ C ⊗ Y ⟶ Z\nw : false = true\n⊢ (𝟙 (𝟙_ C ⊗ Y) ≫ (λ_ Y).hom) ≫ f = 𝟙 (𝟙_ C ⊗ Y) ≫ g -/\n/- C : Type u\ninst✝¹ : Category.{v, u} C\ninst✝ : MonoidalCategory C\nY Z : C\nf : Y ⟶ Z\ng : 𝟙_ C ⊗ Y ⟶ Z\nw : false = true\n⊢ (𝟙 (𝟙_ C ⊗ Y) ≫ (λ_ Y).hom) ≫ f = 𝟙 (𝟙_ C ⊗ Y) ≫ g -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (f : 𝟙_ C ⟶ _) : f ≫ (λ_ (𝟙_ C)).hom = f ≫ (ρ_ (𝟙_ C)).hom := by\n  coherence\nC : Type u\ninst✝¹ : Category.{v, u} C\ninst✝ : MonoidalCategory C\nf : 𝟙_ C ⟶ 𝟙_ C ⊗ 𝟙_ C\n⊢ f ≫ (λ_ (𝟙_ C)).hom = f ≫ (ρ_ (𝟙_ C)).hom\n", "full_text": "example (f : 𝟙_ C ⟶ _) : f ≫ (λ_ (𝟙_ C)).hom = f ≫ (ρ_ (𝟙_ C)).hom := by\n  coherence\nC : Type u\ninst✝¹ : Category.{v, u} C\ninst✝ : MonoidalCategory C\nf : 𝟙_ C ⟶ 𝟙_ C ⊗ 𝟙_ C\n⊢ f ≫ (λ_ (𝟙_ C)).hom = f ≫ (ρ_ (𝟙_ C)).hom\n/- Goals Accomplished! -/\n"}
{"prompt": "example (f) : (λ_ (𝟙_ C)).hom ≫ f ≫ (λ_ (𝟙_ C)).hom = (ρ_ (𝟙_ C)).hom ≫ f ≫ (ρ_ (𝟙_ C)).hom := by\n  coherence\nC : Type u\ninst✝¹ : Category.{v, u} C\ninst✝ : MonoidalCategory C\nf : 𝟙_ C ⟶ 𝟙_ C ⊗ 𝟙_ C\n⊢ (λ_ (𝟙_ C)).hom ≫ f ≫ (λ_ (𝟙_ C)).hom = (ρ_ (𝟙_ C)).hom ≫ f ≫ (ρ_ (𝟙_ C)).hom\n", "full_text": "example (f) : (λ_ (𝟙_ C)).hom ≫ f ≫ (λ_ (𝟙_ C)).hom = (ρ_ (𝟙_ C)).hom ≫ f ≫ (ρ_ (𝟙_ C)).hom := by\n  coherence\nC : Type u\ninst✝¹ : Category.{v, u} C\ninst✝ : MonoidalCategory C\nf : 𝟙_ C ⟶ 𝟙_ C ⊗ 𝟙_ C\n⊢ (λ_ (𝟙_ C)).hom ≫ f ≫ (λ_ (𝟙_ C)).hom = (ρ_ (𝟙_ C)).hom ≫ f ≫ (ρ_ (𝟙_ C)).hom\n/- Goals Accomplished! -/\n"}
{"prompt": "example {U : C} (f : U ⟶ 𝟙_ C) : f ≫ (ρ_ (𝟙_ C)).inv ≫ (λ_ (𝟙_ C)).hom = f := by\n  coherence\nC : Type u\ninst✝¹ : Category.{v, u} C\ninst✝ : MonoidalCategory C\nU : C\nf : U ⟶ 𝟙_ C\n⊢ f ≫ (ρ_ (𝟙_ C)).inv ≫ (λ_ (𝟙_ C)).hom = f\n", "full_text": "example {U : C} (f : U ⟶ 𝟙_ C) : f ≫ (ρ_ (𝟙_ C)).inv ≫ (λ_ (𝟙_ C)).hom = f := by\n  coherence\nC : Type u\ninst✝¹ : Category.{v, u} C\ninst✝ : MonoidalCategory C\nU : C\nf : U ⟶ 𝟙_ C\n⊢ f ≫ (ρ_ (𝟙_ C)).inv ≫ (λ_ (𝟙_ C)).hom = f\n/- Goals Accomplished! -/\n"}
{"prompt": "example (W X Y Z : C) (f) :\n    ((α_ W X Y).hom ⊗ 𝟙 Z) ≫ (α_ W (X ⊗ Y) Z).hom ≫ (𝟙 W ⊗ (α_ X Y Z).hom) ≫ f ≫\n      (α_ (W ⊗ X) Y Z).hom ≫ (α_ W X (Y ⊗ Z)).hom =\n    (α_ (W ⊗ X) Y Z).hom ≫ (α_ W X (Y ⊗ Z)).hom ≫ f ≫\n      ((α_ W X Y).hom ⊗ 𝟙 Z) ≫ (α_ W (X ⊗ Y) Z).hom ≫ (𝟙 W ⊗ (α_ X Y Z).hom) := by\n  coherence\nC : Type u\ninst✝¹ : Category.{v, u} C\ninst✝ : MonoidalCategory C\nW X Y Z : C\nf : W ⊗ X ⊗ Y ⊗ Z ⟶ ((W ⊗ X) ⊗ Y) ⊗ Z\n⊢ ((α_ W X Y).hom ⊗ 𝟙 Z) ≫\n      (α_ W (X ⊗ Y) Z).hom ≫ (𝟙 W ⊗ (α_ X Y Z).hom) ≫ f ≫ (α_ (W ⊗ X) Y Z).hom ≫ (α_ W X (Y ⊗ Z)).hom =\n    (α_ (W ⊗ X) Y Z).hom ≫\n      (α_ W X (Y ⊗ Z)).hom ≫ f ≫ ((α_ W X Y).hom ⊗ 𝟙 Z) ≫ (α_ W (X ⊗ Y) Z).hom ≫ (𝟙 W ⊗ (α_ X Y Z).hom)\n", "full_text": "example (W X Y Z : C) (f) :\n    ((α_ W X Y).hom ⊗ 𝟙 Z) ≫ (α_ W (X ⊗ Y) Z).hom ≫ (𝟙 W ⊗ (α_ X Y Z).hom) ≫ f ≫\n      (α_ (W ⊗ X) Y Z).hom ≫ (α_ W X (Y ⊗ Z)).hom =\n    (α_ (W ⊗ X) Y Z).hom ≫ (α_ W X (Y ⊗ Z)).hom ≫ f ≫\n      ((α_ W X Y).hom ⊗ 𝟙 Z) ≫ (α_ W (X ⊗ Y) Z).hom ≫ (𝟙 W ⊗ (α_ X Y Z).hom) := by\n  coherence\nC : Type u\ninst✝¹ : Category.{v, u} C\ninst✝ : MonoidalCategory C\nW X Y Z : C\nf : W ⊗ X ⊗ Y ⊗ Z ⟶ ((W ⊗ X) ⊗ Y) ⊗ Z\n⊢ ((α_ W X Y).hom ⊗ 𝟙 Z) ≫\n      (α_ W (X ⊗ Y) Z).hom ≫ (𝟙 W ⊗ (α_ X Y Z).hom) ≫ f ≫ (α_ (W ⊗ X) Y Z).hom ≫ (α_ W X (Y ⊗ Z)).hom =\n    (α_ (W ⊗ X) Y Z).hom ≫\n      (α_ W X (Y ⊗ Z)).hom ≫ f ≫ ((α_ W X Y).hom ⊗ 𝟙 Z) ≫ (α_ W (X ⊗ Y) Z).hom ≫ (𝟙 W ⊗ (α_ X Y Z).hom)\n/- Goals Accomplished! -/\n"}
{"prompt": "example {U V W X Y : C} (f : U ⟶ V ⊗ (W ⊗ X)) (g : (V ⊗ W) ⊗ X ⟶ Y) :\n    f ⊗≫ g = f ≫ (α_ _ _ _).inv ≫ g := by\n  coherence\nC : Type u\ninst✝¹ : Category.{v, u} C\ninst✝ : MonoidalCategory C\nU V W X Y : C\nf : U ⟶ V ⊗ W ⊗ X\ng : (V ⊗ W) ⊗ X ⟶ Y\n⊢ f ⊗≫ g = f ≫ (α_ V W X).inv ≫ g\n", "full_text": "example {U V W X Y : C} (f : U ⟶ V ⊗ (W ⊗ X)) (g : (V ⊗ W) ⊗ X ⟶ Y) :\n    f ⊗≫ g = f ≫ (α_ _ _ _).inv ≫ g := by\n  coherence\nC : Type u\ninst✝¹ : Category.{v, u} C\ninst✝ : MonoidalCategory C\nU V W X Y : C\nf : U ⟶ V ⊗ W ⊗ X\ng : (V ⊗ W) ⊗ X ⟶ Y\n⊢ f ⊗≫ g = f ≫ (α_ V W X).inv ≫ g\n/- Goals Accomplished! -/\n"}
{"prompt": "example (X Y Z W : C) :\n  (𝟙 X ⊗ (α_ Y Z W).hom) ≫ (α_ X Y (Z ⊗ W)).inv ≫ (α_ (X ⊗ Y) Z W).inv =\n    (α_ X (Y ⊗ Z) W).inv ≫ ((α_ X Y Z).inv ⊗ 𝟙 W) := by\n  coherence\nC : Type u\ninst✝¹ : Category.{v, u} C\ninst✝ : MonoidalCategory C\nX Y Z W : C\n⊢ (𝟙 X ⊗ (α_ Y Z W).hom) ≫ (α_ X Y (Z ⊗ W)).inv ≫ (α_ (X ⊗ Y) Z W).inv = (α_ X (Y ⊗ Z) W).inv ≫ ((α_ X Y Z).inv ⊗ 𝟙 W)\n", "full_text": "example (X Y Z W : C) :\n  (𝟙 X ⊗ (α_ Y Z W).hom) ≫ (α_ X Y (Z ⊗ W)).inv ≫ (α_ (X ⊗ Y) Z W).inv =\n    (α_ X (Y ⊗ Z) W).inv ≫ ((α_ X Y Z).inv ⊗ 𝟙 W) := by\n  coherence\nC : Type u\ninst✝¹ : Category.{v, u} C\ninst✝ : MonoidalCategory C\nX Y Z W : C\n⊢ (𝟙 X ⊗ (α_ Y Z W).hom) ≫ (α_ X Y (Z ⊗ W)).inv ≫ (α_ (X ⊗ Y) Z W).inv = (α_ X (Y ⊗ Z) W).inv ≫ ((α_ X Y Z).inv ⊗ 𝟙 W)\n/- Goals Accomplished! -/\n"}
{"prompt": "example (X Y : C) :\n  (𝟙 X ⊗ (λ_ Y).inv) ≫ (α_ X (𝟙_ C) Y).inv = (ρ_ X).inv ⊗ 𝟙 Y := by\n  coherence\nC : Type u\ninst✝¹ : Category.{v, u} C\ninst✝ : MonoidalCategory C\nX Y : C\n⊢ (𝟙 X ⊗ (λ_ Y).inv) ≫ (α_ X (𝟙_ C) Y).inv = (ρ_ X).inv ⊗ 𝟙 Y\n", "full_text": "example (X Y : C) :\n  (𝟙 X ⊗ (λ_ Y).inv) ≫ (α_ X (𝟙_ C) Y).inv = (ρ_ X).inv ⊗ 𝟙 Y := by\n  coherence\nC : Type u\ninst✝¹ : Category.{v, u} C\ninst✝ : MonoidalCategory C\nX Y : C\n⊢ (𝟙 X ⊗ (λ_ Y).inv) ≫ (α_ X (𝟙_ C) Y).inv = (ρ_ X).inv ⊗ 𝟙 Y\n/- Goals Accomplished! -/\n"}
{"prompt": "example (X Y : C) (f : 𝟙_ C ⟶ X) (g : X ⟶ Y) (_w : false) :\n  (λ_ (𝟙_ C)).hom ≫ f ≫ 𝟙 X ≫ g = (ρ_ (𝟙_ C)).hom ≫ f ≫ g := by\n  coherence\nC : Type u\ninst✝¹ : Category.{v, u} C\ninst✝ : MonoidalCategory C\nX Y : C\nf : 𝟙_ C ⟶ X\ng : X ⟶ Y\n_w : false = true\n⊢ (λ_ (𝟙_ C)).hom ≫ f ≫ 𝟙 X ≫ g = (ρ_ (𝟙_ C)).hom ≫ f ≫ g\n", "full_text": "example (X Y : C) (f : 𝟙_ C ⟶ X) (g : X ⟶ Y) (_w : false) :\n  (λ_ (𝟙_ C)).hom ≫ f ≫ 𝟙 X ≫ g = (ρ_ (𝟙_ C)).hom ≫ f ≫ g := by\n  coherence\nC : Type u\ninst✝¹ : Category.{v, u} C\ninst✝ : MonoidalCategory C\nX Y : C\nf : 𝟙_ C ⟶ X\ng : X ⟶ Y\n_w : false = true\n⊢ (λ_ (𝟙_ C)).hom ≫ f ≫ 𝟙 X ≫ g = (ρ_ (𝟙_ C)).hom ≫ f ≫ g\n/- Goals Accomplished! -/\n"}
{"prompt": "example (X₁ X₂ : C) :\n  (α_ (𝟙_ C) (𝟙_ C) (X₁ ⊗ X₂)).hom ≫\n    (𝟙 (𝟙_ C) ⊗ (α_ (𝟙_ C) X₁ X₂).inv) ≫\n      (𝟙 (𝟙_ C) ⊗ (λ_ _).hom ≫ (ρ_ X₁).inv ⊗ 𝟙 X₂) ≫\n        (𝟙 (𝟙_ C) ⊗ (α_ X₁ (𝟙_ C) X₂).hom) ≫\n          (α_ (𝟙_ C) X₁ (𝟙_ C ⊗ X₂)).inv ≫\n            ((λ_ X₁).hom ≫ (ρ_ X₁).inv ⊗ 𝟙 (𝟙_ C ⊗ X₂)) ≫\n              (α_ X₁ (𝟙_ C) (𝟙_ C ⊗ X₂)).hom ≫\n                (𝟙 X₁ ⊗ 𝟙 (𝟙_ C) ⊗ (λ_ X₂).hom ≫ (ρ_ X₂).inv) ≫\n                  (𝟙 X₁ ⊗ (α_ (𝟙_ C) X₂ (𝟙_ C)).inv) ≫\n                    (𝟙 X₁ ⊗ (λ_ X₂).hom ≫ (ρ_ X₂).inv ⊗ 𝟙 (𝟙_ C)) ≫\n                      (𝟙 X₁ ⊗ (α_ X₂ (𝟙_ C) (𝟙_ C)).hom) ≫\n                        (α_ X₁ X₂ (𝟙_ C ⊗ 𝟙_ C)).inv =\n  (((λ_ (𝟙_ C)).hom ⊗ 𝟙 (X₁ ⊗ X₂)) ≫ (λ_ (X₁ ⊗ X₂)).hom ≫ (ρ_ (X₁ ⊗ X₂)).inv) ≫\n    (𝟙 (X₁ ⊗ X₂) ⊗ (λ_ (𝟙_ C)).inv) := by\n  coherence\nC : Type u\ninst✝¹ : Category.{v, u} C\ninst✝ : MonoidalCategory C\nX₁ X₂ : C\n⊢ (α_ (𝟙_ C) (𝟙_ C) (X₁ ⊗ X₂)).hom ≫\n      (𝟙 (𝟙_ C) ⊗ (α_ (𝟙_ C) X₁ X₂).inv) ≫\n        (𝟙 (𝟙_ C) ⊗ (λ_ X₁).hom ≫ (ρ_ X₁).inv ⊗ 𝟙 X₂) ≫\n          (𝟙 (𝟙_ C) ⊗ (α_ X₁ (𝟙_ C) X₂).hom) ≫\n            (α_ (𝟙_ C) X₁ (𝟙_ C ⊗ X₂)).inv ≫\n              ((λ_ X₁).hom ≫ (ρ_ X₁).inv ⊗ 𝟙 (𝟙_ C ⊗ X₂)) ≫\n                (α_ X₁ (𝟙_ C) (𝟙_ C ⊗ X₂)).hom ≫\n                  (𝟙 X₁ ⊗ 𝟙 (𝟙_ C) ⊗ (λ_ X₂).hom ≫ (ρ_ X₂).inv) ≫\n                    (𝟙 X₁ ⊗ (α_ (𝟙_ C) X₂ (𝟙_ C)).inv) ≫\n                      (𝟙 X₁ ⊗ (λ_ X₂).hom ≫ (ρ_ X₂).inv ⊗ 𝟙 (𝟙_ C)) ≫\n                        (𝟙 X₁ ⊗ (α_ X₂ (𝟙_ C) (𝟙_ C)).hom) ≫ (α_ X₁ X₂ (𝟙_ C ⊗ 𝟙_ C)).inv =\n    (((λ_ (𝟙_ C)).hom ⊗ 𝟙 (X₁ ⊗ X₂)) ≫ (λ_ (X₁ ⊗ X₂)).hom ≫ (ρ_ (X₁ ⊗ X₂)).inv) ≫ (𝟙 (X₁ ⊗ X₂) ⊗ (λ_ (𝟙_ C)).inv)\n", "full_text": "example (X₁ X₂ : C) :\n  (α_ (𝟙_ C) (𝟙_ C) (X₁ ⊗ X₂)).hom ≫\n    (𝟙 (𝟙_ C) ⊗ (α_ (𝟙_ C) X₁ X₂).inv) ≫\n      (𝟙 (𝟙_ C) ⊗ (λ_ _).hom ≫ (ρ_ X₁).inv ⊗ 𝟙 X₂) ≫\n        (𝟙 (𝟙_ C) ⊗ (α_ X₁ (𝟙_ C) X₂).hom) ≫\n          (α_ (𝟙_ C) X₁ (𝟙_ C ⊗ X₂)).inv ≫\n            ((λ_ X₁).hom ≫ (ρ_ X₁).inv ⊗ 𝟙 (𝟙_ C ⊗ X₂)) ≫\n              (α_ X₁ (𝟙_ C) (𝟙_ C ⊗ X₂)).hom ≫\n                (𝟙 X₁ ⊗ 𝟙 (𝟙_ C) ⊗ (λ_ X₂).hom ≫ (ρ_ X₂).inv) ≫\n                  (𝟙 X₁ ⊗ (α_ (𝟙_ C) X₂ (𝟙_ C)).inv) ≫\n                    (𝟙 X₁ ⊗ (λ_ X₂).hom ≫ (ρ_ X₂).inv ⊗ 𝟙 (𝟙_ C)) ≫\n                      (𝟙 X₁ ⊗ (α_ X₂ (𝟙_ C) (𝟙_ C)).hom) ≫\n                        (α_ X₁ X₂ (𝟙_ C ⊗ 𝟙_ C)).inv =\n  (((λ_ (𝟙_ C)).hom ⊗ 𝟙 (X₁ ⊗ X₂)) ≫ (λ_ (X₁ ⊗ X₂)).hom ≫ (ρ_ (X₁ ⊗ X₂)).inv) ≫\n    (𝟙 (X₁ ⊗ X₂) ⊗ (λ_ (𝟙_ C)).inv) := by\n  coherence\nC : Type u\ninst✝¹ : Category.{v, u} C\ninst✝ : MonoidalCategory C\nX₁ X₂ : C\n⊢ (α_ (𝟙_ C) (𝟙_ C) (X₁ ⊗ X₂)).hom ≫\n      (𝟙 (𝟙_ C) ⊗ (α_ (𝟙_ C) X₁ X₂).inv) ≫\n        (𝟙 (𝟙_ C) ⊗ (λ_ X₁).hom ≫ (ρ_ X₁).inv ⊗ 𝟙 X₂) ≫\n          (𝟙 (𝟙_ C) ⊗ (α_ X₁ (𝟙_ C) X₂).hom) ≫\n            (α_ (𝟙_ C) X₁ (𝟙_ C ⊗ X₂)).inv ≫\n              ((λ_ X₁).hom ≫ (ρ_ X₁).inv ⊗ 𝟙 (𝟙_ C ⊗ X₂)) ≫\n                (α_ X₁ (𝟙_ C) (𝟙_ C ⊗ X₂)).hom ≫\n                  (𝟙 X₁ ⊗ 𝟙 (𝟙_ C) ⊗ (λ_ X₂).hom ≫ (ρ_ X₂).inv) ≫\n                    (𝟙 X₁ ⊗ (α_ (𝟙_ C) X₂ (𝟙_ C)).inv) ≫\n                      (𝟙 X₁ ⊗ (λ_ X₂).hom ≫ (ρ_ X₂).inv ⊗ 𝟙 (𝟙_ C)) ≫\n                        (𝟙 X₁ ⊗ (α_ X₂ (𝟙_ C) (𝟙_ C)).hom) ≫ (α_ X₁ X₂ (𝟙_ C ⊗ 𝟙_ C)).inv =\n    (((λ_ (𝟙_ C)).hom ⊗ 𝟙 (X₁ ⊗ X₂)) ≫ (λ_ (X₁ ⊗ X₂)).hom ≫ (ρ_ (X₁ ⊗ X₂)).inv) ≫ (𝟙 (X₁ ⊗ X₂) ⊗ (λ_ (𝟙_ C)).inv)\n/- Goals Accomplished! -/\n"}
{"prompt": "example (f : a ⟶ b) (g : b ⟶ c) (h : c ⟶ d) :\n  (α_ f g h).inv ≫ (α_ f g h).hom = 𝟙 (f ≫ g ≫ h) := by\n  bicategory_coherence\nC : Type u\ninst✝² : Category.{v, u} C\ninst✝¹ : MonoidalCategory C\nB : Type u\ninst✝ : Bicategory B\na b c d e : B\nf : a ⟶ b\ng : b ⟶ c\nh : c ⟶ d\n⊢ (α_ f g h).inv ≫ (α_ f g h).hom = 𝟙 (f ≫ g ≫ h)\n", "full_text": "example (f : a ⟶ b) (g : b ⟶ c) (h : c ⟶ d) :\n  (α_ f g h).inv ≫ (α_ f g h).hom = 𝟙 (f ≫ g ≫ h) := by\n  bicategory_coherence\nC : Type u\ninst✝² : Category.{v, u} C\ninst✝¹ : MonoidalCategory C\nB : Type u\ninst✝ : Bicategory B\na b c d e : B\nf : a ⟶ b\ng : b ⟶ c\nh : c ⟶ d\n⊢ (α_ f g h).inv ≫ (α_ f g h).hom = 𝟙 (f ≫ g ≫ h)\n/- Goals Accomplished! -/\n"}
{"prompt": "example (f : a ⟶ b) (g : b ⟶ c) (h : c ⟶ d) (i : d ⟶ e) :\n  f ◁ (α_ g h i).hom ≫ (α_ f g (h ≫ i)).inv ≫ (α_ (f ≫ g) h i).inv =\n    (α_ f (g ≫ h) i).inv ≫ (α_ f g h).inv ▷ i := by\n  bicategory_coherence\nC : Type u\ninst✝² : Category.{v, u} C\ninst✝¹ : MonoidalCategory C\nB : Type u\ninst✝ : Bicategory B\na b c d e : B\nf : a ⟶ b\ng : b ⟶ c\nh : c ⟶ d\ni : d ⟶ e\n⊢ f ◁ (α_ g h i).hom ≫ (α_ f g (h ≫ i)).inv ≫ (α_ (f ≫ g) h i).inv = (α_ f (g ≫ h) i).inv ≫ (α_ f g h).inv ▷ i\n", "full_text": "example (f : a ⟶ b) (g : b ⟶ c) (h : c ⟶ d) (i : d ⟶ e) :\n  f ◁ (α_ g h i).hom ≫ (α_ f g (h ≫ i)).inv ≫ (α_ (f ≫ g) h i).inv =\n    (α_ f (g ≫ h) i).inv ≫ (α_ f g h).inv ▷ i := by\n  bicategory_coherence\nC : Type u\ninst✝² : Category.{v, u} C\ninst✝¹ : MonoidalCategory C\nB : Type u\ninst✝ : Bicategory B\na b c d e : B\nf : a ⟶ b\ng : b ⟶ c\nh : c ⟶ d\ni : d ⟶ e\n⊢ f ◁ (α_ g h i).hom ≫ (α_ f g (h ≫ i)).inv ≫ (α_ (f ≫ g) h i).inv = (α_ f (g ≫ h) i).inv ≫ (α_ f g h).inv ▷ i\n/- Goals Accomplished! -/\n"}
{"prompt": "example (f : a ⟶ b) (g : b ⟶ c) :\n  f ◁ (λ_ g).inv ≫ (α_ f (𝟙 b) g).inv = (ρ_ f).inv ▷ g := by\n  bicategory_coherence\nC : Type u\ninst✝² : Category.{v, u} C\ninst✝¹ : MonoidalCategory C\nB : Type u\ninst✝ : Bicategory B\na b c d e : B\nf : a ⟶ b\ng : b ⟶ c\n⊢ sorry ≫ (α_ f (𝟙 b) g).inv = sorry\n", "full_text": "example (f : a ⟶ b) (g : b ⟶ c) :\n  f ◁ (λ_ g).inv ≫ (α_ f (𝟙 b) g).inv = (ρ_ f).inv ▷ g := by\n  bicategory_coherence\nC : Type u\ninst✝² : Category.{v, u} C\ninst✝¹ : MonoidalCategory C\nB : Type u\ninst✝ : Bicategory B\na b c d e : B\nf : a ⟶ b\ng : b ⟶ c\n⊢ sorry ≫ (α_ f (𝟙 b) g).inv = sorry\n/- C : Type u\ninst✝² : Category.{v, u} C\ninst✝¹ : MonoidalCategory C\nB : Type u\ninst✝ : Bicategory B\na b c d e : B\nf : a ⟶ b\ng : b ⟶ c\n⊢ sorry ≫ (α_ f (𝟙 b) g).inv = sorry -/\n"}
{"prompt": "example : 𝟙 (𝟙 a ≫ 𝟙 a) ≫ (λ_ (𝟙 a)).hom = 𝟙 (𝟙 a ≫ 𝟙 a) ≫ (ρ_ (𝟙 a)).hom := by\n  bicategory_coherence\nC : Type u\ninst✝² : Category.{v, u} C\ninst✝¹ : MonoidalCategory C\nB : Type u\ninst✝ : Bicategory B\na b c d e : B\n⊢ 𝟙 (𝟙 a ≫ 𝟙 a) ≫ sorry = 𝟙 (𝟙 a ≫ 𝟙 a) ≫ sorry\n", "full_text": "example : 𝟙 (𝟙 a ≫ 𝟙 a) ≫ (λ_ (𝟙 a)).hom = 𝟙 (𝟙 a ≫ 𝟙 a) ≫ (ρ_ (𝟙 a)).hom := by\n  bicategory_coherence\nC : Type u\ninst✝² : Category.{v, u} C\ninst✝¹ : MonoidalCategory C\nB : Type u\ninst✝ : Bicategory B\na b c d e : B\n⊢ 𝟙 (𝟙 a ≫ 𝟙 a) ≫ sorry = 𝟙 (𝟙 a ≫ 𝟙 a) ≫ sorry\n/- C : Type u\ninst✝² : Category.{v, u} C\ninst✝¹ : MonoidalCategory C\nB : Type u\ninst✝ : Bicategory B\na b c d e : B\n⊢ 𝟙 (𝟙 a ≫ 𝟙 a) ≫ sorry = 𝟙 (𝟙 a ≫ 𝟙 a) ≫ sorry -/\n"}
{"prompt": "example (f g : a ⟶ a) (η : 𝟙 a ⟶ f) (θ : f ⟶ g) (w : false) :\n  (λ_ (𝟙 a)).hom ≫ η ≫ θ = (ρ_ (𝟙 a)).hom ≫ η ≫ θ := by\n  coherence\nC : Type u\ninst✝² : Category.{v, u} C\ninst✝¹ : MonoidalCategory C\nB : Type u\ninst✝ : Bicategory B\na b c d e : B\nf g : a ⟶ a\nη : 𝟙 a ⟶ f\nθ : f ⟶ g\nw : false = true\n⊢ sorry ≫ η ≫ θ = sorry ≫ η ≫ θ\n", "full_text": "example (f g : a ⟶ a) (η : 𝟙 a ⟶ f) (θ : f ⟶ g) (w : false) :\n  (λ_ (𝟙 a)).hom ≫ η ≫ θ = (ρ_ (𝟙 a)).hom ≫ η ≫ θ := by\n  coherence\nC : Type u\ninst✝² : Category.{v, u} C\ninst✝¹ : MonoidalCategory C\nB : Type u\ninst✝ : Bicategory B\na b c d e : B\nf g : a ⟶ a\nη : 𝟙 a ⟶ f\nθ : f ⟶ g\nw : false = true\n⊢ sorry ≫ η ≫ θ = sorry ≫ η ≫ θ\n/- Goals Accomplished! -/\n"}
{"prompt": "example (f₁ : a ⟶ b) (f₂ : b ⟶ c) :\n  (α_ (𝟙 a) (𝟙 a) (f₁ ≫ f₂)).hom ≫\n    𝟙 a ◁ (α_ (𝟙 a) f₁ f₂).inv ≫\n      𝟙 a ◁ ((λ_ f₁).hom ≫ (ρ_ f₁).inv) ▷ f₂ ≫\n        𝟙 a ◁ (α_ f₁ (𝟙 b) f₂).hom ≫\n          (α_ (𝟙 a) f₁ (𝟙 b ≫ f₂)).inv ≫\n            ((λ_ f₁).hom ≫ (ρ_ f₁).inv) ▷ (𝟙 b ≫ f₂) ≫\n              (α_ f₁ (𝟙 b) (𝟙 b ≫ f₂)).hom ≫\n                f₁ ◁ 𝟙 b ◁ ((λ_ f₂).hom ≫ (ρ_ f₂).inv) ≫\n                  f₁ ◁ (α_ (𝟙 b) f₂ (𝟙 c)).inv ≫\n                    f₁ ◁ ((λ_ f₂).hom ≫ (ρ_ f₂).inv) ▷ 𝟙 c ≫\n                      (f₁ ◁ (α_ f₂ (𝟙 c) (𝟙 c)).hom) ≫\n                        (α_ f₁ f₂ (𝟙 c ≫ 𝟙 c)).inv =\n  ((λ_ (𝟙 a)).hom ▷ (f₁ ≫ f₂) ≫ (λ_ (f₁ ≫ f₂)).hom ≫ (ρ_ (f₁ ≫ f₂)).inv) ≫\n    (f₁ ≫ f₂) ◁ (λ_ (𝟙 c)).inv := by\n  pure_coherence\nC : Type u\ninst✝² : Category.{v, u} C\ninst✝¹ : MonoidalCategory C\nB : Type u\ninst✝ : Bicategory B\na b c d e : B\nf₁ : a ⟶ b\nf₂ : b ⟶ c\n⊢ (α_ (𝟙 a) (𝟙 a) (f₁ ≫ f₂)).hom ≫\n      𝟙 a ◁ (α_ (𝟙 a) f₁ f₂).inv ≫\n        sorry ≫\n          𝟙 a ◁ (α_ f₁ (𝟙 b) f₂).hom ≫\n            (α_ (𝟙 a) f₁ (𝟙 b ≫ f₂)).inv ≫\n              sorry ≫\n                (α_ f₁ (𝟙 b) (𝟙 b ≫ f₂)).hom ≫\n                  sorry ≫\n                    f₁ ◁ (α_ (𝟙 b) f₂ (𝟙 c)).inv ≫ sorry ≫ f₁ ◁ (α_ f₂ (𝟙 c) (𝟙 c)).hom ≫ (α_ f₁ f₂ (𝟙 c ≫ 𝟙 c)).inv =\n    (sorry ≫ sorry ≫ sorry) ≫ sorry\n", "full_text": "example (f₁ : a ⟶ b) (f₂ : b ⟶ c) :\n  (α_ (𝟙 a) (𝟙 a) (f₁ ≫ f₂)).hom ≫\n    𝟙 a ◁ (α_ (𝟙 a) f₁ f₂).inv ≫\n      𝟙 a ◁ ((λ_ f₁).hom ≫ (ρ_ f₁).inv) ▷ f₂ ≫\n        𝟙 a ◁ (α_ f₁ (𝟙 b) f₂).hom ≫\n          (α_ (𝟙 a) f₁ (𝟙 b ≫ f₂)).inv ≫\n            ((λ_ f₁).hom ≫ (ρ_ f₁).inv) ▷ (𝟙 b ≫ f₂) ≫\n              (α_ f₁ (𝟙 b) (𝟙 b ≫ f₂)).hom ≫\n                f₁ ◁ 𝟙 b ◁ ((λ_ f₂).hom ≫ (ρ_ f₂).inv) ≫\n                  f₁ ◁ (α_ (𝟙 b) f₂ (𝟙 c)).inv ≫\n                    f₁ ◁ ((λ_ f₂).hom ≫ (ρ_ f₂).inv) ▷ 𝟙 c ≫\n                      (f₁ ◁ (α_ f₂ (𝟙 c) (𝟙 c)).hom) ≫\n                        (α_ f₁ f₂ (𝟙 c ≫ 𝟙 c)).inv =\n  ((λ_ (𝟙 a)).hom ▷ (f₁ ≫ f₂) ≫ (λ_ (f₁ ≫ f₂)).hom ≫ (ρ_ (f₁ ≫ f₂)).inv) ≫\n    (f₁ ≫ f₂) ◁ (λ_ (𝟙 c)).inv := by\n  pure_coherence\nC : Type u\ninst✝² : Category.{v, u} C\ninst✝¹ : MonoidalCategory C\nB : Type u\ninst✝ : Bicategory B\na b c d e : B\nf₁ : a ⟶ b\nf₂ : b ⟶ c\n⊢ (α_ (𝟙 a) (𝟙 a) (f₁ ≫ f₂)).hom ≫\n      𝟙 a ◁ (α_ (𝟙 a) f₁ f₂).inv ≫\n        sorry ≫\n          𝟙 a ◁ (α_ f₁ (𝟙 b) f₂).hom ≫\n            (α_ (𝟙 a) f₁ (𝟙 b ≫ f₂)).inv ≫\n              sorry ≫\n                (α_ f₁ (𝟙 b) (𝟙 b ≫ f₂)).hom ≫\n                  sorry ≫\n                    f₁ ◁ (α_ (𝟙 b) f₂ (𝟙 c)).inv ≫ sorry ≫ f₁ ◁ (α_ f₂ (𝟙 c) (𝟙 c)).hom ≫ (α_ f₁ f₂ (𝟙 c ≫ 𝟙 c)).inv =\n    (sorry ≫ sorry ≫ sorry) ≫ sorry\n/- C : Type u\ninst✝² : Category.{v, u} C\ninst✝¹ : MonoidalCategory C\nB : Type u\ninst✝ : Bicategory B\na b c d e : B\nf₁ : a ⟶ b\nf₂ : b ⟶ c\n⊢ (α_ (𝟙 a) (𝟙 a) (f₁ ≫ f₂)).hom ≫\n      𝟙 a ◁ (α_ (𝟙 a) f₁ f₂).inv ≫\n        sorry ≫\n          𝟙 a ◁ (α_ f₁ (𝟙 b) f₂).hom ≫\n            (α_ (𝟙 a) f₁ (𝟙 b ≫ f₂)).inv ≫\n              sorry ≫\n                (α_ f₁ (𝟙 b) (𝟙 b ≫ f₂)).hom ≫\n                  sorry ≫\n                    f₁ ◁ (α_ (𝟙 b) f₂ (𝟙 c)).inv ≫ sorry ≫ f₁ ◁ (α_ f₂ (𝟙 c) (𝟙 c)).hom ≫ (α_ f₁ f₂ (𝟙 c ≫ 𝟙 c)).inv =\n    (sorry ≫ sorry ≫ sorry) ≫ sorry -/\n"}
{"prompt": "lemma foo [Category C]\n    {M N K : C} {f : M ⟶ N} {g : N ⟶ K} {h : M ⟶ K} (w : f ≫ g = h) : f ≫ 𝟙 N ≫ g = h := by\n  simp [w]\nC : Type u_1\ninst✝ : Category.{u_2, u_1} C\nM N K : C\nf : M ⟶ N\ng : N ⟶ K\nh : M ⟶ K\nw : f ≫ g = h\n⊢ f ≫ 𝟙 N ≫ g = h\n", "full_text": "lemma foo [Category C]\n    {M N K : C} {f : M ⟶ N} {g : N ⟶ K} {h : M ⟶ K} (w : f ≫ g = h) : f ≫ 𝟙 N ≫ g = h := by\n  simp [w]\nC : Type u_1\ninst✝ : Category.{u_2, u_1} C\nM N K : C\nf : M ⟶ N\ng : N ⟶ K\nh : M ⟶ K\nw : f ≫ g = h\n⊢ f ≫ 𝟙 N ≫ g = h\n/- Goals Accomplished! -/\n"}
{"prompt": "lemma foo' [Category C]\n    {M N K : C} {f : M ⟶ N} {g : N ⟶ K} {h : M ⟶ K} (w : f ≫ g = h) : f ≫ 𝟙 N ≫ g = h := by\n  simp [w]\nC : Type u_1\ninst✝ : Category.{u_2, u_1} C\nM N K : C\nf : M ⟶ N\ng : N ⟶ K\nh : M ⟶ K\nw : f ≫ g = h\n⊢ f ≫ 𝟙 N ≫ g = h\n", "full_text": "lemma foo' [Category C]\n    {M N K : C} {f : M ⟶ N} {g : N ⟶ K} {h : M ⟶ K} (w : f ≫ g = h) : f ≫ 𝟙 N ≫ g = h := by\n  simp [w]\nC : Type u_1\ninst✝ : Category.{u_2, u_1} C\nM N K : C\nf : M ⟶ N\ng : N ⟶ K\nh : M ⟶ K\nw : f ≫ g = h\n⊢ f ≫ 𝟙 N ≫ g = h\n/- Goals Accomplished! -/\n"}
{"prompt": "example {M N K : Type} {f : M ⟶ N} {g : N ⟶ K} {h : M ⟶ K} (w : f ≫ g = h) (x : M) :\n  g (f x) = h x := by\n  have := elementwise_of% w\n  guard_hyp this : ∀ (x : M), g (f x) = h x\n  exact this x\nM N K : Type\nf : M ⟶ N\ng : N ⟶ K\nh : M ⟶ K\nw : f ≫ g = h\nx : M\n⊢ g (f x) = h x\n", "full_text": "example {M N K : Type} {f : M ⟶ N} {g : N ⟶ K} {h : M ⟶ K} (w : f ≫ g = h) (x : M) :\n  g (f x) = h x := by\n  have := elementwise_of% w\n  guard_hyp this : ∀ (x : M), g (f x) = h x\n  exact this x\nM N K : Type\nf : M ⟶ N\ng : N ⟶ K\nh : M ⟶ K\nw : f ≫ g = h\nx : M\n⊢ g (f x) = h x\n/- M N K : Type\nf : M ⟶ N\ng : N ⟶ K\nh : M ⟶ K\nw : f ≫ g = h\nx : M\nthis : ∀ (x : M), g (f x) = h x\n⊢ g (f x) = h x -/\n/- M N K : Type\nf : M ⟶ N\ng : N ⟶ K\nh : M ⟶ K\nw : f ≫ g = h\nx : M\nthis : ∀ (x : M), g (f x) = h x\n⊢ g (f x) = h x -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (M N K : MonCat) (f : M ⟶ N) (g : N ⟶ K) (h : M ⟶ K) (w : f ≫ g = h) (m : M) :\n    g (f m) = h m := by\n  replace w := elementwise_of% w\n  apply w\nM N K : MonCat\nf : M ⟶ N\ng : N ⟶ K\nh : M ⟶ K\nw : f ≫ g = h\nm : ↑M\n⊢ (ConcreteCategory.hom g) ((ConcreteCategory.hom f) m) = (ConcreteCategory.hom h) m\n", "full_text": "example (M N K : MonCat) (f : M ⟶ N) (g : N ⟶ K) (h : M ⟶ K) (w : f ≫ g = h) (m : M) :\n    g (f m) = h m := by\n  replace w := elementwise_of% w\n  apply w\nM N K : MonCat\nf : M ⟶ N\ng : N ⟶ K\nh : M ⟶ K\nw : f ≫ g = h\nm : ↑M\n⊢ (ConcreteCategory.hom g) ((ConcreteCategory.hom f) m) = (ConcreteCategory.hom h) m\n/- M N K : MonCat\nf : M ⟶ N\ng : N ⟶ K\nh : M ⟶ K\nm : ↑M\nw : ∀ (x : ToType M), (ConcreteCategory.hom g) ((ConcreteCategory.hom f) x) = (ConcreteCategory.hom h) x\n⊢ (ConcreteCategory.hom g) ((ConcreteCategory.hom f) m) = (ConcreteCategory.hom h) m -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {α β : Type} (f g : α ⟶ β) (w : f = g) (a : α) : f a = g a := by\n  replace w := elementwise_of% w\n  guard_hyp w : ∀ (x : α), f x = g x\n  rw [w]\nα β : Type\nf g : α ⟶ β\nw : f = g\na : α\n⊢ f a = g a\n", "full_text": "example {α β : Type} (f g : α ⟶ β) (w : f = g) (a : α) : f a = g a := by\n  replace w := elementwise_of% w\n  guard_hyp w : ∀ (x : α), f x = g x\n  rw [w]\nα β : Type\nf g : α ⟶ β\nw : f = g\na : α\n⊢ f a = g a\n/- α β : Type\nf g : α ⟶ β\nw : f = g\na : α\n⊢ f a = g a -/\n"}
{"prompt": "example {α β : Type} (f g : α ⟶ β) (w : f ≫ 𝟙 β = g) (a : α) : f a = g a := by\n  replace w := elementwise_of% w\n  guard_hyp w : ∀ (x : α), f x = g x\n  rw [w]\nα β : Type\nf g : α ⟶ β\nw : f ≫ 𝟙 β = g\na : α\n⊢ f a = g a\n", "full_text": "example {α β : Type} (f g : α ⟶ β) (w : f ≫ 𝟙 β = g) (a : α) : f a = g a := by\n  replace w := elementwise_of% w\n  guard_hyp w : ∀ (x : α), f x = g x\n  rw [w]\nα β : Type\nf g : α ⟶ β\nw : f ≫ 𝟙 β = g\na : α\n⊢ f a = g a\n/- α β : Type\nf g : α ⟶ β\na : α\nw : ∀ (x : α), f x = g x\n⊢ f a = g a -/\n/- α β : Type\nf g : α ⟶ β\na : α\nw : ∀ (x : α), f x = g x\n⊢ f a = g a -/\n/- Goals Accomplished! -/\n"}
{"prompt": "lemma foo [Category C]\n    {M N K : C} {f : M ⟶ N} {g : N ⟶ K} {h : M ⟶ K} (w : f ≫ g = h) : f ≫ 𝟙 N ≫ g = h := by\n  simp [w]\nC : Type u_2\ninst✝ : Category.{u_5, u_2} C\nM N K : C\nf : M ⟶ N\ng : N ⟶ K\nh : M ⟶ K\nw : f ≫ g = h\n⊢ f ≫ 𝟙 N ≫ g = h\n", "full_text": "lemma foo [Category C]\n    {M N K : C} {f : M ⟶ N} {g : N ⟶ K} {h : M ⟶ K} (w : f ≫ g = h) : f ≫ 𝟙 N ≫ g = h := by\n  simp [w]\nC : Type u_2\ninst✝ : Category.{u_5, u_2} C\nM N K : C\nf : M ⟶ N\ng : N ⟶ K\nh : M ⟶ K\nw : f ≫ g = h\n⊢ f ≫ 𝟙 N ≫ g = h\n/- Goals Accomplished! -/\n"}
{"prompt": "lemma foo' [Category C]\n    {M N K : C} {f : M ⟶ N} {g : N ⟶ K} {h : M ⟶ K} (w : f ≫ g = h) : f ≫ 𝟙 N ≫ g = h := by\n  simp [w]\nC : Type u_2\ninst✝ : Category.{u_5, u_2} C\nM N K : C\nf : M ⟶ N\ng : N ⟶ K\nh : M ⟶ K\nw : f ≫ g = h\n⊢ f ≫ 𝟙 N ≫ g = h\n", "full_text": "lemma foo' [Category C]\n    {M N K : C} {f : M ⟶ N} {g : N ⟶ K} {h : M ⟶ K} (w : f ≫ g = h) : f ≫ 𝟙 N ≫ g = h := by\n  simp [w]\nC : Type u_2\ninst✝ : Category.{u_5, u_2} C\nM N K : C\nf : M ⟶ N\ng : N ⟶ K\nh : M ⟶ K\nw : f ≫ g = h\n⊢ f ≫ 𝟙 N ≫ g = h\n/- Goals Accomplished! -/\n"}
{"prompt": "lemma bar [Category C]\n    {FC : C → C → Type _} {CC : C → Type _} [∀ X Y, FunLike (FC X Y) (CC X) (CC Y)]\n    [ConcreteCategory C FC]\n    {M N K : C} {f : M ⟶ N} {g : N ⟶ K} {h : M ⟶ K} (w : f ≫ g = h) (x : ToType M) : g (f x) = h x := by\n  apply foo_apply w\nC : Type u_2\ninst✝² : Category.{u_5, u_2} C\nFC : C → C → Type u_6\nCC : C → Type u_7\ninst✝¹ : (X Y : C) → FunLike (FC X Y) (CC X) (CC Y)\ninst✝ : ConcreteCategory C FC\nM N K : C\nf : M ⟶ N\ng : N ⟶ K\nh : M ⟶ K\nw : f ≫ g = h\nx : ToType M\n⊢ (ConcreteCategory.hom g) ((ConcreteCategory.hom f) x) = (ConcreteCategory.hom h) x\n", "full_text": "lemma bar [Category C]\n    {FC : C → C → Type _} {CC : C → Type _} [∀ X Y, FunLike (FC X Y) (CC X) (CC Y)]\n    [ConcreteCategory C FC]\n    {M N K : C} {f : M ⟶ N} {g : N ⟶ K} {h : M ⟶ K} (w : f ≫ g = h) (x : ToType M) : g (f x) = h x := by\n  apply foo_apply w\nC : Type u_2\ninst✝² : Category.{u_5, u_2} C\nFC : C → C → Type u_6\nCC : C → Type u_7\ninst✝¹ : (X Y : C) → FunLike (FC X Y) (CC X) (CC Y)\ninst✝ : ConcreteCategory C FC\nM N K : C\nf : M ⟶ N\ng : N ⟶ K\nh : M ⟶ K\nw : f ≫ g = h\nx : ToType M\n⊢ (ConcreteCategory.hom g) ((ConcreteCategory.hom f) x) = (ConcreteCategory.hom h) x\n/- Goals Accomplished! -/\n"}
{"prompt": "example {M N K : Type} {f : M ⟶ N} {g : N ⟶ K} {h : M ⟶ K} (w : f ≫ g = h) (x : M) :\n  g (f x) = h x := by\n  have := elementwise_of% w\n  guard_hyp this : ∀ (x : M), g (f x) = h x\n  exact this x\nC✝ : Type u_1\ninst✝² : Category.{?u.309, u_1} C✝\nX : C✝\nFC✝ : C✝ → C✝ → Type ?u.318\nCC✝ : C✝ → Type ?u.323\ninst✝¹ : (X Y : C✝) → FunLike (FC✝ X Y) (CC✝ X) (CC✝ Y)\nC : Type u_2\nFC : C → C → Type u_3\nCC : C → Type u_4\ninst✝ : (X Y : C) → FunLike (FC X Y) (CC X) (CC Y)\nM N K : Type\nf : M ⟶ N\ng : N ⟶ K\nh : M ⟶ K\nw : f ≫ g = h\nx : M\n⊢ g (f x) = h x\n", "full_text": "example {M N K : Type} {f : M ⟶ N} {g : N ⟶ K} {h : M ⟶ K} (w : f ≫ g = h) (x : M) :\n  g (f x) = h x := by\n  have := elementwise_of% w\n  guard_hyp this : ∀ (x : M), g (f x) = h x\n  exact this x\nC✝ : Type u_1\ninst✝² : Category.{?u.309, u_1} C✝\nX : C✝\nFC✝ : C✝ → C✝ → Type ?u.318\nCC✝ : C✝ → Type ?u.323\ninst✝¹ : (X Y : C✝) → FunLike (FC✝ X Y) (CC✝ X) (CC✝ Y)\nC : Type u_2\nFC : C → C → Type u_3\nCC : C → Type u_4\ninst✝ : (X Y : C) → FunLike (FC X Y) (CC X) (CC Y)\nM N K : Type\nf : M ⟶ N\ng : N ⟶ K\nh : M ⟶ K\nw : f ≫ g = h\nx : M\n⊢ g (f x) = h x\n/- C✝ : Type u_1\ninst✝² : Category.{?u.309, u_1} C✝\nX : C✝\nFC✝ : C✝ → C✝ → Type ?u.318\nCC✝ : C✝ → Type ?u.323\ninst✝¹ : (X Y : C✝) → FunLike (FC✝ X Y) (CC✝ X) (CC✝ Y)\nC : Type u_2\nFC : C → C → Type u_3\nCC : C → Type u_4\ninst✝ : (X Y : C) → FunLike (FC X Y) (CC X) (CC Y)\nM N K : Type\nf : M ⟶ N\ng : N ⟶ K\nh : M ⟶ K\nw : f ≫ g = h\nx : M\nthis : ∀ (x : M), g (f x) = h x\n⊢ g (f x) = h x -/\n/- C✝ : Type u_1\ninst✝² : Category.{?u.309, u_1} C✝\nX : C✝\nFC✝ : C✝ → C✝ → Type ?u.318\nCC✝ : C✝ → Type ?u.323\ninst✝¹ : (X Y : C✝) → FunLike (FC✝ X Y) (CC✝ X) (CC✝ Y)\nC : Type u_2\nFC : C → C → Type u_3\nCC : C → Type u_4\ninst✝ : (X Y : C) → FunLike (FC X Y) (CC X) (CC Y)\nM N K : Type\nf : M ⟶ N\ng : N ⟶ K\nh : M ⟶ K\nw : f ≫ g = h\nx : M\nthis : ∀ (x : M), g (f x) = h x\n⊢ g (f x) = h x -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example [Category C] {FC : C → C → Type _} {CC : C → Type _}\n    [∀ X Y, FunLike (FC X Y) (CC X) (CC Y)] [ConcreteCategory C FC]\n    {M N K : C} {f : M ⟶ N} {g : N ⟶ K} {h : M ⟶ K} (w : f ≫ g = h) (x : ToType M) :\n    g (f x) = h x := by\n  have := elementwise_of% w\n  guard_hyp this : ∀ (x : ToType M), g (f x) = h x\n  exact this x\nC✝ : Type u_1\ninst✝⁵ : Category.{?u.309, u_1} C✝\nX : C✝\nFC✝¹ : C✝ → C✝ → Type ?u.318\nCC✝¹ : C✝ → Type ?u.323\ninst✝⁴ : (X Y : C✝) → FunLike (FC✝¹ X Y) (CC✝¹ X) (CC✝¹ Y)\nC : Type u_2\nFC✝ : C → C → Type u_3\nCC✝ : C → Type u_4\ninst✝³ : (X Y : C) → FunLike (FC✝ X Y) (CC✝ X) (CC✝ Y)\ninst✝² : Category.{u_5, u_2} C\nFC : C → C → Type u_6\nCC : C → Type u_7\ninst✝¹ : (X Y : C) → FunLike (FC X Y) (CC X) (CC Y)\ninst✝ : ConcreteCategory C FC\nM N K : C\nf : M ⟶ N\ng : N ⟶ K\nh : M ⟶ K\nw : f ≫ g = h\nx : ToType M\n⊢ (ConcreteCategory.hom g) ((ConcreteCategory.hom f) x) = (ConcreteCategory.hom h) x\n", "full_text": "example [Category C] {FC : C → C → Type _} {CC : C → Type _}\n    [∀ X Y, FunLike (FC X Y) (CC X) (CC Y)] [ConcreteCategory C FC]\n    {M N K : C} {f : M ⟶ N} {g : N ⟶ K} {h : M ⟶ K} (w : f ≫ g = h) (x : ToType M) :\n    g (f x) = h x := by\n  have := elementwise_of% w\n  guard_hyp this : ∀ (x : ToType M), g (f x) = h x\n  exact this x\nC✝ : Type u_1\ninst✝⁵ : Category.{?u.309, u_1} C✝\nX : C✝\nFC✝¹ : C✝ → C✝ → Type ?u.318\nCC✝¹ : C✝ → Type ?u.323\ninst✝⁴ : (X Y : C✝) → FunLike (FC✝¹ X Y) (CC✝¹ X) (CC✝¹ Y)\nC : Type u_2\nFC✝ : C → C → Type u_3\nCC✝ : C → Type u_4\ninst✝³ : (X Y : C) → FunLike (FC✝ X Y) (CC✝ X) (CC✝ Y)\ninst✝² : Category.{u_5, u_2} C\nFC : C → C → Type u_6\nCC : C → Type u_7\ninst✝¹ : (X Y : C) → FunLike (FC X Y) (CC X) (CC Y)\ninst✝ : ConcreteCategory C FC\nM N K : C\nf : M ⟶ N\ng : N ⟶ K\nh : M ⟶ K\nw : f ≫ g = h\nx : ToType M\n⊢ (ConcreteCategory.hom g) ((ConcreteCategory.hom f) x) = (ConcreteCategory.hom h) x\n/- C✝ : Type u_1\ninst✝⁵ : Category.{?u.309, u_1} C✝\nX : C✝\nFC✝¹ : C✝ → C✝ → Type ?u.318\nCC✝¹ : C✝ → Type ?u.323\ninst✝⁴ : (X Y : C✝) → FunLike (FC✝¹ X Y) (CC✝¹ X) (CC✝¹ Y)\nC : Type u_2\nFC✝ : C → C → Type u_3\nCC✝ : C → Type u_4\ninst✝³ : (X Y : C) → FunLike (FC✝ X Y) (CC✝ X) (CC✝ Y)\ninst✝² : Category.{u_5, u_2} C\nFC : C → C → Type u_6\nCC : C → Type u_7\ninst✝¹ : (X Y : C) → FunLike (FC X Y) (CC X) (CC Y)\ninst✝ : ConcreteCategory C FC\nM N K : C\nf : M ⟶ N\ng : N ⟶ K\nh : M ⟶ K\nw : f ≫ g = h\nx : ToType M\nthis : ∀ (x : ToType M), (ConcreteCategory.hom g) ((ConcreteCategory.hom f) x) = (ConcreteCategory.hom h) x\n⊢ (ConcreteCategory.hom g) ((ConcreteCategory.hom f) x) = (ConcreteCategory.hom h) x -/\n/- C✝ : Type u_1\ninst✝⁵ : Category.{?u.309, u_1} C✝\nX : C✝\nFC✝¹ : C✝ → C✝ → Type ?u.318\nCC✝¹ : C✝ → Type ?u.323\ninst✝⁴ : (X Y : C✝) → FunLike (FC✝¹ X Y) (CC✝¹ X) (CC✝¹ Y)\nC : Type u_2\nFC✝ : C → C → Type u_3\nCC✝ : C → Type u_4\ninst✝³ : (X Y : C) → FunLike (FC✝ X Y) (CC✝ X) (CC✝ Y)\ninst✝² : Category.{u_5, u_2} C\nFC : C → C → Type u_6\nCC : C → Type u_7\ninst✝¹ : (X Y : C) → FunLike (FC X Y) (CC X) (CC Y)\ninst✝ : ConcreteCategory C FC\nM N K : C\nf : M ⟶ N\ng : N ⟶ K\nh : M ⟶ K\nw : f ≫ g = h\nx : ToType M\nthis : ∀ (x : ToType M), (ConcreteCategory.hom g) ((ConcreteCategory.hom f) x) = (ConcreteCategory.hom h) x\n⊢ (ConcreteCategory.hom g) ((ConcreteCategory.hom f) x) = (ConcreteCategory.hom h) x -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (M N K : MonCat) (f : M ⟶ N) (g : N ⟶ K) (h : M ⟶ K) (w : f ≫ g = h) (m : M) :\n    g (f m) = h m := by\n  replace w := elementwise_of% w\n  apply w\nC✝ : Type u_1\ninst✝² : Category.{?u.309, u_1} C✝\nX : C✝\nFC✝ : C✝ → C✝ → Type ?u.318\nCC✝ : C✝ → Type ?u.323\ninst✝¹ : (X Y : C✝) → FunLike (FC✝ X Y) (CC✝ X) (CC✝ Y)\nC : Type u_2\nFC : C → C → Type u_3\nCC : C → Type u_4\ninst✝ : (X Y : C) → FunLike (FC X Y) (CC X) (CC Y)\nM N K : MonCat\nf : M ⟶ N\ng : N ⟶ K\nh : M ⟶ K\nw : f ≫ g = h\nm : ↑M\n⊢ (ConcreteCategory.hom g) ((ConcreteCategory.hom f) m) = (ConcreteCategory.hom h) m\n", "full_text": "example (M N K : MonCat) (f : M ⟶ N) (g : N ⟶ K) (h : M ⟶ K) (w : f ≫ g = h) (m : M) :\n    g (f m) = h m := by\n  replace w := elementwise_of% w\n  apply w\nC✝ : Type u_1\ninst✝² : Category.{?u.309, u_1} C✝\nX : C✝\nFC✝ : C✝ → C✝ → Type ?u.318\nCC✝ : C✝ → Type ?u.323\ninst✝¹ : (X Y : C✝) → FunLike (FC✝ X Y) (CC✝ X) (CC✝ Y)\nC : Type u_2\nFC : C → C → Type u_3\nCC : C → Type u_4\ninst✝ : (X Y : C) → FunLike (FC X Y) (CC X) (CC Y)\nM N K : MonCat\nf : M ⟶ N\ng : N ⟶ K\nh : M ⟶ K\nw : f ≫ g = h\nm : ↑M\n⊢ (ConcreteCategory.hom g) ((ConcreteCategory.hom f) m) = (ConcreteCategory.hom h) m\n/- C✝ : Type u_1\ninst✝² : Category.{?u.309, u_1} C✝\nX : C✝\nFC✝ : C✝ → C✝ → Type ?u.318\nCC✝ : C✝ → Type ?u.323\ninst✝¹ : (X Y : C✝) → FunLike (FC✝ X Y) (CC✝ X) (CC✝ Y)\nC : Type u_2\nFC : C → C → Type u_3\nCC : C → Type u_4\ninst✝ : (X Y : C) → FunLike (FC X Y) (CC X) (CC Y)\nM N K : MonCat\nf : M ⟶ N\ng : N ⟶ K\nh : M ⟶ K\nm : ↑M\nw : ∀ (x : ToType M), (ConcreteCategory.hom g) ((ConcreteCategory.hom f) x) = (ConcreteCategory.hom h) x\n⊢ (ConcreteCategory.hom g) ((ConcreteCategory.hom f) m) = (ConcreteCategory.hom h) m -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {α β : Type} (f g : α ⟶ β) (w : f = g) (a : α) : f a = g a := by\n  replace w := elementwise_of% w\n  guard_hyp w : ∀ (x : α), f x = g x\n  rw [w]\nC✝ : Type u_1\ninst✝² : Category.{?u.309, u_1} C✝\nX : C✝\nFC✝ : C✝ → C✝ → Type ?u.318\nCC✝ : C✝ → Type ?u.323\ninst✝¹ : (X Y : C✝) → FunLike (FC✝ X Y) (CC✝ X) (CC✝ Y)\nC : Type u_2\nFC : C → C → Type u_3\nCC : C → Type u_4\ninst✝ : (X Y : C) → FunLike (FC X Y) (CC X) (CC Y)\nα β : Type\nf g : α ⟶ β\nw : f = g\na : α\n⊢ f a = g a\n", "full_text": "example {α β : Type} (f g : α ⟶ β) (w : f = g) (a : α) : f a = g a := by\n  replace w := elementwise_of% w\n  guard_hyp w : ∀ (x : α), f x = g x\n  rw [w]\nC✝ : Type u_1\ninst✝² : Category.{?u.309, u_1} C✝\nX : C✝\nFC✝ : C✝ → C✝ → Type ?u.318\nCC✝ : C✝ → Type ?u.323\ninst✝¹ : (X Y : C✝) → FunLike (FC✝ X Y) (CC✝ X) (CC✝ Y)\nC : Type u_2\nFC : C → C → Type u_3\nCC : C → Type u_4\ninst✝ : (X Y : C) → FunLike (FC X Y) (CC X) (CC Y)\nα β : Type\nf g : α ⟶ β\nw : f = g\na : α\n⊢ f a = g a\n/- C✝ : Type u_1\ninst✝² : Category.{?u.309, u_1} C✝\nX : C✝\nFC✝ : C✝ → C✝ → Type ?u.318\nCC✝ : C✝ → Type ?u.323\ninst✝¹ : (X Y : C✝) → FunLike (FC✝ X Y) (CC✝ X) (CC✝ Y)\nC : Type u_2\nFC : C → C → Type u_3\nCC : C → Type u_4\ninst✝ : (X Y : C) → FunLike (FC X Y) (CC X) (CC Y)\nα β : Type\nf g : α ⟶ β\nw : f = g\na : α\n⊢ f a = g a -/\n"}
{"prompt": "example {α β : Type} (f g : α ⟶ β) (w : f ≫ 𝟙 β = g) (a : α) : f a = g a := by\n  replace w := elementwise_of% w\n  guard_hyp w : ∀ (x : α), f x = g x\n  rw [w]\nC✝ : Type u_1\ninst✝² : Category.{?u.309, u_1} C✝\nX : C✝\nFC✝ : C✝ → C✝ → Type ?u.318\nCC✝ : C✝ → Type ?u.323\ninst✝¹ : (X Y : C✝) → FunLike (FC✝ X Y) (CC✝ X) (CC✝ Y)\nC : Type u_2\nFC : C → C → Type u_3\nCC : C → Type u_4\ninst✝ : (X Y : C) → FunLike (FC X Y) (CC X) (CC Y)\nα β : Type\nf g : α ⟶ β\nw : f ≫ 𝟙 β = g\na : α\n⊢ f a = g a\n", "full_text": "example {α β : Type} (f g : α ⟶ β) (w : f ≫ 𝟙 β = g) (a : α) : f a = g a := by\n  replace w := elementwise_of% w\n  guard_hyp w : ∀ (x : α), f x = g x\n  rw [w]\nC✝ : Type u_1\ninst✝² : Category.{?u.309, u_1} C✝\nX : C✝\nFC✝ : C✝ → C✝ → Type ?u.318\nCC✝ : C✝ → Type ?u.323\ninst✝¹ : (X Y : C✝) → FunLike (FC✝ X Y) (CC✝ X) (CC✝ Y)\nC : Type u_2\nFC : C → C → Type u_3\nCC : C → Type u_4\ninst✝ : (X Y : C) → FunLike (FC X Y) (CC X) (CC Y)\nα β : Type\nf g : α ⟶ β\nw : f ≫ 𝟙 β = g\na : α\n⊢ f a = g a\n/- C✝ : Type u_1\ninst✝² : Category.{?u.309, u_1} C✝\nX : C✝\nFC✝ : C✝ → C✝ → Type ?u.318\nCC✝ : C✝ → Type ?u.323\ninst✝¹ : (X Y : C✝) → FunLike (FC✝ X Y) (CC✝ X) (CC✝ Y)\nC : Type u_2\nFC : C → C → Type u_3\nCC : C → Type u_4\ninst✝ : (X Y : C) → FunLike (FC X Y) (CC X) (CC Y)\nα β : Type\nf g : α ⟶ β\na : α\nw : ∀ (x : α), f x = g x\n⊢ f a = g a -/\n/- C✝ : Type u_1\ninst✝² : Category.{?u.309, u_1} C✝\nX : C✝\nFC✝ : C✝ → C✝ → Type ?u.318\nCC✝ : C✝ → Type ?u.323\ninst✝¹ : (X Y : C✝) → FunLike (FC✝ X Y) (CC✝ X) (CC✝ Y)\nC : Type u_2\nFC : C → C → Type u_3\nCC : C → Type u_4\ninst✝ : (X Y : C) → FunLike (FC X Y) (CC X) (CC Y)\nα β : Type\nf g : α ⟶ β\na : α\nw : ∀ (x : α), f x = g x\n⊢ f a = g a -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {f j : a ⟶ d} {g : a ⟶ b} {h : b ⟶ c} {i : c ⟶ d}\n    (η : f ⟶ g ≫ (h ≫ i)) (θ : (g ≫ h) ≫ i ⟶ j) :\n    η ⊗≫ θ = η ≫ (α_ _ _ _).inv ≫ θ := by\n  bicategory\nB : Type u\ninst✝ : Bicategory B\na b c d : B\nf j : a ⟶ d\ng : a ⟶ b\nh : b ⟶ c\ni : c ⟶ d\nη : f ⟶ g ≫ h ≫ i\nθ : (g ≫ h) ≫ i ⟶ j\n⊢ η ⊗≫ θ = η ≫ (α_ g h i).inv ≫ θ\n", "full_text": "example {f j : a ⟶ d} {g : a ⟶ b} {h : b ⟶ c} {i : c ⟶ d}\n    (η : f ⟶ g ≫ (h ≫ i)) (θ : (g ≫ h) ≫ i ⟶ j) :\n    η ⊗≫ θ = η ≫ (α_ _ _ _).inv ≫ θ := by\n  bicategory\nB : Type u\ninst✝ : Bicategory B\na b c d : B\nf j : a ⟶ d\ng : a ⟶ b\nh : b ⟶ c\ni : c ⟶ d\nη : f ⟶ g ≫ h ≫ i\nθ : (g ≫ h) ≫ i ⟶ j\n⊢ η ⊗≫ θ = η ≫ (α_ g h i).inv ≫ θ\n/- Goals Accomplished! -/\n"}
{"prompt": "example {f : a ⟶ b} {g : b ⟶ c} {h i : c ⟶ d} (η : h ⟶ i) :\n    (f ≫ g) ◁ η = (α_ _ _ _).hom ≫ f ◁ g ◁ η ≫ (α_ _ _ _).inv := by\n  bicategory\nB : Type u\ninst✝ : Bicategory B\na b c d : B\nf : a ⟶ b\ng : b ⟶ c\nh i : c ⟶ d\nη : h ⟶ i\n⊢ (f ≫ g) ◁ η = (α_ f g h).hom ≫ f ◁ g ◁ η ≫ (α_ f g i).inv\n", "full_text": "example {f : a ⟶ b} {g : b ⟶ c} {h i : c ⟶ d} (η : h ⟶ i) :\n    (f ≫ g) ◁ η = (α_ _ _ _).hom ≫ f ◁ g ◁ η ≫ (α_ _ _ _).inv := by\n  bicategory\nB : Type u\ninst✝ : Bicategory B\na b c d : B\nf : a ⟶ b\ng : b ⟶ c\nh i : c ⟶ d\nη : h ⟶ i\n⊢ (f ≫ g) ◁ η = (α_ f g h).hom ≫ f ◁ g ◁ η ≫ (α_ f g i).inv\n/- Goals Accomplished! -/\n"}
{"prompt": "example {f g h : a ⟶ b} {η : f ⟶ g} {θ : g ⟶ h} : η ≫ θ = η ≫ θ := by\n  bicategory\nB : Type u\ninst✝ : Bicategory B\na b c d : B\nf g h : a ⟶ b\nη : f ⟶ g\nθ : g ⟶ h\n⊢ η ≫ θ = η ≫ θ\n", "full_text": "example {f g h : a ⟶ b} {η : f ⟶ g} {θ : g ⟶ h} : η ≫ θ = η ≫ θ := by\n  bicategory\nB : Type u\ninst✝ : Bicategory B\na b c d : B\nf g h : a ⟶ b\nη : f ⟶ g\nθ : g ⟶ h\n⊢ η ≫ θ = η ≫ θ\n/- Goals Accomplished! -/\n"}
{"prompt": "example {U V W : ProfiniteGrp} (f : U ⟶ V) (g : V ⟶ W) (u : U) : (f ≫ g) u = g (f u) := by\n  simp\nX Y Z : Type u\ninst✝² : Group X\ninst✝¹ : TopologicalSpace X\ninst✝ : IsTopologicalGroup X\nU V W : ProfiniteGrp.{u_1}\nf : U ⟶ V\ng : V ⟶ W\nu : ↑U.toProfinite.toTop\n⊢ (Hom.hom (f ≫ g)) u = (Hom.hom g) ((Hom.hom f) u)\n", "full_text": "example {U V W : ProfiniteGrp} (f : U ⟶ V) (g : V ⟶ W) (u : U) : (f ≫ g) u = g (f u) := by\n  simp\nX Y Z : Type u\ninst✝² : Group X\ninst✝¹ : TopologicalSpace X\ninst✝ : IsTopologicalGroup X\nU V W : ProfiniteGrp.{u_1}\nf : U ⟶ V\ng : V ⟶ W\nu : ↑U.toProfinite.toTop\n⊢ (Hom.hom (f ≫ g)) u = (Hom.hom g) ((Hom.hom f) u)\n/- Goals Accomplished! -/\n"}
{"prompt": "example {M N : ProfiniteGrp.{u}} (f : M ⟶ N) (x y : M) : f (x * y) = f x * f y := by\n  simp\nX Y Z : Type u\ninst✝² : Group X\ninst✝¹ : TopologicalSpace X\ninst✝ : IsTopologicalGroup X\nM N : ProfiniteGrp.{u}\nf : M ⟶ N\nx y : ↑M.toProfinite.toTop\n⊢ (Hom.hom f) (x * y) = (Hom.hom f) x * (Hom.hom f) y\n", "full_text": "example {M N : ProfiniteGrp.{u}} (f : M ⟶ N) (x y : M) : f (x * y) = f x * f y := by\n  simp\nX Y Z : Type u\ninst✝² : Group X\ninst✝¹ : TopologicalSpace X\ninst✝ : IsTopologicalGroup X\nM N : ProfiniteGrp.{u}\nf : M ⟶ N\nx y : ↑M.toProfinite.toTop\n⊢ (Hom.hom f) (x * y) = (Hom.hom f) x * (Hom.hom f) y\n/- Goals Accomplished! -/\n"}
{"prompt": "example {M N : ProfiniteGrp.{u}} (f : M ⟶ N) : f 1 = 1 := by\n  simp\nX Y Z : Type u\ninst✝² : Group X\ninst✝¹ : TopologicalSpace X\ninst✝ : IsTopologicalGroup X\nM N : ProfiniteGrp.{u}\nf : M ⟶ N\n⊢ (Hom.hom f) 1 = 1\n", "full_text": "example {M N : ProfiniteGrp.{u}} (f : M ⟶ N) : f 1 = 1 := by\n  simp\nX Y Z : Type u\ninst✝² : Group X\ninst✝¹ : TopologicalSpace X\ninst✝ : IsTopologicalGroup X\nM N : ProfiniteGrp.{u}\nf : M ⟶ N\n⊢ (Hom.hom f) 1 = 1\n/- Goals Accomplished! -/\n"}
{"prompt": "example {M N : MonCat} (f : M ⟶ N) (x y : M) : f (x * y) = f x * f y := by\n  simp\nM N : MonCat\nf : M ⟶ N\nx y : ↑M\n⊢ (ConcreteCategory.hom f) (x * y) = (ConcreteCategory.hom f) x * (ConcreteCategory.hom f) y\n", "full_text": "example {M N : MonCat} (f : M ⟶ N) (x y : M) : f (x * y) = f x * f y := by\n  simp\nM N : MonCat\nf : M ⟶ N\nx y : ↑M\n⊢ (ConcreteCategory.hom f) (x * y) = (ConcreteCategory.hom f) x * (ConcreteCategory.hom f) y\n/- Goals Accomplished! -/\n"}
{"prompt": "example {M N : MonCat} (f : M ⟶ N) : f 1 = 1 := by\n  simp\nM N : MonCat\nf : M ⟶ N\n⊢ (ConcreteCategory.hom f) 1 = 1\n", "full_text": "example {M N : MonCat} (f : M ⟶ N) : f 1 = 1 := by\n  simp\nM N : MonCat\nf : M ⟶ N\n⊢ (ConcreteCategory.hom f) 1 = 1\n/- Goals Accomplished! -/\n"}
{"prompt": "example {M N : SemiRingCat} (f : M ⟶ N) (x y : M) : f (x + y) = f x + f y := by\n  simp\nM N : SemiRingCat\nf : M ⟶ N\nx y : ↑M\n⊢ (ConcreteCategory.hom f) (x + y) = (ConcreteCategory.hom f) x + (ConcreteCategory.hom f) y\n", "full_text": "example {M N : SemiRingCat} (f : M ⟶ N) (x y : M) : f (x + y) = f x + f y := by\n  simp\nM N : SemiRingCat\nf : M ⟶ N\nx y : ↑M\n⊢ (ConcreteCategory.hom f) (x + y) = (ConcreteCategory.hom f) x + (ConcreteCategory.hom f) y\n/- Goals Accomplished! -/\n"}
{"prompt": "example {M N : SemiRingCat} (f : M ⟶ N) (x y : M) : f (x * y) = f x * f y := by\n  simp\nM N : SemiRingCat\nf : M ⟶ N\nx y : ↑M\n⊢ (ConcreteCategory.hom f) (x * y) = (ConcreteCategory.hom f) x * (ConcreteCategory.hom f) y\n", "full_text": "example {M N : SemiRingCat} (f : M ⟶ N) (x y : M) : f (x * y) = f x * f y := by\n  simp\nM N : SemiRingCat\nf : M ⟶ N\nx y : ↑M\n⊢ (ConcreteCategory.hom f) (x * y) = (ConcreteCategory.hom f) x * (ConcreteCategory.hom f) y\n/- Goals Accomplished! -/\n"}
{"prompt": "example {M N : SemiRingCat} (f : M ⟶ N) : f 0 = 0 := by\n  simp\nM N : SemiRingCat\nf : M ⟶ N\n⊢ (ConcreteCategory.hom f) 0 = 0\n", "full_text": "example {M N : SemiRingCat} (f : M ⟶ N) : f 0 = 0 := by\n  simp\nM N : SemiRingCat\nf : M ⟶ N\n⊢ (ConcreteCategory.hom f) 0 = 0\n/- Goals Accomplished! -/\n"}
{"prompt": "example {M N : Semigrp} (f : M ⟶ N) (x y : M) : f (x * y) = f x * f y := by\n  simp\nM N : Semigrp\nf : M ⟶ N\nx y : ↑M\n⊢ (ConcreteCategory.hom f) (x * y) = (ConcreteCategory.hom f) x * (ConcreteCategory.hom f) y\n", "full_text": "example {M N : Semigrp} (f : M ⟶ N) (x y : M) : f (x * y) = f x * f y := by\n  simp\nM N : Semigrp\nf : M ⟶ N\nx y : ↑M\n⊢ (ConcreteCategory.hom f) (x * y) = (ConcreteCategory.hom f) x * (ConcreteCategory.hom f) y\n/- Goals Accomplished! -/\n"}
{"prompt": "example {M N : ModuleCat.{v} R} (f : M ⟶ N) (x y : M) : f (x + y) = f x + f y := by\n  simp\nR : Type u\ninst✝ : CommRing R\nM N : ModuleCat R\nf : M ⟶ N\nx y : ↑M\n⊢ (ConcreteCategory.hom f) (x + y) = (ConcreteCategory.hom f) x + (ConcreteCategory.hom f) y\n", "full_text": "example {M N : ModuleCat.{v} R} (f : M ⟶ N) (x y : M) : f (x + y) = f x + f y := by\n  simp\nR : Type u\ninst✝ : CommRing R\nM N : ModuleCat R\nf : M ⟶ N\nx y : ↑M\n⊢ (ConcreteCategory.hom f) (x + y) = (ConcreteCategory.hom f) x + (ConcreteCategory.hom f) y\n/- Goals Accomplished! -/\n"}
{"prompt": "example {M N : ModuleCat.{v} R} (f : M ⟶ N) : f 0 = 0 := by\n  simp\nR : Type u\ninst✝ : CommRing R\nM N : ModuleCat R\nf : M ⟶ N\n⊢ (ConcreteCategory.hom f) 0 = 0\n", "full_text": "example {M N : ModuleCat.{v} R} (f : M ⟶ N) : f 0 = 0 := by\n  simp\nR : Type u\ninst✝ : CommRing R\nM N : ModuleCat R\nf : M ⟶ N\n⊢ (ConcreteCategory.hom f) 0 = 0\n/- Goals Accomplished! -/\n"}
{"prompt": "example {M N : ModuleCat.{v} R} (f : M ⟶ N) (r : R) (m : M) : f (r • m) = r • f m := by\n  simp\nR : Type u\ninst✝ : CommRing R\nM N : ModuleCat R\nf : M ⟶ N\nr : R\nm : ↑M\n⊢ (ConcreteCategory.hom f) (r • m) = r • (ConcreteCategory.hom f) m\n", "full_text": "example {M N : ModuleCat.{v} R} (f : M ⟶ N) (r : R) (m : M) : f (r • m) = r • f m := by\n  simp\nR : Type u\ninst✝ : CommRing R\nM N : ModuleCat R\nf : M ⟶ N\nr : R\nm : ↑M\n⊢ (ConcreteCategory.hom f) (r • m) = r • (ConcreteCategory.hom f) m\n/- Goals Accomplished! -/\n"}
{"prompt": "example {M N : Grp} (f : M ⟶ N) (x y : M) : f (x * y) = f x * f y := by\n  simp\nM N : Grp\nf : M ⟶ N\nx y : ↑M\n⊢ (ConcreteCategory.hom f) (x * y) = (ConcreteCategory.hom f) x * (ConcreteCategory.hom f) y\n", "full_text": "example {M N : Grp} (f : M ⟶ N) (x y : M) : f (x * y) = f x * f y := by\n  simp\nM N : Grp\nf : M ⟶ N\nx y : ↑M\n⊢ (ConcreteCategory.hom f) (x * y) = (ConcreteCategory.hom f) x * (ConcreteCategory.hom f) y\n/- Goals Accomplished! -/\n"}
{"prompt": "example {M N : Grp} (f : M ⟶ N) : f 1 = 1 := by\n  simp\nM N : Grp\nf : M ⟶ N\n⊢ (ConcreteCategory.hom f) 1 = 1\n", "full_text": "example {M N : Grp} (f : M ⟶ N) : f 1 = 1 := by\n  simp\nM N : Grp\nf : M ⟶ N\n⊢ (ConcreteCategory.hom f) 1 = 1\n/- Goals Accomplished! -/\n"}
{"prompt": "example {M N : AlgebraCat.{v} R} (f : M ⟶ N) (x y : M) : f (x + y) = f x + f y := by\n  simp\nR : Type u\ninst✝ : CommRing R\nM N : AlgebraCat R\nf : M ⟶ N\nx y : ↑M\n⊢ (ConcreteCategory.hom f) (x + y) = (ConcreteCategory.hom f) x + (ConcreteCategory.hom f) y\n", "full_text": "example {M N : AlgebraCat.{v} R} (f : M ⟶ N) (x y : M) : f (x + y) = f x + f y := by\n  simp\nR : Type u\ninst✝ : CommRing R\nM N : AlgebraCat R\nf : M ⟶ N\nx y : ↑M\n⊢ (ConcreteCategory.hom f) (x + y) = (ConcreteCategory.hom f) x + (ConcreteCategory.hom f) y\n/- Goals Accomplished! -/\n"}
{"prompt": "example {M N : AlgebraCat.{v} R} (f : M ⟶ N) : f 0 = 0 := by\n  simp\nR : Type u\ninst✝ : CommRing R\nM N : AlgebraCat R\nf : M ⟶ N\n⊢ (ConcreteCategory.hom f) 0 = 0\n", "full_text": "example {M N : AlgebraCat.{v} R} (f : M ⟶ N) : f 0 = 0 := by\n  simp\nR : Type u\ninst✝ : CommRing R\nM N : AlgebraCat R\nf : M ⟶ N\n⊢ (ConcreteCategory.hom f) 0 = 0\n/- Goals Accomplished! -/\n"}
{"prompt": "example {M N : AlgebraCat.{v} R} (f : M ⟶ N) (r : R) (m : M) : f (r • m) = r • f m := by\n  simp\nR : Type u\ninst✝ : CommRing R\nM N : AlgebraCat R\nf : M ⟶ N\nr : R\nm : ↑M\n⊢ (ConcreteCategory.hom f) (r • m) = r • (ConcreteCategory.hom f) m\n", "full_text": "example {M N : AlgebraCat.{v} R} (f : M ⟶ N) (r : R) (m : M) : f (r • m) = r • f m := by\n  simp\nR : Type u\ninst✝ : CommRing R\nM N : AlgebraCat R\nf : M ⟶ N\nr : R\nm : ↑M\n⊢ (ConcreteCategory.hom f) (r • m) = r • (ConcreteCategory.hom f) m\n/- Goals Accomplished! -/\n"}
{"prompt": "example (f : U ⟶ V ⊗ (W ⊗ X)) (g : (V ⊗ W) ⊗ X ⟶ Y) :\n    f ⊗≫ g = f ≫ (α_ _ _ _).inv ≫ g := by\n  monoidal\nC : Type u\ninst✝¹ : Category.{v, u} C\ninst✝ : MonoidalCategory C\nX Y Z W : C\nf✝ : X ⟶ Y\ng✝ : Y ⟶ Z\nU V : C\nf : U ⟶ V ⊗ W ⊗ X\ng : (V ⊗ W) ⊗ X ⟶ Y\n⊢ f ⊗≫ g = f ≫ (α_ V W X).inv ≫ g\n", "full_text": "example (f : U ⟶ V ⊗ (W ⊗ X)) (g : (V ⊗ W) ⊗ X ⟶ Y) :\n    f ⊗≫ g = f ≫ (α_ _ _ _).inv ≫ g := by\n  monoidal\nC : Type u\ninst✝¹ : Category.{v, u} C\ninst✝ : MonoidalCategory C\nX Y Z W : C\nf✝ : X ⟶ Y\ng✝ : Y ⟶ Z\nU V : C\nf : U ⟶ V ⊗ W ⊗ X\ng : (V ⊗ W) ⊗ X ⟶ Y\n⊢ f ⊗≫ g = f ≫ (α_ V W X).inv ≫ g\n/- Goals Accomplished! -/\n"}
{"prompt": "example (f : Z ⟶ W) : (X ⊗ Y) ◁ f = (α_ _ _ _).hom ≫ X ◁ Y ◁ f ≫ (α_ _ _ _).inv := by\n  monoidal\nC : Type u\ninst✝¹ : Category.{v, u} C\ninst✝ : MonoidalCategory C\nX Y Z W : C\nf✝ : X ⟶ Y\ng : Y ⟶ Z\nf : Z ⟶ W\n⊢ (X ⊗ Y) ◁ f = (α_ X Y Z).hom ≫ X ◁ Y ◁ f ≫ (α_ X Y W).inv\n", "full_text": "example (f : Z ⟶ W) : (X ⊗ Y) ◁ f = (α_ _ _ _).hom ≫ X ◁ Y ◁ f ≫ (α_ _ _ _).inv := by\n  monoidal\nC : Type u\ninst✝¹ : Category.{v, u} C\ninst✝ : MonoidalCategory C\nX Y Z W : C\nf✝ : X ⟶ Y\ng : Y ⟶ Z\nf : Z ⟶ W\n⊢ (X ⊗ Y) ◁ f = (α_ X Y Z).hom ≫ X ◁ Y ◁ f ≫ (α_ X Y W).inv\n/- Goals Accomplished! -/\n"}
{"prompt": "example : f ≫ g = f ≫ g := by\n  monoidal\nC : Type u\ninst✝¹ : Category.{v, u} C\ninst✝ : MonoidalCategory C\nX Y Z W : C\nf : X ⟶ Y\ng : Y ⟶ Z\n⊢ f ≫ g = f ≫ g\n", "full_text": "example : f ≫ g = f ≫ g := by\n  monoidal\nC : Type u\ninst✝¹ : Category.{v, u} C\ninst✝ : MonoidalCategory C\nX Y Z W : C\nf : X ⟶ Y\ng : Y ⟶ Z\n⊢ f ≫ g = f ≫ g\n/- Goals Accomplished! -/\n"}
{"prompt": "example : (f ⊗ g) ▷ X = (α_ _ _ _).hom ≫ (f ⊗ g ▷ X) ≫ (α_ _ _ _).inv := by\n  monoidal\nC : Type u\ninst✝¹ : Category.{v, u} C\ninst✝ : MonoidalCategory C\nX Y Z W : C\nf : X ⟶ Y\ng : Y ⟶ Z\n⊢ (f ⊗ g) ▷ X = (α_ X Y X).hom ≫ (f ⊗ g ▷ X) ≫ (α_ Y Z X).inv\n", "full_text": "example : (f ⊗ g) ▷ X = (α_ _ _ _).hom ≫ (f ⊗ g ▷ X) ≫ (α_ _ _ _).inv := by\n  monoidal\nC : Type u\ninst✝¹ : Category.{v, u} C\ninst✝ : MonoidalCategory C\nX Y Z W : C\nf : X ⟶ Y\ng : Y ⟶ Z\n⊢ (f ⊗ g) ▷ X = (α_ X Y X).hom ≫ (f ⊗ g ▷ X) ≫ (α_ Y Z X).inv\n/- Goals Accomplished! -/\n"}
{"prompt": "example {V₁ V₂ V₃ : C} (R : ∀ V₁ V₂ : C, V₁ ⊗ V₂ ⟶ V₂ ⊗ V₁) :\n    R V₁ V₂ ▷ V₃ ⊗≫ V₂ ◁ R V₁ V₃ =\n      R V₁ V₂ ▷ V₃ ≫ (α_ _ _ _).hom ⊗≫ 𝟙 _ ≫ V₂ ◁ R V₁ V₃ := by\n  monoidal\nC : Type u\ninst✝¹ : Category.{v, u} C\ninst✝ : MonoidalCategory C\nX Y Z W : C\nf : X ⟶ Y\ng : Y ⟶ Z\nV₁ V₂ V₃ : C\nR : (V₁ V₂ : C) → V₁ ⊗ V₂ ⟶ V₂ ⊗ V₁\n⊢ R V₁ V₂ ▷ V₃ ⊗≫ V₂ ◁ R V₁ V₃ = R V₁ V₂ ▷ V₃ ≫ (α_ V₂ V₁ V₃).hom ⊗≫ 𝟙 (V₂ ⊗ V₁ ⊗ V₃) ≫ V₂ ◁ R V₁ V₃\n", "full_text": "example {V₁ V₂ V₃ : C} (R : ∀ V₁ V₂ : C, V₁ ⊗ V₂ ⟶ V₂ ⊗ V₁) :\n    R V₁ V₂ ▷ V₃ ⊗≫ V₂ ◁ R V₁ V₃ =\n      R V₁ V₂ ▷ V₃ ≫ (α_ _ _ _).hom ⊗≫ 𝟙 _ ≫ V₂ ◁ R V₁ V₃ := by\n  monoidal\nC : Type u\ninst✝¹ : Category.{v, u} C\ninst✝ : MonoidalCategory C\nX Y Z W : C\nf : X ⟶ Y\ng : Y ⟶ Z\nV₁ V₂ V₃ : C\nR : (V₁ V₂ : C) → V₁ ⊗ V₂ ⟶ V₂ ⊗ V₁\n⊢ R V₁ V₂ ▷ V₃ ⊗≫ V₂ ◁ R V₁ V₃ = R V₁ V₂ ▷ V₃ ≫ (α_ V₂ V₁ V₃).hom ⊗≫ 𝟙 (V₂ ⊗ V₁ ⊗ V₃) ≫ V₂ ◁ R V₁ V₃\n/- Goals Accomplished! -/\n"}
{"prompt": "example {α β : Type} (f : α → β) (a : α) : β := by\n  fail_if_success solve_by_elim [-f]\n  fail_if_success solve_by_elim [-a]\n  fail_if_success solve_by_elim only [f]\n  solve_by_elim\nα β : Type\nf : α → β\na : α\n⊢ β\n", "full_text": "example {α β : Type} (f : α → β) (a : α) : β := by\n  fail_if_success solve_by_elim [-f]\n  fail_if_success solve_by_elim [-a]\n  fail_if_success solve_by_elim only [f]\n  solve_by_elim\nα β : Type\nf : α → β\na : α\n⊢ β\n/- α β : Type\nf : α → β\na : α\n⊢ β -/\n/- α β : Type\nf : α → β\na : α\n⊢ β -/\n/- α β : Type\nf : α → β\na : α\n⊢ β -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {α β γ : Type} (f : α → β) (g : β → γ) (b : β) : γ := by\n  fail_if_success solve_by_elim [-g]\n  solve_by_elim [-f]\nα β γ : Type\nf : α → β\ng : β → γ\nb : β\n⊢ γ\n", "full_text": "example {α β γ : Type} (f : α → β) (g : β → γ) (b : β) : γ := by\n  fail_if_success solve_by_elim [-g]\n  solve_by_elim [-f]\nα β γ : Type\nf : α → β\ng : β → γ\nb : β\n⊢ γ\n/- α β γ : Type\nf : α → β\ng : β → γ\nb : β\n⊢ γ -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {α : Nat → Type} (f : (n : Nat) → α n → α (n+1)) (a : α 0) : α 4 := by\n  solve_by_elim only [f, a]\nα : ℕ → Type\nf : (n : ℕ) → α n → α (n + 1)\na : α 0\n⊢ α 4\n", "full_text": "example {α : Nat → Type} (f : (n : Nat) → α n → α (n+1)) (a : α 0) : α 4 := by\n  solve_by_elim only [f, a]\nα : ℕ → Type\nf : (n : ℕ) → α n → α (n + 1)\na : α 0\n⊢ α 4\n/- Goals Accomplished! -/\n"}
{"prompt": "example (h₁ h₂ : False) : Empty := by\n  -- 'It doesn't make sense to remove local hypotheses when using `only` without `*`.'\n  fail_if_success solve_by_elim only [-h₁]\n  -- 'It does make sense to use `*` without `only`.'\n  fail_if_success solve_by_elim [*, -h₁]\n  solve_by_elim only [*, -h₁]\nh₁ h₂ : False\n⊢ Empty\n", "full_text": "example (h₁ h₂ : False) : Empty := by\n  -- 'It doesn't make sense to remove local hypotheses when using `only` without `*`.'\n  fail_if_success solve_by_elim only [-h₁]\n  -- 'It does make sense to use `*` without `only`.'\n  fail_if_success solve_by_elim [*, -h₁]\n  solve_by_elim only [*, -h₁]\nh₁ h₂ : False\n⊢ Empty\n/- h₁ h₂ : False\n⊢ Empty -/\n/- h₁ h₂ : False\n⊢ Empty -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (P₁ P₂ : α → Prop) (f : ∀ (a : α), P₁ a → P₂ a → β)\n    (a : α) (ha₁ : P₁ a) (ha₂ : P₂ a) : β := by\n  solve_by_elim\nα : Sort ?u.26\nβ : Sort ?u.40\nP₁ P₂ : α → Prop\nf : (a : α) → P₁ a → P₂ a → β\na : α\nha₁ : P₁ a\nha₂ : P₂ a\n⊢ β\n", "full_text": "example (P₁ P₂ : α → Prop) (f : ∀ (a : α), P₁ a → P₂ a → β)\n    (a : α) (ha₁ : P₁ a) (ha₂ : P₂ a) : β := by\n  solve_by_elim\nα : Sort ?u.26\nβ : Sort ?u.40\nP₁ P₂ : α → Prop\nf : (a : α) → P₁ a → P₂ a → β\na : α\nha₁ : P₁ a\nha₂ : P₂ a\n⊢ β\n/- Goals Accomplished! -/\n"}
{"prompt": "example {X : Type} (x : X) : x = x := by\n  fail_if_success solve_by_elim (config := {constructor := false}) only -- needs the `rfl` lemma\n  solve_by_elim\nX : Type\nx : X\n⊢ x = x\n", "full_text": "example {X : Type} (x : X) : x = x := by\n  fail_if_success solve_by_elim (config := {constructor := false}) only -- needs the `rfl` lemma\n  solve_by_elim\nX : Type\nx : X\n⊢ x = x\n/- X : Type\nx : X\n⊢ x = x -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : True := by\n  fail_if_success solve_by_elim (config := {constructor := false}) only -- needs the `trivial` lemma\n  solve_by_elim\n⊢ True\n", "full_text": "example : True := by\n  fail_if_success solve_by_elim (config := {constructor := false}) only -- needs the `trivial` lemma\n  solve_by_elim\n⊢ True\n/- ⊢ True -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : True := by\n  -- uses the `trivial` lemma, which should now be removed from the default set:\n  solve_by_elim (config := {constructor := false})\n⊢ True\n", "full_text": "example : True := by\n  -- uses the `trivial` lemma, which should now be removed from the default set:\n  solve_by_elim (config := {constructor := false})\n⊢ True\n/- Goals Accomplished! -/\n"}
{"prompt": "example : True := by\n  solve_by_elim only -- uses the constructor discharger.\n⊢ True\n", "full_text": "example : True := by\n  solve_by_elim only -- uses the constructor discharger.\n⊢ True\n/- Goals Accomplished! -/\n"}
{"prompt": "example (P₁ P₂ : α → Prop) (f : ∀ (a: α), P₁ a → P₂ a → β)\n    (a : α) (_ha₁ : P₁ a)\n    (a' : α) (ha'₁ : P₁ a') (ha'₂ : P₂ a') : β := by\n  fail_if_success solve_by_elim (config := .noBackTracking)\n  solve_by_elim\nα : Sort ?u.26\nβ : Sort ?u.40\nP₁ P₂ : α → Prop\nf : (a : α) → P₁ a → P₂ a → β\na : α\n_ha₁ : P₁ a\na' : α\nha'₁ : P₁ a'\nha'₂ : P₂ a'\n⊢ β\n", "full_text": "example (P₁ P₂ : α → Prop) (f : ∀ (a: α), P₁ a → P₂ a → β)\n    (a : α) (_ha₁ : P₁ a)\n    (a' : α) (ha'₁ : P₁ a') (ha'₂ : P₂ a') : β := by\n  fail_if_success solve_by_elim (config := .noBackTracking)\n  solve_by_elim\nα : Sort ?u.26\nβ : Sort ?u.40\nP₁ P₂ : α → Prop\nf : (a : α) → P₁ a → P₂ a → β\na : α\n_ha₁ : P₁ a\na' : α\nha'₁ : P₁ a'\nha'₂ : P₂ a'\n⊢ β\n/- α : Sort ?u.26\nβ : Sort ?u.40\nP₁ P₂ : α → Prop\nf : (a : α) → P₁ a → P₂ a → β\na : α\n_ha₁ : P₁ a\na' : α\nha'₁ : P₁ a'\nha'₂ : P₂ a'\n⊢ β -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {α : Type} {a b : α → Prop} (h₀ : b = a) (y : α) : a y = b y := by\n  fail_if_success solve_by_elim (config := {symm := false})\n  solve_by_elim\nα : Type\na b : α → Prop\nh₀ : b = a\ny : α\n⊢ a y = b y\n", "full_text": "example {α : Type} {a b : α → Prop} (h₀ : b = a) (y : α) : a y = b y := by\n  fail_if_success solve_by_elim (config := {symm := false})\n  solve_by_elim\nα : Type\na b : α → Prop\nh₀ : b = a\ny : α\n⊢ a y = b y\n/- α : Type\na b : α → Prop\nh₀ : b = a\ny : α\n⊢ a y = b y -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (P : True → False) : 3 = 7 := by\n  fail_if_success solve_by_elim (config := {exfalso := false})\n  solve_by_elim\nP : True → False\n⊢ 3 = 7\n", "full_text": "example (P : True → False) : 3 = 7 := by\n  fail_if_success solve_by_elim (config := {exfalso := false})\n  solve_by_elim\nP : True → False\n⊢ 3 = 7\n/- P : True → False\n⊢ 3 = 7 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (n : Nat) : Nat × Nat := by\n  constructor\n  solve_by_elim\n  solve_by_elim\nn : ℕ\n⊢ ℕ × ℕ\n", "full_text": "example (n : Nat) : Nat × Nat := by\n  constructor\n  solve_by_elim\n  solve_by_elim\nn : ℕ\n⊢ ℕ × ℕ\n/- case fst\nn : ℕ\n⊢ ℕ\n---\ncase snd\nn : ℕ\n⊢ ℕ -/\n/- case snd\nn : ℕ\n⊢ ℕ -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (n : Nat) : Nat × Nat := by\n  constructor\n  solve_by_elim*\nn : ℕ\n⊢ ℕ × ℕ\n", "full_text": "example (n : Nat) : Nat × Nat := by\n  constructor\n  solve_by_elim*\nn : ℕ\n⊢ ℕ × ℕ\n/- case fst\nn : ℕ\n⊢ ℕ\n---\ncase snd\nn : ℕ\n⊢ ℕ -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (n m : Nat) (f : Nat → Nat → Prop) (h : f n m) : ∃ p : Nat × Nat, f p.1 p.2 := by\n  fconstructor\n  fconstructor\n  solve_by_elim*\nn m : ℕ\nf : ℕ → ℕ → Prop\nh : f n m\n⊢ ∃ p, f p.1 p.2\n", "full_text": "example (n m : Nat) (f : Nat → Nat → Prop) (h : f n m) : ∃ p : Nat × Nat, f p.1 p.2 := by\n  fconstructor\n  fconstructor\n  solve_by_elim*\nn m : ℕ\nf : ℕ → ℕ → Prop\nh : f n m\n⊢ ∃ p, f p.1 p.2\n/- case w\nn m : ℕ\nf : ℕ → ℕ → Prop\nh : f n m\n⊢ ℕ × ℕ\n---\ncase h\nn m : ℕ\nf : ℕ → ℕ → Prop\nh : f n m\n⊢ f ?w.1 ?w.2 -/\n/- case w.fst\nn m : ℕ\nf : ℕ → ℕ → Prop\nh : f n m\n⊢ ℕ\n---\ncase w.snd\nn m : ℕ\nf : ℕ → ℕ → Prop\nh : f n m\n⊢ ℕ\n---\ncase h\nn m : ℕ\nf : ℕ → ℕ → Prop\nh : f n m\n⊢ f (?w.fst, ?w.snd).1 (?w.fst, ?w.snd).2 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (P : Nat → Type) (f : {n : Nat} → P n) : P 2 × P 3 := by\n  fconstructor\n  solve_by_elim* only [f]\nP : ℕ → Type\nf : {n : ℕ} → P n\n⊢ P 2 × P 3\n", "full_text": "example (P : Nat → Type) (f : {n : Nat} → P n) : P 2 × P 3 := by\n  fconstructor\n  solve_by_elim* only [f]\nP : ℕ → Type\nf : {n : ℕ} → P n\n⊢ P 2 × P 3\n/- case fst\nP : ℕ → Type\nf : {n : ℕ} → P n\n⊢ P 2\n---\ncase snd\nP : ℕ → Type\nf : {n : ℕ} → P n\n⊢ P 3 -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : 6 = 6 ∧ [7] = [7] := by\n  fconstructor\n  solve_by_elim* only [@rfl _]\n⊢ 6 = 6 ∧ [7] = [7]\n", "full_text": "example : 6 = 6 ∧ [7] = [7] := by\n  fconstructor\n  solve_by_elim* only [@rfl _]\n⊢ 6 = 6 ∧ [7] = [7]\n/- case left\n⊢ 6 = 6\n---\ncase right\n⊢ [7] = [7] -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (f g : Nat → Prop) : (∃ k : Nat, f k) ∨ (∃ k : Nat, g k) ↔ ∃ k : Nat, f k ∨ g k := by\n  fconstructor\n  rintro (⟨n, fn⟩ | ⟨n, gn⟩)\n  pick_goal 3\n  rintro ⟨n, hf | hg⟩\n  solve_by_elim* (config := {maxDepth := 13}) [Or.inl, Or.inr, Exists.intro]\nf g : ℕ → Prop\n⊢ ((∃ k, f k) ∨ ∃ k, g k) ↔ ∃ k, f k ∨ g k\n", "full_text": "example (f g : Nat → Prop) : (∃ k : Nat, f k) ∨ (∃ k : Nat, g k) ↔ ∃ k : Nat, f k ∨ g k := by\n  fconstructor\n  rintro (⟨n, fn⟩ | ⟨n, gn⟩)\n  pick_goal 3\n  rintro ⟨n, hf | hg⟩\n  solve_by_elim* (config := {maxDepth := 13}) [Or.inl, Or.inr, Exists.intro]\nf g : ℕ → Prop\n⊢ ((∃ k, f k) ∨ ∃ k, g k) ↔ ∃ k, f k ∨ g k\n/- case mp\nf g : ℕ → Prop\n⊢ ((∃ k, f k) ∨ ∃ k, g k) → ∃ k, f k ∨ g k\n---\ncase mpr\nf g : ℕ → Prop\n⊢ (∃ k, f k ∨ g k) → (∃ k, f k) ∨ ∃ k, g k -/\n/- case mp.inl.intro\nf g : ℕ → Prop\nn : ℕ\nfn : f n\n⊢ ∃ k, f k ∨ g k\n---\ncase mp.inr.intro\nf g : ℕ → Prop\nn : ℕ\ngn : g n\n⊢ ∃ k, f k ∨ g k\n---\ncase mpr\nf g : ℕ → Prop\n⊢ (∃ k, f k ∨ g k) → (∃ k, f k) ∨ ∃ k, g k -/\n/- case mpr\nf g : ℕ → Prop\n⊢ (∃ k, f k ∨ g k) → (∃ k, f k) ∨ ∃ k, g k\n---\ncase mp.inl.intro\nf g : ℕ → Prop\nn : ℕ\nfn : f n\n⊢ ∃ k, f k ∨ g k\n---\ncase mp.inr.intro\nf g : ℕ → Prop\nn : ℕ\ngn : g n\n⊢ ∃ k, f k ∨ g k -/\n/- case mpr.intro.inl\nf g : ℕ → Prop\nn : ℕ\nhf : f n\n⊢ (∃ k, f k) ∨ ∃ k, g k\n---\ncase mpr.intro.inr\nf g : ℕ → Prop\nn : ℕ\nhg : g n\n⊢ (∃ k, f k) ∨ ∃ k, g k\n---\ncase mp.inl.intro\nf g : ℕ → Prop\nn : ℕ\nfn : f n\n⊢ ∃ k, f k ∨ g k\n---\ncase mp.inr.intro\nf g : ℕ → Prop\nn : ℕ\ngn : g n\n⊢ ∃ k, f k ∨ g k -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (P : Prop) : P → P := by\n  fail_if_success solve_by_elim (config := {intro := false})\n  solve_by_elim\nP : Prop\n⊢ P → P\n", "full_text": "example (P : Prop) : P → P := by\n  fail_if_success solve_by_elim (config := {intro := false})\n  solve_by_elim\nP : Prop\n⊢ P → P\n/- P : Prop\n⊢ P → P -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (P Q : Prop) : P ∧ Q → P ∧ Q := by\n  solve_by_elim\nP Q : Prop\n⊢ P ∧ Q → P ∧ Q\n", "full_text": "example (P Q : Prop) : P ∧ Q → P ∧ Q := by\n  solve_by_elim\nP Q : Prop\n⊢ P ∧ Q → P ∧ Q\n/- Goals Accomplished! -/\n"}
{"prompt": "example {a b : Type} (h₀ : a → b) (h₁ : a) : b := by\n  apply_assumption\n  apply_assumption\na b : Type\nh₀ : a → b\nh₁ : a\n⊢ b\n", "full_text": "example {a b : Type} (h₀ : a → b) (h₁ : a) : b := by\n  apply_assumption\n  apply_assumption\na b : Type\nh₀ : a → b\nh₁ : a\n⊢ b\n/- a b : Type\nh₀ : a → b\nh₁ : a\n⊢ a -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {α : Type} {p : α → Prop} (h₀ : ∀ x, p x) (y : α) : p y := by\n  apply_assumption\nα : Type\np : α → Prop\nh₀ : ∀ (x : α), p x\ny : α\n⊢ p y\n", "full_text": "example {α : Type} {p : α → Prop} (h₀ : ∀ x, p x) (y : α) : p y := by\n  apply_assumption\nα : Type\np : α → Prop\nh₀ : ∀ (x : α), p x\ny : α\n⊢ p y\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a b : α) (h : b = a) : a = b := by\n  fail_if_success apply_assumption (config := {symm := false})\n  apply_assumption\nα : Sort u_1\na b : α\nh : b = a\n⊢ a = b\n", "full_text": "example (a b : α) (h : b = a) : a = b := by\n  fail_if_success apply_assumption (config := {symm := false})\n  apply_assumption\nα : Sort u_1\na b : α\nh : b = a\n⊢ a = b\n/- α : Sort u_1\na b : α\nh : b = a\n⊢ a = b -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example {P Q : Prop} (p : P) (q : Q) (h : P → ¬ Q) : Nat := by\n  fail_if_success apply_assumption (config := {exfalso := false})\n  apply_assumption <;> assumption\nP Q : Prop\np : P\nq : Q\nh : P → ¬Q\n⊢ ℕ\n", "full_text": "example {P Q : Prop} (p : P) (q : Q) (h : P → ¬ Q) : Nat := by\n  fail_if_success apply_assumption (config := {exfalso := false})\n  apply_assumption <;> assumption\nP Q : Prop\np : P\nq : Q\nh : P → ¬Q\n⊢ ℕ\n/- P Q : Prop\np : P\nq : Q\nh : P → ¬Q\n⊢ ℕ -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example : 1 = 2 := by\n  fail_if_success solve_by_elim\n  solve_by_elim using dummy_label_attr\n⊢ 1 = 2\n", "full_text": "example : 1 = 2 := by\n  fail_if_success solve_by_elim\n  solve_by_elim using dummy_label_attr\n⊢ 1 = 2\n/- ⊢ 1 = 2 -/\n/- ⊢ 1 = 2 -/\n"}
{"prompt": "example : 5 ≤ 7 := by\n  apply_rules using dummy_label_attr\n  guard_target = 5 = 7\n  exact mySorry\n⊢ 5 ≤ 7\n", "full_text": "example : 5 ≤ 7 := by\n  apply_rules using dummy_label_attr\n  guard_target = 5 = 7\n  exact mySorry\n⊢ 5 ≤ 7\n/- ⊢ 5 ≤ 7 -/\n"}
{"prompt": "example : 5 ≤ 7 := by\n  apply_rules [le_rfl]\n  guard_target = 5 = 7\n  exact mySorry\n⊢ 5 ≤ 7\n", "full_text": "example : 5 ≤ 7 := by\n  apply_rules [le_rfl]\n  guard_target = 5 = 7\n  exact mySorry\n⊢ 5 ≤ 7\n/- Goals Accomplished! -/\n"}
{"prompt": "lemma foo (a b : ℕ) (ha : a ≠ 0) (hb : b ≠ 0) : a * b ≠ 0 := by\n  apply_rules [mul_ne_zero]\na b : ℕ\nha : a ≠ 0\nhb : b ≠ 0\n⊢ a * b ≠ 0\n", "full_text": "lemma foo (a b : ℕ) (ha : a ≠ 0) (hb : b ≠ 0) : a * b ≠ 0 := by\n  apply_rules [mul_ne_zero]\na b : ℕ\nha : a ≠ 0\nhb : b ≠ 0\n⊢ a * b ≠ 0\n/- Goals Accomplished! -/\n"}
{"prompt": "lemma prod_test (R : Type) [CommMonoid R] (f : Fin 10 → R) :\n    ∏ i, f i = f 0 * f 1 * f 2 * f 3 * f 4 * f 5 * f 6 * f 7 * f 8 * f 9 := by\n  simp only [Fin.prod_univ_ofNat]\nR : Type\ninst✝ : CommMonoid R\nf : Fin 10 → R\n⊢ ∏ i, f i = f 0 * f 1 * f 2 * f 3 * f 4 * f 5 * f 6 * f 7 * f 8 * f 9\n", "full_text": "lemma prod_test (R : Type) [CommMonoid R] (f : Fin 10 → R) :\n    ∏ i, f i = f 0 * f 1 * f 2 * f 3 * f 4 * f 5 * f 6 * f 7 * f 8 * f 9 := by\n  simp only [Fin.prod_univ_ofNat]\nR : Type\ninst✝ : CommMonoid R\nf : Fin 10 → R\n⊢ ∏ i, f i = f 0 * f 1 * f 2 * f 3 * f 4 * f 5 * f 6 * f 7 * f 8 * f 9\n/- Goals Accomplished! -/\n"}
{"prompt": "example (R : Type) [AddCommMonoid R] (f : Fin 10 → R) :\n    ∑ i, f i = f 0 + f 1 + f 2 + f 3 + f 4 + f 5 + f 6 + f 7 + f 8 + f 9 := by\n  simp only [Fin.sum_univ_ofNat]\nR : Type\ninst✝ : AddCommMonoid R\nf : Fin 10 → R\n⊢ ∑ i, f i = f 0 + f 1 + f 2 + f 3 + f 4 + f 5 + f 6 + f 7 + f 8 + f 9\n", "full_text": "example (R : Type) [AddCommMonoid R] (f : Fin 10 → R) :\n    ∑ i, f i = f 0 + f 1 + f 2 + f 3 + f 4 + f 5 + f 6 + f 7 + f 8 + f 9 := by\n  simp only [Fin.sum_univ_ofNat]\nR : Type\ninst✝ : AddCommMonoid R\nf : Fin 10 → R\n⊢ ∑ i, f i = f 0 + f 1 + f 2 + f 3 + f 4 + f 5 + f 6 + f 7 + f 8 + f 9\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a : α) (hp : p a) (hq : q a) : ∃ b : α, (p b ∧ b = a) ∧ q b := by\n  simp only [existsAndEq]\n  guard_target = (p a ∧ True) ∧ q a\n  exact ⟨⟨hp, trivial⟩, hq⟩\nα : Type u\np q : α → Prop\na : α\nhp : p a\nhq : q a\n⊢ ∃ b, (p b ∧ b = a) ∧ q b\n", "full_text": "example (a : α) (hp : p a) (hq : q a) : ∃ b : α, (p b ∧ b = a) ∧ q b := by\n  simp only [existsAndEq]\n  guard_target = (p a ∧ True) ∧ q a\n  exact ⟨⟨hp, trivial⟩, hq⟩\nα : Type u\np q : α → Prop\na : α\nhp : p a\nhq : q a\n⊢ ∃ b, (p b ∧ b = a) ∧ q b\n/- α : Type u\np q : α → Prop\na : α\nhp : p a\nhq : q a\n⊢ (p a ∧ True) ∧ q a -/\n/- α : Type u\np q : α → Prop\na : α\nhp : p a\nhq : q a\n⊢ (p a ∧ True) ∧ q a -/\n/- Goals Accomplished! -/\n"}
{"prompt": "example (a : α) : ∃ b : α, b = a := by\n  simp only [existsAndEq]\nα : Type u\np q : α → Prop\na : α\n⊢ ∃ b, b = a\n", "full_text": "example (a : α) : ∃ b : α, b = a := by\n  simp only [existsAndEq]\nα : Type u\np q : α → Prop\na : α\n⊢ ∃ b, b = a\n/- Goals Accomplished! -/\n"}
{"prompt": "example (f : α → α) : ∃ a : α, a = f a := by\n  simp only [existsAndEq]\n  sorry\nα : Type u\np q : α → Prop\nf : α → α\n⊢ ∃ a, a = f a\n", "full_text": "example (f : α → α) : ∃ a : α, a = f a := by\n  simp only [existsAndEq]\n  sorry\nα : Type u\np q : α → Prop\nf : α → α\n⊢ ∃ a, a = f a\n/- α : Type u\np q : α → Prop\nf : α → α\n⊢ ∃ a, a = f a -/\n"}
{"prompt": "example (a : α) (hp : p a) (hq : q a) : (∃ b : α, p b ∧ (∃ c : α, b = a ∧ q c)) := by\n  -- the simproc doesn't handle nested `Exists`\n  simp -failIfUnchanged only [existsAndEq]\n  guard_target = ∃ b : α, p b ∧ (∃ c : α, b = a ∧ q c)\n  simp only [exists_and_left]\n  guard_target = ∃ b, p b ∧ b = a ∧ ∃ x, q x\n  -- but can clean up the rest\n  simp only [existsAndEq]\n  guard_target = p a ∧ True ∧ ∃ x, q x\n  exact ⟨hp, trivial, a, hq⟩\nα : Type u\np q : α → Prop\na : α\nhp : p a\nhq : q a\n⊢ ∃ b, p b ∧ ∃ c, b = a ∧ q c\n", "full_text": "example (a : α) (hp : p a) (hq : q a) : (∃ b : α, p b ∧ (∃ c : α, b = a ∧ q c)) := by\n  -- the simproc doesn't handle nested `Exists`\n  simp -failIfUnchanged only [existsAndEq]\n  guard_target = ∃ b : α, p b ∧ (∃ c : α, b = a ∧ q c)\n  simp only [exists_and_left]\n  guard_target = ∃ b, p b ∧ b = a ∧ ∃ x, q x\n  -- but can clean up the rest\n  simp only [existsAndEq]\n  guard_target = p a ∧ True ∧ ∃ x, q x\n  exact ⟨hp, trivial, a, hq⟩\nα : Type u\np q : α → Prop\na : α\nhp : p a\nhq : q a\n⊢ ∃ b, p b ∧ ∃ c, b = a ∧ q c\n/- α : Type u\np q : α → Prop\na : α\nhp : p a\nhq : q a\n⊢ ∃ b, p b ∧ ∃ c, b = a ∧ q c -/\n/- α : Type u\np q : α → Prop\na : α\nhp : p a\nhq : q a\n⊢ ∃ b, p b ∧ ∃ c, b = a ∧ q c -/\n/- α : Type u\np q : α → Prop\na : α\nhp : p a\nhq : q a\n⊢ ∃ b, p b ∧ b = a ∧ ∃ x, q x -/\n/- α : Type u\np q : α → Prop\na : α\nhp : p a\nhq : q a\n⊢ ∃ b, p b ∧ b = a ∧ ∃ x, q x -/\n/- α : Type u\np q : α → Prop\na : α\nhp : p a\nhq : q a\n⊢ p a ∧ True ∧ ∃ x, q x -/\n/- α : Type u\np q : α → Prop\na : α\nhp : p a\nhq : q a\n⊢ p a ∧ True ∧ ∃ x, q x -/\n/- Goals Accomplished! -/\n"}
