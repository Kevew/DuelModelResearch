"## Tactic State A:\na b : ℕ\nh1 : a + b = a\n⊢ a + b = a\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact h1"
"## Tactic State A:\n⊢ ¬∀ (a b : ℝ), Irrational a → Irrational b → 0 < a → Irrational (a ^ b)\n## Tactic State B:\n⊢ ∃ a b, Irrational a ∧ Irrational b ∧ 0 < a ∧ ¬Irrational (a ^ b)\n## Action:\n  push_neg"
"## Tactic State A:\n⊢ ∃ a b, Irrational a ∧ Irrational b ∧ 0 < a ∧ ¬Irrational (a ^ b)\n## Tactic State B:\ncase pos\nhc : Irrational (√2 ^ √2)\n⊢ ∃ a b, Irrational a ∧ Irrational b ∧ 0 < a ∧ ¬Irrational (a ^ b)\n---\ncase neg\nhc : ¬Irrational (√2 ^ √2)\n⊢ ∃ a b, Irrational a ∧ Irrational b ∧ 0 < a ∧ ¬Irrational (a ^ b)\n## Action:\n  by_cases hc : Irrational (√2 ^ √2)"
"## Tactic State A:\ncase pos\nhc : Irrational (√2 ^ √2)\n⊢ ∃ a b, Irrational a ∧ Irrational b ∧ 0 < a ∧ ¬Irrational (a ^ b)\n---\ncase neg\nhc : ¬Irrational (√2 ^ √2)\n⊢ ∃ a b, Irrational a ∧ Irrational b ∧ 0 < a ∧ ¬Irrational (a ^ b)\n## Tactic State B:\ncase right\nhc : Irrational (√2 ^ √2)\n⊢ ¬Irrational ((√2 ^ √2) ^ √2)\n## Action:\n  · use (√2 ^ √2), √2, hc, irrational_sqrt_two, by positivity"
"## Tactic State A:\ncase right\nhc : Irrational (√2 ^ √2)\n⊢ ¬Irrational ((√2 ^ √2) ^ √2)\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    rw [← rpow_mul, mul_self_sqrt, rpow_two, sq_sqrt] <;> norm_num"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · use √2, √2, irrational_sqrt_two, irrational_sqrt_two, by positivity, hc"
"## Tactic State A:\nn : ℕ\n⊢ ∃ N, n < N ∧ Nat.Prime N\n## Tactic State B:\nn : ℕ\nN : ℕ := n ! + 1\n⊢ ∃ N, n < N ∧ Nat.Prime N\n## Action:\n  let N := n.factorial + 1"
"## Tactic State A:\nn : ℕ\nN : ℕ := n ! + 1\n⊢ ∃ N, n < N ∧ Nat.Prime N\n## Tactic State B:\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\n⊢ ∃ N, n < N ∧ Nat.Prime N\n## Action:\n  let p := minFac N"
"## Tactic State A:\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\n⊢ ∃ N, n < N ∧ Nat.Prime N\n## Tactic State B:\ncase h\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\n⊢ n < p ∧ Nat.Prime p\n## Action:\n  use p"
"## Tactic State A:\ncase h\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\n⊢ n < p ∧ Nat.Prime p\n## Tactic State B:\ncase h\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\nprime : Nat.Prime p\n⊢ n < p ∧ Nat.Prime p\n## Action:\n  have prime : p.Prime := by"
"## Tactic State A:\ncase h\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\nprime : Nat.Prime p\n⊢ n < p ∧ Nat.Prime p\n## Tactic State B:\ncase h.left\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\nprime : Nat.Prime p\n⊢ n < p\n---\ncase h.right\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\nprime : Nat.Prime p\n⊢ Nat.Prime p\n## Action:\n    apply minFac_prime"
"## Tactic State A:\ncase h.left\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\nprime : Nat.Prime p\n⊢ n < p\n---\ncase h.right\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\nprime : Nat.Prime p\n⊢ Nat.Prime p\n## Tactic State B:\ncase h.left\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\nprime : Nat.Prime p\nthis : p ≤ n\n⊢ False\n## Action:\n    observe : n.factorial > 0"
"## Tactic State A:\ncase h.left\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\nprime : Nat.Prime p\nthis : p ≤ n\n⊢ False\n## Tactic State B:\ncase h.left\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\nprime : Nat.Prime p\nthis✝ : p ≤ n\nthis : p ∣ n !\n⊢ False\n## Action:\n    omega"
"## Tactic State A:\ncase h.left\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\nprime : Nat.Prime p\nthis✝ : p ≤ n\nthis : p ∣ n !\n⊢ False\n## Tactic State B:\ncase h.left\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\nprime : Nat.Prime p\nthis✝¹ : p ≤ n\nthis✝ : p ∣ n !\nthis : N.minFac ∣ N\n⊢ False\n## Action:\n  constructor"
"## Tactic State A:\ncase h.left\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\nprime : Nat.Prime p\nthis✝¹ : p ≤ n\nthis✝ : p ∣ n !\nthis : N.minFac ∣ N\n⊢ False\n## Tactic State B:\ncase h.left\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\nprime : Nat.Prime p\nthis✝² : p ≤ n\nthis✝¹ : p ∣ n !\nthis✝ : N.minFac ∣ N\nthis : p ∣ 1\n⊢ False\n## Action:\n  · by_contra!"
"## Tactic State A:\ncase h.left\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\nprime : Nat.Prime p\nthis✝² : p ≤ n\nthis✝¹ : p ∣ n !\nthis✝ : N.minFac ∣ N\nthis : p ∣ 1\n⊢ False\n## Tactic State B:\ncase h.left\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\nprime : Nat.Prime p\nthis✝³ : p ≤ n\nthis✝² : p ∣ n !\nthis✝¹ : N.minFac ∣ N\nthis✝ : p ∣ 1\nthis : ¬p ∣ 1\n⊢ False\n## Action:\n    observe : p ∣ n.factorial"
"## Tactic State A:\ncase h.left\nn : ℕ\nN : ℕ := n ! + 1\np : ℕ := N.minFac\nprime : Nat.Prime p\nthis✝³ : p ≤ n\nthis✝² : p ∣ n !\nthis✝¹ : N.minFac ∣ N\nthis✝ : p ∣ 1\nthis : ¬p ∣ 1\n⊢ False\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    observe : p ∣ N"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n    observe : p ∣ 1"
"## Tactic State A:\n⊢ ∃ x, x = x\n## Tactic State B:\ncase w\n⊢ ℕ\n## Action:\n  use ?_"
"## Tactic State A:\ncase w\n⊢ ℕ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  exact 42"
"## Tactic State A:\n⊢ ∃ a b c, a + b + c = 6\n## Tactic State B:\ncase h\n⊢ 1 + 2 + 3 = 6\n## Action:\n  use 1, 2, 3"
"## Tactic State A:\ncase h\n⊢ 1 + 2 + 3 = 6\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rfl"
"## Tactic State A:\n⊢ ∃ n, n * 3 = 3 * 2\n## Tactic State B:\ncase h\n⊢ 2 * 3 = 3 * 2\n## Action:\n  use 2"
"## Tactic State A:\ncase h\n⊢ 2 * 3 = 3 * 2\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  rfl"
"## Tactic State A:\n⊢ (_ : ℤ) × (_ : ℤ) × ℤ × ℤ × ℤ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  use 1, 2, 3, 4, 5"
"## Tactic State A:\n⊢ (_ : ℤ) × (_ : ℤ) × (ℤ × ℤ) × ℤ\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  use! 1, 2, 3, 4, 5"
"## Tactic State A:\nfoo : Sort ?u.5\n⊢ foo\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  use 100, ⟨true, 4⟩, 3"
"## Tactic State A:\nfoo : Sort ?u.5\n⊢ foo\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  use! 100, true, 4, 3"
"## Tactic State A:\nfoo : Sort ?u.5\n⊢ foo\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  use ?x, ⟨?b, 4⟩"
"## Tactic State A:\nfoo : Sort ?u.5\n⊢ foo\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  -- Type ascriptions keep refinement from occurring before applying the constructor"
"## Tactic State A:\nDecidableType : Sort ?u.5\n⊢ DecidableType\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  use Nat"
"## Tactic State A:\nDecidableType : Sort ?u.27\nβ : Type\ninst✝ : DecidableEq β\n⊢ DecidableType\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  use β"
"## Tactic State A:\nDecidableType : Sort ?u.9\nβ : Type\n⊢ DecidableType\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  use β"
"## Tactic State A:\n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  guard_target = DecidableEq β"
"## Tactic State A:\nx✝ : Sort ?u.6\nEmbedding : x✝\nα : Type u\n⊢ sorry × Unit\n## Tactic State B:\ncase fst\nx✝ : Sort ?u.6\nEmbedding : x✝\nα : Type u\n⊢ sorry\n---\ncase snd\nx✝ : Sort ?u.6\nEmbedding : x✝\nα : Type u\n⊢ Unit\n## Action:\n  constructor"
"## Tactic State A:\ncase fst\nx✝ : Sort ?u.6\nEmbedding : x✝\nα : Type u\n⊢ sorry\n---\ncase snd\nx✝ : Sort ?u.6\nEmbedding : x✝\nα : Type u\n⊢ Unit\n## Tactic State B:\ncase snd\nx✝ : Sort ?u.6\nEmbedding : x✝\nα : Type u\n⊢ Unit\n## Action:\n  -- testing that `use` actually focuses on the main goal"
"## Tactic State A:\ncase snd\nx✝ : Sort ?u.6\nEmbedding : x✝\nα : Type u\n⊢ Unit\n## Tactic State B:\ncase snd\nx✝ : Sort ?u.6\nEmbedding : x✝\nα : Type u\n⊢ Unit\n## Action:\n  use id"
"## Tactic State A:\ncase snd\nx✝ : Sort ?u.6\nEmbedding : x✝\nα : Type u\n⊢ Unit\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  · simp"
"## Tactic State A:\nh1 : 1 > 0\n⊢ ∃ n, ∃ (_ : n > 0), n = n\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  use 1"
"## Tactic State A:\n⊢ let P := fun _x => ∃ _n, True;\n  P 1\n## Tactic State B:\nP : ℕ → Prop := fun _x => ∃ _n, True\n⊢ P 1\n## Action:\n  intro P"
"## Tactic State A:\nP : ℕ → Prop := fun _x => ∃ _n, True\n⊢ P 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  use 1"
"## Tactic State A:\n⊢ ∃ f, f 1 = 1\n## Tactic State B:\ncase h\n⊢ sorry 1 = 1\n## Action:\n  use ·"
"## Tactic State A:\n⊢ ∃ f, f 1 = 1\n## Tactic State B:\nGoals Accomplished!\n## Action:\n  use (·)"
