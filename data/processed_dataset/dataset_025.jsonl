{"declaration": "example : True := by\n  by_cases 0 = 0\n  exact .intro\n  exact .intro\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/Multigoal.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "\u22a2 True"}, {"line": "by_cases 0 = 0", "tactic_state": "case pos\nh\u271d : 0 = 0\n\u22a2 True\n---\ncase neg\nh\u271d : \u00ac0 = 0\n\u22a2 True"}, {"line": "exact .intro", "tactic_state": "case neg\nh\u271d : \u00ac0 = 0\n\u22a2 True"}, {"line": "exact .intro", "tactic_state": "No Goals!"}]}
{"declaration": "example {n : Nat} (hn : n = 0) : n + 0 = 0 := by\n  conv =>\n    congr\n    rw [\u2190 Nat.add_zero 0]\n  conv_lhs =>\n    congr\n    rw [\u2190 Nat.add_zero n]\n    rfl\n  conv_rhs =>\n    rw [\u2190 Nat.add_zero 0]\n    congr\n    rfl\n    rfl\n  by_cases 0 = 0\n  assumption\n  assumption\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/Multigoal.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "n : \u2115\nhn : n = 0\n\u22a2 n + 0 = 0"}, {"line": "conv =>\n    congr\n    rw [\u2190 Nat.add_zero 0]", "tactic_state": "n : \u2115\nhn : n = 0\n\u22a2 n + (0 + 0) = 0"}, {"line": "conv_lhs =>\n    congr\n    rw [\u2190 Nat.add_zero n]\n    rfl", "tactic_state": "n : \u2115\nhn : n = 0\n\u22a2 n + 0 + (0 + 0) = 0"}, {"line": "conv_rhs =>\n    rw [\u2190 Nat.add_zero 0]\n    congr\n    rfl\n    rfl", "tactic_state": "n : \u2115\nhn : n = 0\n\u22a2 n + 0 + (0 + 0) = 0 + 0"}, {"line": "by_cases 0 = 0", "tactic_state": "case pos\nn : \u2115\nhn : n = 0\nh\u271d : 0 = 0\n\u22a2 n + 0 + (0 + 0) = 0 + 0\n---\ncase neg\nn : \u2115\nhn : n = 0\nh\u271d : \u00ac0 = 0\n\u22a2 n + 0 + (0 + 0) = 0 + 0"}, {"line": "assumption", "tactic_state": "case neg\nn : \u2115\nhn : n = 0\nh\u271d : \u00ac0 = 0\n\u22a2 n + 0 + (0 + 0) = 0 + 0"}, {"line": "assumption", "tactic_state": "No Goals!"}]}
{"declaration": "example (p : Prop) (hp : p) : (0 = 0 \u2227 p) \u2228 0 = 0 := by\n  iterate left; decide\n  repeat' left; decide\n  refine Or.inl \u27e8?_, ?_\u27e9\n  rfl\n  assumption\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/Multigoal.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "p : Prop\nhp : p\n\u22a2 0 = 0 \u2227 p \u2228 0 = 0"}, {"line": "iterate left; decide", "tactic_state": "p : Prop\nhp : p\n\u22a2 0 = 0 \u2227 p \u2228 0 = 0"}, {"line": "repeat' left; decide", "tactic_state": "p : Prop\nhp : p\n\u22a2 0 = 0 \u2227 p \u2228 0 = 0"}, {"line": "refine Or.inl \u27e8?_, ?_\u27e9", "tactic_state": "case refine_1\np : Prop\nhp : p\n\u22a2 0 = 0\n---\ncase refine_2\np : Prop\nhp : p\n\u22a2 p"}, {"line": "rfl", "tactic_state": "case refine_2\np : Prop\nhp : p\n\u22a2 p"}, {"line": "assumption", "tactic_state": "No Goals!"}]}
{"declaration": "example : 0 = 0 \u2227 0 = 0 \u2227 0 = 0 := by\n  refine \u27e8?_, ?_, ?_\u27e9\n  rfl\n  trivial\n  rfl\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/Multigoal.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "\u22a2 0 = 0 \u2227 0 = 0 \u2227 0 = 0"}, {"line": "refine \u27e8?_, ?_, ?_\u27e9", "tactic_state": "case refine_1\n\u22a2 0 = 0\n---\ncase refine_2\n\u22a2 0 = 0\n---\ncase refine_3\n\u22a2 0 = 0"}, {"line": "rfl", "tactic_state": "case refine_2\n\u22a2 0 = 0\n---\ncase refine_3\n\u22a2 0 = 0"}, {"line": "trivial", "tactic_state": "case refine_3\n\u22a2 0 = 0"}, {"line": "rfl", "tactic_state": "No Goals!"}]}
{"declaration": "example (p : Bool) : 0 = 0 := by\n  cases p\n  case' false => rfl\n  case' true => rfl\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/Multigoal.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "p : Bool\n\u22a2 0 = 0"}, {"line": "cases p", "tactic_state": "case false\n\u22a2 0 = 0\n---\ncase true\n\u22a2 0 = 0"}, {"line": "case' false => rfl", "tactic_state": "case true\n\u22a2 0 = 0"}, {"line": "case' true => rfl", "tactic_state": "No Goals!"}]}
{"declaration": "example : True \u2227 True := by\n  constructor\n  focus\n    exact .intro\n  focus\n    exact .intro\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/Multigoal.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "\u22a2 True \u2227 True"}, {"line": "constructor", "tactic_state": "case left\n\u22a2 True\n---\ncase right\n\u22a2 True"}, {"line": "focus\n    exact .intro", "tactic_state": "case right\n\u22a2 True"}, {"line": "focus\n    exact .intro", "tactic_state": "No Goals!"}]}
{"declaration": "example : 1 = 1 := by\n  sleep_heartbeats 1000\n  rfl\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/Multigoal.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "\u22a2 1 = 1"}, {"line": "sleep_heartbeats 1000", "tactic_state": "\u22a2 1 = 1"}, {"line": "rfl", "tactic_state": "No Goals!"}]}
{"declaration": "example : True := by\n  fail_if_success done\n  success_if_fail_with_msg \"internal exception #5\" done\n  exact .intro\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/Multigoal.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "\u22a2 True"}, {"line": "fail_if_success done", "tactic_state": "\u22a2 True"}, {"line": "success_if_fail_with_msg \"internal exception #5\" done", "tactic_state": "\u22a2 True"}, {"line": "exact .intro", "tactic_state": "No Goals!"}]}
{"declaration": "example : 0 = 0 := by noncomm_ring", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/NoncommRing.lean", "context": {"open": [], "variables": ["{R : Type _} [Ring R]", "(a b c : R)"]}, "tactic_states": [{"line": "(initial)", "tactic_state": "R : Type ?u.20\ninst\u271d : Ring R\na b c : R\n\u22a2 0 = 0"}, {"line": "noncomm_ring", "tactic_state": "No Goals!"}]}
{"declaration": "example : a = a := by noncomm_ring\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/NoncommRing.lean", "context": {"open": [], "variables": ["{R : Type _} [Ring R]", "(a b c : R)"]}, "tactic_states": [{"line": "(initial)", "tactic_state": "R : Type u_1\ninst\u271d : Ring R\na b c : R\n\u22a2 a = a"}, {"line": "noncomm_ring", "tactic_state": "No Goals!"}]}
{"declaration": "example : (a + b) * c = a * c + b * c := by noncomm_ring", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/NoncommRing.lean", "context": {"open": [], "variables": ["{R : Type _} [Ring R]", "(a b c : R)"]}, "tactic_states": [{"line": "(initial)", "tactic_state": "R : Type u_1\ninst\u271d : Ring R\na b c : R\n\u22a2 (a + b) * c = a * c + b * c"}, {"line": "noncomm_ring", "tactic_state": "No Goals!"}]}
{"declaration": "example : a * (b + c) = a * b + a * c := by noncomm_ring", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/NoncommRing.lean", "context": {"open": [], "variables": ["{R : Type _} [Ring R]", "(a b c : R)"]}, "tactic_states": [{"line": "(initial)", "tactic_state": "R : Type u_1\ninst\u271d : Ring R\na b c : R\n\u22a2 a * (b + c) = a * b + a * c"}, {"line": "noncomm_ring", "tactic_state": "No Goals!"}]}
{"declaration": "example : a - b = a + -b := by noncomm_ring", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/NoncommRing.lean", "context": {"open": [], "variables": ["{R : Type _} [Ring R]", "(a b c : R)"]}, "tactic_states": [{"line": "(initial)", "tactic_state": "R : Type u_1\ninst\u271d : Ring R\na b c : R\n\u22a2 a - b = a + -b"}, {"line": "noncomm_ring", "tactic_state": "No Goals!"}]}
{"declaration": "example : a ^ 2 = a * a := by noncomm_ring", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/NoncommRing.lean", "context": {"open": [], "variables": ["{R : Type _} [Ring R]", "(a b c : R)"]}, "tactic_states": [{"line": "(initial)", "tactic_state": "R : Type u_1\ninst\u271d : Ring R\na b c : R\n\u22a2 a ^ 2 = a * a"}, {"line": "noncomm_ring", "tactic_state": "No Goals!"}]}
{"declaration": "example : a ^ 50 * a ^ 37 = a ^ 23 * a ^ 64 := by noncomm_ring\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/NoncommRing.lean", "context": {"open": [], "variables": ["{R : Type _} [Ring R]", "(a b c : R)"]}, "tactic_states": [{"line": "(initial)", "tactic_state": "R : Type u_1\ninst\u271d : Ring R\na b c : R\n\u22a2 a ^ 50 * a ^ 37 = a ^ 23 * a ^ 64"}, {"line": "noncomm_ring", "tactic_state": "No Goals!"}]}
{"declaration": "example (h : a = b) (h2 : a = c) : a = c := by\n  fail_if_success noncomm_ring [h]\n  noncomm_ring [h2]", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/NoncommRing.lean", "context": {"open": [], "variables": ["{R : Type _} [Ring R]", "(a b c : R)"]}, "tactic_states": [{"line": "(initial)", "tactic_state": "R : Type u_1\ninst\u271d : Ring R\na b c : R\nh : a = b\nh2 : a = c\n\u22a2 a = c"}, {"line": "fail_if_success noncomm_ring [h]", "tactic_state": "R : Type u_1\ninst\u271d : Ring R\na b c : R\nh : a = b\nh2 : a = c\n\u22a2 a = c"}, {"line": "noncomm_ring [h2]", "tactic_state": "No Goals!"}]}
{"declaration": "example (x y z : \u2115) (h1 : x = y) (h2 : y = z) :\n    x + x + x + y = y + y + x + x := by\n  nth_rewrite 3 [h1, h2] -- h2 *is* used, this is different from mathlib3\n  nth_rewrite 3 [h2]\n  rw [h1]\n  rw [h2]\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/NthRewrite.lean", "context": {"open": ["Mathlib"], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "x y z : \u2115\nh1 : x = y\nh2 : y = z\n\u22a2 x + x + x + y = y + y + x + x"}, {"line": "nth_rewrite 3 [h1, h2] -- h2 *is* used, this is different from mathlib3", "tactic_state": "x y z : \u2115\nh1 : x = y\nh2 : y = z\n\u22a2 x + x + y + y = z + y + x + x"}, {"line": "nth_rewrite 3 [h2]", "tactic_state": "x y z : \u2115\nh1 : x = y\nh2 : y = z\n\u22a2 x + x + y + y = z + z + x + x"}, {"line": "rw [h1]", "tactic_state": "x y z : \u2115\nh1 : x = y\nh2 : y = z\n\u22a2 y + y + y + y = z + z + y + y"}, {"line": "rw [h2]", "tactic_state": "No Goals!"}]}
{"declaration": "example (a b c : \u2115) : c + a + b = a + c + b := by\n  nth_rewrite 4 [add_comm]\n  rfl\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/NthRewrite.lean", "context": {"open": ["Mathlib"], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "a b c : \u2115\n\u22a2 c + a + b = a + c + b"}, {"line": "nth_rewrite 4 [add_comm]", "tactic_state": "a b c : \u2115\n\u22a2 c + a + b = c + a + b"}, {"line": "rfl", "tactic_state": "No Goals!"}]}
{"declaration": "example (x y : Prop) (h\u2081 : x \u2194 y) (h\u2082 : x \u2194 x \u2227 x) : x \u2227 x \u2194 x := by\n  nth_rewrite 3 [h\u2081] at h\u2082\n  nth_rewrite 1 [\u2190 h\u2081] at h\u2082\n  nth_rewrite 3 [h\u2082]\n  rfl\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/NthRewrite.lean", "context": {"open": ["Mathlib"], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "x y : Prop\nh\u2081 : x \u2194 y\nh\u2082 : x \u2194 x \u2227 x\n\u22a2 x \u2227 x \u2194 x"}, {"line": "nth_rewrite 3 [h\u2081] at h\u2082", "tactic_state": "x y : Prop\nh\u2081 : x \u2194 y\nh\u2082 : x \u2194 x \u2227 y\n\u22a2 x \u2227 x \u2194 x"}, {"line": "nth_rewrite 1 [\u2190 h\u2081] at h\u2082", "tactic_state": "x y : Prop\nh\u2081 : x \u2194 y\nh\u2082 : x \u2194 x \u2227 x\n\u22a2 x \u2227 x \u2194 x"}, {"line": "nth_rewrite 3 [h\u2082]", "tactic_state": "x y : Prop\nh\u2081 : x \u2194 y\nh\u2082 : x \u2194 x \u2227 x\n\u22a2 x \u2227 x \u2194 x \u2227 x"}, {"line": "rfl", "tactic_state": "No Goals!"}]}
{"declaration": "example (x y : \u2115) (h\u2081 : x = y) (h\u2082 : x = x + x) : x + x = x := by\n  nth_rewrite 3 [h\u2081] at h\u2082\n  nth_rewrite 1 [\u2190 h\u2081] at h\u2082\n  nth_rewrite 3 [h\u2082]\n  rfl\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/NthRewrite.lean", "context": {"open": ["Mathlib"], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "x y : \u2115\nh\u2081 : x = y\nh\u2082 : x = x + x\n\u22a2 x + x = x"}, {"line": "nth_rewrite 3 [h\u2081] at h\u2082", "tactic_state": "x y : \u2115\nh\u2081 : x = y\nh\u2082 : x = x + y\n\u22a2 x + x = x"}, {"line": "nth_rewrite 1 [\u2190 h\u2081] at h\u2082", "tactic_state": "x y : \u2115\nh\u2081 : x = y\nh\u2082 : x = x + x\n\u22a2 x + x = x"}, {"line": "nth_rewrite 3 [h\u2082]", "tactic_state": "x y : \u2115\nh\u2081 : x = y\nh\u2082 : x = x + x\n\u22a2 x + x = x + x"}, {"line": "rfl", "tactic_state": "No Goals!"}]}
{"declaration": "example (x y : \u2115) (h : x = y) : x + x + x = x + y + y := by\n  nth_rw 2 3 [h]", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/NthRewrite.lean", "context": {"open": ["Mathlib"], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "x y : \u2115\nh : x = y\n\u22a2 x + x + x = x + y + y"}, {"line": "nth_rw 2 3 [h]", "tactic_state": "No Goals!"}]}
{"declaration": "example : 0 = 0 := by\n  rw [] -- this goal is closed by the `rfl` implied by `rw`", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/PPRoundtrip.lean", "context": {"open": [], "variables": ["{a: Nat}", "{a :Nat}"]}, "tactic_states": [{"line": "(initial)", "tactic_state": "a\u271d a : \u2115\n\u22a2 0 = 0"}, {"line": "rw [] -- this goal is closed by the `rfl` implied by `rw`", "tactic_state": "No Goals!"}]}
{"declaration": "example (P : Prop) (h : P) : P := by convert h\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/convert.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "P : Prop\nh : P\n\u22a2 P"}, {"line": "convert h", "tactic_state": "No Goals!"}]}
{"declaration": "example (\u03b1 \u03b2 : Type) (h : \u03b1 = \u03b2) (b : \u03b2) : \u03b1 := by\n  convert b\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/convert.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "\u03b1 \u03b2 : Type\nh : \u03b1 = \u03b2\nb : \u03b2\n\u22a2 \u03b1"}, {"line": "convert b", "tactic_state": "No Goals!"}]}
{"declaration": "example (\u03b1 \u03b2 : Type) (h : \u2200 \u03b1 \u03b2 : Type, \u03b1 = \u03b2) (b : \u03b2) : \u03b1 := by\n  convert b\n  apply h\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/convert.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "\u03b1 \u03b2 : Type\nh : \u2200 (\u03b1 \u03b2 : Type), \u03b1 = \u03b2\nb : \u03b2\n\u22a2 \u03b1"}, {"line": "convert b", "tactic_state": "\u03b1 \u03b2 : Type\nh : \u2200 (\u03b1 \u03b2 : Type), \u03b1 = \u03b2\nb : \u03b2\n\u22a2 \u03b1 = \u03b2"}, {"line": "apply h", "tactic_state": "No Goals!"}]}
{"declaration": "example (m n : Nat) (h : m = n) (b : Fin n) : Nat \u00d7 Nat \u00d7 Nat \u00d7 Fin m := by\n  convert (37, 57, 2, b)\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/convert.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "m n : \u2115\nh : m = n\nb : Fin n\n\u22a2 \u2115 \u00d7 \u2115 \u00d7 \u2115 \u00d7 Fin m"}, {"line": "convert (37, 57, 2, b)", "tactic_state": "No Goals!"}]}
{"declaration": "example (\u03b1 \u03b2 : Type) (h : \u03b1 = \u03b2) (b : \u03b2) : Nat \u00d7 \u03b1 := by\n  -- type eq ok since arguments to `Prod` are explicit\n  convert (37, b)\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/convert.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "\u03b1 \u03b2 : Type\nh : \u03b1 = \u03b2\nb : \u03b2\n\u22a2 \u2115 \u00d7 \u03b1"}, {"line": "convert (37, b)", "tactic_state": "No Goals!"}]}
{"declaration": "example (\u03b1 \u03b2 : Type) (h : \u03b2 = \u03b1) (b : \u03b2) : Nat \u00d7 \u03b1 := by\n  convert \u2190 (37, b)\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/convert.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "\u03b1 \u03b2 : Type\nh : \u03b2 = \u03b1\nb : \u03b2\n\u22a2 \u2115 \u00d7 \u03b1"}, {"line": "convert \u2190 (37, b)", "tactic_state": "No Goals!"}]}
{"declaration": "example (\u03b1 \u03b2 : Type) (h : \u03b1 = \u03b2) (b : \u03b2) : Nat \u00d7 Nat \u00d7 Nat \u00d7 \u03b1 := by\n  convert (37, 57, 2, b)\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/convert.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "\u03b1 \u03b2 : Type\nh : \u03b1 = \u03b2\nb : \u03b2\n\u22a2 \u2115 \u00d7 \u2115 \u00d7 \u2115 \u00d7 \u03b1"}, {"line": "convert (37, 57, 2, b)", "tactic_state": "No Goals!"}]}
{"declaration": "example (\u03b1 \u03b2 : Type) (h : \u03b1 = \u03b2) (b : \u03b2) : Nat \u00d7 Nat \u00d7 Nat \u00d7 \u03b1 := by\n  convert (37, 57, 2, b) using 2\n  guard_target = (Nat \u00d7 \u03b1) = (Nat \u00d7 \u03b2)\n  congr!\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/convert.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "\u03b1 \u03b2 : Type\nh : \u03b1 = \u03b2\nb : \u03b2\n\u22a2 \u2115 \u00d7 \u2115 \u00d7 \u2115 \u00d7 \u03b1"}, {"line": "convert (37, 57, 2, b) using 2", "tactic_state": "case h.e'_2.h.e'_2\n\u03b1 \u03b2 : Type\nh : \u03b1 = \u03b2\nb : \u03b2\n\u22a2 (\u2115 \u00d7 \u03b1) = (\u2115 \u00d7 \u03b2)"}, {"line": "guard_target = (Nat \u00d7 \u03b1) = (Nat \u00d7 \u03b2)", "tactic_state": "case h.e'_2.h.e'_2\n\u03b1 \u03b2 : Type\nh : \u03b1 = \u03b2\nb : \u03b2\n\u22a2 (\u2115 \u00d7 \u03b1) = (\u2115 \u00d7 \u03b2)"}, {"line": "congr!", "tactic_state": "No Goals!"}]}
{"declaration": "example {f : \u03b2 \u2192 \u03b1} {x y : \u03b1} (h : x \u2260 y) : f \u207b\u00b9' {x} \u2229 f \u207b\u00b9' {y} = \u2205 := by\n  have : {x} \u2229 {y} = (\u2205 : Set \u03b1) := by simpa [ne_comm] using h\n  convert Set.preimage_empty\n  rw [\u2190 Set.preimage_inter]\n  rw [this]\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/convert.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "\u03b2 : Type u_1\n\u03b1 : Type u_2\nf : \u03b2 \u2192 \u03b1\nx y : \u03b1\nh : x \u2260 y\n\u22a2 f \u207b\u00b9' {x} \u2229 f \u207b\u00b9' {y} = \u2205"}, {"line": "have : {x} \u2229 {y} = (\u2205 : Set \u03b1) := by simpa [ne_comm] using h", "tactic_state": "\u03b2 : Type u_1\n\u03b1 : Type u_2\nf : \u03b2 \u2192 \u03b1\nx y : \u03b1\nh : x \u2260 y\nthis : {x} \u2229 {y} = \u2205\n\u22a2 f \u207b\u00b9' {x} \u2229 f \u207b\u00b9' {y} = \u2205"}, {"line": "convert Set.preimage_empty", "tactic_state": "case h.e'_2\n\u03b2 : Type u_1\n\u03b1 : Type u_2\nf : \u03b2 \u2192 \u03b1\nx y : \u03b1\nh : x \u2260 y\nthis : {x} \u2229 {y} = \u2205\n\u22a2 f \u207b\u00b9' {x} \u2229 f \u207b\u00b9' {y} = ?convert_3 \u207b\u00b9' \u2205\n---\ncase convert_2\n\u03b2 : Type u_1\n\u03b1 : Type u_2\nf : \u03b2 \u2192 \u03b1\nx y : \u03b1\nh : x \u2260 y\nthis : {x} \u2229 {y} = \u2205\n\u22a2 Type ?u.1523\n---\ncase convert_3\n\u03b2 : Type u_1\n\u03b1 : Type u_2\nf : \u03b2 \u2192 \u03b1\nx y : \u03b1\nh : x \u2260 y\nthis : {x} \u2229 {y} = \u2205\n\u22a2 \u03b2 \u2192 ?convert_2"}, {"line": "rw [\u2190 Set.preimage_inter]", "tactic_state": "case h.e'_2\n\u03b2 : Type u_1\n\u03b1 : Type u_2\nf : \u03b2 \u2192 \u03b1\nx y : \u03b1\nh : x \u2260 y\nthis : {x} \u2229 {y} = \u2205\n\u22a2 f \u207b\u00b9' ({x} \u2229 {y}) = ?convert_3 \u207b\u00b9' \u2205\n---\ncase convert_2\n\u03b2 : Type u_1\n\u03b1 : Type u_2\nf : \u03b2 \u2192 \u03b1\nx y : \u03b1\nh : x \u2260 y\nthis : {x} \u2229 {y} = \u2205\n\u22a2 Type ?u.1523\n---\ncase convert_3\n\u03b2 : Type u_1\n\u03b1 : Type u_2\nf : \u03b2 \u2192 \u03b1\nx y : \u03b1\nh : x \u2260 y\nthis : {x} \u2229 {y} = \u2205\n\u22a2 \u03b2 \u2192 ?convert_2"}, {"line": "rw [this]", "tactic_state": "No Goals!"}]}
{"declaration": "example {\u03b1} [AddCommMonoid \u03b1] {a b c d : \u03b1} (H : a = c) (H' : b = d) : a + b = d + c := by\n  convert_to c + d = _ using 2\n  rw [add_comm]\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/convert.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "\u03b1 : Type u_1\ninst\u271d : AddCommMonoid \u03b1\na b c d : \u03b1\nH : a = c\nH' : b = d\n\u22a2 a + b = d + c"}, {"line": "convert_to c + d = _ using 2", "tactic_state": "case convert_3\n\u03b1 : Type u_1\ninst\u271d : AddCommMonoid \u03b1\na b c d : \u03b1\nH : a = c\nH' : b = d\n\u22a2 c + d = d + c"}, {"line": "rw [add_comm]", "tactic_state": "No Goals!"}]}
{"declaration": "example {\u03b1} [AddCommMonoid \u03b1] {a b c d : \u03b1} (H : a = c) (H' : b = d) : a + b = d + c := by\n  convert_to c + d = _ -- defaults to `using 1`\n  congr 2\n  rw [add_comm]\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/convert.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "\u03b1 : Type u_1\ninst\u271d : AddCommMonoid \u03b1\na b c d : \u03b1\nH : a = c\nH' : b = d\n\u22a2 a + b = d + c"}, {"line": "convert_to c + d = _ -- defaults to `using 1`", "tactic_state": "case h.e'_2\n\u03b1 : Type u_1\ninst\u271d : AddCommMonoid \u03b1\na b c d : \u03b1\nH : a = c\nH' : b = d\n\u22a2 a + b = c + d\n---\ncase convert_2\n\u03b1 : Type u_1\ninst\u271d : AddCommMonoid \u03b1\na b c d : \u03b1\nH : a = c\nH' : b = d\n\u22a2 HAdd \u03b1 \u03b1 \u03b1\n---\ncase convert_3\n\u03b1 : Type u_1\ninst\u271d : AddCommMonoid \u03b1\na b c d : \u03b1\nH : a = c\nH' : b = d\n\u22a2 c + d = d + c"}, {"line": "congr 2", "tactic_state": "case convert_3\n\u03b1 : Type u_1\ninst\u271d : AddCommMonoid \u03b1\na b c d : \u03b1\nH : a = c\nH' : b = d\n\u22a2 c + d = d + c"}, {"line": "rw [add_comm]", "tactic_state": "No Goals!"}]}
{"declaration": "example {\u03b1} [AddCommMonoid \u03b1] {a b c d : \u03b1} (H : a = c) (H' : b = d) : a + b = d + c := by\n  convert_to c + d = _ using 1\n  congr 2\n  rw [add_comm]\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/convert.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "\u03b1 : Type u_1\ninst\u271d : AddCommMonoid \u03b1\na b c d : \u03b1\nH : a = c\nH' : b = d\n\u22a2 a + b = d + c"}, {"line": "convert_to c + d = _ using 1", "tactic_state": "case h.e'_2\n\u03b1 : Type u_1\ninst\u271d : AddCommMonoid \u03b1\na b c d : \u03b1\nH : a = c\nH' : b = d\n\u22a2 a + b = c + d\n---\ncase convert_2\n\u03b1 : Type u_1\ninst\u271d : AddCommMonoid \u03b1\na b c d : \u03b1\nH : a = c\nH' : b = d\n\u22a2 HAdd \u03b1 \u03b1 \u03b1\n---\ncase convert_3\n\u03b1 : Type u_1\ninst\u271d : AddCommMonoid \u03b1\na b c d : \u03b1\nH : a = c\nH' : b = d\n\u22a2 c + d = d + c"}, {"line": "congr 2", "tactic_state": "case convert_3\n\u03b1 : Type u_1\ninst\u271d : AddCommMonoid \u03b1\na b c d : \u03b1\nH : a = c\nH' : b = d\n\u22a2 c + d = d + c"}, {"line": "rw [add_comm]", "tactic_state": "No Goals!"}]}
{"declaration": "example (prime : Nat \u2192 Prop) (n : Nat) (h : prime (2 * n + 1)) :\n    prime (n + n + 1) := by\n  convert h\n  \u00b7 guard_target = (HAdd.hAdd : Nat \u2192 Nat \u2192 Nat) = HMul.hMul\n    exact test_sorry\n  \u00b7 guard_target = n = 2\n    exact test_sorry\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/convert.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "prime : \u2115 \u2192 Prop\nn : \u2115\nh : prime (2 * n + 1)\n\u22a2 prime (n + n + 1)"}, {"line": "convert h", "tactic_state": "case h.e'_1.h.e'_5.h.e\nprime : \u2115 \u2192 Prop\nn : \u2115\nh : prime (2 * n + 1)\n\u22a2 HAdd.hAdd = HMul.hMul\n---\ncase h.e'_1.h.e'_5.h.e'_1\nprime : \u2115 \u2192 Prop\nn : \u2115\nh : prime (2 * n + 1)\n\u22a2 n = 2"}, {"line": "\u00b7 guard_target = (HAdd.hAdd : Nat \u2192 Nat \u2192 Nat) = HMul.hMul\n    exact test_sorry", "tactic_state": "case h.e'_1.h.e'_5.h.e'_1\nprime : \u2115 \u2192 Prop\nn : \u2115\nh : prime (2 * n + 1)\n\u22a2 n = 2"}, {"line": "\u00b7 guard_target = n = 2\n    exact test_sorry", "tactic_state": "No Goals!"}]}
{"declaration": "example (prime : Nat \u2192 Prop) (n : Nat) (h : prime (2 * n + 1)) :\n    prime (n + n + 1) := by\n  convert (config := .unfoldSameFun) h\n  guard_target = n + n = 2 * n\n  exact test_sorry\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/convert.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "prime : \u2115 \u2192 Prop\nn : \u2115\nh : prime (2 * n + 1)\n\u22a2 prime (n + n + 1)"}, {"line": "convert (config := .unfoldSameFun) h", "tactic_state": "case h.e'_1.h.e'_5\nprime : \u2115 \u2192 Prop\nn : \u2115\nh : prime (2 * n + 1)\n\u22a2 n + n = 2 * n"}, {"line": "guard_target = n + n = 2 * n", "tactic_state": "case h.e'_1.h.e'_5\nprime : \u2115 \u2192 Prop\nn : \u2115\nh : prime (2 * n + 1)\n\u22a2 n + n = 2 * n"}, {"line": "exact test_sorry", "tactic_state": "No Goals!"}]}
{"declaration": "example (p q : Nat \u2192 Prop) (h : \u2200 \u03b5 > 0, p \u03b5) :\n    \u2200 \u03b5 > 0, q \u03b5 := by\n  convert h using 2 with \u03b5 h\u03b5\n  guard_hyp h\u03b5 : \u03b5 > 0\n  guard_target = q \u03b5 \u2194 p \u03b5\n  exact test_sorry\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/convert.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "p q : \u2115 \u2192 Prop\nh : \u2200 \u03b5 > 0, p \u03b5\n\u22a2 \u2200 \u03b5 > 0, q \u03b5"}, {"line": "convert h using 2 with \u03b5 h\u03b5", "tactic_state": "case h.h'.a\np q : \u2115 \u2192 Prop\nh : \u2200 \u03b5 > 0, p \u03b5\n\u03b5 : \u2115\nh\u03b5 : \u03b5 > 0\n\u22a2 q \u03b5 \u2194 p \u03b5"}, {"line": "guard_hyp h\u03b5 : \u03b5 > 0", "tactic_state": "case h.h'.a\np q : \u2115 \u2192 Prop\nh : \u2200 \u03b5 > 0, p \u03b5\n\u03b5 : \u2115\nh\u03b5 : \u03b5 > 0\n\u22a2 q \u03b5 \u2194 p \u03b5"}, {"line": "guard_target = q \u03b5 \u2194 p \u03b5", "tactic_state": "case h.h'.a\np q : \u2115 \u2192 Prop\nh : \u2200 \u03b5 > 0, p \u03b5\n\u03b5 : \u2115\nh\u03b5 : \u03b5 > 0\n\u22a2 q \u03b5 \u2194 p \u03b5"}, {"line": "exact test_sorry", "tactic_state": "No Goals!"}]}
{"declaration": "example : @Fintype.card Bool instFintypeBool = 2 := by\n  convert Fintype.foo _\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/convert.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "instFintypeBool : Fintype Bool\n\u22a2 Fintype.card Bool = 2"}, {"line": "convert Fintype.foo _", "tactic_state": "No Goals!"}]}
{"declaration": "example : True := by\n  convert_to ?x + ?y = ?z\n  case x => exact 1\n  case y => exact 2\n  case z => exact 3\n  all_goals try infer_instance\n  \u00b7 simp\n  \u00b7 simp\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/convert.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "\u22a2 True"}, {"line": "convert_to ?x + ?y = ?z", "tactic_state": "case a\n\u22a2 True \u2194 ?x + ?y = ?z\n---\ncase x\n\u22a2 ?convert_1\n---\ncase y\n\u22a2 ?convert_2\n---\ncase z\n\u22a2 ?convert_4\n---\ncase convert_1\n\u22a2 Type ?u.10\n---\ncase convert_2\n\u22a2 Type ?u.9\n---\ncase convert_3\n\u22a2 HAdd ?convert_1 ?convert_2 ?convert_4\n---\ncase convert_4\n\u22a2 Type ?u.8\n---\ncase convert_5\n\u22a2 ?x + ?y = ?z"}, {"line": "case x => exact 1", "tactic_state": "case a\n\u22a2 True \u2194 1 + ?y = ?z\n---\ncase y\n\u22a2 ?convert_2\n---\ncase z\n\u22a2 ?convert_4\n---\ncase convert_2\n\u22a2 Type ?u.9\n---\ncase convert_3\n\u22a2 HAdd \u2115 ?convert_2 ?convert_4\n---\ncase convert_4\n\u22a2 Type ?u.8\n---\ncase convert_5\n\u22a2 1 + ?y = ?z"}, {"line": "case y => exact 2", "tactic_state": "case a\n\u22a2 True \u2194 1 + 2 = ?z\n---\ncase z\n\u22a2 ?convert_4\n---\ncase convert_3\n\u22a2 HAdd \u2115 \u2115 ?convert_4\n---\ncase convert_4\n\u22a2 Type ?u.8\n---\ncase convert_5\n\u22a2 1 + 2 = ?z"}, {"line": "case z => exact 3", "tactic_state": "case a\n\u22a2 True \u2194 1 + 2 = 3\n---\ncase convert_3\n\u22a2 HAdd \u2115 \u2115 \u2115\n---\ncase convert_5\n\u22a2 1 + 2 = 3"}, {"line": "all_goals try infer_instance", "tactic_state": "case a\n\u22a2 True \u2194 1 + 2 = 3\n---\ncase convert_5\n\u22a2 1 + 2 = 3"}, {"line": "\u00b7 simp", "tactic_state": "case convert_5\n\u22a2 1 + 2 = 3"}, {"line": "\u00b7 simp", "tactic_state": "No Goals!"}]}
{"declaration": "example (x y z : Nat) (h : x + y = z) : y + x = z := by\n  convert_to y + x = _ at h\n  \u00b7 rw [Nat.add_comm]\n  exact h\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/convert.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "x y z : \u2115\nh : x + y = z\n\u22a2 y + x = z"}, {"line": "convert_to y + x = _ at h", "tactic_state": "case h.e'_2\nx y z : \u2115\nh : x + y = z\n\u22a2 x + y = y + x\n---\nx y z : \u2115\nh\u271d : x + y = z\nh : y + x = z\n\u22a2 y + x = z"}, {"line": "\u00b7 rw [Nat.add_comm]", "tactic_state": "x y z : \u2115\nh\u271d : x + y = z\nh : y + x = z\n\u22a2 y + x = z"}, {"line": "exact h", "tactic_state": "No Goals!"}]}
{"declaration": "example (a b : \u2115) : (a : \u211a) \u2264 b \u2194 a \u2264 b := by qify", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/Qify.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "a b : \u2115\n\u22a2 \u2191a \u2264 \u2191b \u2194 a \u2264 b"}, {"line": "qify", "tactic_state": "No Goals!"}]}
{"declaration": "example (a b : \u2115) : (a : \u211a) < b \u2194 a < b := by qify", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/Qify.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "a b : \u2115\n\u22a2 \u2191a < \u2191b \u2194 a < b"}, {"line": "qify", "tactic_state": "No Goals!"}]}
{"declaration": "example (a b : \u2115) : (a : \u211a) = b \u2194 a = b := by qify", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/Qify.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "a b : \u2115\n\u22a2 \u2191a = \u2191b \u2194 a = b"}, {"line": "qify", "tactic_state": "No Goals!"}]}
{"declaration": "example (a b : \u2115) : (a : \u211a) \u2260 b \u2194 a \u2260 b := by qify\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/Qify.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "a b : \u2115\n\u22a2 \u2191a \u2260 \u2191b \u2194 a \u2260 b"}, {"line": "qify", "tactic_state": "No Goals!"}]}
{"declaration": "example (a b : \u2124) : (a : \u211a) \u2264 b \u2194 a \u2264 b := by qify", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/Qify.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "a b : \u2124\n\u22a2 \u2191a \u2264 \u2191b \u2194 a \u2264 b"}, {"line": "qify", "tactic_state": "No Goals!"}]}
{"declaration": "example (a b : \u2124) : (a : \u211a) < b \u2194 a < b := by qify", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/Qify.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "a b : \u2124\n\u22a2 \u2191a < \u2191b \u2194 a < b"}, {"line": "qify", "tactic_state": "No Goals!"}]}
{"declaration": "example (a b : \u2124) : (a : \u211a) = b \u2194 a = b := by qify", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/Qify.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "a b : \u2124\n\u22a2 \u2191a = \u2191b \u2194 a = b"}, {"line": "qify", "tactic_state": "No Goals!"}]}
{"declaration": "example (a b : \u2124) : (a : \u211a) \u2260 b \u2194 a \u2260 b := by qify\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/Qify.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "a b : \u2124\n\u22a2 \u2191a \u2260 \u2191b \u2194 a \u2260 b"}, {"line": "qify", "tactic_state": "No Goals!"}]}
{"declaration": "example (a b : \u211a\u22650) : (a : \u211a) \u2264 b \u2194 a \u2264 b := by qify", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/Qify.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "a b : \u211a\u22650\n\u22a2 \u2191a \u2264 \u2191b \u2194 a \u2264 b"}, {"line": "qify", "tactic_state": "No Goals!"}]}
{"declaration": "example (a b : \u211a\u22650) : (a : \u211a) < b \u2194 a < b := by qify", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/Qify.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "a b : \u211a\u22650\n\u22a2 \u2191a < \u2191b \u2194 a < b"}, {"line": "qify", "tactic_state": "No Goals!"}]}
{"declaration": "example (a b : \u211a\u22650) : (a : \u211a) = b \u2194 a = b := by qify", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/Qify.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "a b : \u211a\u22650\n\u22a2 \u2191a = \u2191b \u2194 a = b"}, {"line": "qify", "tactic_state": "No Goals!"}]}
{"declaration": "example (a b : \u211a\u22650) : (a : \u211a) \u2260 b \u2194 a \u2260 b := by qify\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/Qify.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "a b : \u211a\u22650\n\u22a2 \u2191a \u2260 \u2191b \u2194 a \u2260 b"}, {"line": "qify", "tactic_state": "No Goals!"}]}
{"declaration": "example (a b c : \u2115) (h : a - b = c) (hab : b \u2264 a) : a = c + b := by\n  qify [hab] at h \u22a2 -- `zify` does the same thing here.\n  exact sub_eq_iff_eq_add.1 h\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/Qify.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "a b c : \u2115\nh : a - b = c\nhab : b \u2264 a\n\u22a2 a = c + b"}, {"line": "qify [hab] at h \u22a2 -- `zify` does the same thing here.", "tactic_state": "a b c : \u2115\nhab : b \u2264 a\nh : \u2191a - \u2191b = \u2191c\n\u22a2 \u2191a = \u2191c + \u2191b"}, {"line": "exact sub_eq_iff_eq_add.1 h", "tactic_state": "No Goals!"}]}
{"declaration": "example (a b c : \u211a\u22650) (h : a - b = c) (hab : b \u2264 a) : a = c + b := by\n  qify [hab] at h \u22a2\n  exact sub_eq_iff_eq_add.1 h\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/Qify.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "a b c : \u211a\u22650\nh : a - b = c\nhab : b \u2264 a\n\u22a2 a = c + b"}, {"line": "qify [hab] at h \u22a2", "tactic_state": "a b c : \u211a\u22650\nhab : b \u2264 a\nh : \u2191a - \u2191b = \u2191c\n\u22a2 \u2191a = \u2191c + \u2191b"}, {"line": "exact sub_eq_iff_eq_add.1 h", "tactic_state": "No Goals!"}]}
{"declaration": "example (a b c : \u2124) (h : a / b = c) (hab : b \u2223 a) (hb : b \u2260 0) : a = c * b := by\n  qify [hab] at h hb \u22a2\n  exact (div_eq_iff hb).1 h\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/Qify.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "a b c : \u2124\nh : a / b = c\nhab : b \u2223 a\nhb : b \u2260 0\n\u22a2 a = c * b"}, {"line": "qify [hab] at h hb \u22a2", "tactic_state": "a b c : \u2124\nhab : b \u2223 a\nh : \u2191a / \u2191b = \u2191c\nhb : \u2191b \u2260 0\n\u22a2 \u2191a = \u2191c * \u2191b"}, {"line": "exact (div_eq_iff hb).1 h", "tactic_state": "No Goals!"}]}
{"declaration": "example (a b c : \u2115) (h : a / b = c) (hab : b \u2223 a) (hb : b \u2260 0) : a = c * b := by\n  qify [hab] at h hb \u22a2\n  exact (div_eq_iff hb).1 h", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/Qify.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "a b c : \u2115\nh : a / b = c\nhab : b \u2223 a\nhb : b \u2260 0\n\u22a2 a = c * b"}, {"line": "qify [hab] at h hb \u22a2", "tactic_state": "a b c : \u2115\nhab : b \u2223 a\nh : \u2191a / \u2191b = \u2191c\nhb : \u2191b \u2260 0\n\u22a2 \u2191a = \u2191c * \u2191b"}, {"line": "exact (div_eq_iff hb).1 h", "tactic_state": "No Goals!"}]}
{"declaration": "example (delete_this : Nat) (_delete_this_dep : delete_this = delete_this) : Nat := by\n  clear! delete_this\n  fail_if_success assumption\n  exact 0\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/Clear!.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "delete_this : \u2115\n_delete_this_dep : delete_this = delete_this\n\u22a2 \u2115"}, {"line": "clear! delete_this", "tactic_state": "\u22a2 \u2115"}, {"line": "fail_if_success assumption", "tactic_state": "\u22a2 \u2115"}, {"line": "exact 0", "tactic_state": "No Goals!"}]}
{"declaration": "example [delete_this : Inhabited Nat] : Inhabited Nat := by\n  clear! delete_this\n  fail_if_success assumption\n  infer_instance\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/Clear!.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "delete_this : Inhabited \u2115\n\u22a2 Inhabited \u2115"}, {"line": "clear! delete_this", "tactic_state": "\u22a2 Inhabited \u2115"}, {"line": "fail_if_success assumption", "tactic_state": "\u22a2 Inhabited \u2115"}, {"line": "infer_instance", "tactic_state": "No Goals!"}]}
{"declaration": "example (delete_this : Nat) (delete_this2 : Nat) (_delete_this_dep : delete_this = delete_this2) :\n    Nat := by\n  clear! delete_this delete_this2\n  fail_if_success assumption\n  exact 0\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/Clear!.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "delete_this delete_this2 : \u2115\n_delete_this_dep : delete_this = delete_this2\n\u22a2 \u2115"}, {"line": "clear! delete_this delete_this2", "tactic_state": "\u22a2 \u2115"}, {"line": "fail_if_success assumption", "tactic_state": "\u22a2 \u2115"}, {"line": "exact 0", "tactic_state": "No Goals!"}]}
{"declaration": "example (delete_this : Nat) (dont_delete_this : Int) : Nat := by\n  clear! delete_this\n  fail_if_success assumption\n  exact dont_delete_this.toNat\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/Clear!.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "delete_this : \u2115\ndont_delete_this : \u2124\n\u22a2 \u2115"}, {"line": "clear! delete_this", "tactic_state": "dont_delete_this : \u2124\n\u22a2 \u2115"}, {"line": "fail_if_success assumption", "tactic_state": "dont_delete_this : \u2124\n\u22a2 \u2115"}, {"line": "exact dont_delete_this.toNat", "tactic_state": "No Goals!"}]}
{"declaration": "example (dont_delete_this : Nat) (delete_this : dont_delete_this = dont_delete_this) : Nat := by\n  clear! delete_this\n  assumption", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/Clear!.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "dont_delete_this : \u2115\ndelete_this : dont_delete_this = dont_delete_this\n\u22a2 \u2115"}, {"line": "clear! delete_this", "tactic_state": "dont_delete_this : \u2115\n\u22a2 \u2115"}, {"line": "assumption", "tactic_state": "No Goals!"}]}
{"declaration": "example (a : Nat) (b : Int) : Int \u00d7 Nat := by\n  rename' a => c, b => d\n  exact (d, c)\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/Rename.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "a : \u2115\nb : \u2124\n\u22a2 \u2124 \u00d7 \u2115"}, {"line": "rename' a => c, b => d", "tactic_state": "c : \u2115\nd : \u2124\n\u22a2 \u2124 \u00d7 \u2115"}, {"line": "exact (d, c)", "tactic_state": "No Goals!"}]}
{"declaration": "example (a : Nat) (b : Int) : Int \u00d7 Nat := by\n  rename' a => b, b => a\n  exact (a, b)", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/Rename.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "a : \u2115\nb : \u2124\n\u22a2 \u2124 \u00d7 \u2115"}, {"line": "rename' a => b, b => a", "tactic_state": "b : \u2115\na : \u2124\n\u22a2 \u2124 \u00d7 \u2115"}, {"line": "exact (a, b)", "tactic_state": "No Goals!"}]}
{"declaration": "example {A B : Type} (h : A) (f : A \u2192 B) : B := by\n  replace h := f h\n  exact h\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/Replace.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "A B : Type\nh : A\nf : A \u2192 B\n\u22a2 B"}, {"line": "replace h := f h", "tactic_state": "A B : Type\nf : A \u2192 B\nh : B\n\u22a2 B"}, {"line": "exact h", "tactic_state": "No Goals!"}]}
{"declaration": "example (z : Int) : Nat := by\n  replace z : Nat\n  exact 0\n  assumption\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/Replace.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "z : \u2124\n\u22a2 \u2115"}, {"line": "replace z : Nat", "tactic_state": "case z\nz : \u2124\n\u22a2 \u2115\n---\nz : \u2115\n\u22a2 \u2115"}, {"line": "exact 0", "tactic_state": "z : \u2115\n\u22a2 \u2115"}, {"line": "assumption", "tactic_state": "No Goals!"}]}
{"declaration": "example : True := by\n  have : 1 + 1 = 2 := by simp +arith\n  replace : 2 + 2 = 4\n  simp +arith\n  trivial\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/Replace.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "\u22a2 True"}, {"line": "have : 1 + 1 = 2 := by simp +arith", "tactic_state": "this : 1 + 1 = 2\n\u22a2 True"}, {"line": "replace : 2 + 2 = 4", "tactic_state": "case this\nthis : 1 + 1 = 2\n\u22a2 2 + 2 = 4\n---\nthis : 2 + 2 = 4\n\u22a2 True"}, {"line": "simp +arith", "tactic_state": "this : 2 + 2 = 4\n\u22a2 True"}, {"line": "trivial", "tactic_state": "No Goals!"}]}
{"declaration": "example (h : True) : False := by\n  guard_hyp h : True\n  replace h\n  \u00b7 exact true\n  guard_hyp h : Bool\n  rename_i h'\n  guard_hyp h' : True\n  exact test_sorry", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/Replace.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "h : True\n\u22a2 False"}, {"line": "guard_hyp h : True", "tactic_state": "h : True\n\u22a2 False"}, {"line": "replace h", "tactic_state": "case h\nh : True\n\u22a2 ?m.9\n---\nh\u271d : True\nh : ?m.9\n\u22a2 False"}, {"line": "\u00b7 exact true", "tactic_state": "h\u271d : True\nh : Bool\n\u22a2 False"}, {"line": "guard_hyp h : Bool", "tactic_state": "h\u271d : True\nh : Bool\n\u22a2 False"}, {"line": "rename_i h'", "tactic_state": "h' : True\nh : Bool\n\u22a2 False"}, {"line": "guard_hyp h' : True", "tactic_state": "h' : True\nh : Bool\n\u22a2 False"}, {"line": "exact test_sorry", "tactic_state": "No Goals!"}]}
{"declaration": "example {n : \u2115} {k : \u2124} (hn : 8 \u2264 n) (hk : 2 * k \u2264 n + 2) :\n    (0 : \u211d) < n - k - 1 := by\n  rify at hn hk\n  linarith\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/Rify.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "n : \u2115\nk : \u2124\nhn : 8 \u2264 n\nhk : 2 * k \u2264 \u2191n + 2\n\u22a2 0 < \u2191n - \u2191k - 1"}, {"line": "rify at hn hk", "tactic_state": "n : \u2115\nk : \u2124\nhn : 8 \u2264 \u2191n\nhk : 2 * \u2191k \u2264 \u2191n + 2\n\u22a2 0 < \u2191n - \u2191k - 1"}, {"line": "linarith", "tactic_state": "No Goals!"}]}
{"declaration": "example {n : \u2115} {k : \u2124} (hn : 8 \u2264 n) (hk : (2 : \u211a) * k \u2264 n + 2) :\n    (0 : \u211d) < n - k - 1 := by\n  rify at hn hk\n  linarith\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/Rify.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "n : \u2115\nk : \u2124\nhn : 8 \u2264 n\nhk : 2 * \u2191k \u2264 \u2191n + 2\n\u22a2 0 < \u2191n - \u2191k - 1"}, {"line": "rify at hn hk", "tactic_state": "n : \u2115\nk : \u2124\nhn : 8 \u2264 \u2191n\nhk : 2 * \u2191k \u2264 \u2191n + 2\n\u22a2 0 < \u2191n - \u2191k - 1"}, {"line": "linarith", "tactic_state": "No Goals!"}]}
{"declaration": "example (a b c : \u2115) (h : a - b < c) (hab : b \u2264 a) : a < b + c := by\n  rify [hab] at h \u22a2\n  linarith\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/Rify.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "a b c : \u2115\nh : a - b < c\nhab : b \u2264 a\n\u22a2 a < b + c"}, {"line": "rify [hab] at h \u22a2", "tactic_state": "a b c : \u2115\nhab : b \u2264 a\nh : \u2191a - \u2191b < \u2191c\n\u22a2 \u2191a < \u2191b + \u2191c"}, {"line": "linarith", "tactic_state": "No Goals!"}]}
{"declaration": "example {n : \u2115} (h : 8 \u2264 n) : (0 : \u211d) < n - 1 := by\n  rify at h\n  linarith\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/Rify.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "n : \u2115\nh : 8 \u2264 n\n\u22a2 0 < \u2191n - 1"}, {"line": "rify at h", "tactic_state": "n : \u2115\nh : 8 \u2264 \u2191n\n\u22a2 0 < \u2191n - 1"}, {"line": "linarith", "tactic_state": "No Goals!"}]}
{"declaration": "example {n k : \u2115} (h : 2 * k \u2264 n + 2) (h' : 8 \u2264 n) : (0 : \u211d) \u2264 3 * n - 4 - 4 * k := by\n  rify at *\n  linarith\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/Rify.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "n k : \u2115\nh : 2 * k \u2264 n + 2\nh' : 8 \u2264 n\n\u22a2 0 \u2264 3 * \u2191n - 4 - 4 * \u2191k"}, {"line": "rify at *", "tactic_state": "n k : \u2115\nh : 2 * \u2191k \u2264 \u2191n + 2\nh' : 8 \u2264 \u2191n\n\u22a2 0 \u2264 3 * \u2191n - 4 - 4 * \u2191k"}, {"line": "linarith", "tactic_state": "No Goals!"}]}
{"declaration": "example {n k : \u2115} (h\u2081 : 8 \u2264 n) (h\u2082 : 2 * k > n) (h\u2083 : k + 1 < n) :\n    n - (k + 1) + 3 \u2264 n := by\n  rify [h\u2083] at *\n  linarith\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/Rify.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "n k : \u2115\nh\u2081 : 8 \u2264 n\nh\u2082 : 2 * k > n\nh\u2083 : k + 1 < n\n\u22a2 n - (k + 1) + 3 \u2264 n"}, {"line": "rify [h\u2083] at *", "tactic_state": "n k : \u2115\nh\u2081 : 8 \u2264 \u2191n\nh\u2082 : \u2191n < 2 * \u2191k\nh\u2083 : True\n\u22a2 \u2191n - (\u2191k + 1) + 3 \u2264 \u2191n"}, {"line": "linarith", "tactic_state": "No Goals!"}]}
{"declaration": "example {n k : \u2115} (h\u2081 : 8 \u2264 n) (h\u2082 : 2 * k > n) (h\u2083 : k + 1 < n) :\n    n - (n - (k + 1)) = k + 1 := by\n  have f\u2081 : k + 1 \u2264 n := by linarith\n  have f\u2082 : n - (k + 1) \u2264 n := by rify [f\u2081]; linarith\n  rify [f\u2081, f\u2082] at *\n  linarith", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/Rify.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "n k : \u2115\nh\u2081 : 8 \u2264 n\nh\u2082 : 2 * k > n\nh\u2083 : k + 1 < n\n\u22a2 n - (n - (k + 1)) = k + 1"}, {"line": "have f\u2081 : k + 1 \u2264 n := sorry", "tactic_state": "n k : \u2115\nh\u2081 : 8 \u2264 n\nh\u2082 : 2 * k > n\nh\u2083 : k + 1 < n\nf\u2081 : k + 1 \u2264 n\n\u22a2 n - (n - (k + 1)) = k + 1"}, {"line": "have f\u2082 : n - (k + 1) \u2264 n := sorry", "tactic_state": "n k : \u2115\nh\u2081 : 8 \u2264 n\nh\u2082 : 2 * k > n\nh\u2083 : k + 1 < n\nf\u2081 : k + 1 \u2264 n\nf\u2082 : n - (k + 1) \u2264 n\n\u22a2 n - (n - (k + 1)) = k + 1"}, {"line": "rify [f\u2081, f\u2082] at *", "tactic_state": "n k : \u2115\nh\u2081 : 8 \u2264 \u2191n\nh\u2082 : \u2191n < 2 * \u2191k\nh\u2083 : \u2191k + 1 < \u2191n\nf\u2081 f\u2082 : True\n\u22a2 \u2191n - (\u2191n - (\u2191k + 1)) = \u2191k + 1"}, {"line": "linarith", "tactic_state": "No Goals!"}]}
{"declaration": "example (x : Nat) (h : x = x) : x = x := by\n  set! p := h\n  set q : x = x := p\n  apply q\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/Set.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "x : \u2115\nh : x = x\n\u22a2 x = x"}, {"line": "set! p := h", "tactic_state": "x : \u2115\nh : x = x\np : x = x := h\n\u22a2 x = x"}, {"line": "set q : x = x := p", "tactic_state": "x : \u2115\nh : x = x\np : x = x := h\nq : x = x := p\n\u22a2 x = x"}, {"line": "apply q", "tactic_state": "No Goals!"}]}
{"declaration": "example (x : Nat) (h : x + x - x = 3) : x + x - x = 3 := by\n  set! y := x with \u2190 h2\n  set w := x\n  guard_hyp y := x\n  guard_hyp w := x\n  guard_hyp h : w + w - w = 3\n  guard_hyp h2 : w = y\n  set z := w with _h3\n  set a := 3\n  guard_target = z + z - z = a\n  set i'm_the_goal : Prop := z + z - z = a\n  guard_target = i'm_the_goal\n  apply h\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/Set.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "x : \u2115\nh : x + x - x = 3\n\u22a2 x + x - x = 3"}, {"line": "set! y := x with \u2190 h2", "tactic_state": "x : \u2115\nh : x + x - x = 3\ny : \u2115 := x\nh2 : x = y\n\u22a2 x + x - x = 3"}, {"line": "set w := x", "tactic_state": "x : \u2115\ny : \u2115 := x\nw : \u2115 := x\nh : w + w - w = 3\nh2 : w = y\n\u22a2 w + w - w = 3"}, {"line": "guard_hyp y := x", "tactic_state": "x : \u2115\ny : \u2115 := x\nw : \u2115 := x\nh : w + w - w = 3\nh2 : w = y\n\u22a2 w + w - w = 3"}, {"line": "guard_hyp w := x", "tactic_state": "x : \u2115\ny : \u2115 := x\nw : \u2115 := x\nh : w + w - w = 3\nh2 : w = y\n\u22a2 w + w - w = 3"}, {"line": "guard_hyp h : w + w - w = 3", "tactic_state": "x : \u2115\ny : \u2115 := x\nw : \u2115 := x\nh : w + w - w = 3\nh2 : w = y\n\u22a2 w + w - w = 3"}, {"line": "guard_hyp h2 : w = y", "tactic_state": "x : \u2115\ny : \u2115 := x\nw : \u2115 := x\nh : w + w - w = 3\nh2 : w = y\n\u22a2 w + w - w = 3"}, {"line": "set z := w with _h3", "tactic_state": "x : \u2115\ny : \u2115 := x\nw : \u2115 := x\nz : \u2115 := w\nh : z + z - z = 3\nh2 : z = y\n_h3 : z = w\n\u22a2 z + z - z = 3"}, {"line": "set a := 3", "tactic_state": "x : \u2115\ny : \u2115 := x\nw : \u2115 := x\nz : \u2115 := w\nh2 : z = y\n_h3 : z = w\na : \u2115 := 3\nh : z + z - z = a\n\u22a2 z + z - z = a"}, {"line": "guard_target = z + z - z = a", "tactic_state": "x : \u2115\ny : \u2115 := x\nw : \u2115 := x\nz : \u2115 := w\nh2 : z = y\n_h3 : z = w\na : \u2115 := 3\nh : z + z - z = a\n\u22a2 z + z - z = a"}, {"line": "set i'm_the_goal : Prop := z + z - z = a", "tactic_state": "x : \u2115\ny : \u2115 := x\nw : \u2115 := x\nz : \u2115 := w\nh2 : z = y\n_h3 : z = w\na : \u2115 := 3\ni'm_the_goal : Prop := z + z - z = a\nh : i'm_the_goal\n\u22a2 i'm_the_goal"}, {"line": "guard_target = i'm_the_goal", "tactic_state": "x : \u2115\ny : \u2115 := x\nw : \u2115 := x\nz : \u2115 := w\nh2 : z = y\n_h3 : z = w\na : \u2115 := 3\ni'm_the_goal : Prop := z + z - z = a\nh : i'm_the_goal\n\u22a2 i'm_the_goal"}, {"line": "apply h", "tactic_state": "No Goals!"}]}
{"declaration": "example (x : Nat) (h : x - x = 0) : x = x := by\n  set y : Nat := x\n  set! z := y + 1 with \u2190 _eq1\n  set! p : x - x = 0 := h with _eq2\n  rfl\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/Set.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "x : \u2115\nh : x - x = 0\n\u22a2 x = x"}, {"line": "set y : Nat := x", "tactic_state": "x : \u2115\ny : \u2115 := x\nh : y - y = 0\n\u22a2 y = y"}, {"line": "set! z := y + 1 with \u2190 _eq1", "tactic_state": "x : \u2115\ny : \u2115 := x\nh : y - y = 0\nz : \u2115 := y + 1\n_eq1 : y + 1 = z\n\u22a2 y = y"}, {"line": "set! p : x - x = 0 := h with _eq2", "tactic_state": "x : \u2115\ny : \u2115 := x\nh : y - y = 0\nz : \u2115 := y + 1\n_eq1 : y + 1 = z\np : x - x = 0 := h\n_eq2 : p = h\n\u22a2 y = y"}, {"line": "rfl", "tactic_state": "No Goals!"}]}
{"declaration": "example : True := by\n  set g : Nat \u2192 Int := (fun \u03b5 => \u03b5) with _h\n  trivial\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/Set.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "\u22a2 True"}, {"line": "set g : Nat \u2192 Int := (fun \u03b5 => \u03b5) with _h", "tactic_state": "g : \u2115 \u2192 \u2124 := fun \u03b5 => \u2191\u03b5\n_h : g = fun \u03b5 => \u2191\u03b5\n\u22a2 True"}, {"line": "trivial", "tactic_state": "No Goals!"}]}
{"declaration": "example {_a _b _c _d _e _f _g _h : Nat} : 1 = 1 := by\n  set a : Nat := test with _h\n  trivial", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/Set.lean", "context": {"open": ["Qq in"], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "_a _b _c _d _e _f _g _h : \u2115\n\u22a2 1 = 1"}, {"line": "set a : Nat := test with _h", "tactic_state": "_a _b _c _d _e _f _g _h\u271d : \u2115\na : \u2115 := sorry\n_h : a = sorry\n\u22a2 1 = 1"}, {"line": "trivial", "tactic_state": "No Goals!"}]}
{"declaration": "example {\u03b1 R : Type*} [CommRing R] (f : \u03b1 \u2192 R) (r : R) (a : \u03b1) :\n    (r \u2022 f) a = r \u2022 (f a) := by\n  simp only [Pi.smul_apply] -- succeeds\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/Simp.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "\u03b1 : Type u_1\nR : Type u_2\ninst\u271d : CommRing R\nf : \u03b1 \u2192 R\nr : R\na : \u03b1\n\u22a2 (r \u2022 f) a = r \u2022 f a"}, {"line": "simp only [Pi.smul_apply] -- succeeds", "tactic_state": "No Goals!"}]}
{"declaration": "example : (fun (x y : Nat) \u21a6 x + y) = (fun x y \u21a6 y + x) := by simp_rw [Nat.add_comm]\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/SimpRw.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "\u22a2 (fun x y => x + y) = fun x y => y + x"}, {"line": "simp_rw [Nat.add_comm]", "tactic_state": "No Goals!"}]}
{"declaration": "example (f : Nat \u2192 Nat) {a b c : Nat} (ha : f b = a) (hc : f b = c) : a = c := by simp_rw [\u2190 ha, hc]\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/SimpRw.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "f : \u2115 \u2192 \u2115\na b c : \u2115\nha : f b = a\nhc : f b = c\n\u22a2 a = c"}, {"line": "simp_rw [\u2190 ha, hc]", "tactic_state": "No Goals!"}]}
{"declaration": "example (a b c d : Nat) : a + (b + (c + d)) = ((d + c) + b) + a := by simp_rw [Nat.add_comm]\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/SimpRw.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "a b c d : \u2115\n\u22a2 a + (b + (c + d)) = d + c + b + a"}, {"line": "simp_rw [Nat.add_comm]", "tactic_state": "No Goals!"}]}
{"declaration": "example {a : Nat}\n  (h1 : \u2200 a b : Nat, a - 1 \u2264 b \u2194 a \u2264 b + 1)\n  (h2 : \u2200 a b : Nat, a \u2264 b \u2194 \u2200 c, c < a \u2192 c < b) :\n  (\u2200 b, a - 1 \u2264 b) = \u2200 b c : Nat, c < a \u2192 c < b + 1 := by\n  simp_rw [h1, h2]\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/SimpRw.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "a : \u2115\nh1 : \u2200 (a b : \u2115), a - 1 \u2264 b \u2194 a \u2264 b + 1\nh2 : \u2200 (a b : \u2115), a \u2264 b \u2194 \u2200 c < a, c < b\n\u22a2 (\u2200 (b : \u2115), a - 1 \u2264 b) = \u2200 (b c : \u2115), c < a \u2192 c < b + 1"}, {"line": "simp_rw [h1, h2]", "tactic_state": "No Goals!"}]}
{"declaration": "example : 1 = 2 := by\n  let a := 2\n  show 1 = a\n  simp_rw -zeta []\n  guard_target =\u209b 1 = a\n  exact test_sorry\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/SimpRw.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "\u22a2 1 = 2"}, {"line": "let a := 2", "tactic_state": "a : \u2115 := 2\n\u22a2 1 = 2"}, {"line": "show 1 = a", "tactic_state": "a : \u2115 := 2\n\u22a2 1 = a"}, {"line": "simp_rw -zeta []", "tactic_state": "a : \u2115 := 2\n\u22a2 1 = a"}, {"line": "guard_target =\u209b 1 = a", "tactic_state": "a : \u2115 := 2\n\u22a2 1 = a"}, {"line": "exact test_sorry", "tactic_state": "No Goals!"}]}
{"declaration": "example (h : 1 < 0) : False := by hint\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/hint.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "h : 1 < 0\n\u22a2 False"}, {"line": "hint", "tactic_state": "No Goals!"}]}
{"declaration": "example {P Q : Prop} (p : P) (f : P \u2192 Q) : Q := by hint\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/hint.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "P Q : Prop\np : P\nf : P \u2192 Q\n\u22a2 Q"}, {"line": "hint", "tactic_state": "No Goals!"}]}
{"declaration": "example {P Q R : Prop} (x : P \u2227 Q \u2227 R \u2227 R) : Q \u2227 P \u2227 R := by hint\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/hint.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "P Q R : Prop\nx : P \u2227 Q \u2227 R \u2227 R\n\u22a2 Q \u2227 P \u2227 R"}, {"line": "hint", "tactic_state": "No Goals!"}]}
{"declaration": "example {a b : \u211a} (h : a < b) : \u00ac b < a := by hint\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/hint.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "a b : \u211a\nh : a < b\n\u22a2 \u00acb < a"}, {"line": "hint", "tactic_state": "No Goals!"}]}
{"declaration": "example : 37^2 - 35^2 = 72 * 2 := by hint\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/hint.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "\u22a2 37 ^ 2 - 35 ^ 2 = 72 * 2"}, {"line": "hint", "tactic_state": "No Goals!"}]}
{"declaration": "example : Nat.Prime 37 := by hint\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/hint.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "\u22a2 Nat.Prime 37"}, {"line": "hint", "tactic_state": "No Goals!"}]}
{"declaration": "example {P : Nat \u2192 Prop} (h : { x // P x }) : \u2203 x, P x \u2227 0 \u2264 x := by hint\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/hint.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "P : \u2115 \u2192 Prop\nh : { x // P x }\n\u22a2 \u2203 x, P x \u2227 0 \u2264 x"}, {"line": "hint", "tactic_state": "No Goals!"}]}
{"declaration": "example : True := by\n  hint\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/hint.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "\u22a2 True"}, {"line": "hint", "tactic_state": "No Goals!"}]}
{"declaration": "example {\u03b1} (A B C : Set \u03b1) (h1 : A \u2286 B \u222a C) : (A \u2229 B) \u222a (A \u2229 C) = A := by hint\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/hint.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "\u03b1 : Type u_1\nA B C : Set \u03b1\nh1 : A \u2286 B \u222a C\n\u22a2 A \u2229 B \u222a A \u2229 C = A"}, {"line": "hint", "tactic_state": "No Goals!"}]}
{"declaration": "example : 2 \u2264 1 := by hint\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/hint.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "\u22a2 2 \u2264 1"}, {"line": "hint", "tactic_state": "No Goals!"}]}
{"declaration": "example : (\u03b1 : Type) \u00d7 List \u03b1 := by\n  constructor\n  \u00b7 exact [0,1]\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/Split.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "\u22a2 (\u03b1 : Type) \u00d7 List \u03b1"}, {"line": "constructor", "tactic_state": "case snd\n\u22a2 List ?fst\n---\ncase fst\n\u22a2 Type"}, {"line": "\u00b7 exact [0,1]", "tactic_state": "No Goals!"}]}
{"declaration": "example (x : Nat) (p : Prop) [Decidable p] : x = if p then x else x := by\n  split_ifs with h1\n  \u00b7 rfl\n  \u00b7 rfl\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/SplitIfs.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "x : \u2115\np : Prop\ninst\u271d : Decidable p\n\u22a2 x = if p then x else x"}, {"line": "split_ifs with h1", "tactic_state": "case pos\nx : \u2115\np : Prop\ninst\u271d : Decidable p\nh1 : p\n\u22a2 x = x\n---\ncase neg\nx : \u2115\np : Prop\ninst\u271d : Decidable p\nh1 : \u00acp\n\u22a2 x = x"}, {"line": "\u00b7 rfl", "tactic_state": "case neg\nx : \u2115\np : Prop\ninst\u271d : Decidable p\nh1 : \u00acp\n\u22a2 x = x"}, {"line": "\u00b7 rfl", "tactic_state": "No Goals!"}]}
{"declaration": "example (x y : Nat) (p : Prop) [Decidable p] (h : if p then x = y else y = x) : x = y := by\n  split_ifs at h\n  \u00b7 exact h\n  \u00b7 exact h.symm\n", "file": "/root/DuelModelResearch/mathlib4/MathlibTest/SplitIfs.lean", "context": {"open": [], "variables": []}, "tactic_states": [{"line": "(initial)", "tactic_state": "x y : \u2115\np : Prop\ninst\u271d : Decidable p\nh : if p then x = y else y = x\n\u22a2 x = y"}, {"line": "split_ifs at h", "tactic_state": "case pos\nx y : \u2115\np : Prop\ninst\u271d : Decidable p\nh\u271d : p\nh : x = y\n\u22a2 x = y\n---\ncase neg\nx y : \u2115\np : Prop\ninst\u271d : Decidable p\nh\u271d : \u00acp\nh : y = x\n\u22a2 x = y"}, {"line": "\u00b7 exact h", "tactic_state": "case neg\nx y : \u2115\np : Prop\ninst\u271d : Decidable p\nh\u271d : \u00acp\nh : y = x\n\u22a2 x = y"}, {"line": "\u00b7 exact h.symm", "tactic_state": "No Goals!"}]}
